{
    "docs": [
        {
            "location": "/",
            "text": "Packages\n\n\n\n\nhttp\n\n\nassert\n\n\nbuffered\n\n\nbuiltin\n\n\ncapsicum\n\n\ncollections\n\n\nencode/base64\n\n\nfiles\n\n\nformat\n\n\nnet\n\n\nnet/ssl\n\n\nponytest\n\n\npromises\n\n\nsignals\n\n\nstrings\n\n\nterm\n\n\ntime",
            "title": "http"
        },
        {
            "location": "/http--index/",
            "text": "This package includes all the support functions necessary to build client\nand server applications for the HTTP protocol.\n\n\nThe important interfaces an application needs to deal with are:\n\n\n\n\n\n\nHTTPSession\n, the API to an HTTP connection.\n\n\n\n\n\n\nHTTPHandler\n, the interface to a handler you\nneed to write that will receive notifications from the \nHTTPSession\n.\n\n\n\n\n\n\nHandlerFactory\n, the interface to a class you\nneed to write that creates instances of your \nHTTPHandler\n.\n\n\n\n\n\n\nPayload\n, the class that represents a single HTTP\nmessage, with its headers.\n\n\n\n\n\n\nIf you are writing a client, you will need to deal with the\n\nHTTPClient\n class.\n\n\nIf you are writing a server, you will need to deal with the\n\nHTTPServer\n class.\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive URLPartUser\n\n\nprimitive URLPartPassword\n\n\nprimitive URLPartHost\n\n\nprimitive URLPartPath\n\n\nprimitive URLPartQuery\n\n\nprimitive URLPartFragment\n\n\ntype URLPart\n\n\nprimitive URLEncode\n\n\nclass URL\n\n\ntrait Status\n\n\nprimitive StatusContinue\n\n\nprimitive StatusSwitchingProtocols\n\n\nprimitive StatusOK\n\n\nprimitive StatusCreated\n\n\nprimitive StatusAccepted\n\n\nprimitive StatusNonAuthoritativeInfo\n\n\nprimitive StatusNoContent\n\n\nprimitive StatusResetContent\n\n\nprimitive StatusPartialContent\n\n\nprimitive StatusMultipleChoices\n\n\nprimitive StatusMovedPermanently\n\n\nprimitive StatusFound\n\n\nprimitive StatusSeeOther\n\n\nprimitive StatusNotModified\n\n\nprimitive StatusUseProxy\n\n\nprimitive StatusTemporaryRedirect\n\n\nprimitive StatusBadRequest\n\n\nprimitive StatusUnauthorized\n\n\nprimitive StatusPaymentRequired\n\n\nprimitive StatusForbidden\n\n\nprimitive StatusNotFound\n\n\nprimitive StatusMethodNotAllowed\n\n\nprimitive StatusNotAcceptable\n\n\nprimitive StatusProxyAuthRequired\n\n\nprimitive StatusRequestTimeout\n\n\nprimitive StatusConflict\n\n\nprimitive StatusGone\n\n\nprimitive StatusLengthRequired\n\n\nprimitive StatusPreconditionFailed\n\n\nprimitive StatusRequestEntityTooLarge\n\n\nprimitive StatusRequestURITooLong\n\n\nprimitive StatusUnsupportedMediaType\n\n\nprimitive StatusRequestedRangeNotSatisfiable\n\n\nprimitive StatusExpectationFailed\n\n\nprimitive StatusTeapot\n\n\nprimitive StatusPreconditionRequired\n\n\nprimitive StatusTooManyRequests\n\n\nprimitive StatusRequestHeaderFieldsTooLarge\n\n\nprimitive StatusUnavailableForLegalReasons\n\n\nprimitive StatusInternalServerError\n\n\nprimitive StatusNotImplemented\n\n\nprimitive StatusBadGateway\n\n\nprimitive StatusServiceUnavailable\n\n\nprimitive StatusGatewayTimeout\n\n\nprimitive StatusHTTPVersionNotSupported\n\n\nprimitive StatusNetworkAuthenticationRequired\n\n\ninterface Logger\n\n\ninterface ServerNotify\n\n\nactor HTTPServer\n\n\nprimitive ChunkedTransfer\n\n\nprimitive StreamTransfer\n\n\nprimitive OneshotTransfer\n\n\ntype TransferMode\n\n\nclass Payload\n\n\nprimitive MimeTypes\n\n\ninterface HTTPSession\n\n\ninterface HTTPHandler\n\n\ninterface HandlerFactory\n\n\nprimitive DiscardLog\n\n\nclass ContentsLog\n\n\nclass CommonLog\n\n\nclass HTTPClient",
            "title": "Package"
        },
        {
            "location": "/http--index/#public-types",
            "text": "primitive URLPartUser  primitive URLPartPassword  primitive URLPartHost  primitive URLPartPath  primitive URLPartQuery  primitive URLPartFragment  type URLPart  primitive URLEncode  class URL  trait Status  primitive StatusContinue  primitive StatusSwitchingProtocols  primitive StatusOK  primitive StatusCreated  primitive StatusAccepted  primitive StatusNonAuthoritativeInfo  primitive StatusNoContent  primitive StatusResetContent  primitive StatusPartialContent  primitive StatusMultipleChoices  primitive StatusMovedPermanently  primitive StatusFound  primitive StatusSeeOther  primitive StatusNotModified  primitive StatusUseProxy  primitive StatusTemporaryRedirect  primitive StatusBadRequest  primitive StatusUnauthorized  primitive StatusPaymentRequired  primitive StatusForbidden  primitive StatusNotFound  primitive StatusMethodNotAllowed  primitive StatusNotAcceptable  primitive StatusProxyAuthRequired  primitive StatusRequestTimeout  primitive StatusConflict  primitive StatusGone  primitive StatusLengthRequired  primitive StatusPreconditionFailed  primitive StatusRequestEntityTooLarge  primitive StatusRequestURITooLong  primitive StatusUnsupportedMediaType  primitive StatusRequestedRangeNotSatisfiable  primitive StatusExpectationFailed  primitive StatusTeapot  primitive StatusPreconditionRequired  primitive StatusTooManyRequests  primitive StatusRequestHeaderFieldsTooLarge  primitive StatusUnavailableForLegalReasons  primitive StatusInternalServerError  primitive StatusNotImplemented  primitive StatusBadGateway  primitive StatusServiceUnavailable  primitive StatusGatewayTimeout  primitive StatusHTTPVersionNotSupported  primitive StatusNetworkAuthenticationRequired  interface Logger  interface ServerNotify  actor HTTPServer  primitive ChunkedTransfer  primitive StreamTransfer  primitive OneshotTransfer  type TransferMode  class Payload  primitive MimeTypes  interface HTTPSession  interface HTTPHandler  interface HandlerFactory  primitive DiscardLog  class ContentsLog  class CommonLog  class HTTPClient",
            "title": "Public Types"
        },
        {
            "location": "/http-URLPartUser/",
            "text": "URLPartUser\n\u00b6\n\n\n[Source]\n\n\nprimitive val URLPartUser\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: URLPartUser val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nURLPartUser\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: URLPartUser val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartUser\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: URLPartUser val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartUser\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive URLPartUser"
        },
        {
            "location": "/http-URLPartUser/#urlpartuser",
            "text": "[Source]  primitive val URLPartUser",
            "title": "URLPartUser"
        },
        {
            "location": "/http-URLPartUser/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-URLPartUser/#create",
            "text": "[Source]  new val create()\n: URLPartUser val^",
            "title": "create"
        },
        {
            "location": "/http-URLPartUser/#returns",
            "text": "URLPartUser  val^",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartUser/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-URLPartUser/#eq",
            "text": "[Source]  fun box eq(\n  that: URLPartUser val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-URLPartUser/#parameters",
            "text": "that:  URLPartUser  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartUser/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartUser/#ne",
            "text": "[Source]  fun box ne(\n  that: URLPartUser val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-URLPartUser/#parameters_1",
            "text": "that:  URLPartUser  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartUser/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartPassword/",
            "text": "URLPartPassword\n\u00b6\n\n\n[Source]\n\n\nprimitive val URLPartPassword\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: URLPartPassword val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nURLPartPassword\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: URLPartPassword val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartPassword\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: URLPartPassword val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartPassword\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive URLPartPassword"
        },
        {
            "location": "/http-URLPartPassword/#urlpartpassword",
            "text": "[Source]  primitive val URLPartPassword",
            "title": "URLPartPassword"
        },
        {
            "location": "/http-URLPartPassword/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-URLPartPassword/#create",
            "text": "[Source]  new val create()\n: URLPartPassword val^",
            "title": "create"
        },
        {
            "location": "/http-URLPartPassword/#returns",
            "text": "URLPartPassword  val^",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartPassword/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-URLPartPassword/#eq",
            "text": "[Source]  fun box eq(\n  that: URLPartPassword val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-URLPartPassword/#parameters",
            "text": "that:  URLPartPassword  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartPassword/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartPassword/#ne",
            "text": "[Source]  fun box ne(\n  that: URLPartPassword val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-URLPartPassword/#parameters_1",
            "text": "that:  URLPartPassword  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartPassword/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartHost/",
            "text": "URLPartHost\n\u00b6\n\n\n[Source]\n\n\nprimitive val URLPartHost\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: URLPartHost val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nURLPartHost\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: URLPartHost val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartHost\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: URLPartHost val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartHost\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive URLPartHost"
        },
        {
            "location": "/http-URLPartHost/#urlparthost",
            "text": "[Source]  primitive val URLPartHost",
            "title": "URLPartHost"
        },
        {
            "location": "/http-URLPartHost/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-URLPartHost/#create",
            "text": "[Source]  new val create()\n: URLPartHost val^",
            "title": "create"
        },
        {
            "location": "/http-URLPartHost/#returns",
            "text": "URLPartHost  val^",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartHost/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-URLPartHost/#eq",
            "text": "[Source]  fun box eq(\n  that: URLPartHost val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-URLPartHost/#parameters",
            "text": "that:  URLPartHost  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartHost/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartHost/#ne",
            "text": "[Source]  fun box ne(\n  that: URLPartHost val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-URLPartHost/#parameters_1",
            "text": "that:  URLPartHost  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartHost/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartPath/",
            "text": "URLPartPath\n\u00b6\n\n\n[Source]\n\n\nprimitive val URLPartPath\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: URLPartPath val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nURLPartPath\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: URLPartPath val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartPath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: URLPartPath val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartPath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive URLPartPath"
        },
        {
            "location": "/http-URLPartPath/#urlpartpath",
            "text": "[Source]  primitive val URLPartPath",
            "title": "URLPartPath"
        },
        {
            "location": "/http-URLPartPath/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-URLPartPath/#create",
            "text": "[Source]  new val create()\n: URLPartPath val^",
            "title": "create"
        },
        {
            "location": "/http-URLPartPath/#returns",
            "text": "URLPartPath  val^",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartPath/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-URLPartPath/#eq",
            "text": "[Source]  fun box eq(\n  that: URLPartPath val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-URLPartPath/#parameters",
            "text": "that:  URLPartPath  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartPath/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartPath/#ne",
            "text": "[Source]  fun box ne(\n  that: URLPartPath val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-URLPartPath/#parameters_1",
            "text": "that:  URLPartPath  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartPath/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartQuery/",
            "text": "URLPartQuery\n\u00b6\n\n\n[Source]\n\n\nprimitive val URLPartQuery\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: URLPartQuery val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nURLPartQuery\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: URLPartQuery val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartQuery\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: URLPartQuery val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartQuery\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive URLPartQuery"
        },
        {
            "location": "/http-URLPartQuery/#urlpartquery",
            "text": "[Source]  primitive val URLPartQuery",
            "title": "URLPartQuery"
        },
        {
            "location": "/http-URLPartQuery/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-URLPartQuery/#create",
            "text": "[Source]  new val create()\n: URLPartQuery val^",
            "title": "create"
        },
        {
            "location": "/http-URLPartQuery/#returns",
            "text": "URLPartQuery  val^",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartQuery/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-URLPartQuery/#eq",
            "text": "[Source]  fun box eq(\n  that: URLPartQuery val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-URLPartQuery/#parameters",
            "text": "that:  URLPartQuery  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartQuery/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartQuery/#ne",
            "text": "[Source]  fun box ne(\n  that: URLPartQuery val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-URLPartQuery/#parameters_1",
            "text": "that:  URLPartQuery  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartQuery/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartFragment/",
            "text": "URLPartFragment\n\u00b6\n\n\n[Source]\n\n\nprimitive val URLPartFragment\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: URLPartFragment val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nURLPartFragment\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: URLPartFragment val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartFragment\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: URLPartFragment val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLPartFragment\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive URLPartFragment"
        },
        {
            "location": "/http-URLPartFragment/#urlpartfragment",
            "text": "[Source]  primitive val URLPartFragment",
            "title": "URLPartFragment"
        },
        {
            "location": "/http-URLPartFragment/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-URLPartFragment/#create",
            "text": "[Source]  new val create()\n: URLPartFragment val^",
            "title": "create"
        },
        {
            "location": "/http-URLPartFragment/#returns",
            "text": "URLPartFragment  val^",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartFragment/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-URLPartFragment/#eq",
            "text": "[Source]  fun box eq(\n  that: URLPartFragment val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-URLPartFragment/#parameters",
            "text": "that:  URLPartFragment  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartFragment/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPartFragment/#ne",
            "text": "[Source]  fun box ne(\n  that: URLPartFragment val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-URLPartFragment/#parameters_1",
            "text": "that:  URLPartFragment  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLPartFragment/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLPart/",
            "text": "URLPart\n\u00b6\n\n\n[Source]\n\n\ntype URLPart is\n  (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nURLPartUser\n val | \nURLPartPassword\n val | \nURLPartHost\n val | \nURLPartPath\n val | \nURLPartQuery\n val | \nURLPartFragment\n val)",
            "title": "type URLPart"
        },
        {
            "location": "/http-URLPart/#urlpart",
            "text": "[Source]  type URLPart is\n  (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)",
            "title": "URLPart"
        },
        {
            "location": "/http-URLPart/#type-alias-for",
            "text": "( URLPartUser  val |  URLPartPassword  val |  URLPartHost  val |  URLPartPath  val |  URLPartQuery  val |  URLPartFragment  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/http-URLEncode/",
            "text": "URLEncode\n\u00b6\n\n\n[Source]\n\n\nFunctions for checking, encoding, and decoding parts of URLs.\n\n\nprimitive val URLEncode\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: URLEncode val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nURLEncode\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nencode\n\u00b6\n\n\n[Source]\n\n\nURL encode and normilase the given string.\nThe percent_encoded parameter indicates how '%' characters should be\ninterpretted.\ntrue => given string is already at least partially encoded, so '%'s\n  indicate an encoded character.\nfalse => given string is not yet encoded at all, so '%'s are just '%'s.\nAn error is raised on invalid existing encoding or illegal characters that\ncannot be encoded.\n\n\nfun box encode(\n  from: String val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val),\n  percent_encoded: Bool val = seq)\n: String val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nString\n val\n\n\npart: (\nURLPartUser\n val | \nURLPartPassword\n val | \nURLPartHost\n val | \n    \nURLPartPath\n val | \nURLPartQuery\n val | \nURLPartFragment\n val)\n\n\npercent_encoded: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val ?\n\n\n\n\n\n\ndecode\n\u00b6\n\n\n[Source]\n\n\nURL decode a string. Raise an error on invalid URL encoded.\n\n\nfun box decode(\n  from: String val)\n: String val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val ?\n\n\n\n\n\n\ncheck_scheme\n\u00b6\n\n\n[Source]\n\n\nCheck that the given string is a valid scheme.\n\n\nfun box check_scheme(\n  scheme: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nscheme: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncheck\n\u00b6\n\n\n[Source]\n\n\nCheck that the given string is valid to be the given URL part without\nfurther encoding. Canonical form is not checked for, merely validity.\n\n\nfun box check(\n  from: String val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nString\n val\n\n\npart: (\nURLPartUser\n val | \nURLPartPassword\n val | \nURLPartHost\n val | \n    \nURLPartPath\n val | \nURLPartQuery\n val | \nURLPartFragment\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: URLEncode val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLEncode\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: URLEncode val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURLEncode\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive URLEncode"
        },
        {
            "location": "/http-URLEncode/#urlencode",
            "text": "[Source]  Functions for checking, encoding, and decoding parts of URLs.  primitive val URLEncode",
            "title": "URLEncode"
        },
        {
            "location": "/http-URLEncode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-URLEncode/#create",
            "text": "[Source]  new val create()\n: URLEncode val^",
            "title": "create"
        },
        {
            "location": "/http-URLEncode/#returns",
            "text": "URLEncode  val^",
            "title": "Returns"
        },
        {
            "location": "/http-URLEncode/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-URLEncode/#encode",
            "text": "[Source]  URL encode and normilase the given string.\nThe percent_encoded parameter indicates how '%' characters should be\ninterpretted.\ntrue => given string is already at least partially encoded, so '%'s\n  indicate an encoded character.\nfalse => given string is not yet encoded at all, so '%'s are just '%'s.\nAn error is raised on invalid existing encoding or illegal characters that\ncannot be encoded.  fun box encode(\n  from: String val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val),\n  percent_encoded: Bool val = seq)\n: String val ?",
            "title": "encode"
        },
        {
            "location": "/http-URLEncode/#parameters",
            "text": "from:  String  val  part: ( URLPartUser  val |  URLPartPassword  val |  URLPartHost  val | \n     URLPartPath  val |  URLPartQuery  val |  URLPartFragment  val)  percent_encoded:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/http-URLEncode/#returns_1",
            "text": "String  val ?",
            "title": "Returns"
        },
        {
            "location": "/http-URLEncode/#decode",
            "text": "[Source]  URL decode a string. Raise an error on invalid URL encoded.  fun box decode(\n  from: String val)\n: String val ?",
            "title": "decode"
        },
        {
            "location": "/http-URLEncode/#parameters_1",
            "text": "from:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLEncode/#returns_2",
            "text": "String  val ?",
            "title": "Returns"
        },
        {
            "location": "/http-URLEncode/#check_scheme",
            "text": "[Source]  Check that the given string is a valid scheme.  fun box check_scheme(\n  scheme: String val)\n: Bool val",
            "title": "check_scheme"
        },
        {
            "location": "/http-URLEncode/#parameters_2",
            "text": "scheme:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLEncode/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLEncode/#check",
            "text": "[Source]  Check that the given string is valid to be the given URL part without\nfurther encoding. Canonical form is not checked for, merely validity.  fun box check(\n  from: String val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val))\n: Bool val",
            "title": "check"
        },
        {
            "location": "/http-URLEncode/#parameters_3",
            "text": "from:  String  val  part: ( URLPartUser  val |  URLPartPassword  val |  URLPartHost  val | \n     URLPartPath  val |  URLPartQuery  val |  URLPartFragment  val)",
            "title": "Parameters"
        },
        {
            "location": "/http-URLEncode/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLEncode/#eq",
            "text": "[Source]  fun box eq(\n  that: URLEncode val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-URLEncode/#parameters_4",
            "text": "that:  URLEncode  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLEncode/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URLEncode/#ne",
            "text": "[Source]  fun box ne(\n  that: URLEncode val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-URLEncode/#parameters_5",
            "text": "that:  URLEncode  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URLEncode/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URL/",
            "text": "URL\n\u00b6\n\n\n[Source]\n\n\nHolds the components of a URL. These are always stored as valid, URL-encoded\nvalues.\n\n\nclass val URL\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate an empty URL.\n\n\nnew val create()\n: URL val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nURL\n val^\n\n\n\n\n\n\nbuild\n\u00b6\n\n\n[Source]\n\n\nParse the URL string into its components. If it isn't URL encoded, encode\nit. If existing URL encoding is invalid, raise an error.\n\n\nnew val build(\n  from: String val,\n  percent_encoded: Bool val = seq)\n: URL val^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nString\n val\n\n\npercent_encoded: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nURL\n val^ ?\n\n\n\n\n\n\nvalid\n\u00b6\n\n\n[Source]\n\n\nParse the URL string into its components. If it isn't URL encoded, raise an\nerror.\n\n\nnew val valid(\n  from: String val)\n: URL val^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nURL\n val^ ?\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nvar scheme: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nURL scheme.\n\n\nIf the given URL does not provide a scheme, this will be the empty string.\n\n\nSee also \nRFC 3986\n.\n\n\n\n\nvar user: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nURL user as part of the URLs authority component:\n\n\nauthority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]\n\n\n\n\nIf the URL does not provide user information, this will be the empty string.\n\n\nSee also \nRFC 3986\n.\n\n\n\n\nvar password: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nURL password as part of the URLs authority component:\n\n\nauthority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]\n\n\n\n\nIf the URL does not provide a password, this will be the empty string.\n\n\nSee also \nRFC 3986\n.\n\n\n\n\nvar host: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nURL host as part of the URLs authority component:\n\n\nauthority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]\n\n\n\n\nIf the URL does not provide a host, this will be the empty string.\n\n\nSee also \nRFC 3986\n.\n\n\n\n\nvar port: \nU16\n val\n\u00b6\n\n\n[Source]\n\n\nURL port as part of the URLs authority component:\n\n\nauthority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]\n\n\n\n\nIf the URL does not provide a port, this will be the empty string.\n\n\nSee also \nRFC 3986\n.\n\n\n\n\nvar path: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nURL path component.\n\n\nIf the URL does not provide a path component, this will be the empty string.\n\n\nSee also \nRFC 3986\n.\n\n\n\n\nvar query: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nURL query component.\n\n\nIf the URL does not provide a query component, this will be the empty string.\n\n\nSee also \nRFC 3986\n.\n\n\n\n\nvar fragment: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nUrl fragment identifier component.\n\n\nIf the URL does not provide a fragment identifier component, this will be the empty string.\n\n\nSee also \nRFC 3986\n.\n\n\n\n\nPublic Functions\n\u00b6\n\n\nis_valid\n\u00b6\n\n\n[Source]\n\n\nReturn true if all elements are correctly URL encoded.\n\n\nfun box is_valid()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nCombine the components into a string.\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\njoin\n\u00b6\n\n\n[Source]\n\n\nUsing this as a base URL, concatenate with another, possibly relative, URL\nin the same way a browser does for a link.\n\n\nfun val join(\n  that: URL val)\n: URL val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nURL\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nURL\n val\n\n\n\n\n\n\ndefault_port\n\u00b6\n\n\n[Source]\n\n\nReport the default port for our scheme.\nReturns 0 for unrecognised schemes.\n\n\nfun box default_port()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val",
            "title": "class URL"
        },
        {
            "location": "/http-URL/#url",
            "text": "[Source]  Holds the components of a URL. These are always stored as valid, URL-encoded\nvalues.  class val URL",
            "title": "URL"
        },
        {
            "location": "/http-URL/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-URL/#create",
            "text": "[Source]  Create an empty URL.  new val create()\n: URL val^",
            "title": "create"
        },
        {
            "location": "/http-URL/#returns",
            "text": "URL  val^",
            "title": "Returns"
        },
        {
            "location": "/http-URL/#build",
            "text": "[Source]  Parse the URL string into its components. If it isn't URL encoded, encode\nit. If existing URL encoding is invalid, raise an error.  new val build(\n  from: String val,\n  percent_encoded: Bool val = seq)\n: URL val^ ?",
            "title": "build"
        },
        {
            "location": "/http-URL/#parameters",
            "text": "from:  String  val  percent_encoded:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/http-URL/#returns_1",
            "text": "URL  val^ ?",
            "title": "Returns"
        },
        {
            "location": "/http-URL/#valid",
            "text": "[Source]  Parse the URL string into its components. If it isn't URL encoded, raise an\nerror.  new val valid(\n  from: String val)\n: URL val^ ?",
            "title": "valid"
        },
        {
            "location": "/http-URL/#parameters_1",
            "text": "from:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URL/#returns_2",
            "text": "URL  val^ ?",
            "title": "Returns"
        },
        {
            "location": "/http-URL/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/http-URL/#var-scheme-string-val",
            "text": "[Source]  URL scheme.  If the given URL does not provide a scheme, this will be the empty string.  See also  RFC 3986 .",
            "title": "var scheme: String val"
        },
        {
            "location": "/http-URL/#var-user-string-val",
            "text": "[Source]  URL user as part of the URLs authority component:  authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]  If the URL does not provide user information, this will be the empty string.  See also  RFC 3986 .",
            "title": "var user: String val"
        },
        {
            "location": "/http-URL/#var-password-string-val",
            "text": "[Source]  URL password as part of the URLs authority component:  authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]  If the URL does not provide a password, this will be the empty string.  See also  RFC 3986 .",
            "title": "var password: String val"
        },
        {
            "location": "/http-URL/#var-host-string-val",
            "text": "[Source]  URL host as part of the URLs authority component:  authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]  If the URL does not provide a host, this will be the empty string.  See also  RFC 3986 .",
            "title": "var host: String val"
        },
        {
            "location": "/http-URL/#var-port-u16-val",
            "text": "[Source]  URL port as part of the URLs authority component:  authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]  If the URL does not provide a port, this will be the empty string.  See also  RFC 3986 .",
            "title": "var port: U16 val"
        },
        {
            "location": "/http-URL/#var-path-string-val",
            "text": "[Source]  URL path component.  If the URL does not provide a path component, this will be the empty string.  See also  RFC 3986 .",
            "title": "var path: String val"
        },
        {
            "location": "/http-URL/#var-query-string-val",
            "text": "[Source]  URL query component.  If the URL does not provide a query component, this will be the empty string.  See also  RFC 3986 .",
            "title": "var query: String val"
        },
        {
            "location": "/http-URL/#var-fragment-string-val",
            "text": "[Source]  Url fragment identifier component.  If the URL does not provide a fragment identifier component, this will be the empty string.  See also  RFC 3986 .",
            "title": "var fragment: String val"
        },
        {
            "location": "/http-URL/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-URL/#is_valid",
            "text": "[Source]  Return true if all elements are correctly URL encoded.  fun box is_valid()\n: Bool val",
            "title": "is_valid"
        },
        {
            "location": "/http-URL/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-URL/#string",
            "text": "[Source]  Combine the components into a string.  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/http-URL/#returns_4",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/http-URL/#join",
            "text": "[Source]  Using this as a base URL, concatenate with another, possibly relative, URL\nin the same way a browser does for a link.  fun val join(\n  that: URL val)\n: URL val",
            "title": "join"
        },
        {
            "location": "/http-URL/#parameters_2",
            "text": "that:  URL  val",
            "title": "Parameters"
        },
        {
            "location": "/http-URL/#returns_5",
            "text": "URL  val",
            "title": "Returns"
        },
        {
            "location": "/http-URL/#default_port",
            "text": "[Source]  Report the default port for our scheme.\nReturns 0 for unrecognised schemes.  fun box default_port()\n: U16 val",
            "title": "default_port"
        },
        {
            "location": "/http-URL/#returns_6",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-Status/",
            "text": "Status\n\u00b6\n\n\n[Source]\n\n\ntrait val Status\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val",
            "title": "trait Status"
        },
        {
            "location": "/http-Status/#status",
            "text": "[Source]  trait val Status",
            "title": "Status"
        },
        {
            "location": "/http-Status/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-Status/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-Status/#returns",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-Status/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-Status/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusContinue/",
            "text": "StatusContinue\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusContinue is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusContinue val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusContinue\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusContinue val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusContinue\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusContinue val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusContinue\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusContinue"
        },
        {
            "location": "/http-StatusContinue/#statuscontinue",
            "text": "[Source]  primitive val StatusContinue is\n  Status val",
            "title": "StatusContinue"
        },
        {
            "location": "/http-StatusContinue/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusContinue/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusContinue/#create",
            "text": "[Source]  new val create()\n: StatusContinue val^",
            "title": "create"
        },
        {
            "location": "/http-StatusContinue/#returns",
            "text": "StatusContinue  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusContinue/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusContinue/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusContinue/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusContinue/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusContinue/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusContinue/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusContinue val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusContinue/#parameters",
            "text": "that:  StatusContinue  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusContinue/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusContinue/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusContinue val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusContinue/#parameters_1",
            "text": "that:  StatusContinue  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusContinue/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusSwitchingProtocols/",
            "text": "StatusSwitchingProtocols\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusSwitchingProtocols is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusSwitchingProtocols val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusSwitchingProtocols\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusSwitchingProtocols val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusSwitchingProtocols\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusSwitchingProtocols val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusSwitchingProtocols\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusSwitchingProtocols"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#statusswitchingprotocols",
            "text": "[Source]  primitive val StatusSwitchingProtocols is\n  Status val",
            "title": "StatusSwitchingProtocols"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#create",
            "text": "[Source]  new val create()\n: StatusSwitchingProtocols val^",
            "title": "create"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#returns",
            "text": "StatusSwitchingProtocols  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusSwitchingProtocols val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#parameters",
            "text": "that:  StatusSwitchingProtocols  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusSwitchingProtocols val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#parameters_1",
            "text": "that:  StatusSwitchingProtocols  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusSwitchingProtocols/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusOK/",
            "text": "StatusOK\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusOK is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusOK val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusOK\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusOK val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusOK\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusOK val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusOK\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusOK"
        },
        {
            "location": "/http-StatusOK/#statusok",
            "text": "[Source]  primitive val StatusOK is\n  Status val",
            "title": "StatusOK"
        },
        {
            "location": "/http-StatusOK/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusOK/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusOK/#create",
            "text": "[Source]  new val create()\n: StatusOK val^",
            "title": "create"
        },
        {
            "location": "/http-StatusOK/#returns",
            "text": "StatusOK  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusOK/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusOK/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusOK/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusOK/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusOK/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusOK/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusOK val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusOK/#parameters",
            "text": "that:  StatusOK  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusOK/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusOK/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusOK val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusOK/#parameters_1",
            "text": "that:  StatusOK  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusOK/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusCreated/",
            "text": "StatusCreated\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusCreated is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusCreated val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusCreated\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusCreated val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusCreated\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusCreated val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusCreated\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusCreated"
        },
        {
            "location": "/http-StatusCreated/#statuscreated",
            "text": "[Source]  primitive val StatusCreated is\n  Status val",
            "title": "StatusCreated"
        },
        {
            "location": "/http-StatusCreated/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusCreated/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusCreated/#create",
            "text": "[Source]  new val create()\n: StatusCreated val^",
            "title": "create"
        },
        {
            "location": "/http-StatusCreated/#returns",
            "text": "StatusCreated  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusCreated/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusCreated/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusCreated/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusCreated/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusCreated/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusCreated/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusCreated val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusCreated/#parameters",
            "text": "that:  StatusCreated  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusCreated/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusCreated/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusCreated val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusCreated/#parameters_1",
            "text": "that:  StatusCreated  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusCreated/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusAccepted/",
            "text": "StatusAccepted\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusAccepted is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusAccepted val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusAccepted\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusAccepted val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusAccepted\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusAccepted val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusAccepted\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusAccepted"
        },
        {
            "location": "/http-StatusAccepted/#statusaccepted",
            "text": "[Source]  primitive val StatusAccepted is\n  Status val",
            "title": "StatusAccepted"
        },
        {
            "location": "/http-StatusAccepted/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusAccepted/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusAccepted/#create",
            "text": "[Source]  new val create()\n: StatusAccepted val^",
            "title": "create"
        },
        {
            "location": "/http-StatusAccepted/#returns",
            "text": "StatusAccepted  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusAccepted/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusAccepted/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusAccepted/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusAccepted/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusAccepted/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusAccepted/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusAccepted val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusAccepted/#parameters",
            "text": "that:  StatusAccepted  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusAccepted/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusAccepted/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusAccepted val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusAccepted/#parameters_1",
            "text": "that:  StatusAccepted  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusAccepted/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/",
            "text": "StatusNonAuthoritativeInfo\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusNonAuthoritativeInfo is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusNonAuthoritativeInfo val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusNonAuthoritativeInfo\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusNonAuthoritativeInfo val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNonAuthoritativeInfo\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusNonAuthoritativeInfo val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNonAuthoritativeInfo\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusNonAuthoritativeInfo"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#statusnonauthoritativeinfo",
            "text": "[Source]  primitive val StatusNonAuthoritativeInfo is\n  Status val",
            "title": "StatusNonAuthoritativeInfo"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#create",
            "text": "[Source]  new val create()\n: StatusNonAuthoritativeInfo val^",
            "title": "create"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#returns",
            "text": "StatusNonAuthoritativeInfo  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusNonAuthoritativeInfo val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#parameters",
            "text": "that:  StatusNonAuthoritativeInfo  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusNonAuthoritativeInfo val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#parameters_1",
            "text": "that:  StatusNonAuthoritativeInfo  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNonAuthoritativeInfo/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNoContent/",
            "text": "StatusNoContent\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusNoContent is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusNoContent val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusNoContent\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusNoContent val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNoContent\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusNoContent val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNoContent\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusNoContent"
        },
        {
            "location": "/http-StatusNoContent/#statusnocontent",
            "text": "[Source]  primitive val StatusNoContent is\n  Status val",
            "title": "StatusNoContent"
        },
        {
            "location": "/http-StatusNoContent/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusNoContent/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusNoContent/#create",
            "text": "[Source]  new val create()\n: StatusNoContent val^",
            "title": "create"
        },
        {
            "location": "/http-StatusNoContent/#returns",
            "text": "StatusNoContent  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNoContent/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusNoContent/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusNoContent/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNoContent/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusNoContent/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNoContent/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusNoContent val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusNoContent/#parameters",
            "text": "that:  StatusNoContent  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNoContent/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNoContent/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusNoContent val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusNoContent/#parameters_1",
            "text": "that:  StatusNoContent  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNoContent/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusResetContent/",
            "text": "StatusResetContent\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusResetContent is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusResetContent val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusResetContent\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusResetContent val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusResetContent\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusResetContent val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusResetContent\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusResetContent"
        },
        {
            "location": "/http-StatusResetContent/#statusresetcontent",
            "text": "[Source]  primitive val StatusResetContent is\n  Status val",
            "title": "StatusResetContent"
        },
        {
            "location": "/http-StatusResetContent/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusResetContent/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusResetContent/#create",
            "text": "[Source]  new val create()\n: StatusResetContent val^",
            "title": "create"
        },
        {
            "location": "/http-StatusResetContent/#returns",
            "text": "StatusResetContent  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusResetContent/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusResetContent/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusResetContent/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusResetContent/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusResetContent/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusResetContent/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusResetContent val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusResetContent/#parameters",
            "text": "that:  StatusResetContent  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusResetContent/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusResetContent/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusResetContent val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusResetContent/#parameters_1",
            "text": "that:  StatusResetContent  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusResetContent/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPartialContent/",
            "text": "StatusPartialContent\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusPartialContent is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusPartialContent val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusPartialContent\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusPartialContent val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusPartialContent\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusPartialContent val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusPartialContent\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusPartialContent"
        },
        {
            "location": "/http-StatusPartialContent/#statuspartialcontent",
            "text": "[Source]  primitive val StatusPartialContent is\n  Status val",
            "title": "StatusPartialContent"
        },
        {
            "location": "/http-StatusPartialContent/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusPartialContent/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusPartialContent/#create",
            "text": "[Source]  new val create()\n: StatusPartialContent val^",
            "title": "create"
        },
        {
            "location": "/http-StatusPartialContent/#returns",
            "text": "StatusPartialContent  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPartialContent/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusPartialContent/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusPartialContent/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPartialContent/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusPartialContent/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPartialContent/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusPartialContent val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusPartialContent/#parameters",
            "text": "that:  StatusPartialContent  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusPartialContent/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPartialContent/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusPartialContent val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusPartialContent/#parameters_1",
            "text": "that:  StatusPartialContent  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusPartialContent/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMultipleChoices/",
            "text": "StatusMultipleChoices\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusMultipleChoices is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusMultipleChoices val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusMultipleChoices\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusMultipleChoices val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusMultipleChoices\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusMultipleChoices val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusMultipleChoices\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusMultipleChoices"
        },
        {
            "location": "/http-StatusMultipleChoices/#statusmultiplechoices",
            "text": "[Source]  primitive val StatusMultipleChoices is\n  Status val",
            "title": "StatusMultipleChoices"
        },
        {
            "location": "/http-StatusMultipleChoices/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusMultipleChoices/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusMultipleChoices/#create",
            "text": "[Source]  new val create()\n: StatusMultipleChoices val^",
            "title": "create"
        },
        {
            "location": "/http-StatusMultipleChoices/#returns",
            "text": "StatusMultipleChoices  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMultipleChoices/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusMultipleChoices/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusMultipleChoices/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMultipleChoices/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusMultipleChoices/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMultipleChoices/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusMultipleChoices val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusMultipleChoices/#parameters",
            "text": "that:  StatusMultipleChoices  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusMultipleChoices/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMultipleChoices/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusMultipleChoices val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusMultipleChoices/#parameters_1",
            "text": "that:  StatusMultipleChoices  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusMultipleChoices/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMovedPermanently/",
            "text": "StatusMovedPermanently\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusMovedPermanently is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusMovedPermanently val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusMovedPermanently\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusMovedPermanently val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusMovedPermanently\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusMovedPermanently val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusMovedPermanently\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusMovedPermanently"
        },
        {
            "location": "/http-StatusMovedPermanently/#statusmovedpermanently",
            "text": "[Source]  primitive val StatusMovedPermanently is\n  Status val",
            "title": "StatusMovedPermanently"
        },
        {
            "location": "/http-StatusMovedPermanently/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusMovedPermanently/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusMovedPermanently/#create",
            "text": "[Source]  new val create()\n: StatusMovedPermanently val^",
            "title": "create"
        },
        {
            "location": "/http-StatusMovedPermanently/#returns",
            "text": "StatusMovedPermanently  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMovedPermanently/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusMovedPermanently/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusMovedPermanently/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMovedPermanently/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusMovedPermanently/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMovedPermanently/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusMovedPermanently val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusMovedPermanently/#parameters",
            "text": "that:  StatusMovedPermanently  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusMovedPermanently/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMovedPermanently/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusMovedPermanently val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusMovedPermanently/#parameters_1",
            "text": "that:  StatusMovedPermanently  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusMovedPermanently/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusFound/",
            "text": "StatusFound\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusFound is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusFound val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusFound\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusFound val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusFound\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusFound val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusFound\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusFound"
        },
        {
            "location": "/http-StatusFound/#statusfound",
            "text": "[Source]  primitive val StatusFound is\n  Status val",
            "title": "StatusFound"
        },
        {
            "location": "/http-StatusFound/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusFound/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusFound/#create",
            "text": "[Source]  new val create()\n: StatusFound val^",
            "title": "create"
        },
        {
            "location": "/http-StatusFound/#returns",
            "text": "StatusFound  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusFound/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusFound/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusFound/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusFound/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusFound/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusFound/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusFound val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusFound/#parameters",
            "text": "that:  StatusFound  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusFound/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusFound/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusFound val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusFound/#parameters_1",
            "text": "that:  StatusFound  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusFound/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusSeeOther/",
            "text": "StatusSeeOther\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusSeeOther is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusSeeOther val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusSeeOther\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusSeeOther val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusSeeOther\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusSeeOther val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusSeeOther\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusSeeOther"
        },
        {
            "location": "/http-StatusSeeOther/#statusseeother",
            "text": "[Source]  primitive val StatusSeeOther is\n  Status val",
            "title": "StatusSeeOther"
        },
        {
            "location": "/http-StatusSeeOther/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusSeeOther/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusSeeOther/#create",
            "text": "[Source]  new val create()\n: StatusSeeOther val^",
            "title": "create"
        },
        {
            "location": "/http-StatusSeeOther/#returns",
            "text": "StatusSeeOther  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusSeeOther/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusSeeOther/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusSeeOther/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusSeeOther/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusSeeOther/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusSeeOther/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusSeeOther val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusSeeOther/#parameters",
            "text": "that:  StatusSeeOther  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusSeeOther/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusSeeOther/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusSeeOther val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusSeeOther/#parameters_1",
            "text": "that:  StatusSeeOther  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusSeeOther/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotModified/",
            "text": "StatusNotModified\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusNotModified is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusNotModified val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusNotModified\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusNotModified val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNotModified\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusNotModified val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNotModified\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusNotModified"
        },
        {
            "location": "/http-StatusNotModified/#statusnotmodified",
            "text": "[Source]  primitive val StatusNotModified is\n  Status val",
            "title": "StatusNotModified"
        },
        {
            "location": "/http-StatusNotModified/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusNotModified/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusNotModified/#create",
            "text": "[Source]  new val create()\n: StatusNotModified val^",
            "title": "create"
        },
        {
            "location": "/http-StatusNotModified/#returns",
            "text": "StatusNotModified  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotModified/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusNotModified/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusNotModified/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotModified/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusNotModified/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotModified/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusNotModified val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusNotModified/#parameters",
            "text": "that:  StatusNotModified  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNotModified/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotModified/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusNotModified val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusNotModified/#parameters_1",
            "text": "that:  StatusNotModified  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNotModified/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUseProxy/",
            "text": "StatusUseProxy\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusUseProxy is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusUseProxy val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusUseProxy\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusUseProxy val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusUseProxy\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusUseProxy val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusUseProxy\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusUseProxy"
        },
        {
            "location": "/http-StatusUseProxy/#statususeproxy",
            "text": "[Source]  primitive val StatusUseProxy is\n  Status val",
            "title": "StatusUseProxy"
        },
        {
            "location": "/http-StatusUseProxy/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusUseProxy/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusUseProxy/#create",
            "text": "[Source]  new val create()\n: StatusUseProxy val^",
            "title": "create"
        },
        {
            "location": "/http-StatusUseProxy/#returns",
            "text": "StatusUseProxy  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUseProxy/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusUseProxy/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusUseProxy/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUseProxy/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusUseProxy/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUseProxy/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusUseProxy val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusUseProxy/#parameters",
            "text": "that:  StatusUseProxy  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusUseProxy/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUseProxy/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusUseProxy val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusUseProxy/#parameters_1",
            "text": "that:  StatusUseProxy  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusUseProxy/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTemporaryRedirect/",
            "text": "StatusTemporaryRedirect\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusTemporaryRedirect is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusTemporaryRedirect val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusTemporaryRedirect\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusTemporaryRedirect val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusTemporaryRedirect\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusTemporaryRedirect val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusTemporaryRedirect\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusTemporaryRedirect"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#statustemporaryredirect",
            "text": "[Source]  primitive val StatusTemporaryRedirect is\n  Status val",
            "title": "StatusTemporaryRedirect"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#create",
            "text": "[Source]  new val create()\n: StatusTemporaryRedirect val^",
            "title": "create"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#returns",
            "text": "StatusTemporaryRedirect  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusTemporaryRedirect val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#parameters",
            "text": "that:  StatusTemporaryRedirect  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusTemporaryRedirect val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#parameters_1",
            "text": "that:  StatusTemporaryRedirect  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusTemporaryRedirect/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusBadRequest/",
            "text": "StatusBadRequest\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusBadRequest is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusBadRequest val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusBadRequest\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusBadRequest val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusBadRequest\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusBadRequest val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusBadRequest\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusBadRequest"
        },
        {
            "location": "/http-StatusBadRequest/#statusbadrequest",
            "text": "[Source]  primitive val StatusBadRequest is\n  Status val",
            "title": "StatusBadRequest"
        },
        {
            "location": "/http-StatusBadRequest/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusBadRequest/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusBadRequest/#create",
            "text": "[Source]  new val create()\n: StatusBadRequest val^",
            "title": "create"
        },
        {
            "location": "/http-StatusBadRequest/#returns",
            "text": "StatusBadRequest  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusBadRequest/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusBadRequest/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusBadRequest/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusBadRequest/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusBadRequest/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusBadRequest/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusBadRequest val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusBadRequest/#parameters",
            "text": "that:  StatusBadRequest  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusBadRequest/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusBadRequest/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusBadRequest val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusBadRequest/#parameters_1",
            "text": "that:  StatusBadRequest  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusBadRequest/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnauthorized/",
            "text": "StatusUnauthorized\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusUnauthorized is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusUnauthorized val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusUnauthorized\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusUnauthorized val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusUnauthorized\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusUnauthorized val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusUnauthorized\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusUnauthorized"
        },
        {
            "location": "/http-StatusUnauthorized/#statusunauthorized",
            "text": "[Source]  primitive val StatusUnauthorized is\n  Status val",
            "title": "StatusUnauthorized"
        },
        {
            "location": "/http-StatusUnauthorized/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusUnauthorized/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusUnauthorized/#create",
            "text": "[Source]  new val create()\n: StatusUnauthorized val^",
            "title": "create"
        },
        {
            "location": "/http-StatusUnauthorized/#returns",
            "text": "StatusUnauthorized  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnauthorized/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusUnauthorized/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusUnauthorized/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnauthorized/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusUnauthorized/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnauthorized/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusUnauthorized val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusUnauthorized/#parameters",
            "text": "that:  StatusUnauthorized  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusUnauthorized/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnauthorized/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusUnauthorized val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusUnauthorized/#parameters_1",
            "text": "that:  StatusUnauthorized  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusUnauthorized/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPaymentRequired/",
            "text": "StatusPaymentRequired\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusPaymentRequired is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusPaymentRequired val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusPaymentRequired\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusPaymentRequired val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusPaymentRequired\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusPaymentRequired val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusPaymentRequired\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusPaymentRequired"
        },
        {
            "location": "/http-StatusPaymentRequired/#statuspaymentrequired",
            "text": "[Source]  primitive val StatusPaymentRequired is\n  Status val",
            "title": "StatusPaymentRequired"
        },
        {
            "location": "/http-StatusPaymentRequired/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusPaymentRequired/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusPaymentRequired/#create",
            "text": "[Source]  new val create()\n: StatusPaymentRequired val^",
            "title": "create"
        },
        {
            "location": "/http-StatusPaymentRequired/#returns",
            "text": "StatusPaymentRequired  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPaymentRequired/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusPaymentRequired/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusPaymentRequired/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPaymentRequired/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusPaymentRequired/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPaymentRequired/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusPaymentRequired val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusPaymentRequired/#parameters",
            "text": "that:  StatusPaymentRequired  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusPaymentRequired/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPaymentRequired/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusPaymentRequired val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusPaymentRequired/#parameters_1",
            "text": "that:  StatusPaymentRequired  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusPaymentRequired/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusForbidden/",
            "text": "StatusForbidden\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusForbidden is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusForbidden val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusForbidden\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusForbidden val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusForbidden\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusForbidden val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusForbidden\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusForbidden"
        },
        {
            "location": "/http-StatusForbidden/#statusforbidden",
            "text": "[Source]  primitive val StatusForbidden is\n  Status val",
            "title": "StatusForbidden"
        },
        {
            "location": "/http-StatusForbidden/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusForbidden/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusForbidden/#create",
            "text": "[Source]  new val create()\n: StatusForbidden val^",
            "title": "create"
        },
        {
            "location": "/http-StatusForbidden/#returns",
            "text": "StatusForbidden  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusForbidden/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusForbidden/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusForbidden/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusForbidden/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusForbidden/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusForbidden/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusForbidden val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusForbidden/#parameters",
            "text": "that:  StatusForbidden  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusForbidden/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusForbidden/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusForbidden val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusForbidden/#parameters_1",
            "text": "that:  StatusForbidden  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusForbidden/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotFound/",
            "text": "StatusNotFound\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusNotFound is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusNotFound val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusNotFound\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusNotFound val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNotFound\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusNotFound val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNotFound\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusNotFound"
        },
        {
            "location": "/http-StatusNotFound/#statusnotfound",
            "text": "[Source]  primitive val StatusNotFound is\n  Status val",
            "title": "StatusNotFound"
        },
        {
            "location": "/http-StatusNotFound/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusNotFound/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusNotFound/#create",
            "text": "[Source]  new val create()\n: StatusNotFound val^",
            "title": "create"
        },
        {
            "location": "/http-StatusNotFound/#returns",
            "text": "StatusNotFound  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotFound/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusNotFound/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusNotFound/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotFound/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusNotFound/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotFound/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusNotFound val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusNotFound/#parameters",
            "text": "that:  StatusNotFound  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNotFound/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotFound/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusNotFound val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusNotFound/#parameters_1",
            "text": "that:  StatusNotFound  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNotFound/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMethodNotAllowed/",
            "text": "StatusMethodNotAllowed\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusMethodNotAllowed is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusMethodNotAllowed val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusMethodNotAllowed\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusMethodNotAllowed val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusMethodNotAllowed\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusMethodNotAllowed val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusMethodNotAllowed\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusMethodNotAllowed"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#statusmethodnotallowed",
            "text": "[Source]  primitive val StatusMethodNotAllowed is\n  Status val",
            "title": "StatusMethodNotAllowed"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#create",
            "text": "[Source]  new val create()\n: StatusMethodNotAllowed val^",
            "title": "create"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#returns",
            "text": "StatusMethodNotAllowed  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusMethodNotAllowed val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#parameters",
            "text": "that:  StatusMethodNotAllowed  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusMethodNotAllowed val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#parameters_1",
            "text": "that:  StatusMethodNotAllowed  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusMethodNotAllowed/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotAcceptable/",
            "text": "StatusNotAcceptable\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusNotAcceptable is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusNotAcceptable val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusNotAcceptable\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusNotAcceptable val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNotAcceptable\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusNotAcceptable val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNotAcceptable\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusNotAcceptable"
        },
        {
            "location": "/http-StatusNotAcceptable/#statusnotacceptable",
            "text": "[Source]  primitive val StatusNotAcceptable is\n  Status val",
            "title": "StatusNotAcceptable"
        },
        {
            "location": "/http-StatusNotAcceptable/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusNotAcceptable/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusNotAcceptable/#create",
            "text": "[Source]  new val create()\n: StatusNotAcceptable val^",
            "title": "create"
        },
        {
            "location": "/http-StatusNotAcceptable/#returns",
            "text": "StatusNotAcceptable  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotAcceptable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusNotAcceptable/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusNotAcceptable/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotAcceptable/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusNotAcceptable/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotAcceptable/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusNotAcceptable val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusNotAcceptable/#parameters",
            "text": "that:  StatusNotAcceptable  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNotAcceptable/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotAcceptable/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusNotAcceptable val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusNotAcceptable/#parameters_1",
            "text": "that:  StatusNotAcceptable  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNotAcceptable/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusProxyAuthRequired/",
            "text": "StatusProxyAuthRequired\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusProxyAuthRequired is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusProxyAuthRequired val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusProxyAuthRequired\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusProxyAuthRequired val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusProxyAuthRequired\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusProxyAuthRequired val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusProxyAuthRequired\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusProxyAuthRequired"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#statusproxyauthrequired",
            "text": "[Source]  primitive val StatusProxyAuthRequired is\n  Status val",
            "title": "StatusProxyAuthRequired"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#create",
            "text": "[Source]  new val create()\n: StatusProxyAuthRequired val^",
            "title": "create"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#returns",
            "text": "StatusProxyAuthRequired  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusProxyAuthRequired val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#parameters",
            "text": "that:  StatusProxyAuthRequired  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusProxyAuthRequired val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#parameters_1",
            "text": "that:  StatusProxyAuthRequired  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusProxyAuthRequired/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestTimeout/",
            "text": "StatusRequestTimeout\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusRequestTimeout is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusRequestTimeout val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusRequestTimeout\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusRequestTimeout val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusRequestTimeout\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusRequestTimeout val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusRequestTimeout\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusRequestTimeout"
        },
        {
            "location": "/http-StatusRequestTimeout/#statusrequesttimeout",
            "text": "[Source]  primitive val StatusRequestTimeout is\n  Status val",
            "title": "StatusRequestTimeout"
        },
        {
            "location": "/http-StatusRequestTimeout/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusRequestTimeout/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusRequestTimeout/#create",
            "text": "[Source]  new val create()\n: StatusRequestTimeout val^",
            "title": "create"
        },
        {
            "location": "/http-StatusRequestTimeout/#returns",
            "text": "StatusRequestTimeout  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestTimeout/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusRequestTimeout/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusRequestTimeout/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestTimeout/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusRequestTimeout/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestTimeout/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusRequestTimeout val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusRequestTimeout/#parameters",
            "text": "that:  StatusRequestTimeout  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusRequestTimeout/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestTimeout/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusRequestTimeout val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusRequestTimeout/#parameters_1",
            "text": "that:  StatusRequestTimeout  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusRequestTimeout/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusConflict/",
            "text": "StatusConflict\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusConflict is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusConflict val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusConflict\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusConflict val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusConflict\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusConflict val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusConflict\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusConflict"
        },
        {
            "location": "/http-StatusConflict/#statusconflict",
            "text": "[Source]  primitive val StatusConflict is\n  Status val",
            "title": "StatusConflict"
        },
        {
            "location": "/http-StatusConflict/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusConflict/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusConflict/#create",
            "text": "[Source]  new val create()\n: StatusConflict val^",
            "title": "create"
        },
        {
            "location": "/http-StatusConflict/#returns",
            "text": "StatusConflict  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusConflict/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusConflict/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusConflict/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusConflict/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusConflict/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusConflict/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusConflict val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusConflict/#parameters",
            "text": "that:  StatusConflict  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusConflict/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusConflict/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusConflict val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusConflict/#parameters_1",
            "text": "that:  StatusConflict  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusConflict/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusGone/",
            "text": "StatusGone\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusGone is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusGone val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusGone\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusGone val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusGone\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusGone val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusGone\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusGone"
        },
        {
            "location": "/http-StatusGone/#statusgone",
            "text": "[Source]  primitive val StatusGone is\n  Status val",
            "title": "StatusGone"
        },
        {
            "location": "/http-StatusGone/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusGone/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusGone/#create",
            "text": "[Source]  new val create()\n: StatusGone val^",
            "title": "create"
        },
        {
            "location": "/http-StatusGone/#returns",
            "text": "StatusGone  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusGone/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusGone/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusGone/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusGone/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusGone/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusGone/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusGone val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusGone/#parameters",
            "text": "that:  StatusGone  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusGone/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusGone/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusGone val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusGone/#parameters_1",
            "text": "that:  StatusGone  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusGone/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusLengthRequired/",
            "text": "StatusLengthRequired\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusLengthRequired is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusLengthRequired val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusLengthRequired\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusLengthRequired val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusLengthRequired\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusLengthRequired val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusLengthRequired\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusLengthRequired"
        },
        {
            "location": "/http-StatusLengthRequired/#statuslengthrequired",
            "text": "[Source]  primitive val StatusLengthRequired is\n  Status val",
            "title": "StatusLengthRequired"
        },
        {
            "location": "/http-StatusLengthRequired/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusLengthRequired/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusLengthRequired/#create",
            "text": "[Source]  new val create()\n: StatusLengthRequired val^",
            "title": "create"
        },
        {
            "location": "/http-StatusLengthRequired/#returns",
            "text": "StatusLengthRequired  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusLengthRequired/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusLengthRequired/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusLengthRequired/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusLengthRequired/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusLengthRequired/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusLengthRequired/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusLengthRequired val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusLengthRequired/#parameters",
            "text": "that:  StatusLengthRequired  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusLengthRequired/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusLengthRequired/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusLengthRequired val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusLengthRequired/#parameters_1",
            "text": "that:  StatusLengthRequired  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusLengthRequired/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPreconditionFailed/",
            "text": "StatusPreconditionFailed\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusPreconditionFailed is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusPreconditionFailed val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusPreconditionFailed\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusPreconditionFailed val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusPreconditionFailed\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusPreconditionFailed val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusPreconditionFailed\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusPreconditionFailed"
        },
        {
            "location": "/http-StatusPreconditionFailed/#statuspreconditionfailed",
            "text": "[Source]  primitive val StatusPreconditionFailed is\n  Status val",
            "title": "StatusPreconditionFailed"
        },
        {
            "location": "/http-StatusPreconditionFailed/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusPreconditionFailed/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusPreconditionFailed/#create",
            "text": "[Source]  new val create()\n: StatusPreconditionFailed val^",
            "title": "create"
        },
        {
            "location": "/http-StatusPreconditionFailed/#returns",
            "text": "StatusPreconditionFailed  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPreconditionFailed/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusPreconditionFailed/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusPreconditionFailed/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPreconditionFailed/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusPreconditionFailed/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPreconditionFailed/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusPreconditionFailed val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusPreconditionFailed/#parameters",
            "text": "that:  StatusPreconditionFailed  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusPreconditionFailed/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPreconditionFailed/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusPreconditionFailed val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusPreconditionFailed/#parameters_1",
            "text": "that:  StatusPreconditionFailed  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusPreconditionFailed/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/",
            "text": "StatusRequestEntityTooLarge\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusRequestEntityTooLarge is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusRequestEntityTooLarge val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusRequestEntityTooLarge\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusRequestEntityTooLarge val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusRequestEntityTooLarge\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusRequestEntityTooLarge val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusRequestEntityTooLarge\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusRequestEntityTooLarge"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#statusrequestentitytoolarge",
            "text": "[Source]  primitive val StatusRequestEntityTooLarge is\n  Status val",
            "title": "StatusRequestEntityTooLarge"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#create",
            "text": "[Source]  new val create()\n: StatusRequestEntityTooLarge val^",
            "title": "create"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#returns",
            "text": "StatusRequestEntityTooLarge  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusRequestEntityTooLarge val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#parameters",
            "text": "that:  StatusRequestEntityTooLarge  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusRequestEntityTooLarge val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#parameters_1",
            "text": "that:  StatusRequestEntityTooLarge  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusRequestEntityTooLarge/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestURITooLong/",
            "text": "StatusRequestURITooLong\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusRequestURITooLong is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusRequestURITooLong val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusRequestURITooLong\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusRequestURITooLong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusRequestURITooLong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusRequestURITooLong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusRequestURITooLong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusRequestURITooLong"
        },
        {
            "location": "/http-StatusRequestURITooLong/#statusrequesturitoolong",
            "text": "[Source]  primitive val StatusRequestURITooLong is\n  Status val",
            "title": "StatusRequestURITooLong"
        },
        {
            "location": "/http-StatusRequestURITooLong/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusRequestURITooLong/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusRequestURITooLong/#create",
            "text": "[Source]  new val create()\n: StatusRequestURITooLong val^",
            "title": "create"
        },
        {
            "location": "/http-StatusRequestURITooLong/#returns",
            "text": "StatusRequestURITooLong  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestURITooLong/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusRequestURITooLong/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusRequestURITooLong/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestURITooLong/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusRequestURITooLong/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestURITooLong/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusRequestURITooLong val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusRequestURITooLong/#parameters",
            "text": "that:  StatusRequestURITooLong  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusRequestURITooLong/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestURITooLong/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusRequestURITooLong val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusRequestURITooLong/#parameters_1",
            "text": "that:  StatusRequestURITooLong  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusRequestURITooLong/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/",
            "text": "StatusUnsupportedMediaType\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusUnsupportedMediaType is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusUnsupportedMediaType val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusUnsupportedMediaType\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusUnsupportedMediaType val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusUnsupportedMediaType\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusUnsupportedMediaType val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusUnsupportedMediaType\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusUnsupportedMediaType"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#statusunsupportedmediatype",
            "text": "[Source]  primitive val StatusUnsupportedMediaType is\n  Status val",
            "title": "StatusUnsupportedMediaType"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#create",
            "text": "[Source]  new val create()\n: StatusUnsupportedMediaType val^",
            "title": "create"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#returns",
            "text": "StatusUnsupportedMediaType  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusUnsupportedMediaType val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#parameters",
            "text": "that:  StatusUnsupportedMediaType  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusUnsupportedMediaType val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#parameters_1",
            "text": "that:  StatusUnsupportedMediaType  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusUnsupportedMediaType/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/",
            "text": "StatusRequestedRangeNotSatisfiable\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusRequestedRangeNotSatisfiable is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusRequestedRangeNotSatisfiable val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusRequestedRangeNotSatisfiable\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusRequestedRangeNotSatisfiable val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusRequestedRangeNotSatisfiable\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusRequestedRangeNotSatisfiable val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusRequestedRangeNotSatisfiable\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusRequestedRangeNotSatisfiable"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#statusrequestedrangenotsatisfiable",
            "text": "[Source]  primitive val StatusRequestedRangeNotSatisfiable is\n  Status val",
            "title": "StatusRequestedRangeNotSatisfiable"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#create",
            "text": "[Source]  new val create()\n: StatusRequestedRangeNotSatisfiable val^",
            "title": "create"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#returns",
            "text": "StatusRequestedRangeNotSatisfiable  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusRequestedRangeNotSatisfiable val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#parameters",
            "text": "that:  StatusRequestedRangeNotSatisfiable  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusRequestedRangeNotSatisfiable val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#parameters_1",
            "text": "that:  StatusRequestedRangeNotSatisfiable  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusRequestedRangeNotSatisfiable/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusExpectationFailed/",
            "text": "StatusExpectationFailed\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusExpectationFailed is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusExpectationFailed val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusExpectationFailed\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusExpectationFailed val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusExpectationFailed\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusExpectationFailed val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusExpectationFailed\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusExpectationFailed"
        },
        {
            "location": "/http-StatusExpectationFailed/#statusexpectationfailed",
            "text": "[Source]  primitive val StatusExpectationFailed is\n  Status val",
            "title": "StatusExpectationFailed"
        },
        {
            "location": "/http-StatusExpectationFailed/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusExpectationFailed/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusExpectationFailed/#create",
            "text": "[Source]  new val create()\n: StatusExpectationFailed val^",
            "title": "create"
        },
        {
            "location": "/http-StatusExpectationFailed/#returns",
            "text": "StatusExpectationFailed  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusExpectationFailed/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusExpectationFailed/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusExpectationFailed/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusExpectationFailed/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusExpectationFailed/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusExpectationFailed/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusExpectationFailed val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusExpectationFailed/#parameters",
            "text": "that:  StatusExpectationFailed  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusExpectationFailed/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusExpectationFailed/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusExpectationFailed val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusExpectationFailed/#parameters_1",
            "text": "that:  StatusExpectationFailed  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusExpectationFailed/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTeapot/",
            "text": "StatusTeapot\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusTeapot is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusTeapot val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusTeapot\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusTeapot val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusTeapot\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusTeapot val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusTeapot\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusTeapot"
        },
        {
            "location": "/http-StatusTeapot/#statusteapot",
            "text": "[Source]  primitive val StatusTeapot is\n  Status val",
            "title": "StatusTeapot"
        },
        {
            "location": "/http-StatusTeapot/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusTeapot/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusTeapot/#create",
            "text": "[Source]  new val create()\n: StatusTeapot val^",
            "title": "create"
        },
        {
            "location": "/http-StatusTeapot/#returns",
            "text": "StatusTeapot  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTeapot/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusTeapot/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusTeapot/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTeapot/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusTeapot/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTeapot/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusTeapot val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusTeapot/#parameters",
            "text": "that:  StatusTeapot  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusTeapot/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTeapot/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusTeapot val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusTeapot/#parameters_1",
            "text": "that:  StatusTeapot  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusTeapot/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPreconditionRequired/",
            "text": "StatusPreconditionRequired\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusPreconditionRequired is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusPreconditionRequired val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusPreconditionRequired\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusPreconditionRequired val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusPreconditionRequired\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusPreconditionRequired val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusPreconditionRequired\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusPreconditionRequired"
        },
        {
            "location": "/http-StatusPreconditionRequired/#statuspreconditionrequired",
            "text": "[Source]  primitive val StatusPreconditionRequired is\n  Status val",
            "title": "StatusPreconditionRequired"
        },
        {
            "location": "/http-StatusPreconditionRequired/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusPreconditionRequired/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusPreconditionRequired/#create",
            "text": "[Source]  new val create()\n: StatusPreconditionRequired val^",
            "title": "create"
        },
        {
            "location": "/http-StatusPreconditionRequired/#returns",
            "text": "StatusPreconditionRequired  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPreconditionRequired/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusPreconditionRequired/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusPreconditionRequired/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPreconditionRequired/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusPreconditionRequired/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPreconditionRequired/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusPreconditionRequired val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusPreconditionRequired/#parameters",
            "text": "that:  StatusPreconditionRequired  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusPreconditionRequired/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusPreconditionRequired/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusPreconditionRequired val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusPreconditionRequired/#parameters_1",
            "text": "that:  StatusPreconditionRequired  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusPreconditionRequired/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTooManyRequests/",
            "text": "StatusTooManyRequests\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusTooManyRequests is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusTooManyRequests val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusTooManyRequests\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusTooManyRequests val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusTooManyRequests\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusTooManyRequests val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusTooManyRequests\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusTooManyRequests"
        },
        {
            "location": "/http-StatusTooManyRequests/#statustoomanyrequests",
            "text": "[Source]  primitive val StatusTooManyRequests is\n  Status val",
            "title": "StatusTooManyRequests"
        },
        {
            "location": "/http-StatusTooManyRequests/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusTooManyRequests/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusTooManyRequests/#create",
            "text": "[Source]  new val create()\n: StatusTooManyRequests val^",
            "title": "create"
        },
        {
            "location": "/http-StatusTooManyRequests/#returns",
            "text": "StatusTooManyRequests  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTooManyRequests/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusTooManyRequests/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusTooManyRequests/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTooManyRequests/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusTooManyRequests/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTooManyRequests/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusTooManyRequests val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusTooManyRequests/#parameters",
            "text": "that:  StatusTooManyRequests  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusTooManyRequests/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusTooManyRequests/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusTooManyRequests val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusTooManyRequests/#parameters_1",
            "text": "that:  StatusTooManyRequests  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusTooManyRequests/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/",
            "text": "StatusRequestHeaderFieldsTooLarge\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusRequestHeaderFieldsTooLarge is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusRequestHeaderFieldsTooLarge val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusRequestHeaderFieldsTooLarge\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusRequestHeaderFieldsTooLarge val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusRequestHeaderFieldsTooLarge\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusRequestHeaderFieldsTooLarge val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusRequestHeaderFieldsTooLarge\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusRequestHeaderFieldsTooLarge"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#statusrequestheaderfieldstoolarge",
            "text": "[Source]  primitive val StatusRequestHeaderFieldsTooLarge is\n  Status val",
            "title": "StatusRequestHeaderFieldsTooLarge"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#create",
            "text": "[Source]  new val create()\n: StatusRequestHeaderFieldsTooLarge val^",
            "title": "create"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#returns",
            "text": "StatusRequestHeaderFieldsTooLarge  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusRequestHeaderFieldsTooLarge val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#parameters",
            "text": "that:  StatusRequestHeaderFieldsTooLarge  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusRequestHeaderFieldsTooLarge val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#parameters_1",
            "text": "that:  StatusRequestHeaderFieldsTooLarge  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusRequestHeaderFieldsTooLarge/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/",
            "text": "StatusUnavailableForLegalReasons\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusUnavailableForLegalReasons is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusUnavailableForLegalReasons val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusUnavailableForLegalReasons\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusUnavailableForLegalReasons val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusUnavailableForLegalReasons\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusUnavailableForLegalReasons val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusUnavailableForLegalReasons\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusUnavailableForLegalReasons"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#statusunavailableforlegalreasons",
            "text": "[Source]  primitive val StatusUnavailableForLegalReasons is\n  Status val",
            "title": "StatusUnavailableForLegalReasons"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#create",
            "text": "[Source]  new val create()\n: StatusUnavailableForLegalReasons val^",
            "title": "create"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#returns",
            "text": "StatusUnavailableForLegalReasons  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusUnavailableForLegalReasons val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#parameters",
            "text": "that:  StatusUnavailableForLegalReasons  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusUnavailableForLegalReasons val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#parameters_1",
            "text": "that:  StatusUnavailableForLegalReasons  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusUnavailableForLegalReasons/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusInternalServerError/",
            "text": "StatusInternalServerError\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusInternalServerError is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusInternalServerError val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusInternalServerError\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusInternalServerError val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusInternalServerError\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusInternalServerError val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusInternalServerError\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusInternalServerError"
        },
        {
            "location": "/http-StatusInternalServerError/#statusinternalservererror",
            "text": "[Source]  primitive val StatusInternalServerError is\n  Status val",
            "title": "StatusInternalServerError"
        },
        {
            "location": "/http-StatusInternalServerError/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusInternalServerError/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusInternalServerError/#create",
            "text": "[Source]  new val create()\n: StatusInternalServerError val^",
            "title": "create"
        },
        {
            "location": "/http-StatusInternalServerError/#returns",
            "text": "StatusInternalServerError  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusInternalServerError/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusInternalServerError/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusInternalServerError/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusInternalServerError/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusInternalServerError/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusInternalServerError/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusInternalServerError val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusInternalServerError/#parameters",
            "text": "that:  StatusInternalServerError  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusInternalServerError/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusInternalServerError/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusInternalServerError val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusInternalServerError/#parameters_1",
            "text": "that:  StatusInternalServerError  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusInternalServerError/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotImplemented/",
            "text": "StatusNotImplemented\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusNotImplemented is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusNotImplemented val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusNotImplemented\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusNotImplemented val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNotImplemented\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusNotImplemented val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNotImplemented\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusNotImplemented"
        },
        {
            "location": "/http-StatusNotImplemented/#statusnotimplemented",
            "text": "[Source]  primitive val StatusNotImplemented is\n  Status val",
            "title": "StatusNotImplemented"
        },
        {
            "location": "/http-StatusNotImplemented/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusNotImplemented/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusNotImplemented/#create",
            "text": "[Source]  new val create()\n: StatusNotImplemented val^",
            "title": "create"
        },
        {
            "location": "/http-StatusNotImplemented/#returns",
            "text": "StatusNotImplemented  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotImplemented/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusNotImplemented/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusNotImplemented/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotImplemented/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusNotImplemented/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotImplemented/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusNotImplemented val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusNotImplemented/#parameters",
            "text": "that:  StatusNotImplemented  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNotImplemented/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNotImplemented/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusNotImplemented val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusNotImplemented/#parameters_1",
            "text": "that:  StatusNotImplemented  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNotImplemented/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusBadGateway/",
            "text": "StatusBadGateway\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusBadGateway is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusBadGateway val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusBadGateway\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusBadGateway val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusBadGateway\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusBadGateway val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusBadGateway\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusBadGateway"
        },
        {
            "location": "/http-StatusBadGateway/#statusbadgateway",
            "text": "[Source]  primitive val StatusBadGateway is\n  Status val",
            "title": "StatusBadGateway"
        },
        {
            "location": "/http-StatusBadGateway/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusBadGateway/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusBadGateway/#create",
            "text": "[Source]  new val create()\n: StatusBadGateway val^",
            "title": "create"
        },
        {
            "location": "/http-StatusBadGateway/#returns",
            "text": "StatusBadGateway  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusBadGateway/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusBadGateway/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusBadGateway/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusBadGateway/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusBadGateway/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusBadGateway/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusBadGateway val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusBadGateway/#parameters",
            "text": "that:  StatusBadGateway  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusBadGateway/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusBadGateway/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusBadGateway val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusBadGateway/#parameters_1",
            "text": "that:  StatusBadGateway  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusBadGateway/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusServiceUnavailable/",
            "text": "StatusServiceUnavailable\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusServiceUnavailable is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusServiceUnavailable val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusServiceUnavailable\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusServiceUnavailable val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusServiceUnavailable\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusServiceUnavailable val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusServiceUnavailable\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusServiceUnavailable"
        },
        {
            "location": "/http-StatusServiceUnavailable/#statusserviceunavailable",
            "text": "[Source]  primitive val StatusServiceUnavailable is\n  Status val",
            "title": "StatusServiceUnavailable"
        },
        {
            "location": "/http-StatusServiceUnavailable/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusServiceUnavailable/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusServiceUnavailable/#create",
            "text": "[Source]  new val create()\n: StatusServiceUnavailable val^",
            "title": "create"
        },
        {
            "location": "/http-StatusServiceUnavailable/#returns",
            "text": "StatusServiceUnavailable  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusServiceUnavailable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusServiceUnavailable/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusServiceUnavailable/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusServiceUnavailable/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusServiceUnavailable/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusServiceUnavailable/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusServiceUnavailable val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusServiceUnavailable/#parameters",
            "text": "that:  StatusServiceUnavailable  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusServiceUnavailable/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusServiceUnavailable/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusServiceUnavailable val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusServiceUnavailable/#parameters_1",
            "text": "that:  StatusServiceUnavailable  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusServiceUnavailable/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusGatewayTimeout/",
            "text": "StatusGatewayTimeout\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusGatewayTimeout is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusGatewayTimeout val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusGatewayTimeout\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusGatewayTimeout val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusGatewayTimeout\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusGatewayTimeout val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusGatewayTimeout\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusGatewayTimeout"
        },
        {
            "location": "/http-StatusGatewayTimeout/#statusgatewaytimeout",
            "text": "[Source]  primitive val StatusGatewayTimeout is\n  Status val",
            "title": "StatusGatewayTimeout"
        },
        {
            "location": "/http-StatusGatewayTimeout/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusGatewayTimeout/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusGatewayTimeout/#create",
            "text": "[Source]  new val create()\n: StatusGatewayTimeout val^",
            "title": "create"
        },
        {
            "location": "/http-StatusGatewayTimeout/#returns",
            "text": "StatusGatewayTimeout  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusGatewayTimeout/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusGatewayTimeout/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusGatewayTimeout/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusGatewayTimeout/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusGatewayTimeout/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusGatewayTimeout/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusGatewayTimeout val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusGatewayTimeout/#parameters",
            "text": "that:  StatusGatewayTimeout  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusGatewayTimeout/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusGatewayTimeout/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusGatewayTimeout val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusGatewayTimeout/#parameters_1",
            "text": "that:  StatusGatewayTimeout  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusGatewayTimeout/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/",
            "text": "StatusHTTPVersionNotSupported\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusHTTPVersionNotSupported is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusHTTPVersionNotSupported val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusHTTPVersionNotSupported\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusHTTPVersionNotSupported val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusHTTPVersionNotSupported\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusHTTPVersionNotSupported val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusHTTPVersionNotSupported\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusHTTPVersionNotSupported"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#statushttpversionnotsupported",
            "text": "[Source]  primitive val StatusHTTPVersionNotSupported is\n  Status val",
            "title": "StatusHTTPVersionNotSupported"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#create",
            "text": "[Source]  new val create()\n: StatusHTTPVersionNotSupported val^",
            "title": "create"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#returns",
            "text": "StatusHTTPVersionNotSupported  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusHTTPVersionNotSupported val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#parameters",
            "text": "that:  StatusHTTPVersionNotSupported  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusHTTPVersionNotSupported val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#parameters_1",
            "text": "that:  StatusHTTPVersionNotSupported  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusHTTPVersionNotSupported/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/",
            "text": "StatusNetworkAuthenticationRequired\n\u00b6\n\n\n[Source]\n\n\nprimitive val StatusNetworkAuthenticationRequired is\n  Status val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StatusNetworkAuthenticationRequired val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStatusNetworkAuthenticationRequired\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StatusNetworkAuthenticationRequired val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNetworkAuthenticationRequired\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StatusNetworkAuthenticationRequired val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStatusNetworkAuthenticationRequired\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StatusNetworkAuthenticationRequired"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#statusnetworkauthenticationrequired",
            "text": "[Source]  primitive val StatusNetworkAuthenticationRequired is\n  Status val",
            "title": "StatusNetworkAuthenticationRequired"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#implements",
            "text": "Status  val",
            "title": "Implements"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#create",
            "text": "[Source]  new val create()\n: StatusNetworkAuthenticationRequired val^",
            "title": "create"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#returns",
            "text": "StatusNetworkAuthenticationRequired  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#apply",
            "text": "[Source]  fun box apply()\n: U16 val",
            "title": "apply"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#returns_1",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#string",
            "text": "[Source]  fun box string()\n: String val",
            "title": "string"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#eq",
            "text": "[Source]  fun box eq(\n  that: StatusNetworkAuthenticationRequired val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#parameters",
            "text": "that:  StatusNetworkAuthenticationRequired  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#ne",
            "text": "[Source]  fun box ne(\n  that: StatusNetworkAuthenticationRequired val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#parameters_1",
            "text": "that:  StatusNetworkAuthenticationRequired  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StatusNetworkAuthenticationRequired/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-Logger/",
            "text": "Logger\n\u00b6\n\n\n[Source]\n\n\nHandles logging request/response pairs.\n\n\ninterface val Logger\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: Any tag\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nip: \nString\n val\n\n\nbody_size: \nUSize\n val\n\n\nrequest: \nPayload\n val\n\n\nresponse: \nPayload\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nAny\n tag",
            "title": "interface Logger"
        },
        {
            "location": "/http-Logger/#logger",
            "text": "[Source]  Handles logging request/response pairs.  interface val Logger",
            "title": "Logger"
        },
        {
            "location": "/http-Logger/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-Logger/#apply",
            "text": "[Source]  fun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: Any tag",
            "title": "apply"
        },
        {
            "location": "/http-Logger/#parameters",
            "text": "ip:  String  val  body_size:  USize  val  request:  Payload  val  response:  Payload  val",
            "title": "Parameters"
        },
        {
            "location": "/http-Logger/#returns",
            "text": "Any  tag",
            "title": "Returns"
        },
        {
            "location": "/http-ServerNotify/",
            "text": "ServerNotify\n\u00b6\n\n\n[Source]\n\n\nNotifications about the creation and closing of \nTCPConnection\ns\nwithin HTTP servers.\n\n\ninterface ref ServerNotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlistening\n\u00b6\n\n\n[Source]\n\n\nCalled when we are listening.\n\n\nfun ref listening(\n  server: HTTPServer ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nserver: \nHTTPServer\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nnot_listening\n\u00b6\n\n\n[Source]\n\n\nCalled when we fail to listen.\n\n\nfun ref not_listening(\n  server: HTTPServer ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nserver: \nHTTPServer\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\u00b6\n\n\n[Source]\n\n\nCalled when we stop listening.\n\n\nfun ref closed(\n  server: HTTPServer ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nserver: \nHTTPServer\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface ServerNotify"
        },
        {
            "location": "/http-ServerNotify/#servernotify",
            "text": "[Source]  Notifications about the creation and closing of  TCPConnection s\nwithin HTTP servers.  interface ref ServerNotify",
            "title": "ServerNotify"
        },
        {
            "location": "/http-ServerNotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-ServerNotify/#listening",
            "text": "[Source]  Called when we are listening.  fun ref listening(\n  server: HTTPServer ref)\n: None val",
            "title": "listening"
        },
        {
            "location": "/http-ServerNotify/#parameters",
            "text": "server:  HTTPServer  ref",
            "title": "Parameters"
        },
        {
            "location": "/http-ServerNotify/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-ServerNotify/#not_listening",
            "text": "[Source]  Called when we fail to listen.  fun ref not_listening(\n  server: HTTPServer ref)\n: None val",
            "title": "not_listening"
        },
        {
            "location": "/http-ServerNotify/#parameters_1",
            "text": "server:  HTTPServer  ref",
            "title": "Parameters"
        },
        {
            "location": "/http-ServerNotify/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-ServerNotify/#closed",
            "text": "[Source]  Called when we stop listening.  fun ref closed(\n  server: HTTPServer ref)\n: None val",
            "title": "closed"
        },
        {
            "location": "/http-ServerNotify/#parameters_2",
            "text": "server:  HTTPServer  ref",
            "title": "Parameters"
        },
        {
            "location": "/http-ServerNotify/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPServer/",
            "text": "HTTPServer\n\u00b6\n\n\n[Source]\n\n\nRuns an HTTP server.\n\n\nServer operation\n\u00b6\n\n\nInformation flow into the Server is as follows:\n\n\n\n\n\n\nServer\n listens for incoming TCP connections.\n\n\n\n\n\n\nRequestBuilder\n is the notification class for new connections. It creates\na \nServerConnection\n actor and receives all the raw data from TCP. It uses\nthe \nHTTPParser\n to assemble complete \nPayload\n objects which are passed off\nto the \nServerConnection\n.\n\n\n\n\n\n\nThe \nServerConnection\n actor deals with \ncompletely formed\n requests\nthat have been parsed by the \nHTTPParser\n. This is where requests get\ndispatched to the caller-provided Handler.\n\n\n\n\n\n\nWith streaming content, dispatch to the application's back end Handler\nhas to happen \nbefore\n all of the body has been received. This has to be\ncarefully choreographed because a \nPayload\n is an \niso\n object and can only\nbelong to one actor at a time, yet the \nRequestBuilder\n is running within\nthe \nTCPConnection\n actor while the \nRequestHandler\n is running under the\n\nServerConnection\n actor. Each incoming bufferful of body data, a\n\nByteSeq val\n, is handed off to \nServerConnection\n, to be passed on to the\nback end Handler.\n\n\n\n\n\n\nIt turns out that the issues in sending a request and a response are the\nsame, as are the issues in receiving them. Therefore the same notification\ninterface, \nHTTPHandler\n is used on both ends, and the same sending\ninterface \nHTTPSession\n is used. This makes the code easier to read as well.\n\n\n\n\n\n\nHTTPHandler.apply()\n will be the way the client/server is informed of a\nnew response/request message. All of the headers will be present so that the\nrequest can be dispatched for correct processing. Subsequent calls to a new\nfunction \nHTTPHandler.chunk\n will provide the body data, if any. This\nstream will be terminated by a call to the new function\n\nHTTPHandler.finished\n.\n\n\n\n\n\n\nPipelining of requests is to optimize the transmission of requests over\nslow links (such as over satellites), not to cause simultaneous execution\non the server within one session. Multiple received simple requests (\nGET\n,\n\nHEAD\n, and \nOPTIONS\n) are queued in the server and passed to the back end\napplication one at a time. If a client wants true parallel execution of\nrequests, it should use multiple sessions (which many browsers actually\ndo already).\n\n\n\n\n\n\nSince processing of a streaming response can take a relatively long time,\nacting on additional requests in the meantime does nothing but use up memory\nsince responses would have to be queued. And if the server is being used to\nstream media, it is possible that these additional requests will themselves\ngenerate large responses.  Instead we will just let the requests queue up\nuntil a maximum queue length is reached (a small number) at which point we\nwill back-pressure the inbound TCP stream.\n\n\nactor tag HTTPServer\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a server bound to the given host and service. To do this we\nlisten for incoming TCP connections, with a notification handler\nthat will create a server session actor for each one.\n\n\nnew tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: ServerNotify iso,\n  handler: HandlerFactory val,\n  logger: Logger val = seq,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  sslctx: (SSLContext val | None val) = seq,\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val) = seq)\n: HTTPServer tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPListenAuth\n val)\n\n\nnotify: \nServerNotify\n iso\n\n\nhandler: \nHandlerFactory\n val\n\n\nlogger: \nLogger\n val = seq\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nlimit: \nUSize\n val = seq\n\n\nsslctx: (\nSSLContext\n val | \nNone\n val) = seq\n\n\nreversedns: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val | \n    \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHTTPServer\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\nregister_session\n\u00b6\n\n\n[Source]\n\n\nbe register_session(\n  conn: TCPConnection tag)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\n\n\nunregister_session\n\u00b6\n\n\n[Source]\n\n\nbe unregister_session(\n  conn: TCPConnection tag)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\n\n\nset_handler\n\u00b6\n\n\n[Source]\n\n\nReplace the request handler.\n\n\nbe set_handler(\n  handler: HandlerFactory val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nhandler: \nHandlerFactory\n val\n\n\n\n\n\n\nset_logger\n\u00b6\n\n\n[Source]\n\n\nReplace the logger.\n\n\nbe set_logger(\n  logger: Logger val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlogger: \nLogger\n val\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nShut down the server gracefully. To do this we have to eliminate\nand source of further inputs. So we stop listening for new incoming\nTCP connections, and close any that still exist.\n\n\nbe dispose()\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlocal_address\n\u00b6\n\n\n[Source]\n\n\nReturns the locally bound address.\n\n\nfun box local_address()\n: NetAddress val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNetAddress\n val",
            "title": "actor HTTPServer"
        },
        {
            "location": "/http-HTTPServer/#httpserver",
            "text": "[Source]  Runs an HTTP server.",
            "title": "HTTPServer"
        },
        {
            "location": "/http-HTTPServer/#server-operation",
            "text": "Information flow into the Server is as follows:    Server  listens for incoming TCP connections.    RequestBuilder  is the notification class for new connections. It creates\na  ServerConnection  actor and receives all the raw data from TCP. It uses\nthe  HTTPParser  to assemble complete  Payload  objects which are passed off\nto the  ServerConnection .    The  ServerConnection  actor deals with  completely formed  requests\nthat have been parsed by the  HTTPParser . This is where requests get\ndispatched to the caller-provided Handler.    With streaming content, dispatch to the application's back end Handler\nhas to happen  before  all of the body has been received. This has to be\ncarefully choreographed because a  Payload  is an  iso  object and can only\nbelong to one actor at a time, yet the  RequestBuilder  is running within\nthe  TCPConnection  actor while the  RequestHandler  is running under the ServerConnection  actor. Each incoming bufferful of body data, a ByteSeq val , is handed off to  ServerConnection , to be passed on to the\nback end Handler.    It turns out that the issues in sending a request and a response are the\nsame, as are the issues in receiving them. Therefore the same notification\ninterface,  HTTPHandler  is used on both ends, and the same sending\ninterface  HTTPSession  is used. This makes the code easier to read as well.    HTTPHandler.apply()  will be the way the client/server is informed of a\nnew response/request message. All of the headers will be present so that the\nrequest can be dispatched for correct processing. Subsequent calls to a new\nfunction  HTTPHandler.chunk  will provide the body data, if any. This\nstream will be terminated by a call to the new function HTTPHandler.finished .    Pipelining of requests is to optimize the transmission of requests over\nslow links (such as over satellites), not to cause simultaneous execution\non the server within one session. Multiple received simple requests ( GET , HEAD , and  OPTIONS ) are queued in the server and passed to the back end\napplication one at a time. If a client wants true parallel execution of\nrequests, it should use multiple sessions (which many browsers actually\ndo already).    Since processing of a streaming response can take a relatively long time,\nacting on additional requests in the meantime does nothing but use up memory\nsince responses would have to be queued. And if the server is being used to\nstream media, it is possible that these additional requests will themselves\ngenerate large responses.  Instead we will just let the requests queue up\nuntil a maximum queue length is reached (a small number) at which point we\nwill back-pressure the inbound TCP stream.  actor tag HTTPServer",
            "title": "Server operation"
        },
        {
            "location": "/http-HTTPServer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-HTTPServer/#create",
            "text": "[Source]  Create a server bound to the given host and service. To do this we\nlisten for incoming TCP connections, with a notification handler\nthat will create a server session actor for each one.  new tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: ServerNotify iso,\n  handler: HandlerFactory val,\n  logger: Logger val = seq,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  sslctx: (SSLContext val | None val) = seq,\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val) = seq)\n: HTTPServer tag^",
            "title": "create"
        },
        {
            "location": "/http-HTTPServer/#parameters",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPListenAuth  val)  notify:  ServerNotify  iso  handler:  HandlerFactory  val  logger:  Logger  val = seq  host:  String  val = seq  service:  String  val = seq  limit:  USize  val = seq  sslctx: ( SSLContext  val |  None  val) = seq  reversedns: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val | \n     None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPServer/#returns",
            "text": "HTTPServer  tag^",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPServer/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/http-HTTPServer/#register_session",
            "text": "[Source]  be register_session(\n  conn: TCPConnection tag)",
            "title": "register_session"
        },
        {
            "location": "/http-HTTPServer/#parameters_1",
            "text": "conn:  TCPConnection  tag",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPServer/#unregister_session",
            "text": "[Source]  be unregister_session(\n  conn: TCPConnection tag)",
            "title": "unregister_session"
        },
        {
            "location": "/http-HTTPServer/#parameters_2",
            "text": "conn:  TCPConnection  tag",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPServer/#set_handler",
            "text": "[Source]  Replace the request handler.  be set_handler(\n  handler: HandlerFactory val)",
            "title": "set_handler"
        },
        {
            "location": "/http-HTTPServer/#parameters_3",
            "text": "handler:  HandlerFactory  val",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPServer/#set_logger",
            "text": "[Source]  Replace the logger.  be set_logger(\n  logger: Logger val)",
            "title": "set_logger"
        },
        {
            "location": "/http-HTTPServer/#parameters_4",
            "text": "logger:  Logger  val",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPServer/#dispose",
            "text": "[Source]  Shut down the server gracefully. To do this we have to eliminate\nand source of further inputs. So we stop listening for new incoming\nTCP connections, and close any that still exist.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/http-HTTPServer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-HTTPServer/#local_address",
            "text": "[Source]  Returns the locally bound address.  fun box local_address()\n: NetAddress val",
            "title": "local_address"
        },
        {
            "location": "/http-HTTPServer/#returns_1",
            "text": "NetAddress  val",
            "title": "Returns"
        },
        {
            "location": "/http-ChunkedTransfer/",
            "text": "ChunkedTransfer\n\u00b6\n\n\n[Source]\n\n\nprimitive val ChunkedTransfer\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: ChunkedTransfer val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nChunkedTransfer\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: ChunkedTransfer val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nChunkedTransfer\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: ChunkedTransfer val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nChunkedTransfer\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive ChunkedTransfer"
        },
        {
            "location": "/http-ChunkedTransfer/#chunkedtransfer",
            "text": "[Source]  primitive val ChunkedTransfer",
            "title": "ChunkedTransfer"
        },
        {
            "location": "/http-ChunkedTransfer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-ChunkedTransfer/#create",
            "text": "[Source]  new val create()\n: ChunkedTransfer val^",
            "title": "create"
        },
        {
            "location": "/http-ChunkedTransfer/#returns",
            "text": "ChunkedTransfer  val^",
            "title": "Returns"
        },
        {
            "location": "/http-ChunkedTransfer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-ChunkedTransfer/#eq",
            "text": "[Source]  fun box eq(\n  that: ChunkedTransfer val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-ChunkedTransfer/#parameters",
            "text": "that:  ChunkedTransfer  val",
            "title": "Parameters"
        },
        {
            "location": "/http-ChunkedTransfer/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-ChunkedTransfer/#ne",
            "text": "[Source]  fun box ne(\n  that: ChunkedTransfer val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-ChunkedTransfer/#parameters_1",
            "text": "that:  ChunkedTransfer  val",
            "title": "Parameters"
        },
        {
            "location": "/http-ChunkedTransfer/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StreamTransfer/",
            "text": "StreamTransfer\n\u00b6\n\n\n[Source]\n\n\nprimitive val StreamTransfer\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: StreamTransfer val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStreamTransfer\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: StreamTransfer val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStreamTransfer\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: StreamTransfer val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nStreamTransfer\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive StreamTransfer"
        },
        {
            "location": "/http-StreamTransfer/#streamtransfer",
            "text": "[Source]  primitive val StreamTransfer",
            "title": "StreamTransfer"
        },
        {
            "location": "/http-StreamTransfer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-StreamTransfer/#create",
            "text": "[Source]  new val create()\n: StreamTransfer val^",
            "title": "create"
        },
        {
            "location": "/http-StreamTransfer/#returns",
            "text": "StreamTransfer  val^",
            "title": "Returns"
        },
        {
            "location": "/http-StreamTransfer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-StreamTransfer/#eq",
            "text": "[Source]  fun box eq(\n  that: StreamTransfer val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-StreamTransfer/#parameters",
            "text": "that:  StreamTransfer  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StreamTransfer/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-StreamTransfer/#ne",
            "text": "[Source]  fun box ne(\n  that: StreamTransfer val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-StreamTransfer/#parameters_1",
            "text": "that:  StreamTransfer  val",
            "title": "Parameters"
        },
        {
            "location": "/http-StreamTransfer/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-OneshotTransfer/",
            "text": "OneshotTransfer\n\u00b6\n\n\n[Source]\n\n\nprimitive val OneshotTransfer\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: OneshotTransfer val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nOneshotTransfer\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: OneshotTransfer val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nOneshotTransfer\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: OneshotTransfer val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nOneshotTransfer\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive OneshotTransfer"
        },
        {
            "location": "/http-OneshotTransfer/#oneshottransfer",
            "text": "[Source]  primitive val OneshotTransfer",
            "title": "OneshotTransfer"
        },
        {
            "location": "/http-OneshotTransfer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-OneshotTransfer/#create",
            "text": "[Source]  new val create()\n: OneshotTransfer val^",
            "title": "create"
        },
        {
            "location": "/http-OneshotTransfer/#returns",
            "text": "OneshotTransfer  val^",
            "title": "Returns"
        },
        {
            "location": "/http-OneshotTransfer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-OneshotTransfer/#eq",
            "text": "[Source]  fun box eq(\n  that: OneshotTransfer val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-OneshotTransfer/#parameters",
            "text": "that:  OneshotTransfer  val",
            "title": "Parameters"
        },
        {
            "location": "/http-OneshotTransfer/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-OneshotTransfer/#ne",
            "text": "[Source]  fun box ne(\n  that: OneshotTransfer val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-OneshotTransfer/#parameters_1",
            "text": "that:  OneshotTransfer  val",
            "title": "Parameters"
        },
        {
            "location": "/http-OneshotTransfer/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-TransferMode/",
            "text": "TransferMode\n\u00b6\n\n\n[Source]\n\n\ntype TransferMode is\n  (ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nChunkedTransfer\n val | \nStreamTransfer\n val | \nOneshotTransfer\n val)",
            "title": "type TransferMode"
        },
        {
            "location": "/http-TransferMode/#transfermode",
            "text": "[Source]  type TransferMode is\n  (ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)",
            "title": "TransferMode"
        },
        {
            "location": "/http-TransferMode/#type-alias-for",
            "text": "( ChunkedTransfer  val |  StreamTransfer  val |  OneshotTransfer  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/http-Payload/",
            "text": "Payload\n\u00b6\n\n\n[Source]\n\n\nThis class represent a single HTTP message, which can be either a\n\nrequest\n or a \nresponse\n.\n\n\nTransfer Modes\n\u00b6\n\n\nHTTP provides two ways to encode the transmission of a message 'body',\nof any size. This package supports both of them:\n\n\n\n\n\n\nStreamTransfer\n. This is used for payload bodies where the exact\n  length is known in advance, including most transfers of files. It is\n  selected by calling \nPayload.set_length\n with an integer bytecount.\n  Appication buffer sizes determine how much data is fed to the TCP\n  connection at once, but the total amount must match this size.\n\n\n\n\n\n\nChunkedTransfer\n. This is used when the payload length can not be\n  known in advance, but can be large. It is selected by calling\n  \nPayload.set_length\n with a parameter of \nNone\n. On the TCP link this mode\n  can be detected because there is no \nContent-Length\n header at all, being\n  replaced by the \nTransfer-Encoding: chunked\n header. In addition, the\n  message body is separated into chunks, each with its own bytecount. As with\n  \nStreamTransfer\n mode, transmission can be spread out over time with the\n  difference that it is the original data source that determines the chunk\n  size.\n\n\n\n\n\n\nIf \nPayload.set_length\n is never called at all, a variation on\n  \nStreamTransfer\n called \nOneshotTransfer\n is used. In this case, all of\n  the message body is placed into the message at once, using\n  \nPayload.add_chunk\n calls. The size will be determined when the message is\n  submitted for transmission. Care must be taken not to consume too much\n  memory, especially on a server where there can be multiple messages in\n  transit at once.\n\n\nThe type of transfer being used by an incoming message can be determined\n  from its \ntransfer_mode\n field, which will be one of the\n  \nTransferMode\n types.\n\n\nSequence\n\u00b6\n\n\nFor example, to send a message of possibly large size:\n\n\n\n\nCreate the message with a call to \nPayload.request\n or \nPayload.response\n.\n\n\nSet the \nsession\n field of the message.\n\n\nCall \nPayload.set_length\n to indicate the length of the body.\n\n\nAdd any additional headers that may be required, such as \nContent-type\n.\n\n\nSubmit the message for transmission by calling the either the\n\nHTTPSession.apply\n method (in servers) or the \nHTTPCLient.apply\n method\nin clients.\n\n\nWait for the \nsend_body\n notification.\n\n\nMake any number of calls to \nPayload.send_chunk\n.\n\n\nCall \nPayload.finish\n.\n\n\n\n\nTo send a message of small, reasonable size (say, under 20KB), this\nsimplified method can be used instead:\n\n\n\n\nCreate the message with a call to \nPayload.request\n or \nPayload.response\n.\n\n\nSet the \nsession\n field of the message.\n\n\nAdd any additional headers that may be required, such as \nContent-type\n.\n\n\nCall \nadd_chunk\n one or more times to add body data.\n\n\nSubmit the message for transmission by calling the either the\n\nHTTPSession\n.apply\n method (in servers) or the\n\nHTTPClient\n.apply\n method in clients.\n\n\n\n\nclass trn Payload\n\n\n\n\nConstructors\n\u00b6\n\n\nrequest\n\u00b6\n\n\n[Source]\n\n\nCreate an HTTP \nrequest\n message.\n\n\nnew iso request(\n  method': String val = seq,\n  url': URL val = seq)\n: Payload iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmethod': \nString\n val = seq\n\n\nurl': \nURL\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPayload\n iso^\n\n\n\n\n\n\nresponse\n\u00b6\n\n\n[Source]\n\n\nCreate an HTTP \nresponse\n message.\n\n\nnew iso response(\n  status': Status val = seq)\n: Payload iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstatus': \nStatus\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPayload\n iso^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nvar proto: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nThe HTTP protocol string\n\n\n\n\nvar status: \nU16\n val\n\u00b6\n\n\n[Source]\n\n\nInternal representation of the response \nStatus\n.\n\n\nWill be \n0\n for HTTP requests.\n\n\n\n\nvar method: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nThe HTTP Method.\n\n\nGET\n, \nPOST\n, \nDELETE\n, \nOPTIONS\n, ...\n\n\nFor HTTP responses this will be the status string,\nfor a \n200\n status this will be \n200 OK\n, for \n404\n, \n404 Not Found\n etc..\n\n\n\n\nvar url: \nURL\n val\n\u00b6\n\n\n[Source]\n\n\nThe HTTP request \nURL\n.\nIt will be used for the HTTP path and the \nHost\n header.\nThe \nuser\n and \npassword\n fields are ignored.\n\n\nFor HTTP responses this will be an empty \nURL\n.\n\n\n\n\nvar transfer_mode: (\nChunkedTransfer\n val | \nStreamTransfer\n val | \nOneshotTransfer\n val)\n\u00b6\n\n\n[Source]\n\n\nDetermines the transfer mode of this message.\n\n\nIn case of outgoing requests or responses,\nuse \nset_length\n to control the transfer mode.\n\n\nIn case of incoming requests, this field determines\nhow the request is transferred.\n\n\n\n\nvar session: (\nHTTPSession\n tag | \nNone\n val)\n\u00b6\n\n\n[Source]\n\n\n\n\nvar username: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nThe username extracted from an \nAuthentication\n header of an HTTP request\nreceived via \nHTTPServer\n.\n\n\nThis is not used and not sent using \nHTTPClient\n,\nuse \nupdate\n to set an \nAuthentication\n header instead.\n\n\n\n\nvar password: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nThe password extracted from an \nAuthentication\n header of an HTTP request\nreceived via \nHTTPServer\n.\n\n\nThis is not used and not sent using \nHTTPClient\n,\nuse \nupdate\n to set an \nAuthentication\n header instead.\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nGet a header.\n\n\nfun box apply(\n  key: String val)\n: String val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val ?\n\n\n\n\n\n\nis_safe\n\u00b6\n\n\n[Source]\n\n\nA request method is \"safe\" if it does not modify state in the resource.\nThese methods can be guaranteed not to have any body data.\nReturn true for a safe request method, false otherwise.\n\n\nfun box is_safe()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nbody\n\u00b6\n\n\n[Source]\n\n\nGet the body in \nOneshotTransfer\n mode.\nIn the other modes it raises an error.\n\n\nfun box body()\n: this->Array[(String val | Array[U8 val] val)] ref ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->\nArray\n[(\nString\n val | \nArray\n[\nU8\n val] val)] ref ?\n\n\n\n\n\n\nset_length\n\u00b6\n\n\n[Source]\n\n\nSet the body length when known in advance. This determines the\ntransfer mode that will be used. A parameter of 'None' will use\nChunked Transfer Encoding. A numeric value will use Streamed\ntransfer. Not calling this function at all will\nuse Oneshot transfer.\n\n\nfun ref set_length(\n  bytecount: (USize val | None val))\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbytecount: (\nUSize\n val | \nNone\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nSet any header. If we've already received the header, append the value as a\ncomma separated list, as per RFC 2616 section 4.2.\n\n\nfun ref update(\n  key: String val,\n  value: String val)\n: Payload ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: \nString\n val\n\n\nvalue: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPayload\n ref^\n\n\n\n\n\n\nheaders\n\u00b6\n\n\n[Source]\n\n\nGet all the headers.\n\n\nfun box headers()\n: this->HashMap[String val, String val, HashEq[String val] val] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->\nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] ref\n\n\n\n\n\n\nbody_size\n\u00b6\n\n\n[Source]\n\n\nGet the total intended size of the body.\n\nServerConnection\n accumulates actual size transferred for logging.\n\n\nfun box body_size()\n: (USize val | None val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val | \nNone\n val)\n\n\n\n\n\n\nadd_chunk\n\u00b6\n\n\n[Source]\n\n\nThis is how application code adds data to the body in\n\nOneshotTransfer\n mode. For large bodies, call \nset_length\n\nand use \nsend_chunk\n instead.\n\n\nfun ref add_chunk(\n  data: (String val | Array[U8 val] val))\n: Payload ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPayload\n ref^\n\n\n\n\n\n\nsend_chunk\n\u00b6\n\n\n[Source]\n\n\nThis is how application code sends body data in \nStreamTransfer\n and\n\nChunkedTransfer\n modes. For smaller body lengths, \nadd_chunk\n in\n\nOneshot\n mode can be used instead.\n\n\nfun box send_chunk(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfinish\n\u00b6\n\n\n[Source]\n\n\nMark the end of body transmission. This does not do anything,\nand is unnecessary, in Oneshot mode.\n\n\nfun val finish()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nrespond\n\u00b6\n\n\n[Source]\n\n\nStart sending a response from the server to the client.\n\n\nfun val respond(\n  response': Payload trn)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nresponse': \nPayload\n trn\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhas_body\n\u00b6\n\n\n[Source]\n\n\nDetermines whether a message has a body portion.\n\n\nfun box has_body()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "class Payload"
        },
        {
            "location": "/http-Payload/#payload",
            "text": "[Source]  This class represent a single HTTP message, which can be either a request  or a  response .",
            "title": "Payload"
        },
        {
            "location": "/http-Payload/#transfer-modes",
            "text": "HTTP provides two ways to encode the transmission of a message 'body',\nof any size. This package supports both of them:    StreamTransfer . This is used for payload bodies where the exact\n  length is known in advance, including most transfers of files. It is\n  selected by calling  Payload.set_length  with an integer bytecount.\n  Appication buffer sizes determine how much data is fed to the TCP\n  connection at once, but the total amount must match this size.    ChunkedTransfer . This is used when the payload length can not be\n  known in advance, but can be large. It is selected by calling\n   Payload.set_length  with a parameter of  None . On the TCP link this mode\n  can be detected because there is no  Content-Length  header at all, being\n  replaced by the  Transfer-Encoding: chunked  header. In addition, the\n  message body is separated into chunks, each with its own bytecount. As with\n   StreamTransfer  mode, transmission can be spread out over time with the\n  difference that it is the original data source that determines the chunk\n  size.    If  Payload.set_length  is never called at all, a variation on\n   StreamTransfer  called  OneshotTransfer  is used. In this case, all of\n  the message body is placed into the message at once, using\n   Payload.add_chunk  calls. The size will be determined when the message is\n  submitted for transmission. Care must be taken not to consume too much\n  memory, especially on a server where there can be multiple messages in\n  transit at once.  The type of transfer being used by an incoming message can be determined\n  from its  transfer_mode  field, which will be one of the\n   TransferMode  types.",
            "title": "Transfer Modes"
        },
        {
            "location": "/http-Payload/#sequence",
            "text": "For example, to send a message of possibly large size:   Create the message with a call to  Payload.request  or  Payload.response .  Set the  session  field of the message.  Call  Payload.set_length  to indicate the length of the body.  Add any additional headers that may be required, such as  Content-type .  Submit the message for transmission by calling the either the HTTPSession.apply  method (in servers) or the  HTTPCLient.apply  method\nin clients.  Wait for the  send_body  notification.  Make any number of calls to  Payload.send_chunk .  Call  Payload.finish .   To send a message of small, reasonable size (say, under 20KB), this\nsimplified method can be used instead:   Create the message with a call to  Payload.request  or  Payload.response .  Set the  session  field of the message.  Add any additional headers that may be required, such as  Content-type .  Call  add_chunk  one or more times to add body data.  Submit the message for transmission by calling the either the HTTPSession .apply  method (in servers) or the HTTPClient .apply  method in clients.   class trn Payload",
            "title": "Sequence"
        },
        {
            "location": "/http-Payload/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-Payload/#request",
            "text": "[Source]  Create an HTTP  request  message.  new iso request(\n  method': String val = seq,\n  url': URL val = seq)\n: Payload iso^",
            "title": "request"
        },
        {
            "location": "/http-Payload/#parameters",
            "text": "method':  String  val = seq  url':  URL  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/http-Payload/#returns",
            "text": "Payload  iso^",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#response",
            "text": "[Source]  Create an HTTP  response  message.  new iso response(\n  status': Status val = seq)\n: Payload iso^",
            "title": "response"
        },
        {
            "location": "/http-Payload/#parameters_1",
            "text": "status':  Status  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/http-Payload/#returns_1",
            "text": "Payload  iso^",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/http-Payload/#var-proto-string-val",
            "text": "[Source]  The HTTP protocol string",
            "title": "var proto: String val"
        },
        {
            "location": "/http-Payload/#var-status-u16-val",
            "text": "[Source]  Internal representation of the response  Status .  Will be  0  for HTTP requests.",
            "title": "var status: U16 val"
        },
        {
            "location": "/http-Payload/#var-method-string-val",
            "text": "[Source]  The HTTP Method.  GET ,  POST ,  DELETE ,  OPTIONS , ...  For HTTP responses this will be the status string,\nfor a  200  status this will be  200 OK , for  404 ,  404 Not Found  etc..",
            "title": "var method: String val"
        },
        {
            "location": "/http-Payload/#var-url-url-val",
            "text": "[Source]  The HTTP request  URL .\nIt will be used for the HTTP path and the  Host  header.\nThe  user  and  password  fields are ignored.  For HTTP responses this will be an empty  URL .",
            "title": "var url: URL val"
        },
        {
            "location": "/http-Payload/#var-transfer_mode-chunkedtransfer-val-streamtransfer-val-oneshottransfer-val",
            "text": "[Source]  Determines the transfer mode of this message.  In case of outgoing requests or responses,\nuse  set_length  to control the transfer mode.  In case of incoming requests, this field determines\nhow the request is transferred.",
            "title": "var transfer_mode: (ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)"
        },
        {
            "location": "/http-Payload/#var-session-httpsession-tag-none-val",
            "text": "[Source]",
            "title": "var session: (HTTPSession tag | None val)"
        },
        {
            "location": "/http-Payload/#var-username-string-val",
            "text": "[Source]  The username extracted from an  Authentication  header of an HTTP request\nreceived via  HTTPServer .  This is not used and not sent using  HTTPClient ,\nuse  update  to set an  Authentication  header instead.",
            "title": "var username: String val"
        },
        {
            "location": "/http-Payload/#var-password-string-val",
            "text": "[Source]  The password extracted from an  Authentication  header of an HTTP request\nreceived via  HTTPServer .  This is not used and not sent using  HTTPClient ,\nuse  update  to set an  Authentication  header instead.",
            "title": "var password: String val"
        },
        {
            "location": "/http-Payload/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-Payload/#apply",
            "text": "[Source]  Get a header.  fun box apply(\n  key: String val)\n: String val ?",
            "title": "apply"
        },
        {
            "location": "/http-Payload/#parameters_2",
            "text": "key:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/http-Payload/#returns_2",
            "text": "String  val ?",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#is_safe",
            "text": "[Source]  A request method is \"safe\" if it does not modify state in the resource.\nThese methods can be guaranteed not to have any body data.\nReturn true for a safe request method, false otherwise.  fun box is_safe()\n: Bool val",
            "title": "is_safe"
        },
        {
            "location": "/http-Payload/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#body",
            "text": "[Source]  Get the body in  OneshotTransfer  mode.\nIn the other modes it raises an error.  fun box body()\n: this->Array[(String val | Array[U8 val] val)] ref ?",
            "title": "body"
        },
        {
            "location": "/http-Payload/#returns_4",
            "text": "this-> Array [( String  val |  Array [ U8  val] val)] ref ?",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#set_length",
            "text": "[Source]  Set the body length when known in advance. This determines the\ntransfer mode that will be used. A parameter of 'None' will use\nChunked Transfer Encoding. A numeric value will use Streamed\ntransfer. Not calling this function at all will\nuse Oneshot transfer.  fun ref set_length(\n  bytecount: (USize val | None val))\n: None val",
            "title": "set_length"
        },
        {
            "location": "/http-Payload/#parameters_3",
            "text": "bytecount: ( USize  val |  None  val)",
            "title": "Parameters"
        },
        {
            "location": "/http-Payload/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#update",
            "text": "[Source]  Set any header. If we've already received the header, append the value as a\ncomma separated list, as per RFC 2616 section 4.2.  fun ref update(\n  key: String val,\n  value: String val)\n: Payload ref^",
            "title": "update"
        },
        {
            "location": "/http-Payload/#parameters_4",
            "text": "key:  String  val  value:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/http-Payload/#returns_6",
            "text": "Payload  ref^",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#headers",
            "text": "[Source]  Get all the headers.  fun box headers()\n: this->HashMap[String val, String val, HashEq[String val] val] ref",
            "title": "headers"
        },
        {
            "location": "/http-Payload/#returns_7",
            "text": "this-> HashMap [ String  val,  String  val,  HashEq [ String  val] val] ref",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#body_size",
            "text": "[Source]  Get the total intended size of the body. ServerConnection  accumulates actual size transferred for logging.  fun box body_size()\n: (USize val | None val)",
            "title": "body_size"
        },
        {
            "location": "/http-Payload/#returns_8",
            "text": "( USize  val |  None  val)",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#add_chunk",
            "text": "[Source]  This is how application code adds data to the body in OneshotTransfer  mode. For large bodies, call  set_length \nand use  send_chunk  instead.  fun ref add_chunk(\n  data: (String val | Array[U8 val] val))\n: Payload ref^",
            "title": "add_chunk"
        },
        {
            "location": "/http-Payload/#parameters_5",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/http-Payload/#returns_9",
            "text": "Payload  ref^",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#send_chunk",
            "text": "[Source]  This is how application code sends body data in  StreamTransfer  and ChunkedTransfer  modes. For smaller body lengths,  add_chunk  in Oneshot  mode can be used instead.  fun box send_chunk(\n  data: (String val | Array[U8 val] val))\n: None val",
            "title": "send_chunk"
        },
        {
            "location": "/http-Payload/#parameters_6",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/http-Payload/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#finish",
            "text": "[Source]  Mark the end of body transmission. This does not do anything,\nand is unnecessary, in Oneshot mode.  fun val finish()\n: None val",
            "title": "finish"
        },
        {
            "location": "/http-Payload/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#respond",
            "text": "[Source]  Start sending a response from the server to the client.  fun val respond(\n  response': Payload trn)\n: None val",
            "title": "respond"
        },
        {
            "location": "/http-Payload/#parameters_7",
            "text": "response':  Payload  trn",
            "title": "Parameters"
        },
        {
            "location": "/http-Payload/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-Payload/#has_body",
            "text": "[Source]  Determines whether a message has a body portion.  fun box has_body()\n: Bool val",
            "title": "has_body"
        },
        {
            "location": "/http-Payload/#returns_13",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-MimeTypes/",
            "text": "MimeTypes\n\u00b6\n\n\n[Source]\n\n\nProvide mapping from file names to MIME types.\nTODO load from /etc/mime.types\n\n\nprimitive val MimeTypes\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: MimeTypes val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMimeTypes\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nMapping is based on the file type, following the last period in the name.\n\n\nfun box apply(\n  name: String val)\n: String val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: MimeTypes val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMimeTypes\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: MimeTypes val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nMimeTypes\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive MimeTypes"
        },
        {
            "location": "/http-MimeTypes/#mimetypes",
            "text": "[Source]  Provide mapping from file names to MIME types.\nTODO load from /etc/mime.types  primitive val MimeTypes",
            "title": "MimeTypes"
        },
        {
            "location": "/http-MimeTypes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-MimeTypes/#create",
            "text": "[Source]  new val create()\n: MimeTypes val^",
            "title": "create"
        },
        {
            "location": "/http-MimeTypes/#returns",
            "text": "MimeTypes  val^",
            "title": "Returns"
        },
        {
            "location": "/http-MimeTypes/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-MimeTypes/#apply",
            "text": "[Source]  Mapping is based on the file type, following the last period in the name.  fun box apply(\n  name: String val)\n: String val^",
            "title": "apply"
        },
        {
            "location": "/http-MimeTypes/#parameters",
            "text": "name:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/http-MimeTypes/#returns_1",
            "text": "String  val^",
            "title": "Returns"
        },
        {
            "location": "/http-MimeTypes/#eq",
            "text": "[Source]  fun box eq(\n  that: MimeTypes val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-MimeTypes/#parameters_1",
            "text": "that:  MimeTypes  val",
            "title": "Parameters"
        },
        {
            "location": "/http-MimeTypes/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-MimeTypes/#ne",
            "text": "[Source]  fun box ne(\n  that: MimeTypes val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-MimeTypes/#parameters_2",
            "text": "that:  MimeTypes  val",
            "title": "Parameters"
        },
        {
            "location": "/http-MimeTypes/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPSession/",
            "text": "HTTPSession\n\u00b6\n\n\n[Source]\n\n\nAn HTTP Session is the external API to the communication link\nbetween client and server. A session can only transfer one message\nat a time in each direction. The client and server each have their\nown ways of implementing this interface, but to application code (either\nin the client or in the server 'back end') this interface provides a\ncommon view of how information is passed \ninto\n the \nhttp\n package.\n\n\ninterface tag HTTPSession\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nStart sending a request or response. The \nPayload\n must have all its\nessential fields filled in at this point, because ownership is being\ntransferred to the session actor. This begins an outbound message.\n\n\nbe apply(\n  payload: Payload val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npayload: \nPayload\n val\n\n\n\n\n\n\nfinish\n\u00b6\n\n\n[Source]\n\n\nIndicate that all \noutbound\n \nadd_chunk\n calls have been made and\nsubmission of the HTTP message is complete.\n\n\nbe finish()\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nClose the connection from this end.\n\n\nbe dispose()\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nWrite raw byte stream to the outbound TCP connection.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\ncancel\n\u00b6\n\n\n[Source]\n\n\nTell the session to stop sending an \noutbound\n message.\n\n\nbe cancel(\n  msg: Payload val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmsg: \nPayload\n val",
            "title": "interface HTTPSession"
        },
        {
            "location": "/http-HTTPSession/#httpsession",
            "text": "[Source]  An HTTP Session is the external API to the communication link\nbetween client and server. A session can only transfer one message\nat a time in each direction. The client and server each have their\nown ways of implementing this interface, but to application code (either\nin the client or in the server 'back end') this interface provides a\ncommon view of how information is passed  into  the  http  package.  interface tag HTTPSession",
            "title": "HTTPSession"
        },
        {
            "location": "/http-HTTPSession/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/http-HTTPSession/#apply",
            "text": "[Source]  Start sending a request or response. The  Payload  must have all its\nessential fields filled in at this point, because ownership is being\ntransferred to the session actor. This begins an outbound message.  be apply(\n  payload: Payload val)",
            "title": "apply"
        },
        {
            "location": "/http-HTTPSession/#parameters",
            "text": "payload:  Payload  val",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPSession/#finish",
            "text": "[Source]  Indicate that all  outbound   add_chunk  calls have been made and\nsubmission of the HTTP message is complete.  be finish()",
            "title": "finish"
        },
        {
            "location": "/http-HTTPSession/#dispose",
            "text": "[Source]  Close the connection from this end.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/http-HTTPSession/#write",
            "text": "[Source]  Write raw byte stream to the outbound TCP connection.  be write(\n  data: (String val | Array[U8 val] val))",
            "title": "write"
        },
        {
            "location": "/http-HTTPSession/#parameters_1",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPSession/#cancel",
            "text": "[Source]  Tell the session to stop sending an  outbound  message.  be cancel(\n  msg: Payload val)",
            "title": "cancel"
        },
        {
            "location": "/http-HTTPSession/#parameters_2",
            "text": "msg:  Payload  val",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPHandler/",
            "text": "HTTPHandler\n\u00b6\n\n\n[Source]\n\n\nThis is the interface through which HTTP messages are delivered \nto\n\napplication code. On the server, this will be HTTP Requests (GET,\nHEAD, DELETE, POST, etc) sent from a client. On the client, this will\nbe the HTTP Responses coming back from the server. The protocol is largely\nsymmetrical and the same interface definition is used, though what\nprocessing happens behind the interface will of course vary.\n\n\nThis interface delivers asynchronous events when receiving an HTTP\nmessage (called a \nPayload\n). Calls to these methods are made in\nthe context of the \nHTTPSession\n actor so most of them should be\npassing data on to a processing actor.\n\n\nEach \nHTTPSession\n must have a unique instance of the handler. The\napplication code does not necessarily know when an \nHTTPSession\n is created,\nso the application must provide an instance of \nHandlerFactory\n that\nwill be called at the appropriate time.\n\n\ninterface ref HTTPHandler\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun ref apply(\n  payload: Payload val)\n: Any tag\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npayload: \nPayload\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nAny\n tag\n\n\n\n\n\n\nchunk\n\u00b6\n\n\n[Source]\n\n\nfun ref chunk(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfinished\n\u00b6\n\n\n[Source]\n\n\nfun ref finished()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncancelled\n\u00b6\n\n\n[Source]\n\n\nfun ref cancelled()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nthrottled\n\u00b6\n\n\n[Source]\n\n\nfun ref throttled()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunthrottled\n\u00b6\n\n\n[Source]\n\n\nfun ref unthrottled()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nneed_body\n\u00b6\n\n\n[Source]\n\n\nfun ref need_body()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface HTTPHandler"
        },
        {
            "location": "/http-HTTPHandler/#httphandler",
            "text": "[Source]  This is the interface through which HTTP messages are delivered  to \napplication code. On the server, this will be HTTP Requests (GET,\nHEAD, DELETE, POST, etc) sent from a client. On the client, this will\nbe the HTTP Responses coming back from the server. The protocol is largely\nsymmetrical and the same interface definition is used, though what\nprocessing happens behind the interface will of course vary.  This interface delivers asynchronous events when receiving an HTTP\nmessage (called a  Payload ). Calls to these methods are made in\nthe context of the  HTTPSession  actor so most of them should be\npassing data on to a processing actor.  Each  HTTPSession  must have a unique instance of the handler. The\napplication code does not necessarily know when an  HTTPSession  is created,\nso the application must provide an instance of  HandlerFactory  that\nwill be called at the appropriate time.  interface ref HTTPHandler",
            "title": "HTTPHandler"
        },
        {
            "location": "/http-HTTPHandler/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-HTTPHandler/#apply",
            "text": "[Source]  fun ref apply(\n  payload: Payload val)\n: Any tag",
            "title": "apply"
        },
        {
            "location": "/http-HTTPHandler/#parameters",
            "text": "payload:  Payload  val",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPHandler/#returns",
            "text": "Any  tag",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPHandler/#chunk",
            "text": "[Source]  fun ref chunk(\n  data: (String val | Array[U8 val] val))\n: None val",
            "title": "chunk"
        },
        {
            "location": "/http-HTTPHandler/#parameters_1",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPHandler/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPHandler/#finished",
            "text": "[Source]  fun ref finished()\n: None val",
            "title": "finished"
        },
        {
            "location": "/http-HTTPHandler/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPHandler/#cancelled",
            "text": "[Source]  fun ref cancelled()\n: None val",
            "title": "cancelled"
        },
        {
            "location": "/http-HTTPHandler/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPHandler/#throttled",
            "text": "[Source]  fun ref throttled()\n: None val",
            "title": "throttled"
        },
        {
            "location": "/http-HTTPHandler/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPHandler/#unthrottled",
            "text": "[Source]  fun ref unthrottled()\n: None val",
            "title": "unthrottled"
        },
        {
            "location": "/http-HTTPHandler/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPHandler/#need_body",
            "text": "[Source]  fun ref need_body()\n: None val",
            "title": "need_body"
        },
        {
            "location": "/http-HTTPHandler/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-HandlerFactory/",
            "text": "HandlerFactory\n\u00b6\n\n\n[Source]\n\n\nThe TCP connections that underlie HTTP sessions get created within\nthe \nhttp\n package at times that the application code can not\npredict. Yet, the application code has to provide custom hooks into\nthese connections as they are created. To accomplish this, the\napplication code provides an instance of a \nclass\n that implements\nthis interface.\n\n\nThe \nHandlerFactory.apply\n method will be called when a new\n\nHTTPSession\n is created, giving the application a chance to create\nan instance of its own \nHTTPHandler\n. This happens on both\nclient and server ends.\n\n\ninterface ref HandlerFactory\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nCalled by the \nHTTPSession\n when it needs a new instance of the\napplication's \nHTTPHandler\n. It is suggested that the\n\nsession\n value be passed to the constructor for the new\n\nHTTPHandler\n so that it is available for making\n\nthrottle\n and \nunthrottle\n calls.\n\n\nfun box apply(\n  session: HTTPSession tag)\n: HTTPHandler ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsession: \nHTTPSession\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHTTPHandler\n ref^",
            "title": "interface HandlerFactory"
        },
        {
            "location": "/http-HandlerFactory/#handlerfactory",
            "text": "[Source]  The TCP connections that underlie HTTP sessions get created within\nthe  http  package at times that the application code can not\npredict. Yet, the application code has to provide custom hooks into\nthese connections as they are created. To accomplish this, the\napplication code provides an instance of a  class  that implements\nthis interface.  The  HandlerFactory.apply  method will be called when a new HTTPSession  is created, giving the application a chance to create\nan instance of its own  HTTPHandler . This happens on both\nclient and server ends.  interface ref HandlerFactory",
            "title": "HandlerFactory"
        },
        {
            "location": "/http-HandlerFactory/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-HandlerFactory/#apply",
            "text": "[Source]  Called by the  HTTPSession  when it needs a new instance of the\napplication's  HTTPHandler . It is suggested that the session  value be passed to the constructor for the new HTTPHandler  so that it is available for making throttle  and  unthrottle  calls.  fun box apply(\n  session: HTTPSession tag)\n: HTTPHandler ref^",
            "title": "apply"
        },
        {
            "location": "/http-HandlerFactory/#parameters",
            "text": "session:  HTTPSession  tag",
            "title": "Parameters"
        },
        {
            "location": "/http-HandlerFactory/#returns",
            "text": "HTTPHandler  ref^",
            "title": "Returns"
        },
        {
            "location": "/http-DiscardLog/",
            "text": "DiscardLog\n\u00b6\n\n\n[Source]\n\n\nDoesn't log anything.\n\n\nprimitive val DiscardLog\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: DiscardLog val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDiscardLog\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nip: \nString\n val\n\n\nbody_size: \nUSize\n val\n\n\nrequest: \nPayload\n val\n\n\nresponse: \nPayload\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: DiscardLog val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDiscardLog\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: DiscardLog val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDiscardLog\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive DiscardLog"
        },
        {
            "location": "/http-DiscardLog/#discardlog",
            "text": "[Source]  Doesn't log anything.  primitive val DiscardLog",
            "title": "DiscardLog"
        },
        {
            "location": "/http-DiscardLog/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-DiscardLog/#create",
            "text": "[Source]  new val create()\n: DiscardLog val^",
            "title": "create"
        },
        {
            "location": "/http-DiscardLog/#returns",
            "text": "DiscardLog  val^",
            "title": "Returns"
        },
        {
            "location": "/http-DiscardLog/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-DiscardLog/#apply",
            "text": "[Source]  fun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val",
            "title": "apply"
        },
        {
            "location": "/http-DiscardLog/#parameters",
            "text": "ip:  String  val  body_size:  USize  val  request:  Payload  val  response:  Payload  val",
            "title": "Parameters"
        },
        {
            "location": "/http-DiscardLog/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-DiscardLog/#eq",
            "text": "[Source]  fun box eq(\n  that: DiscardLog val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/http-DiscardLog/#parameters_1",
            "text": "that:  DiscardLog  val",
            "title": "Parameters"
        },
        {
            "location": "/http-DiscardLog/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-DiscardLog/#ne",
            "text": "[Source]  fun box ne(\n  that: DiscardLog val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/http-DiscardLog/#parameters_2",
            "text": "that:  DiscardLog  val",
            "title": "Parameters"
        },
        {
            "location": "/http-DiscardLog/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/http-ContentsLog/",
            "text": "ContentsLog\n\u00b6\n\n\n[Source]\n\n\nLogs the contents of HTTP requests and responses.\n\n\nclass ref ContentsLog is\n  Logger val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nLogger\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  out: OutStream tag)\n: ContentsLog val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nout: \nOutStream\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nContentsLog\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nip: \nString\n val\n\n\nbody_size: \nUSize\n val\n\n\nrequest: \nPayload\n val\n\n\nresponse: \nPayload\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class ContentsLog"
        },
        {
            "location": "/http-ContentsLog/#contentslog",
            "text": "[Source]  Logs the contents of HTTP requests and responses.  class ref ContentsLog is\n  Logger val",
            "title": "ContentsLog"
        },
        {
            "location": "/http-ContentsLog/#implements",
            "text": "Logger  val",
            "title": "Implements"
        },
        {
            "location": "/http-ContentsLog/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-ContentsLog/#create",
            "text": "[Source]  new val create(\n  out: OutStream tag)\n: ContentsLog val^",
            "title": "create"
        },
        {
            "location": "/http-ContentsLog/#parameters",
            "text": "out:  OutStream  tag",
            "title": "Parameters"
        },
        {
            "location": "/http-ContentsLog/#returns",
            "text": "ContentsLog  val^",
            "title": "Returns"
        },
        {
            "location": "/http-ContentsLog/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-ContentsLog/#apply",
            "text": "[Source]  fun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val",
            "title": "apply"
        },
        {
            "location": "/http-ContentsLog/#parameters_1",
            "text": "ip:  String  val  body_size:  USize  val  request:  Payload  val  response:  Payload  val",
            "title": "Parameters"
        },
        {
            "location": "/http-ContentsLog/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-CommonLog/",
            "text": "CommonLog\n\u00b6\n\n\n[Source]\n\n\nLogs HTTP requests in the common log format.\n\n\nclass ref CommonLog is\n  Logger val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nLogger\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  out: OutStream tag)\n: CommonLog val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nout: \nOutStream\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nCommonLog\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nip: \nString\n val\n\n\nbody_size: \nUSize\n val\n\n\nrequest: \nPayload\n val\n\n\nresponse: \nPayload\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class CommonLog"
        },
        {
            "location": "/http-CommonLog/#commonlog",
            "text": "[Source]  Logs HTTP requests in the common log format.  class ref CommonLog is\n  Logger val",
            "title": "CommonLog"
        },
        {
            "location": "/http-CommonLog/#implements",
            "text": "Logger  val",
            "title": "Implements"
        },
        {
            "location": "/http-CommonLog/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-CommonLog/#create",
            "text": "[Source]  new val create(\n  out: OutStream tag)\n: CommonLog val^",
            "title": "create"
        },
        {
            "location": "/http-CommonLog/#parameters",
            "text": "out:  OutStream  tag",
            "title": "Parameters"
        },
        {
            "location": "/http-CommonLog/#returns",
            "text": "CommonLog  val^",
            "title": "Returns"
        },
        {
            "location": "/http-CommonLog/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-CommonLog/#apply",
            "text": "[Source]  fun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val",
            "title": "apply"
        },
        {
            "location": "/http-CommonLog/#parameters_1",
            "text": "ip:  String  val  body_size:  USize  val  request:  Payload  val  response:  Payload  val",
            "title": "Parameters"
        },
        {
            "location": "/http-CommonLog/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPClient/",
            "text": "HTTPClient\n\u00b6\n\n\n[Source]\n\n\nManages a group of HTTP connections on behalf of a client application.\nA client should create one instance of this class.\n\n\nclass ref HTTPClient\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate the context in which all HTTP sessions will originate.\n\n\nnew ref create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  sslctx: (SSLContext val | None val) = seq,\n  pipeline: Bool val = seq)\n: HTTPClient ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPConnectAuth\n val)\n\n\nsslctx: (\nSSLContext\n val | \nNone\n val) = seq\n\n\npipeline: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHTTPClient\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nSchedule a request on an HTTP session. If a new connection is created,\na new instance of the application's Receive Handler will be created\nfor it. A \nval\n copy of the \nPayload\n is returned, and it can not be\nmodified after this point.\nThis is useful in Stream and Chunked transfer modes, so that the\napplication can follow up with calls to \nClient.send_body\n.\n\n\nfun ref apply(\n  request: Payload trn,\n  handlermaker: HandlerFactory val)\n: Payload val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nrequest: \nPayload\n trn\n\n\nhandlermaker: \nHandlerFactory\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPayload\n val ?\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nDisposes the sessions and cancels all pending requests.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsend_body\n\u00b6\n\n\n[Source]\n\n\nfun ref send_body(\n  data: (String val | Array[U8 val] val),\n  session: HTTPSession tag)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\nsession: \nHTTPSession\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class HTTPClient"
        },
        {
            "location": "/http-HTTPClient/#httpclient",
            "text": "[Source]  Manages a group of HTTP connections on behalf of a client application.\nA client should create one instance of this class.  class ref HTTPClient",
            "title": "HTTPClient"
        },
        {
            "location": "/http-HTTPClient/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/http-HTTPClient/#create",
            "text": "[Source]  Create the context in which all HTTP sessions will originate.  new ref create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  sslctx: (SSLContext val | None val) = seq,\n  pipeline: Bool val = seq)\n: HTTPClient ref^",
            "title": "create"
        },
        {
            "location": "/http-HTTPClient/#parameters",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPConnectAuth  val)  sslctx: ( SSLContext  val |  None  val) = seq  pipeline:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPClient/#returns",
            "text": "HTTPClient  ref^",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPClient/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/http-HTTPClient/#apply",
            "text": "[Source]  Schedule a request on an HTTP session. If a new connection is created,\na new instance of the application's Receive Handler will be created\nfor it. A  val  copy of the  Payload  is returned, and it can not be\nmodified after this point.\nThis is useful in Stream and Chunked transfer modes, so that the\napplication can follow up with calls to  Client.send_body .  fun ref apply(\n  request: Payload trn,\n  handlermaker: HandlerFactory val)\n: Payload val ?",
            "title": "apply"
        },
        {
            "location": "/http-HTTPClient/#parameters_1",
            "text": "request:  Payload  trn  handlermaker:  HandlerFactory  val",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPClient/#returns_1",
            "text": "Payload  val ?",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPClient/#dispose",
            "text": "[Source]  Disposes the sessions and cancels all pending requests.  fun ref dispose()\n: None val",
            "title": "dispose"
        },
        {
            "location": "/http-HTTPClient/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/http-HTTPClient/#send_body",
            "text": "[Source]  fun ref send_body(\n  data: (String val | Array[U8 val] val),\n  session: HTTPSession tag)\n: None val",
            "title": "send_body"
        },
        {
            "location": "/http-HTTPClient/#parameters_2",
            "text": "data: ( String  val |  Array [ U8  val] val)  session:  HTTPSession  tag",
            "title": "Parameters"
        },
        {
            "location": "/http-HTTPClient/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/assert--index/",
            "text": "Assert package\n\u00b6\n\n\nContains runtime assertions. If you are looking for assertion that only run\nwhen your code was compiled with the \ndebug\n flag, check out \nAssert\n. For\nassertions that are always enabled, check out \nFact\n.\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive Assert\n\n\nprimitive Fact",
            "title": "Package"
        },
        {
            "location": "/assert--index/#assert-package",
            "text": "Contains runtime assertions. If you are looking for assertion that only run\nwhen your code was compiled with the  debug  flag, check out  Assert . For\nassertions that are always enabled, check out  Fact .",
            "title": "Assert package"
        },
        {
            "location": "/assert--index/#public-types",
            "text": "primitive Assert  primitive Fact",
            "title": "Public Types"
        },
        {
            "location": "/assert-Assert/",
            "text": "Assert\n\u00b6\n\n\n[Source]\n\n\nThis is a debug only assertion. If the test is false, it will print any\nsupplied error message to stderr and raise an error.\n\n\nprimitive val Assert\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Assert val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nAssert\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply(\n  test: Bool val,\n  msg: String val = seq)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntest: \nBool\n val\n\n\nmsg: \nString\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Assert val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAssert\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Assert val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAssert\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Assert"
        },
        {
            "location": "/assert-Assert/#assert",
            "text": "[Source]  This is a debug only assertion. If the test is false, it will print any\nsupplied error message to stderr and raise an error.  primitive val Assert",
            "title": "Assert"
        },
        {
            "location": "/assert-Assert/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/assert-Assert/#create",
            "text": "[Source]  new val create()\n: Assert val^",
            "title": "create"
        },
        {
            "location": "/assert-Assert/#returns",
            "text": "Assert  val^",
            "title": "Returns"
        },
        {
            "location": "/assert-Assert/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/assert-Assert/#apply",
            "text": "[Source]  fun box apply(\n  test: Bool val,\n  msg: String val = seq)\n: None val ?",
            "title": "apply"
        },
        {
            "location": "/assert-Assert/#parameters",
            "text": "test:  Bool  val  msg:  String  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/assert-Assert/#returns_1",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/assert-Assert/#eq",
            "text": "[Source]  fun box eq(\n  that: Assert val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/assert-Assert/#parameters_1",
            "text": "that:  Assert  val",
            "title": "Parameters"
        },
        {
            "location": "/assert-Assert/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/assert-Assert/#ne",
            "text": "[Source]  fun box ne(\n  that: Assert val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/assert-Assert/#parameters_2",
            "text": "that:  Assert  val",
            "title": "Parameters"
        },
        {
            "location": "/assert-Assert/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/assert-Fact/",
            "text": "Fact\n\u00b6\n\n\n[Source]\n\n\nThis is an assertion that is always enabled. If the test is false, it will\nprint any supplied error message to stderr and raise an error.\n\n\nprimitive val Fact\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Fact val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFact\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply(\n  test: Bool val,\n  msg: String val = seq)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntest: \nBool\n val\n\n\nmsg: \nString\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Fact val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFact\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Fact val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFact\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Fact"
        },
        {
            "location": "/assert-Fact/#fact",
            "text": "[Source]  This is an assertion that is always enabled. If the test is false, it will\nprint any supplied error message to stderr and raise an error.  primitive val Fact",
            "title": "Fact"
        },
        {
            "location": "/assert-Fact/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/assert-Fact/#create",
            "text": "[Source]  new val create()\n: Fact val^",
            "title": "create"
        },
        {
            "location": "/assert-Fact/#returns",
            "text": "Fact  val^",
            "title": "Returns"
        },
        {
            "location": "/assert-Fact/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/assert-Fact/#apply",
            "text": "[Source]  fun box apply(\n  test: Bool val,\n  msg: String val = seq)\n: None val ?",
            "title": "apply"
        },
        {
            "location": "/assert-Fact/#parameters",
            "text": "test:  Bool  val  msg:  String  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/assert-Fact/#returns_1",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/assert-Fact/#eq",
            "text": "[Source]  fun box eq(\n  that: Fact val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/assert-Fact/#parameters_1",
            "text": "that:  Fact  val",
            "title": "Parameters"
        },
        {
            "location": "/assert-Fact/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/assert-Fact/#ne",
            "text": "[Source]  fun box ne(\n  that: Fact val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/assert-Fact/#parameters_2",
            "text": "that:  Fact  val",
            "title": "Parameters"
        },
        {
            "location": "/assert-Fact/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/buffered--index/",
            "text": "Buffered Package\n\u00b6\n\n\nThe Buffered package provides two classes, \nWriter\n and \nReader\n, for\nwriting and reading messages using common encodings. These classes are\nuseful when dealing with things like network data and binary file\nformats.\n\n\nExample program\n\u00b6\n\n\nuse \"buffered\"\n\nactor Main\n  new create(env: Env) =>\n    let reader = Reader\n    let writer = Writer\n\n    writer.u32_be(42)\n    writer.f32_be(3.14)\n\n    let b = recover iso Array[U8] end\n\n    for chunk in writer.done().values() do\n      b.append(chunk)\n    end\n\n    reader.append(consume b)\n\n    try\n      env.out.print(reader.u32_be()?.string()) // prints 42\n      env.out.print(reader.f32_be()?.string()) // prints 3.14\n    end\n\n\n\n\nPublic Types\n\u00b6\n\n\n\n\nclass Writer\n\n\nclass Reader",
            "title": "Package"
        },
        {
            "location": "/buffered--index/#buffered-package",
            "text": "The Buffered package provides two classes,  Writer  and  Reader , for\nwriting and reading messages using common encodings. These classes are\nuseful when dealing with things like network data and binary file\nformats.",
            "title": "Buffered Package"
        },
        {
            "location": "/buffered--index/#example-program",
            "text": "use \"buffered\"\n\nactor Main\n  new create(env: Env) =>\n    let reader = Reader\n    let writer = Writer\n\n    writer.u32_be(42)\n    writer.f32_be(3.14)\n\n    let b = recover iso Array[U8] end\n\n    for chunk in writer.done().values() do\n      b.append(chunk)\n    end\n\n    reader.append(consume b)\n\n    try\n      env.out.print(reader.u32_be()?.string()) // prints 42\n      env.out.print(reader.f32_be()?.string()) // prints 3.14\n    end",
            "title": "Example program"
        },
        {
            "location": "/buffered--index/#public-types",
            "text": "class Writer  class Reader",
            "title": "Public Types"
        },
        {
            "location": "/buffered-Writer/",
            "text": "Writer\n\u00b6\n\n\n[Source]\n\n\nA buffer for building messages.\n\n\nWriter\n provides an way to create byte sequences using common\ndata encodings. The \nWriter\n manages the underlying arrays and\nsizes. It is useful for encoding data to send over a network or\nstore in a file. Once a message has been built you can call \ndone()\n\nto get the message's \nByteSeq\ns, and you can then reuse the\n\nWriter\n for creating a new message.\n\n\nFor example, suppose we have a TCP-based network data protocol where\nmessages consist of the following:\n\n\n\n\nmessage_length\n - the number of bytes in the message as a\n  big-endian 32-bit integer\n\n\nlist_size\n - the number of items in the following list of items\n  as a big-endian 32-bit integer\n\n\nzero or more items of the following data:\n\n\na big-endian 64-bit floating point number\n\n\na string that starts with a big-endian 32-bit integer that\n    specifies the length of the string, followed by a number of\n    bytes that represent the string\n\n\n\n\nA message would be something like this:\n\n\n[message_length][list_size][float1][string1][float2][string2]...\n\n\n\n\nThe following program uses a write buffer to encode an array of\ntuples as a message of this type:\n\n\nuse \"buffered\"\n\nactor Main\n  new create(env: Env) =>\n    let wb = Writer\n    let messages = [[(F32(3597.82), \"Anderson\"); (F32(-7979.3), \"Graham\")]\n                    [(F32(3.14159), \"Hopper\"); (F32(-83.83), \"Jones\")]]\n    for items in messages.values() do\n      wb.i32_be((items.size() / 2).i32())\n      for (f, s) in items.values() do\n        wb.f32_be(f)\n        wb.i32_be(s.size().i32())\n        wb.write(s.array())\n      end\n      let wb_msg = Writer\n      wb_msg.i32_be(wb.size().i32())\n      wb_msg.writev(wb.done())\n      env.out.writev(wb_msg.done())\n    end\n\n\n\n\nclass ref Writer\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create()\n: Writer iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nWriter\n iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nreserve_chunks\n\u00b6\n\n\n[Source]\n\n\nReserve space for size' chunks.\n\n\nThis needs to be recalled after every call to \ndone\n\nas \ndone\n resets the chunks.\n\n\nfun ref reserve_chunks(\n  size': USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsize': \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreserve_current\n\u00b6\n\n\n[Source]\n\n\nReserve space for size bytes in \n_current\n.\n\n\nfun ref reserve_current(\n  size': USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsize': \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nWrite a byte to the buffer.\n\n\nfun ref u8(\n  data: U8 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu16_le\n\u00b6\n\n\n[Source]\n\n\nWrite a U16 to the buffer in little-endian byte order.\n\n\nfun ref u16_le(\n  data: U16 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu16_be\n\u00b6\n\n\n[Source]\n\n\nWrite a U16 to the buffer in big-endian byte order.\n\n\nfun ref u16_be(\n  data: U16 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni16_le\n\u00b6\n\n\n[Source]\n\n\nWrite an I16 to the buffer in little-endian byte order.\n\n\nfun ref i16_le(\n  data: I16 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni16_be\n\u00b6\n\n\n[Source]\n\n\nWrite an I16 to the buffer in big-endian byte order.\n\n\nfun ref i16_be(\n  data: I16 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu32_le\n\u00b6\n\n\n[Source]\n\n\nWrite a U32 to the buffer in little-endian byte order.\n\n\nfun ref u32_le(\n  data: U32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu32_be\n\u00b6\n\n\n[Source]\n\n\nWrite a U32 to the buffer in big-endian byte order.\n\n\nfun ref u32_be(\n  data: U32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni32_le\n\u00b6\n\n\n[Source]\n\n\nWrite an I32 to the buffer in little-endian byte order.\n\n\nfun ref i32_le(\n  data: I32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni32_be\n\u00b6\n\n\n[Source]\n\n\nWrite an I32 to the buffer in big-endian byte order.\n\n\nfun ref i32_be(\n  data: I32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nf32_le\n\u00b6\n\n\n[Source]\n\n\nWrite an F32 to the buffer in little-endian byte order.\n\n\nfun ref f32_le(\n  data: F32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nf32_be\n\u00b6\n\n\n[Source]\n\n\nWrite an F32 to the buffer in big-endian byte order.\n\n\nfun ref f32_be(\n  data: F32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu64_le\n\u00b6\n\n\n[Source]\n\n\nWrite a U64 to the buffer in little-endian byte order.\n\n\nfun ref u64_le(\n  data: U64 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu64_be\n\u00b6\n\n\n[Source]\n\n\nWrite a U64 to the buffer in big-endian byte order.\n\n\nfun ref u64_be(\n  data: U64 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni64_le\n\u00b6\n\n\n[Source]\n\n\nWrite an I64 to the buffer in little-endian byte order.\n\n\nfun ref i64_le(\n  data: I64 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni64_be\n\u00b6\n\n\n[Source]\n\n\nWrite an I64 to the buffer in big-endian byte order.\n\n\nfun ref i64_be(\n  data: I64 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nf64_le\n\u00b6\n\n\n[Source]\n\n\nWrite an F64 to the buffer in little-endian byte order.\n\n\nfun ref f64_le(\n  data: F64 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nf64_be\n\u00b6\n\n\n[Source]\n\n\nWrite an F64 to the buffer in big-endian byte order.\n\n\nfun ref f64_be(\n  data: F64 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu128_le\n\u00b6\n\n\n[Source]\n\n\nWrite a U128 to the buffer in little-endian byte order.\n\n\nfun ref u128_le(\n  data: U128 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu128_be\n\u00b6\n\n\n[Source]\n\n\nWrite a U128 to the buffer in big-endian byte order.\n\n\nfun ref u128_be(\n  data: U128 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni128_le\n\u00b6\n\n\n[Source]\n\n\nWrite an I128 to the buffer in little-endian byte order.\n\n\nfun ref i128_le(\n  data: I128 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni128_be\n\u00b6\n\n\n[Source]\n\n\nWrite an I128 to the buffer in big-endian byte order.\n\n\nfun ref i128_be(\n  data: I128 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nWrite a ByteSeq to the buffer.\n\n\nfun ref write(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nwritev\n\u00b6\n\n\n[Source]\n\n\nWrite ByteSeqs to the buffer.\n\n\nfun ref writev(\n  data: ByteSeqIter val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndone\n\u00b6\n\n\n[Source]\n\n\nReturn an array of buffered ByteSeqs and reset the Writer's buffer.\n\n\nfun ref done()\n: Array[(String val | Array[U8 val] val)] iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[(\nString\n val | \nArray\n[\nU8\n val] val)] iso^",
            "title": "class Writer"
        },
        {
            "location": "/buffered-Writer/#writer",
            "text": "[Source]  A buffer for building messages.  Writer  provides an way to create byte sequences using common\ndata encodings. The  Writer  manages the underlying arrays and\nsizes. It is useful for encoding data to send over a network or\nstore in a file. Once a message has been built you can call  done() \nto get the message's  ByteSeq s, and you can then reuse the Writer  for creating a new message.  For example, suppose we have a TCP-based network data protocol where\nmessages consist of the following:   message_length  - the number of bytes in the message as a\n  big-endian 32-bit integer  list_size  - the number of items in the following list of items\n  as a big-endian 32-bit integer  zero or more items of the following data:  a big-endian 64-bit floating point number  a string that starts with a big-endian 32-bit integer that\n    specifies the length of the string, followed by a number of\n    bytes that represent the string   A message would be something like this:  [message_length][list_size][float1][string1][float2][string2]...  The following program uses a write buffer to encode an array of\ntuples as a message of this type:  use \"buffered\"\n\nactor Main\n  new create(env: Env) =>\n    let wb = Writer\n    let messages = [[(F32(3597.82), \"Anderson\"); (F32(-7979.3), \"Graham\")]\n                    [(F32(3.14159), \"Hopper\"); (F32(-83.83), \"Jones\")]]\n    for items in messages.values() do\n      wb.i32_be((items.size() / 2).i32())\n      for (f, s) in items.values() do\n        wb.f32_be(f)\n        wb.i32_be(s.size().i32())\n        wb.write(s.array())\n      end\n      let wb_msg = Writer\n      wb_msg.i32_be(wb.size().i32())\n      wb_msg.writev(wb.done())\n      env.out.writev(wb_msg.done())\n    end  class ref Writer",
            "title": "Writer"
        },
        {
            "location": "/buffered-Writer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/buffered-Writer/#create",
            "text": "[Source]  new iso create()\n: Writer iso^",
            "title": "create"
        },
        {
            "location": "/buffered-Writer/#returns",
            "text": "Writer  iso^",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/buffered-Writer/#reserve_chunks",
            "text": "[Source]  Reserve space for size' chunks.  This needs to be recalled after every call to  done \nas  done  resets the chunks.  fun ref reserve_chunks(\n  size': USize val)\n: None val",
            "title": "reserve_chunks"
        },
        {
            "location": "/buffered-Writer/#parameters",
            "text": "size':  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#reserve_current",
            "text": "[Source]  Reserve space for size bytes in  _current .  fun ref reserve_current(\n  size': USize val)\n: None val",
            "title": "reserve_current"
        },
        {
            "location": "/buffered-Writer/#parameters_1",
            "text": "size':  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#size",
            "text": "[Source]  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/buffered-Writer/#returns_3",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#u8",
            "text": "[Source]  Write a byte to the buffer.  fun ref u8(\n  data: U8 val)\n: None val",
            "title": "u8"
        },
        {
            "location": "/buffered-Writer/#parameters_2",
            "text": "data:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#u16_le",
            "text": "[Source]  Write a U16 to the buffer in little-endian byte order.  fun ref u16_le(\n  data: U16 val)\n: None val",
            "title": "u16_le"
        },
        {
            "location": "/buffered-Writer/#parameters_3",
            "text": "data:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#u16_be",
            "text": "[Source]  Write a U16 to the buffer in big-endian byte order.  fun ref u16_be(\n  data: U16 val)\n: None val",
            "title": "u16_be"
        },
        {
            "location": "/buffered-Writer/#parameters_4",
            "text": "data:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#i16_le",
            "text": "[Source]  Write an I16 to the buffer in little-endian byte order.  fun ref i16_le(\n  data: I16 val)\n: None val",
            "title": "i16_le"
        },
        {
            "location": "/buffered-Writer/#parameters_5",
            "text": "data:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#i16_be",
            "text": "[Source]  Write an I16 to the buffer in big-endian byte order.  fun ref i16_be(\n  data: I16 val)\n: None val",
            "title": "i16_be"
        },
        {
            "location": "/buffered-Writer/#parameters_6",
            "text": "data:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#u32_le",
            "text": "[Source]  Write a U32 to the buffer in little-endian byte order.  fun ref u32_le(\n  data: U32 val)\n: None val",
            "title": "u32_le"
        },
        {
            "location": "/buffered-Writer/#parameters_7",
            "text": "data:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#u32_be",
            "text": "[Source]  Write a U32 to the buffer in big-endian byte order.  fun ref u32_be(\n  data: U32 val)\n: None val",
            "title": "u32_be"
        },
        {
            "location": "/buffered-Writer/#parameters_8",
            "text": "data:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#i32_le",
            "text": "[Source]  Write an I32 to the buffer in little-endian byte order.  fun ref i32_le(\n  data: I32 val)\n: None val",
            "title": "i32_le"
        },
        {
            "location": "/buffered-Writer/#parameters_9",
            "text": "data:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#i32_be",
            "text": "[Source]  Write an I32 to the buffer in big-endian byte order.  fun ref i32_be(\n  data: I32 val)\n: None val",
            "title": "i32_be"
        },
        {
            "location": "/buffered-Writer/#parameters_10",
            "text": "data:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#f32_le",
            "text": "[Source]  Write an F32 to the buffer in little-endian byte order.  fun ref f32_le(\n  data: F32 val)\n: None val",
            "title": "f32_le"
        },
        {
            "location": "/buffered-Writer/#parameters_11",
            "text": "data:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#f32_be",
            "text": "[Source]  Write an F32 to the buffer in big-endian byte order.  fun ref f32_be(\n  data: F32 val)\n: None val",
            "title": "f32_be"
        },
        {
            "location": "/buffered-Writer/#parameters_12",
            "text": "data:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_14",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#u64_le",
            "text": "[Source]  Write a U64 to the buffer in little-endian byte order.  fun ref u64_le(\n  data: U64 val)\n: None val",
            "title": "u64_le"
        },
        {
            "location": "/buffered-Writer/#parameters_13",
            "text": "data:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_15",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#u64_be",
            "text": "[Source]  Write a U64 to the buffer in big-endian byte order.  fun ref u64_be(\n  data: U64 val)\n: None val",
            "title": "u64_be"
        },
        {
            "location": "/buffered-Writer/#parameters_14",
            "text": "data:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_16",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#i64_le",
            "text": "[Source]  Write an I64 to the buffer in little-endian byte order.  fun ref i64_le(\n  data: I64 val)\n: None val",
            "title": "i64_le"
        },
        {
            "location": "/buffered-Writer/#parameters_15",
            "text": "data:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_17",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#i64_be",
            "text": "[Source]  Write an I64 to the buffer in big-endian byte order.  fun ref i64_be(\n  data: I64 val)\n: None val",
            "title": "i64_be"
        },
        {
            "location": "/buffered-Writer/#parameters_16",
            "text": "data:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_18",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#f64_le",
            "text": "[Source]  Write an F64 to the buffer in little-endian byte order.  fun ref f64_le(\n  data: F64 val)\n: None val",
            "title": "f64_le"
        },
        {
            "location": "/buffered-Writer/#parameters_17",
            "text": "data:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_19",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#f64_be",
            "text": "[Source]  Write an F64 to the buffer in big-endian byte order.  fun ref f64_be(\n  data: F64 val)\n: None val",
            "title": "f64_be"
        },
        {
            "location": "/buffered-Writer/#parameters_18",
            "text": "data:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_20",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#u128_le",
            "text": "[Source]  Write a U128 to the buffer in little-endian byte order.  fun ref u128_le(\n  data: U128 val)\n: None val",
            "title": "u128_le"
        },
        {
            "location": "/buffered-Writer/#parameters_19",
            "text": "data:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_21",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#u128_be",
            "text": "[Source]  Write a U128 to the buffer in big-endian byte order.  fun ref u128_be(\n  data: U128 val)\n: None val",
            "title": "u128_be"
        },
        {
            "location": "/buffered-Writer/#parameters_20",
            "text": "data:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_22",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#i128_le",
            "text": "[Source]  Write an I128 to the buffer in little-endian byte order.  fun ref i128_le(\n  data: I128 val)\n: None val",
            "title": "i128_le"
        },
        {
            "location": "/buffered-Writer/#parameters_21",
            "text": "data:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_23",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#i128_be",
            "text": "[Source]  Write an I128 to the buffer in big-endian byte order.  fun ref i128_be(\n  data: I128 val)\n: None val",
            "title": "i128_be"
        },
        {
            "location": "/buffered-Writer/#parameters_22",
            "text": "data:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_24",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#write",
            "text": "[Source]  Write a ByteSeq to the buffer.  fun ref write(\n  data: (String val | Array[U8 val] val))\n: None val",
            "title": "write"
        },
        {
            "location": "/buffered-Writer/#parameters_23",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_25",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#writev",
            "text": "[Source]  Write ByteSeqs to the buffer.  fun ref writev(\n  data: ByteSeqIter val)\n: None val",
            "title": "writev"
        },
        {
            "location": "/buffered-Writer/#parameters_24",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Writer/#returns_26",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Writer/#done",
            "text": "[Source]  Return an array of buffered ByteSeqs and reset the Writer's buffer.  fun ref done()\n: Array[(String val | Array[U8 val] val)] iso^",
            "title": "done"
        },
        {
            "location": "/buffered-Writer/#returns_27",
            "text": "Array [( String  val |  Array [ U8  val] val)] iso^",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/",
            "text": "Reader\n\u00b6\n\n\n[Source]\n\n\nStore network data and provide a parsing interface.\n\n\nReader\n provides a way to extract typed data from a sequence of\nbytes. The \nReader\n manages the underlying data structures to\nprovide a read cursor over a contiguous sequence of bytes. It is\nuseful for decoding data that is received over a network or stored\nin a file. Chunk of bytes are added to the \nReader\n using the\n\nappend\n method, and typed data is extracted using the getter\nmethods.\n\n\nFor example, suppose we have a UDP-based network data protocol where\nmessages consist of the following:\n\n\n\n\nlist_size\n - the number of items in the following list of items\n  as a big-endian 32-bit integer\n\n\nzero or more items of the following data:\n\n\na big-endian 64-bit floating point number\n\n\na string that starts with a big-endian 32-bit integer that\n    specifies the length of the string, followed by a number of\n    bytes that represent the string\n\n\n\n\nA message would be something like this:\n\n\n[message_length][list_size][float1][string1][float2][string2]...\n\n\n\n\nThe following program uses a \nReader\n to decode a message of\nthis type and print them:\n\n\nuse \"buffered\"\nuse \"collections\"\n\nclass Notify is InputNotify\n  let _env: Env\n  new create(env: Env) =>\n    _env = env\n  fun ref apply(data: Array[U8] iso) =>\n    let rb = Reader\n    rb.append(consume data)\n    try\n      while true do\n        let len = rb.i32_be()?\n        let items = rb.i32_be()?.usize()\n        for range in Range(0, items) do\n          let f = rb.f32_be()?\n          let str_len = rb.i32_be()?.usize()\n          let str = String.from_array(rb.block(str_len)?)\n          _env.out.print(\"[(\" + f.string() + \"), (\" + str + \")]\")\n        end\n      end\n    end\n\nactor Main\n  new create(env: Env) =>\n    env.input(recover Notify(env) end, 1024)\n\n\n\n\nclass ref Reader\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create()\n: Reader iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReader\n iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturn the number of available bytes.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nDiscard all pending data.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nappend\n\u00b6\n\n\n[Source]\n\n\nAdd a chunk of data.\n\n\nfun ref append(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nskip\n\u00b6\n\n\n[Source]\n\n\nSkip n bytes.\n\n\nfun ref skip(\n  n: USize val)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nblock\n\u00b6\n\n\n[Source]\n\n\nReturn a block as a contiguous chunk of memory.\nWill throw an error if you request a block larger than what is currently\nstored in the \nReader\n.\n\n\nfun ref block(\n  len: USize val)\n: Array[U8 val] iso^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nU8\n val] iso^ ?\n\n\n\n\n\n\nread_until\n\u00b6\n\n\n[Source]\n\n\nFind the first occurrence of the separator and return the block of bytes\nbefore its position. The separator is not included in the returned array,\nbut it is removed from the buffer. To read a line of text, prefer line()\nthat handles \\n and \\r\\n.\n\n\nfun ref read_until(\n  separator: U8 val)\n: Array[U8 val] iso^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseparator: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nU8\n val] iso^ ?\n\n\n\n\n\n\nline\n\u00b6\n\n\n[Source]\n\n\nReturn a \\n or \\r\\n terminated line as a string. The newline is not\nincluded in the returned string, but it is removed from the network buffer.\n\n\nfun ref line()\n: String iso^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^ ?\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nGet a U8. Raise an error if there isn't enough data.\n\n\nfun ref u8()\n: U8 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nGet an I8.\n\n\nfun ref i8()\n: I8 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val ?\n\n\n\n\n\n\nu16_be\n\u00b6\n\n\n[Source]\n\n\nGet a big-endian U16.\n\n\nfun ref u16_be()\n: U16 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\nu16_le\n\u00b6\n\n\n[Source]\n\n\nGet a little-endian U16.\n\n\nfun ref u16_le()\n: U16 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\ni16_be\n\u00b6\n\n\n[Source]\n\n\nGet a big-endian I16.\n\n\nfun ref i16_be()\n: I16 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\ni16_le\n\u00b6\n\n\n[Source]\n\n\nGet a little-endian I16.\n\n\nfun ref i16_le()\n: I16 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\nu32_be\n\u00b6\n\n\n[Source]\n\n\nGet a big-endian U32.\n\n\nfun ref u32_be()\n: U32 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\nu32_le\n\u00b6\n\n\n[Source]\n\n\nGet a little-endian U32.\n\n\nfun ref u32_le()\n: U32 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\ni32_be\n\u00b6\n\n\n[Source]\n\n\nGet a big-endian I32.\n\n\nfun ref i32_be()\n: I32 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\ni32_le\n\u00b6\n\n\n[Source]\n\n\nGet a little-endian I32.\n\n\nfun ref i32_le()\n: I32 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\nu64_be\n\u00b6\n\n\n[Source]\n\n\nGet a big-endian U64.\n\n\nfun ref u64_be()\n: U64 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\nu64_le\n\u00b6\n\n\n[Source]\n\n\nGet a little-endian U64.\n\n\nfun ref u64_le()\n: U64 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\ni64_be\n\u00b6\n\n\n[Source]\n\n\nGet a big-endian I64.\n\n\nfun ref i64_be()\n: I64 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\ni64_le\n\u00b6\n\n\n[Source]\n\n\nGet a little-endian I64.\n\n\nfun ref i64_le()\n: I64 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\nu128_be\n\u00b6\n\n\n[Source]\n\n\nGet a big-endian U128.\n\n\nfun ref u128_be()\n: U128 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\nu128_le\n\u00b6\n\n\n[Source]\n\n\nGet a little-endian U128.\n\n\nfun ref u128_le()\n: U128 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\ni128_be\n\u00b6\n\n\n[Source]\n\n\nGet a big-endian I129.\n\n\nfun ref i128_be()\n: I128 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\ni128_le\n\u00b6\n\n\n[Source]\n\n\nGet a little-endian I128.\n\n\nfun ref i128_le()\n: I128 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\nf32_be\n\u00b6\n\n\n[Source]\n\n\nGet a big-endian F32.\n\n\nfun ref f32_be()\n: F32 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val ?\n\n\n\n\n\n\nf32_le\n\u00b6\n\n\n[Source]\n\n\nGet a little-endian F32.\n\n\nfun ref f32_le()\n: F32 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val ?\n\n\n\n\n\n\nf64_be\n\u00b6\n\n\n[Source]\n\n\nGet a big-endian F64.\n\n\nfun ref f64_be()\n: F64 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val ?\n\n\n\n\n\n\nf64_le\n\u00b6\n\n\n[Source]\n\n\nGet a little-endian F64.\n\n\nfun ref f64_le()\n: F64 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val ?\n\n\n\n\n\n\npeek_u8\n\u00b6\n\n\n[Source]\n\n\nPeek at a U8 at the given offset. Raise an error if there isn't enough\ndata.\n\n\nfun box peek_u8(\n  offset: USize val = seq)\n: U8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\npeek_i8\n\u00b6\n\n\n[Source]\n\n\nPeek at an I8.\n\n\nfun box peek_i8(\n  offset: USize val = seq)\n: I8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val ?\n\n\n\n\n\n\npeek_u16_be\n\u00b6\n\n\n[Source]\n\n\nPeek at a big-endian U16.\n\n\nfun box peek_u16_be(\n  offset: USize val = seq)\n: U16 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\npeek_u16_le\n\u00b6\n\n\n[Source]\n\n\nPeek at a little-endian U16.\n\n\nfun box peek_u16_le(\n  offset: USize val = seq)\n: U16 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\npeek_i16_be\n\u00b6\n\n\n[Source]\n\n\nPeek at a big-endian I16.\n\n\nfun box peek_i16_be(\n  offset: USize val = seq)\n: I16 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\npeek_i16_le\n\u00b6\n\n\n[Source]\n\n\nPeek at a little-endian I16.\n\n\nfun box peek_i16_le(\n  offset: USize val = seq)\n: I16 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\npeek_u32_be\n\u00b6\n\n\n[Source]\n\n\nPeek at a big-endian U32.\n\n\nfun box peek_u32_be(\n  offset: USize val = seq)\n: U32 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\npeek_u32_le\n\u00b6\n\n\n[Source]\n\n\nPeek at a little-endian U32.\n\n\nfun box peek_u32_le(\n  offset: USize val = seq)\n: U32 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\npeek_i32_be\n\u00b6\n\n\n[Source]\n\n\nPeek at a big-endian I32.\n\n\nfun box peek_i32_be(\n  offset: USize val = seq)\n: I32 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\npeek_i32_le\n\u00b6\n\n\n[Source]\n\n\nPeek at a little-endian I32.\n\n\nfun box peek_i32_le(\n  offset: USize val = seq)\n: I32 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\npeek_u64_be\n\u00b6\n\n\n[Source]\n\n\nPeek at a big-endian U64.\n\n\nfun box peek_u64_be(\n  offset: USize val = seq)\n: U64 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\npeek_u64_le\n\u00b6\n\n\n[Source]\n\n\nPeek at a little-endian U64.\n\n\nfun box peek_u64_le(\n  offset: USize val = seq)\n: U64 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\npeek_i64_be\n\u00b6\n\n\n[Source]\n\n\nPeek at a big-endian I64.\n\n\nfun box peek_i64_be(\n  offset: USize val = seq)\n: I64 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\npeek_i64_le\n\u00b6\n\n\n[Source]\n\n\nPeek at a little-endian I64.\n\n\nfun box peek_i64_le(\n  offset: USize val = seq)\n: I64 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\npeek_u128_be\n\u00b6\n\n\n[Source]\n\n\nPeek at a big-endian U128.\n\n\nfun box peek_u128_be(\n  offset: USize val = seq)\n: U128 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\npeek_u128_le\n\u00b6\n\n\n[Source]\n\n\nPeek at a little-endian U128.\n\n\nfun box peek_u128_le(\n  offset: USize val = seq)\n: U128 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\npeek_i128_be\n\u00b6\n\n\n[Source]\n\n\nPeek at a big-endian I129.\n\n\nfun box peek_i128_be(\n  offset: USize val = seq)\n: I128 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\npeek_i128_le\n\u00b6\n\n\n[Source]\n\n\nPeek at a little-endian I128.\n\n\nfun box peek_i128_le(\n  offset: USize val = seq)\n: I128 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\npeek_f32_be\n\u00b6\n\n\n[Source]\n\n\nPeek at a big-endian F32.\n\n\nfun box peek_f32_be(\n  offset: USize val = seq)\n: F32 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val ?\n\n\n\n\n\n\npeek_f32_le\n\u00b6\n\n\n[Source]\n\n\nPeek at a little-endian F32.\n\n\nfun box peek_f32_le(\n  offset: USize val = seq)\n: F32 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val ?\n\n\n\n\n\n\npeek_f64_be\n\u00b6\n\n\n[Source]\n\n\nPeek at a big-endian F64.\n\n\nfun box peek_f64_be(\n  offset: USize val = seq)\n: F64 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val ?\n\n\n\n\n\n\npeek_f64_le\n\u00b6\n\n\n[Source]\n\n\nPeek at a little-endian F64.\n\n\nfun box peek_f64_le(\n  offset: USize val = seq)\n: F64 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val ?",
            "title": "class Reader"
        },
        {
            "location": "/buffered-Reader/#reader",
            "text": "[Source]  Store network data and provide a parsing interface.  Reader  provides a way to extract typed data from a sequence of\nbytes. The  Reader  manages the underlying data structures to\nprovide a read cursor over a contiguous sequence of bytes. It is\nuseful for decoding data that is received over a network or stored\nin a file. Chunk of bytes are added to the  Reader  using the append  method, and typed data is extracted using the getter\nmethods.  For example, suppose we have a UDP-based network data protocol where\nmessages consist of the following:   list_size  - the number of items in the following list of items\n  as a big-endian 32-bit integer  zero or more items of the following data:  a big-endian 64-bit floating point number  a string that starts with a big-endian 32-bit integer that\n    specifies the length of the string, followed by a number of\n    bytes that represent the string   A message would be something like this:  [message_length][list_size][float1][string1][float2][string2]...  The following program uses a  Reader  to decode a message of\nthis type and print them:  use \"buffered\"\nuse \"collections\"\n\nclass Notify is InputNotify\n  let _env: Env\n  new create(env: Env) =>\n    _env = env\n  fun ref apply(data: Array[U8] iso) =>\n    let rb = Reader\n    rb.append(consume data)\n    try\n      while true do\n        let len = rb.i32_be()?\n        let items = rb.i32_be()?.usize()\n        for range in Range(0, items) do\n          let f = rb.f32_be()?\n          let str_len = rb.i32_be()?.usize()\n          let str = String.from_array(rb.block(str_len)?)\n          _env.out.print(\"[(\" + f.string() + \"), (\" + str + \")]\")\n        end\n      end\n    end\n\nactor Main\n  new create(env: Env) =>\n    env.input(recover Notify(env) end, 1024)  class ref Reader",
            "title": "Reader"
        },
        {
            "location": "/buffered-Reader/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/buffered-Reader/#create",
            "text": "[Source]  new iso create()\n: Reader iso^",
            "title": "create"
        },
        {
            "location": "/buffered-Reader/#returns",
            "text": "Reader  iso^",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/buffered-Reader/#size",
            "text": "[Source]  Return the number of available bytes.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/buffered-Reader/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#clear",
            "text": "[Source]  Discard all pending data.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/buffered-Reader/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#append",
            "text": "[Source]  Add a chunk of data.  fun ref append(\n  data: (String val | Array[U8 val] val))\n: None val",
            "title": "append"
        },
        {
            "location": "/buffered-Reader/#parameters",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#skip",
            "text": "[Source]  Skip n bytes.  fun ref skip(\n  n: USize val)\n: None val ?",
            "title": "skip"
        },
        {
            "location": "/buffered-Reader/#parameters_1",
            "text": "n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_4",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#block",
            "text": "[Source]  Return a block as a contiguous chunk of memory.\nWill throw an error if you request a block larger than what is currently\nstored in the  Reader .  fun ref block(\n  len: USize val)\n: Array[U8 val] iso^ ?",
            "title": "block"
        },
        {
            "location": "/buffered-Reader/#parameters_2",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_5",
            "text": "Array [ U8  val] iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#read_until",
            "text": "[Source]  Find the first occurrence of the separator and return the block of bytes\nbefore its position. The separator is not included in the returned array,\nbut it is removed from the buffer. To read a line of text, prefer line()\nthat handles \\n and \\r\\n.  fun ref read_until(\n  separator: U8 val)\n: Array[U8 val] iso^ ?",
            "title": "read_until"
        },
        {
            "location": "/buffered-Reader/#parameters_3",
            "text": "separator:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_6",
            "text": "Array [ U8  val] iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#line",
            "text": "[Source]  Return a \\n or \\r\\n terminated line as a string. The newline is not\nincluded in the returned string, but it is removed from the network buffer.  fun ref line()\n: String iso^ ?",
            "title": "line"
        },
        {
            "location": "/buffered-Reader/#returns_7",
            "text": "String  iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#u8",
            "text": "[Source]  Get a U8. Raise an error if there isn't enough data.  fun ref u8()\n: U8 val ?",
            "title": "u8"
        },
        {
            "location": "/buffered-Reader/#returns_8",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#i8",
            "text": "[Source]  Get an I8.  fun ref i8()\n: I8 val ?",
            "title": "i8"
        },
        {
            "location": "/buffered-Reader/#returns_9",
            "text": "I8  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#u16_be",
            "text": "[Source]  Get a big-endian U16.  fun ref u16_be()\n: U16 val ?",
            "title": "u16_be"
        },
        {
            "location": "/buffered-Reader/#returns_10",
            "text": "U16  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#u16_le",
            "text": "[Source]  Get a little-endian U16.  fun ref u16_le()\n: U16 val ?",
            "title": "u16_le"
        },
        {
            "location": "/buffered-Reader/#returns_11",
            "text": "U16  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#i16_be",
            "text": "[Source]  Get a big-endian I16.  fun ref i16_be()\n: I16 val ?",
            "title": "i16_be"
        },
        {
            "location": "/buffered-Reader/#returns_12",
            "text": "I16  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#i16_le",
            "text": "[Source]  Get a little-endian I16.  fun ref i16_le()\n: I16 val ?",
            "title": "i16_le"
        },
        {
            "location": "/buffered-Reader/#returns_13",
            "text": "I16  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#u32_be",
            "text": "[Source]  Get a big-endian U32.  fun ref u32_be()\n: U32 val ?",
            "title": "u32_be"
        },
        {
            "location": "/buffered-Reader/#returns_14",
            "text": "U32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#u32_le",
            "text": "[Source]  Get a little-endian U32.  fun ref u32_le()\n: U32 val ?",
            "title": "u32_le"
        },
        {
            "location": "/buffered-Reader/#returns_15",
            "text": "U32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#i32_be",
            "text": "[Source]  Get a big-endian I32.  fun ref i32_be()\n: I32 val ?",
            "title": "i32_be"
        },
        {
            "location": "/buffered-Reader/#returns_16",
            "text": "I32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#i32_le",
            "text": "[Source]  Get a little-endian I32.  fun ref i32_le()\n: I32 val ?",
            "title": "i32_le"
        },
        {
            "location": "/buffered-Reader/#returns_17",
            "text": "I32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#u64_be",
            "text": "[Source]  Get a big-endian U64.  fun ref u64_be()\n: U64 val ?",
            "title": "u64_be"
        },
        {
            "location": "/buffered-Reader/#returns_18",
            "text": "U64  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#u64_le",
            "text": "[Source]  Get a little-endian U64.  fun ref u64_le()\n: U64 val ?",
            "title": "u64_le"
        },
        {
            "location": "/buffered-Reader/#returns_19",
            "text": "U64  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#i64_be",
            "text": "[Source]  Get a big-endian I64.  fun ref i64_be()\n: I64 val ?",
            "title": "i64_be"
        },
        {
            "location": "/buffered-Reader/#returns_20",
            "text": "I64  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#i64_le",
            "text": "[Source]  Get a little-endian I64.  fun ref i64_le()\n: I64 val ?",
            "title": "i64_le"
        },
        {
            "location": "/buffered-Reader/#returns_21",
            "text": "I64  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#u128_be",
            "text": "[Source]  Get a big-endian U128.  fun ref u128_be()\n: U128 val ?",
            "title": "u128_be"
        },
        {
            "location": "/buffered-Reader/#returns_22",
            "text": "U128  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#u128_le",
            "text": "[Source]  Get a little-endian U128.  fun ref u128_le()\n: U128 val ?",
            "title": "u128_le"
        },
        {
            "location": "/buffered-Reader/#returns_23",
            "text": "U128  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#i128_be",
            "text": "[Source]  Get a big-endian I129.  fun ref i128_be()\n: I128 val ?",
            "title": "i128_be"
        },
        {
            "location": "/buffered-Reader/#returns_24",
            "text": "I128  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#i128_le",
            "text": "[Source]  Get a little-endian I128.  fun ref i128_le()\n: I128 val ?",
            "title": "i128_le"
        },
        {
            "location": "/buffered-Reader/#returns_25",
            "text": "I128  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#f32_be",
            "text": "[Source]  Get a big-endian F32.  fun ref f32_be()\n: F32 val ?",
            "title": "f32_be"
        },
        {
            "location": "/buffered-Reader/#returns_26",
            "text": "F32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#f32_le",
            "text": "[Source]  Get a little-endian F32.  fun ref f32_le()\n: F32 val ?",
            "title": "f32_le"
        },
        {
            "location": "/buffered-Reader/#returns_27",
            "text": "F32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#f64_be",
            "text": "[Source]  Get a big-endian F64.  fun ref f64_be()\n: F64 val ?",
            "title": "f64_be"
        },
        {
            "location": "/buffered-Reader/#returns_28",
            "text": "F64  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#f64_le",
            "text": "[Source]  Get a little-endian F64.  fun ref f64_le()\n: F64 val ?",
            "title": "f64_le"
        },
        {
            "location": "/buffered-Reader/#returns_29",
            "text": "F64  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_u8",
            "text": "[Source]  Peek at a U8 at the given offset. Raise an error if there isn't enough\ndata.  fun box peek_u8(\n  offset: USize val = seq)\n: U8 val ?",
            "title": "peek_u8"
        },
        {
            "location": "/buffered-Reader/#parameters_4",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_30",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_i8",
            "text": "[Source]  Peek at an I8.  fun box peek_i8(\n  offset: USize val = seq)\n: I8 val ?",
            "title": "peek_i8"
        },
        {
            "location": "/buffered-Reader/#parameters_5",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_31",
            "text": "I8  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_u16_be",
            "text": "[Source]  Peek at a big-endian U16.  fun box peek_u16_be(\n  offset: USize val = seq)\n: U16 val ?",
            "title": "peek_u16_be"
        },
        {
            "location": "/buffered-Reader/#parameters_6",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_32",
            "text": "U16  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_u16_le",
            "text": "[Source]  Peek at a little-endian U16.  fun box peek_u16_le(\n  offset: USize val = seq)\n: U16 val ?",
            "title": "peek_u16_le"
        },
        {
            "location": "/buffered-Reader/#parameters_7",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_33",
            "text": "U16  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_i16_be",
            "text": "[Source]  Peek at a big-endian I16.  fun box peek_i16_be(\n  offset: USize val = seq)\n: I16 val ?",
            "title": "peek_i16_be"
        },
        {
            "location": "/buffered-Reader/#parameters_8",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_34",
            "text": "I16  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_i16_le",
            "text": "[Source]  Peek at a little-endian I16.  fun box peek_i16_le(\n  offset: USize val = seq)\n: I16 val ?",
            "title": "peek_i16_le"
        },
        {
            "location": "/buffered-Reader/#parameters_9",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_35",
            "text": "I16  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_u32_be",
            "text": "[Source]  Peek at a big-endian U32.  fun box peek_u32_be(\n  offset: USize val = seq)\n: U32 val ?",
            "title": "peek_u32_be"
        },
        {
            "location": "/buffered-Reader/#parameters_10",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_36",
            "text": "U32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_u32_le",
            "text": "[Source]  Peek at a little-endian U32.  fun box peek_u32_le(\n  offset: USize val = seq)\n: U32 val ?",
            "title": "peek_u32_le"
        },
        {
            "location": "/buffered-Reader/#parameters_11",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_37",
            "text": "U32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_i32_be",
            "text": "[Source]  Peek at a big-endian I32.  fun box peek_i32_be(\n  offset: USize val = seq)\n: I32 val ?",
            "title": "peek_i32_be"
        },
        {
            "location": "/buffered-Reader/#parameters_12",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_38",
            "text": "I32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_i32_le",
            "text": "[Source]  Peek at a little-endian I32.  fun box peek_i32_le(\n  offset: USize val = seq)\n: I32 val ?",
            "title": "peek_i32_le"
        },
        {
            "location": "/buffered-Reader/#parameters_13",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_39",
            "text": "I32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_u64_be",
            "text": "[Source]  Peek at a big-endian U64.  fun box peek_u64_be(\n  offset: USize val = seq)\n: U64 val ?",
            "title": "peek_u64_be"
        },
        {
            "location": "/buffered-Reader/#parameters_14",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_40",
            "text": "U64  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_u64_le",
            "text": "[Source]  Peek at a little-endian U64.  fun box peek_u64_le(\n  offset: USize val = seq)\n: U64 val ?",
            "title": "peek_u64_le"
        },
        {
            "location": "/buffered-Reader/#parameters_15",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_41",
            "text": "U64  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_i64_be",
            "text": "[Source]  Peek at a big-endian I64.  fun box peek_i64_be(\n  offset: USize val = seq)\n: I64 val ?",
            "title": "peek_i64_be"
        },
        {
            "location": "/buffered-Reader/#parameters_16",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_42",
            "text": "I64  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_i64_le",
            "text": "[Source]  Peek at a little-endian I64.  fun box peek_i64_le(\n  offset: USize val = seq)\n: I64 val ?",
            "title": "peek_i64_le"
        },
        {
            "location": "/buffered-Reader/#parameters_17",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_43",
            "text": "I64  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_u128_be",
            "text": "[Source]  Peek at a big-endian U128.  fun box peek_u128_be(\n  offset: USize val = seq)\n: U128 val ?",
            "title": "peek_u128_be"
        },
        {
            "location": "/buffered-Reader/#parameters_18",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_44",
            "text": "U128  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_u128_le",
            "text": "[Source]  Peek at a little-endian U128.  fun box peek_u128_le(\n  offset: USize val = seq)\n: U128 val ?",
            "title": "peek_u128_le"
        },
        {
            "location": "/buffered-Reader/#parameters_19",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_45",
            "text": "U128  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_i128_be",
            "text": "[Source]  Peek at a big-endian I129.  fun box peek_i128_be(\n  offset: USize val = seq)\n: I128 val ?",
            "title": "peek_i128_be"
        },
        {
            "location": "/buffered-Reader/#parameters_20",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_46",
            "text": "I128  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_i128_le",
            "text": "[Source]  Peek at a little-endian I128.  fun box peek_i128_le(\n  offset: USize val = seq)\n: I128 val ?",
            "title": "peek_i128_le"
        },
        {
            "location": "/buffered-Reader/#parameters_21",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_47",
            "text": "I128  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_f32_be",
            "text": "[Source]  Peek at a big-endian F32.  fun box peek_f32_be(\n  offset: USize val = seq)\n: F32 val ?",
            "title": "peek_f32_be"
        },
        {
            "location": "/buffered-Reader/#parameters_22",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_48",
            "text": "F32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_f32_le",
            "text": "[Source]  Peek at a little-endian F32.  fun box peek_f32_le(\n  offset: USize val = seq)\n: F32 val ?",
            "title": "peek_f32_le"
        },
        {
            "location": "/buffered-Reader/#parameters_23",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_49",
            "text": "F32  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_f64_be",
            "text": "[Source]  Peek at a big-endian F64.  fun box peek_f64_be(\n  offset: USize val = seq)\n: F64 val ?",
            "title": "peek_f64_be"
        },
        {
            "location": "/buffered-Reader/#parameters_24",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_50",
            "text": "F64  val ?",
            "title": "Returns"
        },
        {
            "location": "/buffered-Reader/#peek_f64_le",
            "text": "[Source]  Peek at a little-endian F64.  fun box peek_f64_le(\n  offset: USize val = seq)\n: F64 val ?",
            "title": "peek_f64_le"
        },
        {
            "location": "/buffered-Reader/#parameters_25",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/buffered-Reader/#returns_51",
            "text": "F64  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin--index/",
            "text": "Builtin package\n\u00b6\n\n\nThe builtin package is home to the following standard library members:\n\n\n\n\nTypes the compiler needs to know exist, such as None.\n\n\nTypes with \"magic\" internal workings that must be supplied directly by the\ncompiler, such as U32.\n\n\nAny types needed by others in builtin.\n\n\n\n\nThe public types that are defined in this package will always be in scope for\nevery Pony source file. For details on specific packages, see their individual\nentity entries.\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive U8\n\n\nprimitive U16\n\n\nprimitive U32\n\n\nprimitive U64\n\n\nprimitive ULong\n\n\nprimitive USize\n\n\nprimitive U128\n\n\ntype Unsigned\n\n\ninterface Stringable\n\n\nclass String\n\n\nclass StringBytes\n\n\nclass StringRunes\n\n\ninterface InputNotify\n\n\ninterface DisposableActor\n\n\ninterface InputStream\n\n\nactor Stdin\n\n\ntype ByteSeq\n\n\ninterface ByteSeqIter\n\n\ninterface OutStream\n\n\nactor StdStream\n\n\ninterface SourceLoc\n\n\nprimitive I8\n\n\nprimitive I16\n\n\nprimitive I32\n\n\nprimitive I64\n\n\nprimitive ILong\n\n\nprimitive ISize\n\n\nprimitive I128\n\n\ntype Signed\n\n\ninterface Seq\n\n\ntrait Real\n\n\ntrait Integer\n\n\ntrait FloatingPoint\n\n\ntype Number\n\n\ntype Int\n\n\ninterface ReadSeq\n\n\ninterface ReadElement\n\n\nstruct Pointer\n\n\nprimitive Platform\n\n\nprimitive None\n\n\nstruct MaybePointer\n\n\ninterface Iterator\n\n\nprimitive F32\n\n\nprimitive F64\n\n\ntype Float\n\n\nclass Env\n\n\nprimitive DoNotOptimise\n\n\nprimitive Less\n\n\nprimitive Equal\n\n\nprimitive Greater\n\n\ntype Compare\n\n\ninterface HasEq\n\n\ninterface Equatable\n\n\ninterface Comparable\n\n\nprimitive Bool\n\n\ntype AsioEventID\n\n\ninterface AsioEventNotify\n\n\nprimitive AsioEvent\n\n\nclass Array\n\n\nclass ArrayKeys\n\n\nclass ArrayValues\n\n\nclass ArrayPairs\n\n\ninterface Any\n\n\nprimitive AmbientAuth",
            "title": "Package"
        },
        {
            "location": "/builtin--index/#builtin-package",
            "text": "The builtin package is home to the following standard library members:   Types the compiler needs to know exist, such as None.  Types with \"magic\" internal workings that must be supplied directly by the\ncompiler, such as U32.  Any types needed by others in builtin.   The public types that are defined in this package will always be in scope for\nevery Pony source file. For details on specific packages, see their individual\nentity entries.",
            "title": "Builtin package"
        },
        {
            "location": "/builtin--index/#public-types",
            "text": "primitive U8  primitive U16  primitive U32  primitive U64  primitive ULong  primitive USize  primitive U128  type Unsigned  interface Stringable  class String  class StringBytes  class StringRunes  interface InputNotify  interface DisposableActor  interface InputStream  actor Stdin  type ByteSeq  interface ByteSeqIter  interface OutStream  actor StdStream  interface SourceLoc  primitive I8  primitive I16  primitive I32  primitive I64  primitive ILong  primitive ISize  primitive I128  type Signed  interface Seq  trait Real  trait Integer  trait FloatingPoint  type Number  type Int  interface ReadSeq  interface ReadElement  struct Pointer  primitive Platform  primitive None  struct MaybePointer  interface Iterator  primitive F32  primitive F64  type Float  class Env  primitive DoNotOptimise  primitive Less  primitive Equal  primitive Greater  type Compare  interface HasEq  interface Equatable  interface Comparable  primitive Bool  type AsioEventID  interface AsioEventNotify  primitive AsioEvent  class Array  class ArrayKeys  class ArrayValues  class ArrayPairs  interface Any  primitive AmbientAuth",
            "title": "Public Types"
        },
        {
            "location": "/builtin-U8/",
            "text": "U8\n\u00b6\n\n\n[Source]\n\n\nprimitive val U8 is\n  _UnsignedInteger[U8 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[U8 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: U8 val)\n: U8 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: U8 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: U8 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: U8 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: U8 val)\n: (U8 val , U8 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU8\n val , \nU8\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: U8 val)\n: (U8 val , U8 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU8\n val , \nU8\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: U8 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive U8"
        },
        {
            "location": "/builtin-U8/#u8",
            "text": "[Source]  primitive val U8 is\n  _UnsignedInteger[U8 val] val",
            "title": "U8"
        },
        {
            "location": "/builtin-U8/#implements",
            "text": "_UnsignedInteger[U8 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-U8/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U8/#create",
            "text": "[Source]  new val create(\n  value: U8 val)\n: U8 val^",
            "title": "create"
        },
        {
            "location": "/builtin-U8/#parameters",
            "text": "value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns",
            "text": "U8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: U8 val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-U8/#parameters_1",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_1",
            "text": "U8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#min_value",
            "text": "[Source]  new val min_value()\n: U8 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-U8/#returns_2",
            "text": "U8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#max_value",
            "text": "[Source]  new val max_value()\n: U8 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-U8/#returns_3",
            "text": "U8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U8/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: U8 val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-U8/#returns_4",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#abs",
            "text": "[Source]  fun box abs()\n: U8 val",
            "title": "abs"
        },
        {
            "location": "/builtin-U8/#returns_5",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: U8 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-U8/#returns_6",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#bswap",
            "text": "[Source]  fun box bswap()\n: U8 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-U8/#returns_7",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#popcount",
            "text": "[Source]  fun box popcount()\n: U8 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-U8/#returns_8",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#clz",
            "text": "[Source]  fun box clz()\n: U8 val",
            "title": "clz"
        },
        {
            "location": "/builtin-U8/#returns_9",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ctz",
            "text": "[Source]  fun box ctz()\n: U8 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-U8/#returns_10",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U8 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_11",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U8 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_12",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U8 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-U8/#returns_13",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#min",
            "text": "[Source]  fun box min(\n  y: U8 val)\n: U8 val",
            "title": "min"
        },
        {
            "location": "/builtin-U8/#parameters_2",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_14",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#max",
            "text": "[Source]  fun box max(\n  y: U8 val)\n: U8 val",
            "title": "max"
        },
        {
            "location": "/builtin-U8/#parameters_3",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_15",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#addc",
            "text": "[Source]  fun box addc(\n  y: U8 val)\n: (U8 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-U8/#parameters_4",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_16",
            "text": "( U8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#subc",
            "text": "[Source]  fun box subc(\n  y: U8 val)\n: (U8 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-U8/#parameters_5",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_17",
            "text": "( U8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#mulc",
            "text": "[Source]  fun box mulc(\n  y: U8 val)\n: (U8 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-U8/#parameters_6",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_18",
            "text": "( U8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#shl",
            "text": "fun box shl(\n  y: U8 val)\n: U8 val",
            "title": "shl"
        },
        {
            "location": "/builtin-U8/#parameters_7",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_19",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#shr",
            "text": "fun box shr(\n  y: U8 val)\n: U8 val",
            "title": "shr"
        },
        {
            "location": "/builtin-U8/#parameters_8",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_20",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_9",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_21",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_10",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_22",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#rotl",
            "text": "fun box rotl(\n  y: U8 val)\n: U8 val",
            "title": "rotl"
        },
        {
            "location": "/builtin-U8/#parameters_11",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_23",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#rotr",
            "text": "fun box rotr(\n  y: U8 val)\n: U8 val",
            "title": "rotr"
        },
        {
            "location": "/builtin-U8/#parameters_12",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_24",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-U8/#returns_25",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_13",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_26",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_14",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_27",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_15",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_28",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_16",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_29",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: U8 val)\n: (U8 val , U8 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_17",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_30",
            "text": "( U8  val ,  U8  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: U8 val)\n: U8 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-U8/#parameters_18",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_31",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: U8 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_32",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#op_and",
            "text": "fun box op_and(\n  y: U8 val)\n: U8 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-U8/#parameters_19",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_33",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#op_or",
            "text": "fun box op_or(\n  y: U8 val)\n: U8 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-U8/#parameters_20",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_34",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#op_xor",
            "text": "fun box op_xor(\n  y: U8 val)\n: U8 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-U8/#parameters_21",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_35",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#op_not",
            "text": "fun box op_not()\n: U8 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-U8/#returns_36",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#add",
            "text": "fun box add(\n  y: U8 val)\n: U8 val",
            "title": "add"
        },
        {
            "location": "/builtin-U8/#parameters_22",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_37",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#sub",
            "text": "fun box sub(\n  y: U8 val)\n: U8 val",
            "title": "sub"
        },
        {
            "location": "/builtin-U8/#parameters_23",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_38",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#mul",
            "text": "fun box mul(\n  y: U8 val)\n: U8 val",
            "title": "mul"
        },
        {
            "location": "/builtin-U8/#parameters_24",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_39",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#div",
            "text": "fun box div(\n  y: U8 val)\n: U8 val",
            "title": "div"
        },
        {
            "location": "/builtin-U8/#parameters_25",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_40",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#divmod",
            "text": "fun box divmod(\n  y: U8 val)\n: (U8 val , U8 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-U8/#parameters_26",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_41",
            "text": "( U8  val ,  U8  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#mod",
            "text": "fun box mod(\n  y: U8 val)\n: U8 val",
            "title": "mod"
        },
        {
            "location": "/builtin-U8/#parameters_27",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_42",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#neg",
            "text": "fun box neg()\n: U8 val",
            "title": "neg"
        },
        {
            "location": "/builtin-U8/#returns_43",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#eq",
            "text": "fun box eq(\n  y: U8 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-U8/#parameters_28",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ne",
            "text": "fun box ne(\n  y: U8 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-U8/#parameters_29",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#lt",
            "text": "fun box lt(\n  y: U8 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-U8/#parameters_30",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#le",
            "text": "fun box le(\n  y: U8 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-U8/#parameters_31",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ge",
            "text": "fun box ge(\n  y: U8 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-U8/#parameters_32",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#gt",
            "text": "fun box gt(\n  y: U8 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-U8/#parameters_33",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-U8/#returns_50",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-U8/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-U8/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-U8/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-U8/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-U8/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-U8/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-U8/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-U8/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u8_1",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-U8/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-U8/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-U8/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-U8/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-U8/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-U8/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-U8/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-U8/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-U8/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-U8/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U8/#compare",
            "text": "fun box compare(\n  that: U8 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-U8/#parameters_34",
            "text": "that:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U8/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/",
            "text": "U16\n\u00b6\n\n\n[Source]\n\n\nprimitive val U16 is\n  _UnsignedInteger[U16 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[U16 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: U16 val)\n: U16 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U16 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: U16 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: U16 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: U16 val)\n: (U16 val , U16 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU16\n val , \nU16\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: U16 val)\n: (U16 val , U16 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU16\n val , \nU16\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: U16 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive U16"
        },
        {
            "location": "/builtin-U16/#u16",
            "text": "[Source]  primitive val U16 is\n  _UnsignedInteger[U16 val] val",
            "title": "U16"
        },
        {
            "location": "/builtin-U16/#implements",
            "text": "_UnsignedInteger[U16 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-U16/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U16/#create",
            "text": "[Source]  new val create(\n  value: U16 val)\n: U16 val^",
            "title": "create"
        },
        {
            "location": "/builtin-U16/#parameters",
            "text": "value:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns",
            "text": "U16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U16 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-U16/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_1",
            "text": "U16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#min_value",
            "text": "[Source]  new val min_value()\n: U16 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-U16/#returns_2",
            "text": "U16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#max_value",
            "text": "[Source]  new val max_value()\n: U16 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-U16/#returns_3",
            "text": "U16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U16/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: U16 val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-U16/#returns_4",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#abs",
            "text": "[Source]  fun box abs()\n: U16 val",
            "title": "abs"
        },
        {
            "location": "/builtin-U16/#returns_5",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: U16 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-U16/#returns_6",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#bswap",
            "text": "[Source]  fun box bswap()\n: U16 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-U16/#returns_7",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#popcount",
            "text": "[Source]  fun box popcount()\n: U16 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-U16/#returns_8",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#clz",
            "text": "[Source]  fun box clz()\n: U16 val",
            "title": "clz"
        },
        {
            "location": "/builtin-U16/#returns_9",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ctz",
            "text": "[Source]  fun box ctz()\n: U16 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-U16/#returns_10",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U16 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_11",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U16 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_12",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U16 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-U16/#returns_13",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#min",
            "text": "[Source]  fun box min(\n  y: U16 val)\n: U16 val",
            "title": "min"
        },
        {
            "location": "/builtin-U16/#parameters_2",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_14",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#max",
            "text": "[Source]  fun box max(\n  y: U16 val)\n: U16 val",
            "title": "max"
        },
        {
            "location": "/builtin-U16/#parameters_3",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_15",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#addc",
            "text": "[Source]  fun box addc(\n  y: U16 val)\n: (U16 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-U16/#parameters_4",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_16",
            "text": "( U16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#subc",
            "text": "[Source]  fun box subc(\n  y: U16 val)\n: (U16 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-U16/#parameters_5",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_17",
            "text": "( U16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#mulc",
            "text": "[Source]  fun box mulc(\n  y: U16 val)\n: (U16 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-U16/#parameters_6",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_18",
            "text": "( U16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#shl",
            "text": "fun box shl(\n  y: U16 val)\n: U16 val",
            "title": "shl"
        },
        {
            "location": "/builtin-U16/#parameters_7",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_19",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#shr",
            "text": "fun box shr(\n  y: U16 val)\n: U16 val",
            "title": "shr"
        },
        {
            "location": "/builtin-U16/#parameters_8",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_20",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_9",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_21",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_10",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_22",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#rotl",
            "text": "fun box rotl(\n  y: U16 val)\n: U16 val",
            "title": "rotl"
        },
        {
            "location": "/builtin-U16/#parameters_11",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_23",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#rotr",
            "text": "fun box rotr(\n  y: U16 val)\n: U16 val",
            "title": "rotr"
        },
        {
            "location": "/builtin-U16/#parameters_12",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_24",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-U16/#returns_25",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_13",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_26",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_14",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_27",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_15",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_28",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_16",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_29",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: U16 val)\n: (U16 val , U16 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_17",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_30",
            "text": "( U16  val ,  U16  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: U16 val)\n: U16 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-U16/#parameters_18",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_31",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: U16 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_32",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#op_and",
            "text": "fun box op_and(\n  y: U16 val)\n: U16 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-U16/#parameters_19",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_33",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#op_or",
            "text": "fun box op_or(\n  y: U16 val)\n: U16 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-U16/#parameters_20",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_34",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#op_xor",
            "text": "fun box op_xor(\n  y: U16 val)\n: U16 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-U16/#parameters_21",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_35",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#op_not",
            "text": "fun box op_not()\n: U16 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-U16/#returns_36",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#add",
            "text": "fun box add(\n  y: U16 val)\n: U16 val",
            "title": "add"
        },
        {
            "location": "/builtin-U16/#parameters_22",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_37",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#sub",
            "text": "fun box sub(\n  y: U16 val)\n: U16 val",
            "title": "sub"
        },
        {
            "location": "/builtin-U16/#parameters_23",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_38",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#mul",
            "text": "fun box mul(\n  y: U16 val)\n: U16 val",
            "title": "mul"
        },
        {
            "location": "/builtin-U16/#parameters_24",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_39",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#div",
            "text": "fun box div(\n  y: U16 val)\n: U16 val",
            "title": "div"
        },
        {
            "location": "/builtin-U16/#parameters_25",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_40",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#divmod",
            "text": "fun box divmod(\n  y: U16 val)\n: (U16 val , U16 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-U16/#parameters_26",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_41",
            "text": "( U16  val ,  U16  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#mod",
            "text": "fun box mod(\n  y: U16 val)\n: U16 val",
            "title": "mod"
        },
        {
            "location": "/builtin-U16/#parameters_27",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_42",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#neg",
            "text": "fun box neg()\n: U16 val",
            "title": "neg"
        },
        {
            "location": "/builtin-U16/#returns_43",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#eq",
            "text": "fun box eq(\n  y: U16 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-U16/#parameters_28",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ne",
            "text": "fun box ne(\n  y: U16 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-U16/#parameters_29",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#lt",
            "text": "fun box lt(\n  y: U16 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-U16/#parameters_30",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#le",
            "text": "fun box le(\n  y: U16 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-U16/#parameters_31",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ge",
            "text": "fun box ge(\n  y: U16 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-U16/#parameters_32",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#gt",
            "text": "fun box gt(\n  y: U16 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-U16/#parameters_33",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-U16/#returns_50",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-U16/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-U16/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-U16/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-U16/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-U16/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-U16/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-U16/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-U16/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-U16/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u16_1",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-U16/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-U16/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-U16/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-U16/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-U16/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-U16/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-U16/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-U16/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-U16/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U16/#compare",
            "text": "fun box compare(\n  that: U16 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-U16/#parameters_34",
            "text": "that:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U16/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/",
            "text": "U32\n\u00b6\n\n\n[Source]\n\n\nprimitive val U32 is\n  _UnsignedInteger[U32 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[U32 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: U32 val)\n: U32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: U32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: U32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: U32 val)\n: (U32 val , U32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: U32 val)\n: (U32 val , U32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: U32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive U32"
        },
        {
            "location": "/builtin-U32/#u32",
            "text": "[Source]  primitive val U32 is\n  _UnsignedInteger[U32 val] val",
            "title": "U32"
        },
        {
            "location": "/builtin-U32/#implements",
            "text": "_UnsignedInteger[U32 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-U32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U32/#create",
            "text": "[Source]  new val create(\n  value: U32 val)\n: U32 val^",
            "title": "create"
        },
        {
            "location": "/builtin-U32/#parameters",
            "text": "value:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns",
            "text": "U32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U32 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-U32/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_1",
            "text": "U32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#min_value",
            "text": "[Source]  new val min_value()\n: U32 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-U32/#returns_2",
            "text": "U32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#max_value",
            "text": "[Source]  new val max_value()\n: U32 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-U32/#returns_3",
            "text": "U32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U32/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: U32 val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-U32/#returns_4",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#abs",
            "text": "[Source]  fun box abs()\n: U32 val",
            "title": "abs"
        },
        {
            "location": "/builtin-U32/#returns_5",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: U32 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-U32/#returns_6",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#bswap",
            "text": "[Source]  fun box bswap()\n: U32 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-U32/#returns_7",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#popcount",
            "text": "[Source]  fun box popcount()\n: U32 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-U32/#returns_8",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#clz",
            "text": "[Source]  fun box clz()\n: U32 val",
            "title": "clz"
        },
        {
            "location": "/builtin-U32/#returns_9",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ctz",
            "text": "[Source]  fun box ctz()\n: U32 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-U32/#returns_10",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U32 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_11",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U32 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_12",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U32 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-U32/#returns_13",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#min",
            "text": "[Source]  fun box min(\n  y: U32 val)\n: U32 val",
            "title": "min"
        },
        {
            "location": "/builtin-U32/#parameters_2",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_14",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#max",
            "text": "[Source]  fun box max(\n  y: U32 val)\n: U32 val",
            "title": "max"
        },
        {
            "location": "/builtin-U32/#parameters_3",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_15",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#addc",
            "text": "[Source]  fun box addc(\n  y: U32 val)\n: (U32 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-U32/#parameters_4",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_16",
            "text": "( U32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#subc",
            "text": "[Source]  fun box subc(\n  y: U32 val)\n: (U32 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-U32/#parameters_5",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_17",
            "text": "( U32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#mulc",
            "text": "[Source]  fun box mulc(\n  y: U32 val)\n: (U32 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-U32/#parameters_6",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_18",
            "text": "( U32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#shl",
            "text": "fun box shl(\n  y: U32 val)\n: U32 val",
            "title": "shl"
        },
        {
            "location": "/builtin-U32/#parameters_7",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_19",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#shr",
            "text": "fun box shr(\n  y: U32 val)\n: U32 val",
            "title": "shr"
        },
        {
            "location": "/builtin-U32/#parameters_8",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_20",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_9",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_21",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_10",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_22",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#rotl",
            "text": "fun box rotl(\n  y: U32 val)\n: U32 val",
            "title": "rotl"
        },
        {
            "location": "/builtin-U32/#parameters_11",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_23",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#rotr",
            "text": "fun box rotr(\n  y: U32 val)\n: U32 val",
            "title": "rotr"
        },
        {
            "location": "/builtin-U32/#parameters_12",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_24",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-U32/#returns_25",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_13",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_26",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_14",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_27",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_15",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_28",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_16",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_29",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: U32 val)\n: (U32 val , U32 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_17",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_30",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: U32 val)\n: U32 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-U32/#parameters_18",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_31",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: U32 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_32",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#op_and",
            "text": "fun box op_and(\n  y: U32 val)\n: U32 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-U32/#parameters_19",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_33",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#op_or",
            "text": "fun box op_or(\n  y: U32 val)\n: U32 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-U32/#parameters_20",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_34",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#op_xor",
            "text": "fun box op_xor(\n  y: U32 val)\n: U32 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-U32/#parameters_21",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_35",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#op_not",
            "text": "fun box op_not()\n: U32 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-U32/#returns_36",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#add",
            "text": "fun box add(\n  y: U32 val)\n: U32 val",
            "title": "add"
        },
        {
            "location": "/builtin-U32/#parameters_22",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_37",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#sub",
            "text": "fun box sub(\n  y: U32 val)\n: U32 val",
            "title": "sub"
        },
        {
            "location": "/builtin-U32/#parameters_23",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_38",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#mul",
            "text": "fun box mul(\n  y: U32 val)\n: U32 val",
            "title": "mul"
        },
        {
            "location": "/builtin-U32/#parameters_24",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_39",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#div",
            "text": "fun box div(\n  y: U32 val)\n: U32 val",
            "title": "div"
        },
        {
            "location": "/builtin-U32/#parameters_25",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_40",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#divmod",
            "text": "fun box divmod(\n  y: U32 val)\n: (U32 val , U32 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-U32/#parameters_26",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_41",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#mod",
            "text": "fun box mod(\n  y: U32 val)\n: U32 val",
            "title": "mod"
        },
        {
            "location": "/builtin-U32/#parameters_27",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_42",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#neg",
            "text": "fun box neg()\n: U32 val",
            "title": "neg"
        },
        {
            "location": "/builtin-U32/#returns_43",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#eq",
            "text": "fun box eq(\n  y: U32 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-U32/#parameters_28",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ne",
            "text": "fun box ne(\n  y: U32 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-U32/#parameters_29",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#lt",
            "text": "fun box lt(\n  y: U32 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-U32/#parameters_30",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#le",
            "text": "fun box le(\n  y: U32 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-U32/#parameters_31",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ge",
            "text": "fun box ge(\n  y: U32 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-U32/#parameters_32",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#gt",
            "text": "fun box gt(\n  y: U32 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-U32/#parameters_33",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-U32/#returns_50",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-U32/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-U32/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-U32/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-U32/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-U32/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-U32/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-U32/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-U32/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-U32/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-U32/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u32_1",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-U32/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-U32/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-U32/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-U32/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-U32/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-U32/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-U32/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-U32/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U32/#compare",
            "text": "fun box compare(\n  that: U32 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-U32/#parameters_34",
            "text": "that:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U32/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/",
            "text": "U64\n\u00b6\n\n\n[Source]\n\n\nprimitive val U64 is\n  _UnsignedInteger[U64 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[U64 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: U64 val)\n: U64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: U64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: U64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: U64 val)\n: (U64 val , U64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU64\n val , \nU64\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: U64 val)\n: (U64 val , U64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU64\n val , \nU64\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: U64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive U64"
        },
        {
            "location": "/builtin-U64/#u64",
            "text": "[Source]  primitive val U64 is\n  _UnsignedInteger[U64 val] val",
            "title": "U64"
        },
        {
            "location": "/builtin-U64/#implements",
            "text": "_UnsignedInteger[U64 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-U64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U64/#create",
            "text": "[Source]  new val create(\n  value: U64 val)\n: U64 val^",
            "title": "create"
        },
        {
            "location": "/builtin-U64/#parameters",
            "text": "value:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns",
            "text": "U64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U64 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-U64/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_1",
            "text": "U64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#min_value",
            "text": "[Source]  new val min_value()\n: U64 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-U64/#returns_2",
            "text": "U64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#max_value",
            "text": "[Source]  new val max_value()\n: U64 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-U64/#returns_3",
            "text": "U64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U64/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: U64 val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-U64/#returns_4",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#abs",
            "text": "[Source]  fun box abs()\n: U64 val",
            "title": "abs"
        },
        {
            "location": "/builtin-U64/#returns_5",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: U64 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-U64/#returns_6",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#bswap",
            "text": "[Source]  fun box bswap()\n: U64 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-U64/#returns_7",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#popcount",
            "text": "[Source]  fun box popcount()\n: U64 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-U64/#returns_8",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#clz",
            "text": "[Source]  fun box clz()\n: U64 val",
            "title": "clz"
        },
        {
            "location": "/builtin-U64/#returns_9",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ctz",
            "text": "[Source]  fun box ctz()\n: U64 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-U64/#returns_10",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U64 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_11",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U64 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_12",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U64 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-U64/#returns_13",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#min",
            "text": "[Source]  fun box min(\n  y: U64 val)\n: U64 val",
            "title": "min"
        },
        {
            "location": "/builtin-U64/#parameters_2",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_14",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#max",
            "text": "[Source]  fun box max(\n  y: U64 val)\n: U64 val",
            "title": "max"
        },
        {
            "location": "/builtin-U64/#parameters_3",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_15",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-U64/#returns_16",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#addc",
            "text": "[Source]  fun box addc(\n  y: U64 val)\n: (U64 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-U64/#parameters_4",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_17",
            "text": "( U64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#subc",
            "text": "[Source]  fun box subc(\n  y: U64 val)\n: (U64 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-U64/#parameters_5",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_18",
            "text": "( U64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#mulc",
            "text": "[Source]  fun box mulc(\n  y: U64 val)\n: (U64 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-U64/#parameters_6",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_19",
            "text": "( U64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#shl",
            "text": "fun box shl(\n  y: U64 val)\n: U64 val",
            "title": "shl"
        },
        {
            "location": "/builtin-U64/#parameters_7",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_20",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#shr",
            "text": "fun box shr(\n  y: U64 val)\n: U64 val",
            "title": "shr"
        },
        {
            "location": "/builtin-U64/#parameters_8",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_21",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_9",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_22",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_10",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_23",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#rotl",
            "text": "fun box rotl(\n  y: U64 val)\n: U64 val",
            "title": "rotl"
        },
        {
            "location": "/builtin-U64/#parameters_11",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_24",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#rotr",
            "text": "fun box rotr(\n  y: U64 val)\n: U64 val",
            "title": "rotr"
        },
        {
            "location": "/builtin-U64/#parameters_12",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_25",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-U64/#returns_26",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_13",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_27",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_14",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_28",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_15",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_29",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_16",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_30",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: U64 val)\n: (U64 val , U64 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_17",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_31",
            "text": "( U64  val ,  U64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: U64 val)\n: U64 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-U64/#parameters_18",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_32",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: U64 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_33",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#op_and",
            "text": "fun box op_and(\n  y: U64 val)\n: U64 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-U64/#parameters_19",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_34",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#op_or",
            "text": "fun box op_or(\n  y: U64 val)\n: U64 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-U64/#parameters_20",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_35",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#op_xor",
            "text": "fun box op_xor(\n  y: U64 val)\n: U64 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-U64/#parameters_21",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_36",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#op_not",
            "text": "fun box op_not()\n: U64 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-U64/#returns_37",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#add",
            "text": "fun box add(\n  y: U64 val)\n: U64 val",
            "title": "add"
        },
        {
            "location": "/builtin-U64/#parameters_22",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_38",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#sub",
            "text": "fun box sub(\n  y: U64 val)\n: U64 val",
            "title": "sub"
        },
        {
            "location": "/builtin-U64/#parameters_23",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_39",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#mul",
            "text": "fun box mul(\n  y: U64 val)\n: U64 val",
            "title": "mul"
        },
        {
            "location": "/builtin-U64/#parameters_24",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_40",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#div",
            "text": "fun box div(\n  y: U64 val)\n: U64 val",
            "title": "div"
        },
        {
            "location": "/builtin-U64/#parameters_25",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_41",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#divmod",
            "text": "fun box divmod(\n  y: U64 val)\n: (U64 val , U64 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-U64/#parameters_26",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_42",
            "text": "( U64  val ,  U64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#mod",
            "text": "fun box mod(\n  y: U64 val)\n: U64 val",
            "title": "mod"
        },
        {
            "location": "/builtin-U64/#parameters_27",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_43",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#neg",
            "text": "fun box neg()\n: U64 val",
            "title": "neg"
        },
        {
            "location": "/builtin-U64/#returns_44",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#eq",
            "text": "fun box eq(\n  y: U64 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-U64/#parameters_28",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ne",
            "text": "fun box ne(\n  y: U64 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-U64/#parameters_29",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#lt",
            "text": "fun box lt(\n  y: U64 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-U64/#parameters_30",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#le",
            "text": "fun box le(\n  y: U64 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-U64/#parameters_31",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ge",
            "text": "fun box ge(\n  y: U64 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-U64/#parameters_32",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#gt",
            "text": "fun box gt(\n  y: U64 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-U64/#parameters_33",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_50",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-U64/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-U64/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-U64/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-U64/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-U64/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-U64/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-U64/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-U64/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-U64/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-U64/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-U64/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u64_1",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-U64/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-U64/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-U64/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-U64/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-U64/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-U64/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-U64/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U64/#compare",
            "text": "fun box compare(\n  that: U64 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-U64/#parameters_34",
            "text": "that:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U64/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/",
            "text": "ULong\n\u00b6\n\n\n[Source]\n\n\nprimitive val ULong is\n  _UnsignedInteger[ULong val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[ULong val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: ULong val)\n: ULong val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ULong val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: ULong val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: ULong val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: ULong val)\n: (ULong val , ULong val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nULong\n val , \nULong\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: ULong val)\n: (ULong val , ULong val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nULong\n val , \nULong\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: ULong val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive ULong"
        },
        {
            "location": "/builtin-ULong/#ulong",
            "text": "[Source]  primitive val ULong is\n  _UnsignedInteger[ULong val] val",
            "title": "ULong"
        },
        {
            "location": "/builtin-ULong/#implements",
            "text": "_UnsignedInteger[ULong val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-ULong/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ULong/#create",
            "text": "[Source]  new val create(\n  value: ULong val)\n: ULong val^",
            "title": "create"
        },
        {
            "location": "/builtin-ULong/#parameters",
            "text": "value:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns",
            "text": "ULong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ULong val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-ULong/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_1",
            "text": "ULong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#min_value",
            "text": "[Source]  new val min_value()\n: ULong val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-ULong/#returns_2",
            "text": "ULong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#max_value",
            "text": "[Source]  new val max_value()\n: ULong val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-ULong/#returns_3",
            "text": "ULong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ULong/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: ULong val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-ULong/#returns_4",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#abs",
            "text": "[Source]  fun box abs()\n: ULong val",
            "title": "abs"
        },
        {
            "location": "/builtin-ULong/#returns_5",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: ULong val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-ULong/#returns_6",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#bswap",
            "text": "[Source]  fun box bswap()\n: ULong val",
            "title": "bswap"
        },
        {
            "location": "/builtin-ULong/#returns_7",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#popcount",
            "text": "[Source]  fun box popcount()\n: ULong val",
            "title": "popcount"
        },
        {
            "location": "/builtin-ULong/#returns_8",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#clz",
            "text": "[Source]  fun box clz()\n: ULong val",
            "title": "clz"
        },
        {
            "location": "/builtin-ULong/#returns_9",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ctz",
            "text": "[Source]  fun box ctz()\n: ULong val",
            "title": "ctz"
        },
        {
            "location": "/builtin-ULong/#returns_10",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: ULong val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_11",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: ULong val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_12",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: ULong val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-ULong/#returns_13",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#min",
            "text": "[Source]  fun box min(\n  y: ULong val)\n: ULong val",
            "title": "min"
        },
        {
            "location": "/builtin-ULong/#parameters_2",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_14",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#max",
            "text": "[Source]  fun box max(\n  y: ULong val)\n: ULong val",
            "title": "max"
        },
        {
            "location": "/builtin-ULong/#parameters_3",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_15",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-ULong/#returns_16",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#addc",
            "text": "[Source]  fun box addc(\n  y: ULong val)\n: (ULong val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-ULong/#parameters_4",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_17",
            "text": "( ULong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#subc",
            "text": "[Source]  fun box subc(\n  y: ULong val)\n: (ULong val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-ULong/#parameters_5",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_18",
            "text": "( ULong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#mulc",
            "text": "[Source]  fun box mulc(\n  y: ULong val)\n: (ULong val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-ULong/#parameters_6",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_19",
            "text": "( ULong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#shl",
            "text": "fun box shl(\n  y: ULong val)\n: ULong val",
            "title": "shl"
        },
        {
            "location": "/builtin-ULong/#parameters_7",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_20",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#shr",
            "text": "fun box shr(\n  y: ULong val)\n: ULong val",
            "title": "shr"
        },
        {
            "location": "/builtin-ULong/#parameters_8",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_21",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_9",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_22",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_10",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_23",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#rotl",
            "text": "fun box rotl(\n  y: ULong val)\n: ULong val",
            "title": "rotl"
        },
        {
            "location": "/builtin-ULong/#parameters_11",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_24",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#rotr",
            "text": "fun box rotr(\n  y: ULong val)\n: ULong val",
            "title": "rotr"
        },
        {
            "location": "/builtin-ULong/#parameters_12",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_25",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-ULong/#returns_26",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_13",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_27",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_14",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_28",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_15",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_29",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_16",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_30",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: ULong val)\n: (ULong val , ULong val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_17",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_31",
            "text": "( ULong  val ,  ULong  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: ULong val)\n: ULong val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-ULong/#parameters_18",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_32",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: ULong val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_33",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#op_and",
            "text": "fun box op_and(\n  y: ULong val)\n: ULong val",
            "title": "op_and"
        },
        {
            "location": "/builtin-ULong/#parameters_19",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_34",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#op_or",
            "text": "fun box op_or(\n  y: ULong val)\n: ULong val",
            "title": "op_or"
        },
        {
            "location": "/builtin-ULong/#parameters_20",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_35",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#op_xor",
            "text": "fun box op_xor(\n  y: ULong val)\n: ULong val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-ULong/#parameters_21",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_36",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#op_not",
            "text": "fun box op_not()\n: ULong val",
            "title": "op_not"
        },
        {
            "location": "/builtin-ULong/#returns_37",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#add",
            "text": "fun box add(\n  y: ULong val)\n: ULong val",
            "title": "add"
        },
        {
            "location": "/builtin-ULong/#parameters_22",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_38",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#sub",
            "text": "fun box sub(\n  y: ULong val)\n: ULong val",
            "title": "sub"
        },
        {
            "location": "/builtin-ULong/#parameters_23",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_39",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#mul",
            "text": "fun box mul(\n  y: ULong val)\n: ULong val",
            "title": "mul"
        },
        {
            "location": "/builtin-ULong/#parameters_24",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_40",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#div",
            "text": "fun box div(\n  y: ULong val)\n: ULong val",
            "title": "div"
        },
        {
            "location": "/builtin-ULong/#parameters_25",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_41",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#divmod",
            "text": "fun box divmod(\n  y: ULong val)\n: (ULong val , ULong val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-ULong/#parameters_26",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_42",
            "text": "( ULong  val ,  ULong  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#mod",
            "text": "fun box mod(\n  y: ULong val)\n: ULong val",
            "title": "mod"
        },
        {
            "location": "/builtin-ULong/#parameters_27",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_43",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#neg",
            "text": "fun box neg()\n: ULong val",
            "title": "neg"
        },
        {
            "location": "/builtin-ULong/#returns_44",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#eq",
            "text": "fun box eq(\n  y: ULong val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-ULong/#parameters_28",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ne",
            "text": "fun box ne(\n  y: ULong val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-ULong/#parameters_29",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#lt",
            "text": "fun box lt(\n  y: ULong val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-ULong/#parameters_30",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#le",
            "text": "fun box le(\n  y: ULong val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-ULong/#parameters_31",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ge",
            "text": "fun box ge(\n  y: ULong val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-ULong/#parameters_32",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#gt",
            "text": "fun box gt(\n  y: ULong val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-ULong/#parameters_33",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_50",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-ULong/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-ULong/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-ULong/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-ULong/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-ULong/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-ULong/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-ULong/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-ULong/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-ULong/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-ULong/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-ULong/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-ULong/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-ULong/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ulong_1",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-ULong/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-ULong/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-ULong/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-ULong/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-ULong/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ULong/#compare",
            "text": "fun box compare(\n  that: ULong val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-ULong/#parameters_34",
            "text": "that:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ULong/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/",
            "text": "USize\n\u00b6\n\n\n[Source]\n\n\nprimitive val USize is\n  _UnsignedInteger[USize val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[USize val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: USize val)\n: USize val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: USize val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: USize val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: USize val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: USize val)\n: (USize val , USize val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , \nUSize\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: USize val)\n: (USize val , USize val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , \nUSize\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: USize val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive USize"
        },
        {
            "location": "/builtin-USize/#usize",
            "text": "[Source]  primitive val USize is\n  _UnsignedInteger[USize val] val",
            "title": "USize"
        },
        {
            "location": "/builtin-USize/#implements",
            "text": "_UnsignedInteger[USize val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-USize/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-USize/#create",
            "text": "[Source]  new val create(\n  value: USize val)\n: USize val^",
            "title": "create"
        },
        {
            "location": "/builtin-USize/#parameters",
            "text": "value:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns",
            "text": "USize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: USize val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-USize/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_1",
            "text": "USize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#min_value",
            "text": "[Source]  new val min_value()\n: USize val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-USize/#returns_2",
            "text": "USize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#max_value",
            "text": "[Source]  new val max_value()\n: USize val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-USize/#returns_3",
            "text": "USize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-USize/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: USize val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-USize/#returns_4",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#abs",
            "text": "[Source]  fun box abs()\n: USize val",
            "title": "abs"
        },
        {
            "location": "/builtin-USize/#returns_5",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: USize val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-USize/#returns_6",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#bswap",
            "text": "[Source]  fun box bswap()\n: USize val",
            "title": "bswap"
        },
        {
            "location": "/builtin-USize/#returns_7",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#popcount",
            "text": "[Source]  fun box popcount()\n: USize val",
            "title": "popcount"
        },
        {
            "location": "/builtin-USize/#returns_8",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#clz",
            "text": "[Source]  fun box clz()\n: USize val",
            "title": "clz"
        },
        {
            "location": "/builtin-USize/#returns_9",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ctz",
            "text": "[Source]  fun box ctz()\n: USize val",
            "title": "ctz"
        },
        {
            "location": "/builtin-USize/#returns_10",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: USize val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_11",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: USize val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_12",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: USize val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-USize/#returns_13",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#min",
            "text": "[Source]  fun box min(\n  y: USize val)\n: USize val",
            "title": "min"
        },
        {
            "location": "/builtin-USize/#parameters_2",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_14",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#max",
            "text": "[Source]  fun box max(\n  y: USize val)\n: USize val",
            "title": "max"
        },
        {
            "location": "/builtin-USize/#parameters_3",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_15",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#addc",
            "text": "[Source]  fun box addc(\n  y: USize val)\n: (USize val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-USize/#parameters_4",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_16",
            "text": "( USize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#subc",
            "text": "[Source]  fun box subc(\n  y: USize val)\n: (USize val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-USize/#parameters_5",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_17",
            "text": "( USize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#mulc",
            "text": "[Source]  fun box mulc(\n  y: USize val)\n: (USize val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-USize/#parameters_6",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_18",
            "text": "( USize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#shl",
            "text": "fun box shl(\n  y: USize val)\n: USize val",
            "title": "shl"
        },
        {
            "location": "/builtin-USize/#parameters_7",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_19",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#shr",
            "text": "fun box shr(\n  y: USize val)\n: USize val",
            "title": "shr"
        },
        {
            "location": "/builtin-USize/#parameters_8",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_20",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: USize val)\n: USize val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_9",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_21",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: USize val)\n: USize val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_10",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_22",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#rotl",
            "text": "fun box rotl(\n  y: USize val)\n: USize val",
            "title": "rotl"
        },
        {
            "location": "/builtin-USize/#parameters_11",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_23",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#rotr",
            "text": "fun box rotr(\n  y: USize val)\n: USize val",
            "title": "rotr"
        },
        {
            "location": "/builtin-USize/#parameters_12",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_24",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-USize/#returns_25",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: USize val)\n: USize val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_13",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_26",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: USize val)\n: USize val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_14",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_27",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: USize val)\n: USize val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_15",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_28",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: USize val)\n: USize val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_16",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_29",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: USize val)\n: (USize val , USize val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_17",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_30",
            "text": "( USize  val ,  USize  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: USize val)\n: USize val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-USize/#parameters_18",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_31",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: USize val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_32",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#op_and",
            "text": "fun box op_and(\n  y: USize val)\n: USize val",
            "title": "op_and"
        },
        {
            "location": "/builtin-USize/#parameters_19",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_33",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#op_or",
            "text": "fun box op_or(\n  y: USize val)\n: USize val",
            "title": "op_or"
        },
        {
            "location": "/builtin-USize/#parameters_20",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_34",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#op_xor",
            "text": "fun box op_xor(\n  y: USize val)\n: USize val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-USize/#parameters_21",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_35",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#op_not",
            "text": "fun box op_not()\n: USize val",
            "title": "op_not"
        },
        {
            "location": "/builtin-USize/#returns_36",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#add",
            "text": "fun box add(\n  y: USize val)\n: USize val",
            "title": "add"
        },
        {
            "location": "/builtin-USize/#parameters_22",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_37",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#sub",
            "text": "fun box sub(\n  y: USize val)\n: USize val",
            "title": "sub"
        },
        {
            "location": "/builtin-USize/#parameters_23",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_38",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#mul",
            "text": "fun box mul(\n  y: USize val)\n: USize val",
            "title": "mul"
        },
        {
            "location": "/builtin-USize/#parameters_24",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_39",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#div",
            "text": "fun box div(\n  y: USize val)\n: USize val",
            "title": "div"
        },
        {
            "location": "/builtin-USize/#parameters_25",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_40",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#divmod",
            "text": "fun box divmod(\n  y: USize val)\n: (USize val , USize val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-USize/#parameters_26",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_41",
            "text": "( USize  val ,  USize  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#mod",
            "text": "fun box mod(\n  y: USize val)\n: USize val",
            "title": "mod"
        },
        {
            "location": "/builtin-USize/#parameters_27",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_42",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#neg",
            "text": "fun box neg()\n: USize val",
            "title": "neg"
        },
        {
            "location": "/builtin-USize/#returns_43",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#eq",
            "text": "fun box eq(\n  y: USize val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-USize/#parameters_28",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ne",
            "text": "fun box ne(\n  y: USize val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-USize/#parameters_29",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#lt",
            "text": "fun box lt(\n  y: USize val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-USize/#parameters_30",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#le",
            "text": "fun box le(\n  y: USize val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-USize/#parameters_31",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ge",
            "text": "fun box ge(\n  y: USize val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-USize/#parameters_32",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#gt",
            "text": "fun box gt(\n  y: USize val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-USize/#parameters_33",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-USize/#returns_50",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-USize/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-USize/#returns_52",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-USize/#returns_53",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-USize/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-USize/#returns_55",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-USize/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-USize/#returns_57",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-USize/#returns_58",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-USize/#returns_59",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-USize/#returns_60",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-USize/#returns_61",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-USize/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-USize/#returns_63",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-USize/#returns_64",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#usize_1",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-USize/#returns_65",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-USize/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-USize/#returns_67",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_68",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_69",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_71",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_72",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_73",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_74",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_75",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_76",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_77",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_79",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_80",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_81",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_82",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-USize/#returns_83",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-USize/#compare",
            "text": "fun box compare(\n  that: USize val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-USize/#parameters_34",
            "text": "that:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-USize/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/",
            "text": "U128\n\u00b6\n\n\n[Source]\n\n\nprimitive val U128 is\n  _UnsignedInteger[U128 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_UnsignedInteger[U128 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: U128 val)\n: U128 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U128 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: U128 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: U128 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext_pow2\n\u00b6\n\n\n[Source]\n\n\nfun box next_pow2()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: U128 val)\n: (U128 val , U128 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU128\n val , \nU128\n val)\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: U128 val)\n: (U128 val , U128 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU128\n val , \nU128\n val)\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: U128 val)\n: (U128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU128\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: U128 val)\n: (U128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU128\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: U128 val)\n: (U128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU128\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nrotl\n\u00b6\n\n\nfun box rotl(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nrotr\n\u00b6\n\n\nfun box rotr(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: U128 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive U128"
        },
        {
            "location": "/builtin-U128/#u128",
            "text": "[Source]  primitive val U128 is\n  _UnsignedInteger[U128 val] val",
            "title": "U128"
        },
        {
            "location": "/builtin-U128/#implements",
            "text": "_UnsignedInteger[U128 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-U128/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U128/#create",
            "text": "[Source]  new val create(\n  value: U128 val)\n: U128 val^",
            "title": "create"
        },
        {
            "location": "/builtin-U128/#parameters",
            "text": "value:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns",
            "text": "U128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: U128 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-U128/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_1",
            "text": "U128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#min_value",
            "text": "[Source]  new val min_value()\n: U128 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-U128/#returns_2",
            "text": "U128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#max_value",
            "text": "[Source]  new val max_value()\n: U128 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-U128/#returns_3",
            "text": "U128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-U128/#next_pow2",
            "text": "[Source]  fun box next_pow2()\n: U128 val",
            "title": "next_pow2"
        },
        {
            "location": "/builtin-U128/#returns_4",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#abs",
            "text": "[Source]  fun box abs()\n: U128 val",
            "title": "abs"
        },
        {
            "location": "/builtin-U128/#returns_5",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: U128 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-U128/#returns_6",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#bswap",
            "text": "[Source]  fun box bswap()\n: U128 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-U128/#returns_7",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#popcount",
            "text": "[Source]  fun box popcount()\n: U128 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-U128/#returns_8",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#clz",
            "text": "[Source]  fun box clz()\n: U128 val",
            "title": "clz"
        },
        {
            "location": "/builtin-U128/#returns_9",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ctz",
            "text": "[Source]  fun box ctz()\n: U128 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-U128/#returns_10",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U128 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_11",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U128 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_12",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U128 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-U128/#returns_13",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#min",
            "text": "[Source]  fun box min(\n  y: U128 val)\n: U128 val",
            "title": "min"
        },
        {
            "location": "/builtin-U128/#parameters_2",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_14",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#max",
            "text": "[Source]  fun box max(\n  y: U128 val)\n: U128 val",
            "title": "max"
        },
        {
            "location": "/builtin-U128/#parameters_3",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_15",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-U128/#returns_16",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-U128/#returns_17",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-U128/#returns_18",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#mul",
            "text": "[Source]  fun box mul(\n  y: U128 val)\n: U128 val",
            "title": "mul"
        },
        {
            "location": "/builtin-U128/#parameters_4",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_19",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#divmod",
            "text": "[Source]  fun box divmod(\n  y: U128 val)\n: (U128 val , U128 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-U128/#parameters_5",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_20",
            "text": "( U128  val ,  U128  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#div",
            "text": "[Source]  fun box div(\n  y: U128 val)\n: U128 val",
            "title": "div"
        },
        {
            "location": "/builtin-U128/#parameters_6",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_21",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#mod",
            "text": "[Source]  fun box mod(\n  y: U128 val)\n: U128 val",
            "title": "mod"
        },
        {
            "location": "/builtin-U128/#parameters_7",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_22",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#mul_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_8",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_23",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#divmod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: U128 val)\n: (U128 val , U128 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_9",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_24",
            "text": "( U128  val ,  U128  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#div_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_10",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_25",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#mod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_11",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_26",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-U128/#returns_27",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-U128/#returns_28",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#f32_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_29",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#f64_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_30",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#addc",
            "text": "[Source]  fun box addc(\n  y: U128 val)\n: (U128 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-U128/#parameters_12",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_31",
            "text": "( U128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#subc",
            "text": "[Source]  fun box subc(\n  y: U128 val)\n: (U128 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-U128/#parameters_13",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_32",
            "text": "( U128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#mulc",
            "text": "[Source]  fun box mulc(\n  y: U128 val)\n: (U128 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-U128/#parameters_14",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_33",
            "text": "( U128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#shl",
            "text": "fun box shl(\n  y: U128 val)\n: U128 val",
            "title": "shl"
        },
        {
            "location": "/builtin-U128/#parameters_15",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_34",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#shr",
            "text": "fun box shr(\n  y: U128 val)\n: U128 val",
            "title": "shr"
        },
        {
            "location": "/builtin-U128/#parameters_16",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_35",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_17",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_36",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_18",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_37",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#rotl",
            "text": "fun box rotl(\n  y: U128 val)\n: U128 val",
            "title": "rotl"
        },
        {
            "location": "/builtin-U128/#parameters_19",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_38",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#rotr",
            "text": "fun box rotr(\n  y: U128 val)\n: U128 val",
            "title": "rotr"
        },
        {
            "location": "/builtin-U128/#parameters_20",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_39",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_21",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_40",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: U128 val)\n: U128 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-U128/#parameters_22",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_41",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: U128 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_42",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#op_and",
            "text": "fun box op_and(\n  y: U128 val)\n: U128 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-U128/#parameters_23",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_43",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#op_or",
            "text": "fun box op_or(\n  y: U128 val)\n: U128 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-U128/#parameters_24",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_44",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#op_xor",
            "text": "fun box op_xor(\n  y: U128 val)\n: U128 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-U128/#parameters_25",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_45",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#op_not",
            "text": "fun box op_not()\n: U128 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-U128/#returns_46",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#add",
            "text": "fun box add(\n  y: U128 val)\n: U128 val",
            "title": "add"
        },
        {
            "location": "/builtin-U128/#parameters_26",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_47",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#sub",
            "text": "fun box sub(\n  y: U128 val)\n: U128 val",
            "title": "sub"
        },
        {
            "location": "/builtin-U128/#parameters_27",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_48",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#neg",
            "text": "fun box neg()\n: U128 val",
            "title": "neg"
        },
        {
            "location": "/builtin-U128/#returns_49",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#eq",
            "text": "fun box eq(\n  y: U128 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-U128/#parameters_28",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_50",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ne",
            "text": "fun box ne(\n  y: U128 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-U128/#parameters_29",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_51",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#lt",
            "text": "fun box lt(\n  y: U128 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-U128/#parameters_30",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_52",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#le",
            "text": "fun box le(\n  y: U128 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-U128/#parameters_31",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_53",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ge",
            "text": "fun box ge(\n  y: U128 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-U128/#parameters_32",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_54",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#gt",
            "text": "fun box gt(\n  y: U128 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-U128/#parameters_33",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_55",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-U128/#returns_56",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-U128/#returns_57",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-U128/#returns_58",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-U128/#returns_59",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-U128/#returns_60",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-U128/#returns_61",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-U128/#returns_62",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-U128/#returns_63",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-U128/#returns_64",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-U128/#returns_65",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-U128/#returns_66",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u128_1",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-U128/#returns_67",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-U128/#returns_68",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-U128/#returns_69",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_70",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_71",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_72",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_73",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_74",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_75",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_76",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_77",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_78",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_79",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_80",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_81",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_82",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-U128/#returns_83",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-U128/#compare",
            "text": "fun box compare(\n  that: U128 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-U128/#parameters_34",
            "text": "that:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-U128/#returns_84",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Unsigned/",
            "text": "Unsigned\n\u00b6\n\n\n[Source]\n\n\ntype Unsigned is\n  (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val)",
            "title": "type Unsigned"
        },
        {
            "location": "/builtin-Unsigned/#unsigned",
            "text": "[Source]  type Unsigned is\n  (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)",
            "title": "Unsigned"
        },
        {
            "location": "/builtin-Unsigned/#type-alias-for",
            "text": "( U8  val |  U16  val |  U32  val |  U64  val |  U128  val |  ULong  val |  USize  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-Stringable/",
            "text": "Stringable\n\u00b6\n\n\n[Source]\n\n\nThings that can be turned into a String.\n\n\ninterface box Stringable\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nGenerate a string representation of this object.\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^",
            "title": "interface Stringable"
        },
        {
            "location": "/builtin-Stringable/#stringable",
            "text": "[Source]  Things that can be turned into a String.  interface box Stringable",
            "title": "Stringable"
        },
        {
            "location": "/builtin-Stringable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Stringable/#string",
            "text": "[Source]  Generate a string representation of this object.  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Stringable/#returns",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/",
            "text": "String\n\u00b6\n\n\n[Source]\n\n\nA String is an ordered collection of characters.\n\n\nStrings don't specify an encoding.\n\n\nExample usage of some common String methods:\n\n\nactor Main\n  new create(env: Env) =>\n    try\n      // construct a new string\n      let str = \"Hello\"\n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add \" world\" to the end of our original string\n      let str_new = str.add(\" world\")\n\n      // count occurrences of letter \"l\"\n      let count = str_new.count(\"l\")\n\n      // find first occurrence of letter \"w\"\n      let first_w = str_new.find(\"w\")\n      // find first occurrence of letter \"d\"\n      let first_d = str_new.find(\"d\")\n\n      // get substring capturing \"world\"\n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end\n\n\n\n\nclass val String is\n  Seq[U8 val] ref,\n  Comparable[String box] ref,\n  Stringable box\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nSeq\n[\nU8\n val] ref\n\n\nComparable\n[\nString\n box] ref\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nAn empty string. Enough space for len bytes is reserved.\n\n\nnew ref create(\n  len: USize val = seq)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_array\n\u00b6\n\n\n[Source]\n\n\nCreate a string from an array, reusing the underlying data pointer.\n\n\nnew val from_array(\n  data: Array[U8 val] val)\n: String val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nArray\n[\nU8\n val] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val^\n\n\n\n\n\n\nfrom_iso_array\n\u00b6\n\n\n[Source]\n\n\nCreate a string from an array, reusing the underlying data pointer\n\n\nnew iso from_iso_array(\n  data: Array[U8 val] iso)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nfrom_cpointer\n\u00b6\n\n\n[Source]\n\n\nReturn a string from binary pointer data without making a\ncopy. This must be done only with C-FFI functions that return\npony_alloc'd character arrays. If a null pointer is given then an\nempty string is returned.\n\n\nnew ref from_cpointer(\n  str: Pointer[U8 val] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstr: \nPointer\n[\nU8\n val] ref\n\n\nlen: \nUSize\n val\n\n\nalloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_cstring\n\u00b6\n\n\n[Source]\n\n\nReturn a string from a pointer to a null-terminated cstring\nwithout making a copy. The data is not copied. This must be done\nonly with C-FFI functions that return pony_alloc'd character\narrays. The pointer is scanned for the first null byte, which will\nbe interpreted as the null terminator. Note that the scan is\nunbounded; the pointed to data must be null-terminated within\nthe allocated array to preserve memory safety. If a null pointer\nis given then an empty string is returned.\n\n\nnew ref from_cstring(\n  str: Pointer[U8 val] ref)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstr: \nPointer\n[\nU8\n val] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\ncopy_cpointer\n\u00b6\n\n\n[Source]\n\n\nCreate a string by copying a fixed number of bytes from a pointer.\n\n\nnew ref copy_cpointer(\n  str: Pointer[U8 val] box,\n  len: USize val)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstr: \nPointer\n[\nU8\n val] box\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\ncopy_cstring\n\u00b6\n\n\n[Source]\n\n\nCreate a string by copying a null-terminated C string. Note that\nthe scan is unbounded; the pointed to data must be null-terminated\nwithin the allocated array to preserve memory safety. If a null\npointer is given then an empty string is returned.\n\n\nnew ref copy_cstring(\n  str: Pointer[U8 val] box)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstr: \nPointer\n[\nU8\n val] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_utf32\n\u00b6\n\n\n[Source]\n\n\nCreate a UTF-8 string from a single UTF-32 code point.\n\n\nnew ref from_utf32(\n  value: U32 val)\n: String ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\npush_utf32\n\u00b6\n\n\n[Source]\n\n\nPush a UTF-32 code point.\n\n\nfun ref push_utf32(\n  value: U32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncpointer\n\u00b6\n\n\n[Source]\n\n\nReturns a C compatible pointer to the underlying string allocation.\n\n\nfun box cpointer(\n  offset: USize val = seq)\n: Pointer[U8 val] tag\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPointer\n[\nU8\n val] tag\n\n\n\n\n\n\ncstring\n\u00b6\n\n\n[Source]\n\n\nReturns a C compatible pointer to a null-terminated version of the\nstring, safe to pass to an FFI function that doesn't accept a size\nargument, expecting a null-terminator. If the underlying string\nis already null terminated, this is returned; otherwise the string\nis copied into a new, null-terminated allocation.\n\n\nfun box cstring()\n: Pointer[U8 val] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPointer\n[\nU8\n val] tag\n\n\n\n\n\n\narray\n\u00b6\n\n\n[Source]\n\n\nReturns an Array[U8] that that reuses the underlying data pointer.\n\n\nfun val array()\n: Array[U8 val] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturns the length of the string data in bytes.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncodepoints\n\u00b6\n\n\n[Source]\n\n\nReturns the number of unicode code points in the string between the two\noffsets. Index range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun box codepoints(\n  from: ISize val = seq,\n  to: ISize val = seq)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nISize\n val = seq\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\u00b6\n\n\n[Source]\n\n\nReturns the space available for data, not including the null terminator.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreserve\n\u00b6\n\n\n[Source]\n\n\nReserve space for len bytes. An additional byte will be reserved for the\nnull terminator.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncompact\n\u00b6\n\n\n[Source]\n\n\nTry to remove unused space, making it available for garbage collection. The\nrequest may be ignored. The string is returned to allow call chaining.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nrecalc\n\u00b6\n\n\n[Source]\n\n\nRecalculates the string length. This is only needed if the string is\nchanged via an FFI call. If a null terminator byte is not found within the\nallocated length, the size will not be changed.\n\n\nfun ref recalc()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\u00b6\n\n\n[Source]\n\n\nTruncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.\n\n\nNote that memory is not freed by this operation.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim_in_place\n\u00b6\n\n\n[Source]\n\n\nTrim the string to a portion of itself, covering \nfrom\n until \nto\n.\nUnlike slice, the operation does not allocate a new string nor copy\nelements.\n\n\nfun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim\n\u00b6\n\n\n[Source]\n\n\nReturn a shared portion of this string, covering \nfrom\n until \nto\n.\nBoth the original and the new string are immutable, as they share memory.\nThe operation does not allocate a new string pointer nor copy elements.\n\n\nfun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nchop\n\u00b6\n\n\n[Source]\n\n\nChops the string in half at the split point requested and returns both\nthe left and right portions. The original string is trimmed in place and\nreturned as the right portion. If the split point is larger than the\nstring, the left portion is the original string and the right portion\nis a new empty string.\nBoth strings are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new string pointer nor copy elements.\n\n\nfun iso chop(\n  split_point: USize val)\n: (String iso^ , String iso^)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsplit_point: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nString\n iso^ , \nString\n iso^)\n\n\n\n\n\n\nis_null_terminated\n\u00b6\n\n\n[Source]\n\n\nReturn true if the string is null-terminated and safe to pass to an FFI\nfunction that doesn't accept a size argument, expecting a null-terminator.\nThis method checks that there is a null byte just after the final position\nof populated bytes in the string, but does not check for other null bytes\nwhich may be present earlier in the content of the string.\nIf you need a null-terminated copy of this string, use the clone method.\n\n\nfun box is_null_terminated()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nutf32\n\u00b6\n\n\n[Source]\n\n\nReturn a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.\n\n\nfun box utf32(\n  offset: ISize val)\n: (U32 val , U8 val) ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU8\n val) ?\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturns the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: U8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nChange the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: U8 val)\n: U8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nat_offset\n\u00b6\n\n\n[Source]\n\n\nReturns the byte at the given offset. Raise an error if the offset is out\nof bounds.\n\n\nfun box at_offset(\n  offset: ISize val)\n: U8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nupdate_offset\n\u00b6\n\n\n[Source]\n\n\nChanges a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.\n\n\nfun ref update_offset(\n  offset: ISize val,\n  value: U8 val)\n: U8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nclone\n\u00b6\n\n\n[Source]\n\n\nReturns a copy of the string. The resulting string is\nnull-terminated even if the original is not.\n\n\nfun box clone()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nfind\n\u00b6\n\n\n[Source]\n\n\nReturn the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurrence of s or s is empty.\n\n\nfun box find(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\nrfind\n\u00b6\n\n\n[Source]\n\n\nReturn the index of n-th instance of \ns\n in the string starting from the\nend. The \noffset\n represents the highest index to included in the search.\nRaise an error if there is no n-th occurrence of \ns\n or \ns\n is empty.\n\n\nfun box rfind(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nReturns true if contains s as a substring, false otherwise.\n\n\nfun box contains(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncount\n\u00b6\n\n\n[Source]\n\n\nCounts the non-overlapping occurrences of s in the string.\n\n\nfun box count(\n  s: String box,\n  offset: ISize val = seq)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nat\n\u00b6\n\n\n[Source]\n\n\nReturns true if the substring s is present at the given offset.\n\n\nfun box at(\n  s: String box,\n  offset: ISize val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndelete\n\u00b6\n\n\n[Source]\n\n\nDelete len bytes at the supplied offset, compacting the string in place.\n\n\nfun ref delete(\n  offset: ISize val,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsubstring\n\u00b6\n\n\n[Source]\n\n\nReturns a substring. Index range [\nfrom\n .. \nto\n) is half-open.\nReturns an empty string if nothing is in the range.\n\n\nNote that this operation allocates a new string to be returned. For\nsimilar operations that don't allocate a new string, see \ntrim\n and\n\ntrim_in_place\n.\n\n\nfun box substring(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nlower\n\u00b6\n\n\n[Source]\n\n\nReturns a lower case version of the string.\n\n\nfun box lower()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nlower_in_place\n\u00b6\n\n\n[Source]\n\n\nTransforms the string to lower case. Currently only knows ASCII case.\n\n\nfun ref lower_in_place()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nupper\n\u00b6\n\n\n[Source]\n\n\nReturns an upper case version of the string. Currently only knows ASCII\ncase.\n\n\nfun box upper()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nupper_in_place\n\u00b6\n\n\n[Source]\n\n\nTransforms the string to upper case.\n\n\nfun ref upper_in_place()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreverse\n\u00b6\n\n\n[Source]\n\n\nReturns a reversed version of the string.\n\n\nfun box reverse()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nreverse_in_place\n\u00b6\n\n\n[Source]\n\n\nReverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.\n\n\nfun ref reverse_in_place()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\u00b6\n\n\n[Source]\n\n\nAdd a byte to the end of the string.\n\n\nfun ref push(\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\u00b6\n\n\n[Source]\n\n\nRemove a byte from the end of the string.\n\n\nfun ref pop()\n: U8 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nunshift\n\u00b6\n\n\n[Source]\n\n\nAdds a byte to the beginning of the string.\n\n\nfun ref unshift(\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\u00b6\n\n\n[Source]\n\n\nRemoves a byte from the beginning of the string.\n\n\nfun ref shift()\n: U8 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nappend\n\u00b6\n\n\n[Source]\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: ReadSeq[U8 val] box,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseq: \nReadSeq\n[\nU8\n val] box\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nAdd len iterated bytes to the end of the string, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[U8 val] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[\nU8\n val] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nTruncate the string to zero length.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert\n\u00b6\n\n\n[Source]\n\n\nReturns a version of the string with the given string inserted at the given\noffset.\n\n\nfun box insert(\n  offset: ISize val,\n  that: String val)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\nthat: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ninsert_in_place\n\u00b6\n\n\n[Source]\n\n\nInserts the given string at the given offset. Appends the string if the\noffset is out of bounds.\n\n\nfun ref insert_in_place(\n  offset: ISize val,\n  that: String box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert_byte\n\u00b6\n\n\n[Source]\n\n\nInserts a byte at the given offset. Appends if the offset is out of bounds.\n\n\nfun ref insert_byte(\n  offset: ISize val,\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncut\n\u00b6\n\n\n[Source]\n\n\nReturns a version of the string with the given range deleted.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun box cut(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ncut_in_place\n\u00b6\n\n\n[Source]\n\n\nCuts the given range out of the string.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun ref cut_in_place(\n  from: ISize val,\n  to: ISize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove all instances of s from the string. Returns the count of removed\ninstances.\n\n\nfun ref remove(\n  s: String box)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreplace\n\u00b6\n\n\n[Source]\n\n\nReplace up to n occurrences of \nfrom\n in \nthis\n with \nto\n. If n is 0, all\noccurrences will be replaced. Returns the count of replaced occurrences.\n\n\nfun ref replace(\n  from: String box,\n  to: String box,\n  n: USize val = seq)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nString\n box\n\n\nto: \nString\n box\n\n\nn: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsplit_by\n\u00b6\n\n\n[Source]\n\n\nSplit the string into an array of strings that are delimited by \ndelim\n in\nthe original string. If \nn > 0\n, then the split count is limited to n.\n\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, \n\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]\n.\n\n\nAn empty delimiter results in an array that contains a single element equal\nto the whole string.\n\n\nfun box split_by(\n  delim: String val,\n  n: USize val = seq)\n: Array[String val] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndelim: \nString\n val\n\n\nn: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nString\n val] iso^\n\n\n\n\n\n\nsplit\n\u00b6\n\n\n[Source]\n\n\nSplit the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If \nn > 0\n, then the split count is\nlimited to n.\n\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, \n\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]\n.\n\n\nfun box split(\n  delim: String val = seq,\n  n: USize val = seq)\n: Array[String val] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndelim: \nString\n val = seq\n\n\nn: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nString\n val] iso^\n\n\n\n\n\n\nstrip\n\u00b6\n\n\n[Source]\n\n\nRemove all leading and trailing characters from the string that are in s.\n\n\nfun ref strip(\n  s: String box = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nrstrip\n\u00b6\n\n\n[Source]\n\n\nRemove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.\n\n\nfun ref rstrip(\n  s: String box = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nlstrip\n\u00b6\n\n\n[Source]\n\n\nRemove all leading characters within the string that are in s. By default,\nleading whitespace is removed.\n\n\nfun ref lstrip(\n  s: String box = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ns: \nString\n box = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nReturn a string that is a concatenation of this and that.\n\n\nfun box add(\n  that: String box)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\njoin\n\u00b6\n\n\n[Source]\n\n\nReturn a string that is a concatenation of the strings in data, using this\nas a separator.\n\n\nfun box join(\n  data: Iterator[Stringable box] ref)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nIterator\n[\nStringable\n box] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ncompare\n\u00b6\n\n\n[Source]\n\n\nLexically compare two strings.\n\n\nfun box compare(\n  that: String box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\ncompare_sub\n\u00b6\n\n\n[Source]\n\n\nLexically compare at most \nn\n bytes of the substring of \nthis\n starting at\n\noffset\n with the substring of \nthat\n starting at \nthat_offset\n. The\ncomparison is case sensitive unless \nignore_case\n is \ntrue\n.\n\n\nIf the substring of \nthis\n is a proper prefix of the substring of \nthat\n,\nthen \nthis\n is \nLess\n than \nthat\n. Likewise, if \nthat\n is a proper prefix of\n\nthis\n, then \nthis\n is \nGreater\n than \nthat\n.\n\n\nBoth \noffset\n and \nthat_offset\n can be negative, in which case the offsets\nare computed from the end of the string.\n\n\nIf \nn + offset\n is greater than the length of \nthis\n, or \nn + that_offset\n\nis greater than the length of \nthat\n, then the number of positions compared\nwill be reduced to the length of the longest substring.\n\n\nNeeds to be made UTF-8 safe.\n\n\nfun box compare_sub(\n  that: String box,\n  n: USize val,\n  offset: ISize val = seq,\n  that_offset: ISize val = seq,\n  ignore_case: Bool val = seq)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\nn: \nUSize\n val\n\n\noffset: \nISize\n val = seq\n\n\nthat_offset: \nISize\n val = seq\n\n\nignore_case: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nReturns true if the two strings have the same contents.\n\n\nfun box eq(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nReturns true if this is lexically less than that. Needs to be made UTF-8\nsafe.\n\n\nfun box lt(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nReturns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.\n\n\nfun box le(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\noffset_to_index\n\u00b6\n\n\n[Source]\n\n\nfun box offset_to_index(\n  i: ISize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbool\n\u00b6\n\n\n[Source]\n\n\nfun box bool()\n: Bool val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val ?\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8(\n  base: U8 val = seq)\n: I8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val ?\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16(\n  base: U8 val = seq)\n: I16 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32(\n  base: U8 val = seq)\n: I32 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64(\n  base: U8 val = seq)\n: I64 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128(\n  base: U8 val = seq)\n: I128 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong(\n  base: U8 val = seq)\n: ILong val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val ?\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize(\n  base: U8 val = seq)\n: ISize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8(\n  base: U8 val = seq)\n: U8 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16(\n  base: U8 val = seq)\n: U16 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32(\n  base: U8 val = seq)\n: U32 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64(\n  base: U8 val = seq)\n: U64 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128(\n  base: U8 val = seq)\n: U128 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong(\n  base: U8 val = seq)\n: ULong val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val ?\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize(\n  base: U8 val = seq)\n: USize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nread_int[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) & \nInteger\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nRead an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.\n\n\nfun box read_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A] val)](\n  offset: ISize val = seq,\n  base: U8 val = seq)\n: (A , USize val) ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val = seq\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , \nUSize\n val) ?\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32(\n  offset: ISize val = seq)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64(\n  offset: ISize val = seq)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the bytes in the string.\n\n\nfun box values()\n: StringBytes ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStringBytes\n ref^\n\n\n\n\n\n\nrunes\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the codepoints in the string.\n\n\nfun box runes()\n: StringRunes ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStringRunes\n ref^\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "class String"
        },
        {
            "location": "/builtin-String/#string",
            "text": "[Source]  A String is an ordered collection of characters.  Strings don't specify an encoding.  Example usage of some common String methods:  actor Main\n  new create(env: Env) =>\n    try\n      // construct a new string\n      let str = \"Hello\"\n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add \" world\" to the end of our original string\n      let str_new = str.add(\" world\")\n\n      // count occurrences of letter \"l\"\n      let count = str_new.count(\"l\")\n\n      // find first occurrence of letter \"w\"\n      let first_w = str_new.find(\"w\")\n      // find first occurrence of letter \"d\"\n      let first_d = str_new.find(\"d\")\n\n      // get substring capturing \"world\"\n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end  class val String is\n  Seq[U8 val] ref,\n  Comparable[String box] ref,\n  Stringable box",
            "title": "String"
        },
        {
            "location": "/builtin-String/#implements",
            "text": "Seq [ U8  val] ref  Comparable [ String  box] ref  Stringable  box",
            "title": "Implements"
        },
        {
            "location": "/builtin-String/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-String/#create",
            "text": "[Source]  An empty string. Enough space for len bytes is reserved.  new ref create(\n  len: USize val = seq)\n: String ref^",
            "title": "create"
        },
        {
            "location": "/builtin-String/#parameters",
            "text": "len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#from_array",
            "text": "[Source]  Create a string from an array, reusing the underlying data pointer.  new val from_array(\n  data: Array[U8 val] val)\n: String val^",
            "title": "from_array"
        },
        {
            "location": "/builtin-String/#parameters_1",
            "text": "data:  Array [ U8  val] val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_1",
            "text": "String  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#from_iso_array",
            "text": "[Source]  Create a string from an array, reusing the underlying data pointer  new iso from_iso_array(\n  data: Array[U8 val] iso)\n: String iso^",
            "title": "from_iso_array"
        },
        {
            "location": "/builtin-String/#parameters_2",
            "text": "data:  Array [ U8  val] iso",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_2",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#from_cpointer",
            "text": "[Source]  Return a string from binary pointer data without making a\ncopy. This must be done only with C-FFI functions that return\npony_alloc'd character arrays. If a null pointer is given then an\nempty string is returned.  new ref from_cpointer(\n  str: Pointer[U8 val] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: String ref^",
            "title": "from_cpointer"
        },
        {
            "location": "/builtin-String/#parameters_3",
            "text": "str:  Pointer [ U8  val] ref  len:  USize  val  alloc:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_3",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#from_cstring",
            "text": "[Source]  Return a string from a pointer to a null-terminated cstring\nwithout making a copy. The data is not copied. This must be done\nonly with C-FFI functions that return pony_alloc'd character\narrays. The pointer is scanned for the first null byte, which will\nbe interpreted as the null terminator. Note that the scan is\nunbounded; the pointed to data must be null-terminated within\nthe allocated array to preserve memory safety. If a null pointer\nis given then an empty string is returned.  new ref from_cstring(\n  str: Pointer[U8 val] ref)\n: String ref^",
            "title": "from_cstring"
        },
        {
            "location": "/builtin-String/#parameters_4",
            "text": "str:  Pointer [ U8  val] ref",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_4",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#copy_cpointer",
            "text": "[Source]  Create a string by copying a fixed number of bytes from a pointer.  new ref copy_cpointer(\n  str: Pointer[U8 val] box,\n  len: USize val)\n: String ref^",
            "title": "copy_cpointer"
        },
        {
            "location": "/builtin-String/#parameters_5",
            "text": "str:  Pointer [ U8  val] box  len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_5",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#copy_cstring",
            "text": "[Source]  Create a string by copying a null-terminated C string. Note that\nthe scan is unbounded; the pointed to data must be null-terminated\nwithin the allocated array to preserve memory safety. If a null\npointer is given then an empty string is returned.  new ref copy_cstring(\n  str: Pointer[U8 val] box)\n: String ref^",
            "title": "copy_cstring"
        },
        {
            "location": "/builtin-String/#parameters_6",
            "text": "str:  Pointer [ U8  val] box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_6",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#from_utf32",
            "text": "[Source]  Create a UTF-8 string from a single UTF-32 code point.  new ref from_utf32(\n  value: U32 val)\n: String ref^",
            "title": "from_utf32"
        },
        {
            "location": "/builtin-String/#parameters_7",
            "text": "value:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_7",
            "text": "String  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-String/#push_utf32",
            "text": "[Source]  Push a UTF-32 code point.  fun ref push_utf32(\n  value: U32 val)\n: None val",
            "title": "push_utf32"
        },
        {
            "location": "/builtin-String/#parameters_8",
            "text": "value:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#cpointer",
            "text": "[Source]  Returns a C compatible pointer to the underlying string allocation.  fun box cpointer(\n  offset: USize val = seq)\n: Pointer[U8 val] tag",
            "title": "cpointer"
        },
        {
            "location": "/builtin-String/#parameters_9",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_9",
            "text": "Pointer [ U8  val] tag",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#cstring",
            "text": "[Source]  Returns a C compatible pointer to a null-terminated version of the\nstring, safe to pass to an FFI function that doesn't accept a size\nargument, expecting a null-terminator. If the underlying string\nis already null terminated, this is returned; otherwise the string\nis copied into a new, null-terminated allocation.  fun box cstring()\n: Pointer[U8 val] tag",
            "title": "cstring"
        },
        {
            "location": "/builtin-String/#returns_10",
            "text": "Pointer [ U8  val] tag",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#array",
            "text": "[Source]  Returns an Array[U8] that that reuses the underlying data pointer.  fun val array()\n: Array[U8 val] val",
            "title": "array"
        },
        {
            "location": "/builtin-String/#returns_11",
            "text": "Array [ U8  val] val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#size",
            "text": "[Source]  Returns the length of the string data in bytes.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/builtin-String/#returns_12",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#codepoints",
            "text": "[Source]  Returns the number of unicode code points in the string between the two\noffsets. Index range [ from  ..  to ) is half-open.  fun box codepoints(\n  from: ISize val = seq,\n  to: ISize val = seq)\n: USize val",
            "title": "codepoints"
        },
        {
            "location": "/builtin-String/#parameters_10",
            "text": "from:  ISize  val = seq  to:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_13",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#space",
            "text": "[Source]  Returns the space available for data, not including the null terminator.  fun box space()\n: USize val",
            "title": "space"
        },
        {
            "location": "/builtin-String/#returns_14",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#reserve",
            "text": "[Source]  Reserve space for len bytes. An additional byte will be reserved for the\nnull terminator.  fun ref reserve(\n  len: USize val)\n: None val",
            "title": "reserve"
        },
        {
            "location": "/builtin-String/#parameters_11",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_15",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#compact",
            "text": "[Source]  Try to remove unused space, making it available for garbage collection. The\nrequest may be ignored. The string is returned to allow call chaining.  fun ref compact()\n: None val",
            "title": "compact"
        },
        {
            "location": "/builtin-String/#returns_16",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#recalc",
            "text": "[Source]  Recalculates the string length. This is only needed if the string is\nchanged via an FFI call. If a null terminator byte is not found within the\nallocated length, the size will not be changed.  fun ref recalc()\n: None val",
            "title": "recalc"
        },
        {
            "location": "/builtin-String/#returns_17",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#truncate",
            "text": "[Source]  Truncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.  Note that memory is not freed by this operation.  fun ref truncate(\n  len: USize val)\n: None val",
            "title": "truncate"
        },
        {
            "location": "/builtin-String/#parameters_12",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_18",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#trim_in_place",
            "text": "[Source]  Trim the string to a portion of itself, covering  from  until  to .\nUnlike slice, the operation does not allocate a new string nor copy\nelements.  fun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val",
            "title": "trim_in_place"
        },
        {
            "location": "/builtin-String/#parameters_13",
            "text": "from:  USize  val = seq  to:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_19",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#trim",
            "text": "[Source]  Return a shared portion of this string, covering  from  until  to .\nBoth the original and the new string are immutable, as they share memory.\nThe operation does not allocate a new string pointer nor copy elements.  fun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: String val",
            "title": "trim"
        },
        {
            "location": "/builtin-String/#parameters_14",
            "text": "from:  USize  val = seq  to:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_20",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#chop",
            "text": "[Source]  Chops the string in half at the split point requested and returns both\nthe left and right portions. The original string is trimmed in place and\nreturned as the right portion. If the split point is larger than the\nstring, the left portion is the original string and the right portion\nis a new empty string.\nBoth strings are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new string pointer nor copy elements.  fun iso chop(\n  split_point: USize val)\n: (String iso^ , String iso^)",
            "title": "chop"
        },
        {
            "location": "/builtin-String/#parameters_15",
            "text": "split_point:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_21",
            "text": "( String  iso^ ,  String  iso^)",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#is_null_terminated",
            "text": "[Source]  Return true if the string is null-terminated and safe to pass to an FFI\nfunction that doesn't accept a size argument, expecting a null-terminator.\nThis method checks that there is a null byte just after the final position\nof populated bytes in the string, but does not check for other null bytes\nwhich may be present earlier in the content of the string.\nIf you need a null-terminated copy of this string, use the clone method.  fun box is_null_terminated()\n: Bool val",
            "title": "is_null_terminated"
        },
        {
            "location": "/builtin-String/#returns_22",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#utf32",
            "text": "[Source]  Return a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.  fun box utf32(\n  offset: ISize val)\n: (U32 val , U8 val) ?",
            "title": "utf32"
        },
        {
            "location": "/builtin-String/#parameters_16",
            "text": "offset:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_23",
            "text": "( U32  val ,  U8  val) ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#apply",
            "text": "[Source]  Returns the i-th byte. Raise an error if the index is out of bounds.  fun box apply(\n  i: USize val)\n: U8 val ?",
            "title": "apply"
        },
        {
            "location": "/builtin-String/#parameters_17",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_24",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#update",
            "text": "[Source]  Change the i-th byte. Raise an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: U8 val)\n: U8 val ?",
            "title": "update"
        },
        {
            "location": "/builtin-String/#parameters_18",
            "text": "i:  USize  val  value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_25",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#at_offset",
            "text": "[Source]  Returns the byte at the given offset. Raise an error if the offset is out\nof bounds.  fun box at_offset(\n  offset: ISize val)\n: U8 val ?",
            "title": "at_offset"
        },
        {
            "location": "/builtin-String/#parameters_19",
            "text": "offset:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_26",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#update_offset",
            "text": "[Source]  Changes a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.  fun ref update_offset(\n  offset: ISize val,\n  value: U8 val)\n: U8 val ?",
            "title": "update_offset"
        },
        {
            "location": "/builtin-String/#parameters_20",
            "text": "offset:  ISize  val  value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_27",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#clone",
            "text": "[Source]  Returns a copy of the string. The resulting string is\nnull-terminated even if the original is not.  fun box clone()\n: String iso^",
            "title": "clone"
        },
        {
            "location": "/builtin-String/#returns_28",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#find",
            "text": "[Source]  Return the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurrence of s or s is empty.  fun box find(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?",
            "title": "find"
        },
        {
            "location": "/builtin-String/#parameters_21",
            "text": "s:  String  box  offset:  ISize  val = seq  nth:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_29",
            "text": "ISize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#rfind",
            "text": "[Source]  Return the index of n-th instance of  s  in the string starting from the\nend. The  offset  represents the highest index to included in the search.\nRaise an error if there is no n-th occurrence of  s  or  s  is empty.  fun box rfind(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?",
            "title": "rfind"
        },
        {
            "location": "/builtin-String/#parameters_22",
            "text": "s:  String  box  offset:  ISize  val = seq  nth:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_30",
            "text": "ISize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#contains",
            "text": "[Source]  Returns true if contains s as a substring, false otherwise.  fun box contains(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/builtin-String/#parameters_23",
            "text": "s:  String  box  offset:  ISize  val = seq  nth:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_31",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#count",
            "text": "[Source]  Counts the non-overlapping occurrences of s in the string.  fun box count(\n  s: String box,\n  offset: ISize val = seq)\n: USize val",
            "title": "count"
        },
        {
            "location": "/builtin-String/#parameters_24",
            "text": "s:  String  box  offset:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_32",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#at",
            "text": "[Source]  Returns true if the substring s is present at the given offset.  fun box at(\n  s: String box,\n  offset: ISize val = seq)\n: Bool val",
            "title": "at"
        },
        {
            "location": "/builtin-String/#parameters_25",
            "text": "s:  String  box  offset:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_33",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#delete",
            "text": "[Source]  Delete len bytes at the supplied offset, compacting the string in place.  fun ref delete(\n  offset: ISize val,\n  len: USize val = seq)\n: None val",
            "title": "delete"
        },
        {
            "location": "/builtin-String/#parameters_26",
            "text": "offset:  ISize  val  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_34",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#substring",
            "text": "[Source]  Returns a substring. Index range [ from  ..  to ) is half-open.\nReturns an empty string if nothing is in the range.  Note that this operation allocates a new string to be returned. For\nsimilar operations that don't allocate a new string, see  trim  and trim_in_place .  fun box substring(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^",
            "title": "substring"
        },
        {
            "location": "/builtin-String/#parameters_27",
            "text": "from:  ISize  val  to:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_35",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#lower",
            "text": "[Source]  Returns a lower case version of the string.  fun box lower()\n: String iso^",
            "title": "lower"
        },
        {
            "location": "/builtin-String/#returns_36",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#lower_in_place",
            "text": "[Source]  Transforms the string to lower case. Currently only knows ASCII case.  fun ref lower_in_place()\n: None val",
            "title": "lower_in_place"
        },
        {
            "location": "/builtin-String/#returns_37",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#upper",
            "text": "[Source]  Returns an upper case version of the string. Currently only knows ASCII\ncase.  fun box upper()\n: String iso^",
            "title": "upper"
        },
        {
            "location": "/builtin-String/#returns_38",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#upper_in_place",
            "text": "[Source]  Transforms the string to upper case.  fun ref upper_in_place()\n: None val",
            "title": "upper_in_place"
        },
        {
            "location": "/builtin-String/#returns_39",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#reverse",
            "text": "[Source]  Returns a reversed version of the string.  fun box reverse()\n: String iso^",
            "title": "reverse"
        },
        {
            "location": "/builtin-String/#returns_40",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#reverse_in_place",
            "text": "[Source]  Reverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.  fun ref reverse_in_place()\n: None val",
            "title": "reverse_in_place"
        },
        {
            "location": "/builtin-String/#returns_41",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#push",
            "text": "[Source]  Add a byte to the end of the string.  fun ref push(\n  value: U8 val)\n: None val",
            "title": "push"
        },
        {
            "location": "/builtin-String/#parameters_28",
            "text": "value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_42",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#pop",
            "text": "[Source]  Remove a byte from the end of the string.  fun ref pop()\n: U8 val ?",
            "title": "pop"
        },
        {
            "location": "/builtin-String/#returns_43",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#unshift",
            "text": "[Source]  Adds a byte to the beginning of the string.  fun ref unshift(\n  value: U8 val)\n: None val",
            "title": "unshift"
        },
        {
            "location": "/builtin-String/#parameters_29",
            "text": "value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_44",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#shift",
            "text": "[Source]  Removes a byte from the beginning of the string.  fun ref shift()\n: U8 val ?",
            "title": "shift"
        },
        {
            "location": "/builtin-String/#returns_45",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#append",
            "text": "[Source]  Append the elements from a sequence, starting from the given offset.  fun ref append(\n  seq: ReadSeq[U8 val] box,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "append"
        },
        {
            "location": "/builtin-String/#parameters_30",
            "text": "seq:  ReadSeq [ U8  val] box  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_46",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#concat",
            "text": "[Source]  Add len iterated bytes to the end of the string, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[U8 val] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "concat"
        },
        {
            "location": "/builtin-String/#parameters_31",
            "text": "iter:  Iterator [ U8  val] ref  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_47",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#clear",
            "text": "[Source]  Truncate the string to zero length.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/builtin-String/#returns_48",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#insert",
            "text": "[Source]  Returns a version of the string with the given string inserted at the given\noffset.  fun box insert(\n  offset: ISize val,\n  that: String val)\n: String iso^",
            "title": "insert"
        },
        {
            "location": "/builtin-String/#parameters_32",
            "text": "offset:  ISize  val  that:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_49",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#insert_in_place",
            "text": "[Source]  Inserts the given string at the given offset. Appends the string if the\noffset is out of bounds.  fun ref insert_in_place(\n  offset: ISize val,\n  that: String box)\n: None val",
            "title": "insert_in_place"
        },
        {
            "location": "/builtin-String/#parameters_33",
            "text": "offset:  ISize  val  that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_50",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#insert_byte",
            "text": "[Source]  Inserts a byte at the given offset. Appends if the offset is out of bounds.  fun ref insert_byte(\n  offset: ISize val,\n  value: U8 val)\n: None val",
            "title": "insert_byte"
        },
        {
            "location": "/builtin-String/#parameters_34",
            "text": "offset:  ISize  val  value:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_51",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#cut",
            "text": "[Source]  Returns a version of the string with the given range deleted.\nIndex range [ from  ..  to ) is half-open.  fun box cut(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^",
            "title": "cut"
        },
        {
            "location": "/builtin-String/#parameters_35",
            "text": "from:  ISize  val  to:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_52",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#cut_in_place",
            "text": "[Source]  Cuts the given range out of the string.\nIndex range [ from  ..  to ) is half-open.  fun ref cut_in_place(\n  from: ISize val,\n  to: ISize val = seq)\n: None val",
            "title": "cut_in_place"
        },
        {
            "location": "/builtin-String/#parameters_36",
            "text": "from:  ISize  val  to:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_53",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#remove",
            "text": "[Source]  Remove all instances of s from the string. Returns the count of removed\ninstances.  fun ref remove(\n  s: String box)\n: USize val",
            "title": "remove"
        },
        {
            "location": "/builtin-String/#parameters_37",
            "text": "s:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_54",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#replace",
            "text": "[Source]  Replace up to n occurrences of  from  in  this  with  to . If n is 0, all\noccurrences will be replaced. Returns the count of replaced occurrences.  fun ref replace(\n  from: String box,\n  to: String box,\n  n: USize val = seq)\n: USize val",
            "title": "replace"
        },
        {
            "location": "/builtin-String/#parameters_38",
            "text": "from:  String  box  to:  String  box  n:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_55",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#split_by",
            "text": "[Source]  Split the string into an array of strings that are delimited by  delim  in\nthe original string. If  n > 0 , then the split count is limited to n.  Adjacent delimiters result in a zero length entry in the array. For\nexample,  \"1,,2\".split(\",\") => [\"1\", \"\", \"2\"] .  An empty delimiter results in an array that contains a single element equal\nto the whole string.  fun box split_by(\n  delim: String val,\n  n: USize val = seq)\n: Array[String val] iso^",
            "title": "split_by"
        },
        {
            "location": "/builtin-String/#parameters_39",
            "text": "delim:  String  val  n:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_56",
            "text": "Array [ String  val] iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#split",
            "text": "[Source]  Split the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If  n > 0 , then the split count is\nlimited to n.  Adjacent delimiters result in a zero length entry in the array. For\nexample,  \"1,,2\".split(\",\") => [\"1\", \"\", \"2\"] .  fun box split(\n  delim: String val = seq,\n  n: USize val = seq)\n: Array[String val] iso^",
            "title": "split"
        },
        {
            "location": "/builtin-String/#parameters_40",
            "text": "delim:  String  val = seq  n:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_57",
            "text": "Array [ String  val] iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#strip",
            "text": "[Source]  Remove all leading and trailing characters from the string that are in s.  fun ref strip(\n  s: String box = seq)\n: None val",
            "title": "strip"
        },
        {
            "location": "/builtin-String/#parameters_41",
            "text": "s:  String  box = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_58",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#rstrip",
            "text": "[Source]  Remove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.  fun ref rstrip(\n  s: String box = seq)\n: None val",
            "title": "rstrip"
        },
        {
            "location": "/builtin-String/#parameters_42",
            "text": "s:  String  box = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_59",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#lstrip",
            "text": "[Source]  Remove all leading characters within the string that are in s. By default,\nleading whitespace is removed.  fun ref lstrip(\n  s: String box = seq)\n: None val",
            "title": "lstrip"
        },
        {
            "location": "/builtin-String/#parameters_43",
            "text": "s:  String  box = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_60",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#add",
            "text": "[Source]  Return a string that is a concatenation of this and that.  fun box add(\n  that: String box)\n: String val",
            "title": "add"
        },
        {
            "location": "/builtin-String/#parameters_44",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_61",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#join",
            "text": "[Source]  Return a string that is a concatenation of the strings in data, using this\nas a separator.  fun box join(\n  data: Iterator[Stringable box] ref)\n: String iso^",
            "title": "join"
        },
        {
            "location": "/builtin-String/#parameters_45",
            "text": "data:  Iterator [ Stringable  box] ref",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_62",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#compare",
            "text": "[Source]  Lexically compare two strings.  fun box compare(\n  that: String box)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-String/#parameters_46",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_63",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#compare_sub",
            "text": "[Source]  Lexically compare at most  n  bytes of the substring of  this  starting at offset  with the substring of  that  starting at  that_offset . The\ncomparison is case sensitive unless  ignore_case  is  true .  If the substring of  this  is a proper prefix of the substring of  that ,\nthen  this  is  Less  than  that . Likewise, if  that  is a proper prefix of this , then  this  is  Greater  than  that .  Both  offset  and  that_offset  can be negative, in which case the offsets\nare computed from the end of the string.  If  n + offset  is greater than the length of  this , or  n + that_offset \nis greater than the length of  that , then the number of positions compared\nwill be reduced to the length of the longest substring.  Needs to be made UTF-8 safe.  fun box compare_sub(\n  that: String box,\n  n: USize val,\n  offset: ISize val = seq,\n  that_offset: ISize val = seq,\n  ignore_case: Bool val = seq)\n: (Less val | Equal val | Greater val)",
            "title": "compare_sub"
        },
        {
            "location": "/builtin-String/#parameters_47",
            "text": "that:  String  box  n:  USize  val  offset:  ISize  val = seq  that_offset:  ISize  val = seq  ignore_case:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_64",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#eq",
            "text": "[Source]  Returns true if the two strings have the same contents.  fun box eq(\n  that: String box)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-String/#parameters_48",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_65",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#lt",
            "text": "[Source]  Returns true if this is lexically less than that. Needs to be made UTF-8\nsafe.  fun box lt(\n  that: String box)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-String/#parameters_49",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_66",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#le",
            "text": "[Source]  Returns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.  fun box le(\n  that: String box)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-String/#parameters_50",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_67",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#offset_to_index",
            "text": "[Source]  fun box offset_to_index(\n  i: ISize val)\n: USize val",
            "title": "offset_to_index"
        },
        {
            "location": "/builtin-String/#parameters_51",
            "text": "i:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_68",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#bool",
            "text": "[Source]  fun box bool()\n: Bool val ?",
            "title": "bool"
        },
        {
            "location": "/builtin-String/#returns_69",
            "text": "Bool  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#i8",
            "text": "[Source]  fun box i8(\n  base: U8 val = seq)\n: I8 val ?",
            "title": "i8"
        },
        {
            "location": "/builtin-String/#parameters_52",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_70",
            "text": "I8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#i16",
            "text": "[Source]  fun box i16(\n  base: U8 val = seq)\n: I16 val ?",
            "title": "i16"
        },
        {
            "location": "/builtin-String/#parameters_53",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_71",
            "text": "I16  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#i32",
            "text": "[Source]  fun box i32(\n  base: U8 val = seq)\n: I32 val ?",
            "title": "i32"
        },
        {
            "location": "/builtin-String/#parameters_54",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_72",
            "text": "I32  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#i64",
            "text": "[Source]  fun box i64(\n  base: U8 val = seq)\n: I64 val ?",
            "title": "i64"
        },
        {
            "location": "/builtin-String/#parameters_55",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_73",
            "text": "I64  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#i128",
            "text": "[Source]  fun box i128(\n  base: U8 val = seq)\n: I128 val ?",
            "title": "i128"
        },
        {
            "location": "/builtin-String/#parameters_56",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_74",
            "text": "I128  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#ilong",
            "text": "[Source]  fun box ilong(\n  base: U8 val = seq)\n: ILong val ?",
            "title": "ilong"
        },
        {
            "location": "/builtin-String/#parameters_57",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_75",
            "text": "ILong  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#isize",
            "text": "[Source]  fun box isize(\n  base: U8 val = seq)\n: ISize val ?",
            "title": "isize"
        },
        {
            "location": "/builtin-String/#parameters_58",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_76",
            "text": "ISize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#u8",
            "text": "[Source]  fun box u8(\n  base: U8 val = seq)\n: U8 val ?",
            "title": "u8"
        },
        {
            "location": "/builtin-String/#parameters_59",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_77",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#u16",
            "text": "[Source]  fun box u16(\n  base: U8 val = seq)\n: U16 val ?",
            "title": "u16"
        },
        {
            "location": "/builtin-String/#parameters_60",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_78",
            "text": "U16  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#u32",
            "text": "[Source]  fun box u32(\n  base: U8 val = seq)\n: U32 val ?",
            "title": "u32"
        },
        {
            "location": "/builtin-String/#parameters_61",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_79",
            "text": "U32  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#u64",
            "text": "[Source]  fun box u64(\n  base: U8 val = seq)\n: U64 val ?",
            "title": "u64"
        },
        {
            "location": "/builtin-String/#parameters_62",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_80",
            "text": "U64  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#u128",
            "text": "[Source]  fun box u128(\n  base: U8 val = seq)\n: U128 val ?",
            "title": "u128"
        },
        {
            "location": "/builtin-String/#parameters_63",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_81",
            "text": "U128  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#ulong",
            "text": "[Source]  fun box ulong(\n  base: U8 val = seq)\n: ULong val ?",
            "title": "ulong"
        },
        {
            "location": "/builtin-String/#parameters_64",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_82",
            "text": "ULong  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#usize",
            "text": "[Source]  fun box usize(\n  base: U8 val = seq)\n: USize val ?",
            "title": "usize"
        },
        {
            "location": "/builtin-String/#parameters_65",
            "text": "base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_83",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#read_int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93",
            "text": "[Source]  Read an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.  fun box read_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A] val)](\n  offset: ISize val = seq,\n  base: U8 val = seq)\n: (A , USize val) ?",
            "title": "read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"
        },
        {
            "location": "/builtin-String/#parameters_66",
            "text": "offset:  ISize  val = seq  base:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_84",
            "text": "(A ,  USize  val) ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#f32",
            "text": "[Source]  fun box f32(\n  offset: ISize val = seq)\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-String/#parameters_67",
            "text": "offset:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_85",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#f64",
            "text": "[Source]  fun box f64(\n  offset: ISize val = seq)\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-String/#parameters_68",
            "text": "offset:  ISize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_86",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-String/#returns_87",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-String/#returns_88",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#string_1",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-String/#returns_89",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#values",
            "text": "[Source]  Return an iterator over the bytes in the string.  fun box values()\n: StringBytes ref^",
            "title": "values"
        },
        {
            "location": "/builtin-String/#returns_90",
            "text": "StringBytes  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#runes",
            "text": "[Source]  Return an iterator over the codepoints in the string.  fun box runes()\n: StringRunes ref^",
            "title": "runes"
        },
        {
            "location": "/builtin-String/#returns_91",
            "text": "StringRunes  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#ge",
            "text": "fun box ge(\n  that: String box)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-String/#parameters_69",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_92",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#gt",
            "text": "fun box gt(\n  that: String box)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-String/#parameters_70",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_93",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-String/#ne",
            "text": "fun box ne(\n  that: String box)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-String/#parameters_71",
            "text": "that:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-String/#returns_94",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringBytes/",
            "text": "StringBytes\n\u00b6\n\n\n[Source]\n\n\nclass ref StringBytes is\n  Iterator[U8 val] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[\nU8\n val] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  string: String box)\n: StringBytes ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstring: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStringBytes\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: U8 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val ?",
            "title": "class StringBytes"
        },
        {
            "location": "/builtin-StringBytes/#stringbytes",
            "text": "[Source]  class ref StringBytes is\n  Iterator[U8 val] ref",
            "title": "StringBytes"
        },
        {
            "location": "/builtin-StringBytes/#implements",
            "text": "Iterator [ U8  val] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-StringBytes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-StringBytes/#create",
            "text": "[Source]  new ref create(\n  string: String box)\n: StringBytes ref^",
            "title": "create"
        },
        {
            "location": "/builtin-StringBytes/#parameters",
            "text": "string:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StringBytes/#returns",
            "text": "StringBytes  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringBytes/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-StringBytes/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-StringBytes/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringBytes/#next",
            "text": "[Source]  fun ref next()\n: U8 val ?",
            "title": "next"
        },
        {
            "location": "/builtin-StringBytes/#returns_2",
            "text": "U8  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringRunes/",
            "text": "StringRunes\n\u00b6\n\n\n[Source]\n\n\nclass ref StringRunes is\n  Iterator[U32 val] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[\nU32\n val] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  string: String box)\n: StringRunes ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstring: \nString\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nStringRunes\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: U32 val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val ?",
            "title": "class StringRunes"
        },
        {
            "location": "/builtin-StringRunes/#stringrunes",
            "text": "[Source]  class ref StringRunes is\n  Iterator[U32 val] ref",
            "title": "StringRunes"
        },
        {
            "location": "/builtin-StringRunes/#implements",
            "text": "Iterator [ U32  val] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-StringRunes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-StringRunes/#create",
            "text": "[Source]  new ref create(\n  string: String box)\n: StringRunes ref^",
            "title": "create"
        },
        {
            "location": "/builtin-StringRunes/#parameters",
            "text": "string:  String  box",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StringRunes/#returns",
            "text": "StringRunes  ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringRunes/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-StringRunes/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-StringRunes/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-StringRunes/#next",
            "text": "[Source]  fun ref next()\n: U32 val ?",
            "title": "next"
        },
        {
            "location": "/builtin-StringRunes/#returns_2",
            "text": "U32  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-InputNotify/",
            "text": "InputNotify\n\u00b6\n\n\n[Source]\n\n\nNotification for data arriving via an input stream.\n\n\ninterface ref InputNotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nCalled when data is available on the stream.\n\n\nfun ref apply(\n  data: Array[U8 val] iso)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nCalled when no more data will arrive on the stream.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface InputNotify"
        },
        {
            "location": "/builtin-InputNotify/#inputnotify",
            "text": "[Source]  Notification for data arriving via an input stream.  interface ref InputNotify",
            "title": "InputNotify"
        },
        {
            "location": "/builtin-InputNotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-InputNotify/#apply",
            "text": "[Source]  Called when data is available on the stream.  fun ref apply(\n  data: Array[U8 val] iso)\n: None val",
            "title": "apply"
        },
        {
            "location": "/builtin-InputNotify/#parameters",
            "text": "data:  Array [ U8  val] iso",
            "title": "Parameters"
        },
        {
            "location": "/builtin-InputNotify/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-InputNotify/#dispose",
            "text": "[Source]  Called when no more data will arrive on the stream.  fun ref dispose()\n: None val",
            "title": "dispose"
        },
        {
            "location": "/builtin-InputNotify/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-DisposableActor/",
            "text": "DisposableActor\n\u00b6\n\n\n[Source]\n\n\nAn interface used to asynchronously dispose of an actor.\n\n\ninterface tag DisposableActor\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nbe dispose()",
            "title": "interface DisposableActor"
        },
        {
            "location": "/builtin-DisposableActor/#disposableactor",
            "text": "[Source]  An interface used to asynchronously dispose of an actor.  interface tag DisposableActor",
            "title": "DisposableActor"
        },
        {
            "location": "/builtin-DisposableActor/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-DisposableActor/#dispose",
            "text": "[Source]  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/builtin-InputStream/",
            "text": "InputStream\n\u00b6\n\n\n[Source]\n\n\nAsynchronous access to some input stream.\n\n\ninterface tag InputStream\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nSet the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.\n\n\nbe apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = seq)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: (\nInputNotify\n iso | \nNone\n val)\n\n\nchunk_size: \nUSize\n val = seq\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nClear the notifier in order to shut down input.\n\n\nbe dispose()",
            "title": "interface InputStream"
        },
        {
            "location": "/builtin-InputStream/#inputstream",
            "text": "[Source]  Asynchronous access to some input stream.  interface tag InputStream",
            "title": "InputStream"
        },
        {
            "location": "/builtin-InputStream/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-InputStream/#apply",
            "text": "[Source]  Set the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.  be apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = seq)",
            "title": "apply"
        },
        {
            "location": "/builtin-InputStream/#parameters",
            "text": "notify: ( InputNotify  iso |  None  val)  chunk_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-InputStream/#dispose",
            "text": "[Source]  Clear the notifier in order to shut down input.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/builtin-Stdin/",
            "text": "Stdin\n\u00b6\n\n\n[Source]\n\n\nAsynchronous access to stdin. The constructor is private to ensure that\naccess is provided only via an environment.\n\n\nReading from stdin is done by registering an \nInputNotify\n:\n\n\nactor Main\n  new create(env: Env) =>\n    // do not forget to call `env.input.dispose` at some point\n    env.input(\n      object iso is InputNotify\n        fun ref apply(data: Array[U8] iso) =>\n          env.out.write(String.from_iso_array(consume data))\n\n        fun ref dispose() =>\n          env.out.print(\"Done.\")\n      end,\n      512)\n\n\n\n\nNote:\n For reading user input from a terminal, use the \nreadline\n package.\n\n\nactor tag Stdin\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nSet the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.\n\n\nbe apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = seq)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: (\nInputNotify\n iso | \nNone\n val)\n\n\nchunk_size: \nUSize\n val = seq\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nClear the notifier in order to shut down input.\n\n\nbe dispose()",
            "title": "actor Stdin"
        },
        {
            "location": "/builtin-Stdin/#stdin",
            "text": "[Source]  Asynchronous access to stdin. The constructor is private to ensure that\naccess is provided only via an environment.  Reading from stdin is done by registering an  InputNotify :  actor Main\n  new create(env: Env) =>\n    // do not forget to call `env.input.dispose` at some point\n    env.input(\n      object iso is InputNotify\n        fun ref apply(data: Array[U8] iso) =>\n          env.out.write(String.from_iso_array(consume data))\n\n        fun ref dispose() =>\n          env.out.print(\"Done.\")\n      end,\n      512)  Note:  For reading user input from a terminal, use the  readline  package.  actor tag Stdin",
            "title": "Stdin"
        },
        {
            "location": "/builtin-Stdin/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-Stdin/#apply",
            "text": "[Source]  Set the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.  be apply(\n  notify: (InputNotify iso | None val),\n  chunk_size: USize val = seq)",
            "title": "apply"
        },
        {
            "location": "/builtin-Stdin/#parameters",
            "text": "notify: ( InputNotify  iso |  None  val)  chunk_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Stdin/#dispose",
            "text": "[Source]  Clear the notifier in order to shut down input.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/builtin-ByteSeq/",
            "text": "ByteSeq\n\u00b6\n\n\n[Source]\n\n\ntype ByteSeq is\n  (String val | Array[U8 val] val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nString\n val | \nArray\n[\nU8\n val] val)",
            "title": "type ByteSeq"
        },
        {
            "location": "/builtin-ByteSeq/#byteseq",
            "text": "[Source]  type ByteSeq is\n  (String val | Array[U8 val] val)",
            "title": "ByteSeq"
        },
        {
            "location": "/builtin-ByteSeq/#type-alias-for",
            "text": "( String  val |  Array [ U8  val] val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-ByteSeqIter/",
            "text": "ByteSeqIter\n\u00b6\n\n\n[Source]\n\n\nAccept an iterable collection of String or Array[U8] val.\n\n\ninterface val ByteSeqIter\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nfun box values()\n: Iterator[(this->String box | this->Array[U8 val] box)] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nIterator\n[(this->\nString\n box | this->\nArray\n[\nU8\n val] box)] ref",
            "title": "interface ByteSeqIter"
        },
        {
            "location": "/builtin-ByteSeqIter/#byteseqiter",
            "text": "[Source]  Accept an iterable collection of String or Array[U8] val.  interface val ByteSeqIter",
            "title": "ByteSeqIter"
        },
        {
            "location": "/builtin-ByteSeqIter/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ByteSeqIter/#values",
            "text": "[Source]  fun box values()\n: Iterator[(this->String box | this->Array[U8 val] box)] ref",
            "title": "values"
        },
        {
            "location": "/builtin-ByteSeqIter/#returns",
            "text": "Iterator [(this-> String  box | this-> Array [ U8  val] box)] ref",
            "title": "Returns"
        },
        {
            "location": "/builtin-OutStream/",
            "text": "OutStream\n\u00b6\n\n\n[Source]\n\n\nAsnychronous access to some output stream.\n\n\ninterface tag OutStream\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\nprint\n\u00b6\n\n\n[Source]\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe print(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nprintv\n\u00b6\n\n\n[Source]\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe printv(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nwritev\n\u00b6\n\n\n[Source]\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val",
            "title": "interface OutStream"
        },
        {
            "location": "/builtin-OutStream/#outstream",
            "text": "[Source]  Asnychronous access to some output stream.  interface tag OutStream",
            "title": "OutStream"
        },
        {
            "location": "/builtin-OutStream/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-OutStream/#print",
            "text": "[Source]  Print some bytes and insert a newline afterwards.  be print(\n  data: (String val | Array[U8 val] val))",
            "title": "print"
        },
        {
            "location": "/builtin-OutStream/#parameters",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-OutStream/#write",
            "text": "[Source]  Print some bytes without inserting a newline afterwards.  be write(\n  data: (String val | Array[U8 val] val))",
            "title": "write"
        },
        {
            "location": "/builtin-OutStream/#parameters_1",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-OutStream/#printv",
            "text": "[Source]  Print an iterable collection of ByteSeqs.  be printv(\n  data: ByteSeqIter val)",
            "title": "printv"
        },
        {
            "location": "/builtin-OutStream/#parameters_2",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-OutStream/#writev",
            "text": "[Source]  Write an iterable collection of ByteSeqs.  be writev(\n  data: ByteSeqIter val)",
            "title": "writev"
        },
        {
            "location": "/builtin-OutStream/#parameters_3",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StdStream/",
            "text": "StdStream\n\u00b6\n\n\n[Source]\n\n\nAsynchronous access to stdout and stderr. The constructors are private to\nensure that access is provided only via an environment.\n\n\nactor tag StdStream\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\nprint\n\u00b6\n\n\n[Source]\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe print(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nprintv\n\u00b6\n\n\n[Source]\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe printv(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nwritev\n\u00b6\n\n\n[Source]\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val",
            "title": "actor StdStream"
        },
        {
            "location": "/builtin-StdStream/#stdstream",
            "text": "[Source]  Asynchronous access to stdout and stderr. The constructors are private to\nensure that access is provided only via an environment.  actor tag StdStream",
            "title": "StdStream"
        },
        {
            "location": "/builtin-StdStream/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/builtin-StdStream/#print",
            "text": "[Source]  Print some bytes and insert a newline afterwards.  be print(\n  data: (String val | Array[U8 val] val))",
            "title": "print"
        },
        {
            "location": "/builtin-StdStream/#parameters",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StdStream/#write",
            "text": "[Source]  Print some bytes without inserting a newline afterwards.  be write(\n  data: (String val | Array[U8 val] val))",
            "title": "write"
        },
        {
            "location": "/builtin-StdStream/#parameters_1",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StdStream/#printv",
            "text": "[Source]  Print an iterable collection of ByteSeqs.  be printv(\n  data: ByteSeqIter val)",
            "title": "printv"
        },
        {
            "location": "/builtin-StdStream/#parameters_2",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-StdStream/#writev",
            "text": "[Source]  Write an iterable collection of ByteSeqs.  be writev(\n  data: ByteSeqIter val)",
            "title": "writev"
        },
        {
            "location": "/builtin-StdStream/#parameters_3",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-SourceLoc/",
            "text": "SourceLoc\n\u00b6\n\n\n[Source]\n\n\nRepresents a location in a Pony source file, as reported by \n__loc\n.\n\n\ninterface val SourceLoc\n\n\n\n\nPublic Functions\n\u00b6\n\n\nfile\n\u00b6\n\n\n[Source]\n\n\nName and path of source file.\n\n\nfun box file()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ntype_name\n\u00b6\n\n\n[Source]\n\n\nName of nearest class, actor, primitive, struct, interface, or trait.\n\n\nfun box type_name()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nmethod_name\n\u00b6\n\n\n[Source]\n\n\nName of containing method.\n\n\nfun box method_name()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nline\n\u00b6\n\n\n[Source]\n\n\nLine number within file.\nLine numbers start at 1.\n\n\nfun box line()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\npos\n\u00b6\n\n\n[Source]\n\n\nCharacter position on line.\nCharacter positions start at 1.\n\n\nfun box pos()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val",
            "title": "interface SourceLoc"
        },
        {
            "location": "/builtin-SourceLoc/#sourceloc",
            "text": "[Source]  Represents a location in a Pony source file, as reported by  __loc .  interface val SourceLoc",
            "title": "SourceLoc"
        },
        {
            "location": "/builtin-SourceLoc/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-SourceLoc/#file",
            "text": "[Source]  Name and path of source file.  fun box file()\n: String val",
            "title": "file"
        },
        {
            "location": "/builtin-SourceLoc/#returns",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-SourceLoc/#type_name",
            "text": "[Source]  Name of nearest class, actor, primitive, struct, interface, or trait.  fun box type_name()\n: String val",
            "title": "type_name"
        },
        {
            "location": "/builtin-SourceLoc/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-SourceLoc/#method_name",
            "text": "[Source]  Name of containing method.  fun box method_name()\n: String val",
            "title": "method_name"
        },
        {
            "location": "/builtin-SourceLoc/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-SourceLoc/#line",
            "text": "[Source]  Line number within file.\nLine numbers start at 1.  fun box line()\n: USize val",
            "title": "line"
        },
        {
            "location": "/builtin-SourceLoc/#returns_3",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-SourceLoc/#pos",
            "text": "[Source]  Character position on line.\nCharacter positions start at 1.  fun box pos()\n: USize val",
            "title": "pos"
        },
        {
            "location": "/builtin-SourceLoc/#returns_4",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/",
            "text": "I8\n\u00b6\n\n\n[Source]\n\n\nprimitive val I8 is\n  _SignedInteger[I8 val, U8 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[I8 val, U8 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: I8 val)\n: I8 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I8 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: I8 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: I8 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: I8 val)\n: (I8 val , I8 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI8\n val , \nI8\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: I8 val)\n: (I8 val , I8 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI8\n val , \nI8\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: I8 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nI8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive I8"
        },
        {
            "location": "/builtin-I8/#i8",
            "text": "[Source]  primitive val I8 is\n  _SignedInteger[I8 val, U8 val] val",
            "title": "I8"
        },
        {
            "location": "/builtin-I8/#implements",
            "text": "_SignedInteger[I8 val, U8 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-I8/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I8/#create",
            "text": "[Source]  new val create(\n  value: I8 val)\n: I8 val^",
            "title": "create"
        },
        {
            "location": "/builtin-I8/#parameters",
            "text": "value:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns",
            "text": "I8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I8 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-I8/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_1",
            "text": "I8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#min_value",
            "text": "[Source]  new val min_value()\n: I8 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-I8/#returns_2",
            "text": "I8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#max_value",
            "text": "[Source]  new val max_value()\n: I8 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-I8/#returns_3",
            "text": "I8  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I8/#abs",
            "text": "[Source]  fun box abs()\n: U8 val",
            "title": "abs"
        },
        {
            "location": "/builtin-I8/#returns_4",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: I8 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-I8/#returns_5",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#bswap",
            "text": "[Source]  fun box bswap()\n: I8 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-I8/#returns_6",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#popcount",
            "text": "[Source]  fun box popcount()\n: U8 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-I8/#returns_7",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#clz",
            "text": "[Source]  fun box clz()\n: U8 val",
            "title": "clz"
        },
        {
            "location": "/builtin-I8/#returns_8",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ctz",
            "text": "[Source]  fun box ctz()\n: U8 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-I8/#returns_9",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U8 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_10",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U8 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_11",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U8 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-I8/#returns_12",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#min",
            "text": "[Source]  fun box min(\n  y: I8 val)\n: I8 val",
            "title": "min"
        },
        {
            "location": "/builtin-I8/#parameters_2",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_13",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#max",
            "text": "[Source]  fun box max(\n  y: I8 val)\n: I8 val",
            "title": "max"
        },
        {
            "location": "/builtin-I8/#parameters_3",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_14",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#addc",
            "text": "[Source]  fun box addc(\n  y: I8 val)\n: (I8 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-I8/#parameters_4",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_15",
            "text": "( I8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#subc",
            "text": "[Source]  fun box subc(\n  y: I8 val)\n: (I8 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-I8/#parameters_5",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_16",
            "text": "( I8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#mulc",
            "text": "[Source]  fun box mulc(\n  y: I8 val)\n: (I8 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-I8/#parameters_6",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_17",
            "text": "( I8  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#shl",
            "text": "fun box shl(\n  y: U8 val)\n: I8 val",
            "title": "shl"
        },
        {
            "location": "/builtin-I8/#parameters_7",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_18",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#shr",
            "text": "fun box shr(\n  y: U8 val)\n: I8 val",
            "title": "shr"
        },
        {
            "location": "/builtin-I8/#parameters_8",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_19",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U8 val)\n: I8 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_9",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_20",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U8 val)\n: I8 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_10",
            "text": "y:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_21",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-I8/#returns_22",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: I8 val)\n: I8 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_11",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_23",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: I8 val)\n: I8 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_12",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_24",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: I8 val)\n: I8 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_13",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_25",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: I8 val)\n: I8 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_14",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_26",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: I8 val)\n: (I8 val , I8 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_15",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_27",
            "text": "( I8  val ,  I8  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: I8 val)\n: I8 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-I8/#parameters_16",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_28",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: I8 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_29",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#op_and",
            "text": "fun box op_and(\n  y: I8 val)\n: I8 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-I8/#parameters_17",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_30",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#op_or",
            "text": "fun box op_or(\n  y: I8 val)\n: I8 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-I8/#parameters_18",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_31",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#op_xor",
            "text": "fun box op_xor(\n  y: I8 val)\n: I8 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-I8/#parameters_19",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_32",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#op_not",
            "text": "fun box op_not()\n: I8 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-I8/#returns_33",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#add",
            "text": "fun box add(\n  y: I8 val)\n: I8 val",
            "title": "add"
        },
        {
            "location": "/builtin-I8/#parameters_20",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_34",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#sub",
            "text": "fun box sub(\n  y: I8 val)\n: I8 val",
            "title": "sub"
        },
        {
            "location": "/builtin-I8/#parameters_21",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_35",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#mul",
            "text": "fun box mul(\n  y: I8 val)\n: I8 val",
            "title": "mul"
        },
        {
            "location": "/builtin-I8/#parameters_22",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_36",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#div",
            "text": "fun box div(\n  y: I8 val)\n: I8 val",
            "title": "div"
        },
        {
            "location": "/builtin-I8/#parameters_23",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_37",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#divmod",
            "text": "fun box divmod(\n  y: I8 val)\n: (I8 val , I8 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-I8/#parameters_24",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_38",
            "text": "( I8  val ,  I8  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#mod",
            "text": "fun box mod(\n  y: I8 val)\n: I8 val",
            "title": "mod"
        },
        {
            "location": "/builtin-I8/#parameters_25",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_39",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#neg",
            "text": "fun box neg()\n: I8 val",
            "title": "neg"
        },
        {
            "location": "/builtin-I8/#returns_40",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#eq",
            "text": "fun box eq(\n  y: I8 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-I8/#parameters_26",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_41",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ne",
            "text": "fun box ne(\n  y: I8 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-I8/#parameters_27",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#lt",
            "text": "fun box lt(\n  y: I8 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-I8/#parameters_28",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#le",
            "text": "fun box le(\n  y: I8 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-I8/#parameters_29",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ge",
            "text": "fun box ge(\n  y: I8 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-I8/#parameters_30",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#gt",
            "text": "fun box gt(\n  y: I8 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-I8/#parameters_31",
            "text": "y:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-I8/#returns_47",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-I8/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i8_1",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-I8/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-I8/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-I8/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-I8/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-I8/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-I8/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-I8/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-I8/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-I8/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-I8/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-I8/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-I8/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-I8/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-I8/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-I8/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-I8/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-I8/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I8/#compare",
            "text": "fun box compare(\n  that: I8 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-I8/#parameters_32",
            "text": "that:  I8  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I8/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/",
            "text": "I16\n\u00b6\n\n\n[Source]\n\n\nprimitive val I16 is\n  _SignedInteger[I16 val, U16 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[I16 val, U16 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: I16 val)\n: I16 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I16 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: I16 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: I16 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: I16 val)\n: (I16 val , I16 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI16\n val , \nI16\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: I16 val)\n: (I16 val , I16 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI16\n val , \nI16\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: I16 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nI16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive I16"
        },
        {
            "location": "/builtin-I16/#i16",
            "text": "[Source]  primitive val I16 is\n  _SignedInteger[I16 val, U16 val] val",
            "title": "I16"
        },
        {
            "location": "/builtin-I16/#implements",
            "text": "_SignedInteger[I16 val, U16 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-I16/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I16/#create",
            "text": "[Source]  new val create(\n  value: I16 val)\n: I16 val^",
            "title": "create"
        },
        {
            "location": "/builtin-I16/#parameters",
            "text": "value:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns",
            "text": "I16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I16 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-I16/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_1",
            "text": "I16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#min_value",
            "text": "[Source]  new val min_value()\n: I16 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-I16/#returns_2",
            "text": "I16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#max_value",
            "text": "[Source]  new val max_value()\n: I16 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-I16/#returns_3",
            "text": "I16  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I16/#abs",
            "text": "[Source]  fun box abs()\n: U16 val",
            "title": "abs"
        },
        {
            "location": "/builtin-I16/#returns_4",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: I16 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-I16/#returns_5",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#bswap",
            "text": "[Source]  fun box bswap()\n: I16 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-I16/#returns_6",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#popcount",
            "text": "[Source]  fun box popcount()\n: U16 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-I16/#returns_7",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#clz",
            "text": "[Source]  fun box clz()\n: U16 val",
            "title": "clz"
        },
        {
            "location": "/builtin-I16/#returns_8",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ctz",
            "text": "[Source]  fun box ctz()\n: U16 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-I16/#returns_9",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U16 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_10",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U16 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_11",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U16 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-I16/#returns_12",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#min",
            "text": "[Source]  fun box min(\n  y: I16 val)\n: I16 val",
            "title": "min"
        },
        {
            "location": "/builtin-I16/#parameters_2",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_13",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#max",
            "text": "[Source]  fun box max(\n  y: I16 val)\n: I16 val",
            "title": "max"
        },
        {
            "location": "/builtin-I16/#parameters_3",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_14",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#addc",
            "text": "[Source]  fun box addc(\n  y: I16 val)\n: (I16 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-I16/#parameters_4",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_15",
            "text": "( I16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#subc",
            "text": "[Source]  fun box subc(\n  y: I16 val)\n: (I16 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-I16/#parameters_5",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_16",
            "text": "( I16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#mulc",
            "text": "[Source]  fun box mulc(\n  y: I16 val)\n: (I16 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-I16/#parameters_6",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_17",
            "text": "( I16  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#shl",
            "text": "fun box shl(\n  y: U16 val)\n: I16 val",
            "title": "shl"
        },
        {
            "location": "/builtin-I16/#parameters_7",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_18",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#shr",
            "text": "fun box shr(\n  y: U16 val)\n: I16 val",
            "title": "shr"
        },
        {
            "location": "/builtin-I16/#parameters_8",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_19",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U16 val)\n: I16 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_9",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_20",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U16 val)\n: I16 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_10",
            "text": "y:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_21",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-I16/#returns_22",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: I16 val)\n: I16 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_11",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_23",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: I16 val)\n: I16 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_12",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_24",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: I16 val)\n: I16 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_13",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_25",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: I16 val)\n: I16 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_14",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_26",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: I16 val)\n: (I16 val , I16 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_15",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_27",
            "text": "( I16  val ,  I16  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: I16 val)\n: I16 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-I16/#parameters_16",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_28",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: I16 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_29",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#op_and",
            "text": "fun box op_and(\n  y: I16 val)\n: I16 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-I16/#parameters_17",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_30",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#op_or",
            "text": "fun box op_or(\n  y: I16 val)\n: I16 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-I16/#parameters_18",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_31",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#op_xor",
            "text": "fun box op_xor(\n  y: I16 val)\n: I16 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-I16/#parameters_19",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_32",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#op_not",
            "text": "fun box op_not()\n: I16 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-I16/#returns_33",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#add",
            "text": "fun box add(\n  y: I16 val)\n: I16 val",
            "title": "add"
        },
        {
            "location": "/builtin-I16/#parameters_20",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_34",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#sub",
            "text": "fun box sub(\n  y: I16 val)\n: I16 val",
            "title": "sub"
        },
        {
            "location": "/builtin-I16/#parameters_21",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_35",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#mul",
            "text": "fun box mul(\n  y: I16 val)\n: I16 val",
            "title": "mul"
        },
        {
            "location": "/builtin-I16/#parameters_22",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_36",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#div",
            "text": "fun box div(\n  y: I16 val)\n: I16 val",
            "title": "div"
        },
        {
            "location": "/builtin-I16/#parameters_23",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_37",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#divmod",
            "text": "fun box divmod(\n  y: I16 val)\n: (I16 val , I16 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-I16/#parameters_24",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_38",
            "text": "( I16  val ,  I16  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#mod",
            "text": "fun box mod(\n  y: I16 val)\n: I16 val",
            "title": "mod"
        },
        {
            "location": "/builtin-I16/#parameters_25",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_39",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#neg",
            "text": "fun box neg()\n: I16 val",
            "title": "neg"
        },
        {
            "location": "/builtin-I16/#returns_40",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#eq",
            "text": "fun box eq(\n  y: I16 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-I16/#parameters_26",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_41",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ne",
            "text": "fun box ne(\n  y: I16 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-I16/#parameters_27",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#lt",
            "text": "fun box lt(\n  y: I16 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-I16/#parameters_28",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#le",
            "text": "fun box le(\n  y: I16 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-I16/#parameters_29",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ge",
            "text": "fun box ge(\n  y: I16 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-I16/#parameters_30",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#gt",
            "text": "fun box gt(\n  y: I16 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-I16/#parameters_31",
            "text": "y:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-I16/#returns_47",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-I16/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-I16/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i16_1",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-I16/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-I16/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-I16/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-I16/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-I16/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-I16/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-I16/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-I16/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-I16/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-I16/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-I16/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-I16/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-I16/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-I16/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-I16/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-I16/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I16/#compare",
            "text": "fun box compare(\n  that: I16 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-I16/#parameters_32",
            "text": "that:  I16  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I16/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/",
            "text": "I32\n\u00b6\n\n\n[Source]\n\n\nprimitive val I32 is\n  _SignedInteger[I32 val, U32 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[I32 val, U32 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: I32 val)\n: I32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: I32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: I32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: I32 val)\n: (I32 val , I32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI32\n val , \nI32\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: I32 val)\n: (I32 val , I32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI32\n val , \nI32\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: I32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive I32"
        },
        {
            "location": "/builtin-I32/#i32",
            "text": "[Source]  primitive val I32 is\n  _SignedInteger[I32 val, U32 val] val",
            "title": "I32"
        },
        {
            "location": "/builtin-I32/#implements",
            "text": "_SignedInteger[I32 val, U32 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-I32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I32/#create",
            "text": "[Source]  new val create(\n  value: I32 val)\n: I32 val^",
            "title": "create"
        },
        {
            "location": "/builtin-I32/#parameters",
            "text": "value:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns",
            "text": "I32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I32 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-I32/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_1",
            "text": "I32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#min_value",
            "text": "[Source]  new val min_value()\n: I32 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-I32/#returns_2",
            "text": "I32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#max_value",
            "text": "[Source]  new val max_value()\n: I32 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-I32/#returns_3",
            "text": "I32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I32/#abs",
            "text": "[Source]  fun box abs()\n: U32 val",
            "title": "abs"
        },
        {
            "location": "/builtin-I32/#returns_4",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: I32 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-I32/#returns_5",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#bswap",
            "text": "[Source]  fun box bswap()\n: I32 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-I32/#returns_6",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#popcount",
            "text": "[Source]  fun box popcount()\n: U32 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-I32/#returns_7",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#clz",
            "text": "[Source]  fun box clz()\n: U32 val",
            "title": "clz"
        },
        {
            "location": "/builtin-I32/#returns_8",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ctz",
            "text": "[Source]  fun box ctz()\n: U32 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-I32/#returns_9",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U32 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_10",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U32 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_11",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U32 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-I32/#returns_12",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#min",
            "text": "[Source]  fun box min(\n  y: I32 val)\n: I32 val",
            "title": "min"
        },
        {
            "location": "/builtin-I32/#parameters_2",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_13",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#max",
            "text": "[Source]  fun box max(\n  y: I32 val)\n: I32 val",
            "title": "max"
        },
        {
            "location": "/builtin-I32/#parameters_3",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_14",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#addc",
            "text": "[Source]  fun box addc(\n  y: I32 val)\n: (I32 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-I32/#parameters_4",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_15",
            "text": "( I32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#subc",
            "text": "[Source]  fun box subc(\n  y: I32 val)\n: (I32 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-I32/#parameters_5",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_16",
            "text": "( I32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#mulc",
            "text": "[Source]  fun box mulc(\n  y: I32 val)\n: (I32 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-I32/#parameters_6",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_17",
            "text": "( I32  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#shl",
            "text": "fun box shl(\n  y: U32 val)\n: I32 val",
            "title": "shl"
        },
        {
            "location": "/builtin-I32/#parameters_7",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_18",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#shr",
            "text": "fun box shr(\n  y: U32 val)\n: I32 val",
            "title": "shr"
        },
        {
            "location": "/builtin-I32/#parameters_8",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_19",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U32 val)\n: I32 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_9",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_20",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U32 val)\n: I32 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_10",
            "text": "y:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_21",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-I32/#returns_22",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: I32 val)\n: I32 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_11",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_23",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: I32 val)\n: I32 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_12",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_24",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: I32 val)\n: I32 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_13",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_25",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: I32 val)\n: I32 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_14",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_26",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: I32 val)\n: (I32 val , I32 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_15",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_27",
            "text": "( I32  val ,  I32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: I32 val)\n: I32 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-I32/#parameters_16",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_28",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: I32 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_29",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#op_and",
            "text": "fun box op_and(\n  y: I32 val)\n: I32 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-I32/#parameters_17",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_30",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#op_or",
            "text": "fun box op_or(\n  y: I32 val)\n: I32 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-I32/#parameters_18",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_31",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#op_xor",
            "text": "fun box op_xor(\n  y: I32 val)\n: I32 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-I32/#parameters_19",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_32",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#op_not",
            "text": "fun box op_not()\n: I32 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-I32/#returns_33",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#add",
            "text": "fun box add(\n  y: I32 val)\n: I32 val",
            "title": "add"
        },
        {
            "location": "/builtin-I32/#parameters_20",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_34",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#sub",
            "text": "fun box sub(\n  y: I32 val)\n: I32 val",
            "title": "sub"
        },
        {
            "location": "/builtin-I32/#parameters_21",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_35",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#mul",
            "text": "fun box mul(\n  y: I32 val)\n: I32 val",
            "title": "mul"
        },
        {
            "location": "/builtin-I32/#parameters_22",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_36",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#div",
            "text": "fun box div(\n  y: I32 val)\n: I32 val",
            "title": "div"
        },
        {
            "location": "/builtin-I32/#parameters_23",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_37",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#divmod",
            "text": "fun box divmod(\n  y: I32 val)\n: (I32 val , I32 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-I32/#parameters_24",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_38",
            "text": "( I32  val ,  I32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#mod",
            "text": "fun box mod(\n  y: I32 val)\n: I32 val",
            "title": "mod"
        },
        {
            "location": "/builtin-I32/#parameters_25",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_39",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#neg",
            "text": "fun box neg()\n: I32 val",
            "title": "neg"
        },
        {
            "location": "/builtin-I32/#returns_40",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#eq",
            "text": "fun box eq(\n  y: I32 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-I32/#parameters_26",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_41",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ne",
            "text": "fun box ne(\n  y: I32 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-I32/#parameters_27",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#lt",
            "text": "fun box lt(\n  y: I32 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-I32/#parameters_28",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#le",
            "text": "fun box le(\n  y: I32 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-I32/#parameters_29",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ge",
            "text": "fun box ge(\n  y: I32 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-I32/#parameters_30",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#gt",
            "text": "fun box gt(\n  y: I32 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-I32/#parameters_31",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-I32/#returns_47",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-I32/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-I32/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-I32/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i32_1",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-I32/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-I32/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-I32/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-I32/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-I32/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-I32/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-I32/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-I32/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-I32/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-I32/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-I32/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-I32/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-I32/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-I32/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-I32/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I32/#compare",
            "text": "fun box compare(\n  that: I32 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-I32/#parameters_32",
            "text": "that:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I32/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/",
            "text": "I64\n\u00b6\n\n\n[Source]\n\n\nprimitive val I64 is\n  _SignedInteger[I64 val, U64 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[I64 val, U64 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: I64 val)\n: I64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: I64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: I64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: I64 val)\n: (I64 val , I64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: I64 val)\n: (I64 val , I64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: I64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nI64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive I64"
        },
        {
            "location": "/builtin-I64/#i64",
            "text": "[Source]  primitive val I64 is\n  _SignedInteger[I64 val, U64 val] val",
            "title": "I64"
        },
        {
            "location": "/builtin-I64/#implements",
            "text": "_SignedInteger[I64 val, U64 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-I64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I64/#create",
            "text": "[Source]  new val create(\n  value: I64 val)\n: I64 val^",
            "title": "create"
        },
        {
            "location": "/builtin-I64/#parameters",
            "text": "value:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns",
            "text": "I64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I64 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-I64/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_1",
            "text": "I64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#min_value",
            "text": "[Source]  new val min_value()\n: I64 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-I64/#returns_2",
            "text": "I64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#max_value",
            "text": "[Source]  new val max_value()\n: I64 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-I64/#returns_3",
            "text": "I64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I64/#abs",
            "text": "[Source]  fun box abs()\n: U64 val",
            "title": "abs"
        },
        {
            "location": "/builtin-I64/#returns_4",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: I64 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-I64/#returns_5",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#bswap",
            "text": "[Source]  fun box bswap()\n: I64 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-I64/#returns_6",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#popcount",
            "text": "[Source]  fun box popcount()\n: U64 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-I64/#returns_7",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#clz",
            "text": "[Source]  fun box clz()\n: U64 val",
            "title": "clz"
        },
        {
            "location": "/builtin-I64/#returns_8",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ctz",
            "text": "[Source]  fun box ctz()\n: U64 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-I64/#returns_9",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U64 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_10",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U64 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_11",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U64 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-I64/#returns_12",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#min",
            "text": "[Source]  fun box min(\n  y: I64 val)\n: I64 val",
            "title": "min"
        },
        {
            "location": "/builtin-I64/#parameters_2",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_13",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#max",
            "text": "[Source]  fun box max(\n  y: I64 val)\n: I64 val",
            "title": "max"
        },
        {
            "location": "/builtin-I64/#parameters_3",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_14",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-I64/#returns_15",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#addc",
            "text": "[Source]  fun box addc(\n  y: I64 val)\n: (I64 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-I64/#parameters_4",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_16",
            "text": "( I64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#subc",
            "text": "[Source]  fun box subc(\n  y: I64 val)\n: (I64 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-I64/#parameters_5",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_17",
            "text": "( I64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#mulc",
            "text": "[Source]  fun box mulc(\n  y: I64 val)\n: (I64 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-I64/#parameters_6",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_18",
            "text": "( I64  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#shl",
            "text": "fun box shl(\n  y: U64 val)\n: I64 val",
            "title": "shl"
        },
        {
            "location": "/builtin-I64/#parameters_7",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_19",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#shr",
            "text": "fun box shr(\n  y: U64 val)\n: I64 val",
            "title": "shr"
        },
        {
            "location": "/builtin-I64/#parameters_8",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_20",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U64 val)\n: I64 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_9",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_21",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U64 val)\n: I64 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_10",
            "text": "y:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_22",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-I64/#returns_23",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: I64 val)\n: I64 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_11",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_24",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: I64 val)\n: I64 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_12",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_25",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: I64 val)\n: I64 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_13",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_26",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: I64 val)\n: I64 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_14",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_27",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: I64 val)\n: (I64 val , I64 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_15",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_28",
            "text": "( I64  val ,  I64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: I64 val)\n: I64 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-I64/#parameters_16",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_29",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: I64 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_30",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#op_and",
            "text": "fun box op_and(\n  y: I64 val)\n: I64 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-I64/#parameters_17",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_31",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#op_or",
            "text": "fun box op_or(\n  y: I64 val)\n: I64 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-I64/#parameters_18",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_32",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#op_xor",
            "text": "fun box op_xor(\n  y: I64 val)\n: I64 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-I64/#parameters_19",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_33",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#op_not",
            "text": "fun box op_not()\n: I64 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-I64/#returns_34",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#add",
            "text": "fun box add(\n  y: I64 val)\n: I64 val",
            "title": "add"
        },
        {
            "location": "/builtin-I64/#parameters_20",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_35",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#sub",
            "text": "fun box sub(\n  y: I64 val)\n: I64 val",
            "title": "sub"
        },
        {
            "location": "/builtin-I64/#parameters_21",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_36",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#mul",
            "text": "fun box mul(\n  y: I64 val)\n: I64 val",
            "title": "mul"
        },
        {
            "location": "/builtin-I64/#parameters_22",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_37",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#div",
            "text": "fun box div(\n  y: I64 val)\n: I64 val",
            "title": "div"
        },
        {
            "location": "/builtin-I64/#parameters_23",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_38",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#divmod",
            "text": "fun box divmod(\n  y: I64 val)\n: (I64 val , I64 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-I64/#parameters_24",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_39",
            "text": "( I64  val ,  I64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#mod",
            "text": "fun box mod(\n  y: I64 val)\n: I64 val",
            "title": "mod"
        },
        {
            "location": "/builtin-I64/#parameters_25",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_40",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#neg",
            "text": "fun box neg()\n: I64 val",
            "title": "neg"
        },
        {
            "location": "/builtin-I64/#returns_41",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#eq",
            "text": "fun box eq(\n  y: I64 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-I64/#parameters_26",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ne",
            "text": "fun box ne(\n  y: I64 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-I64/#parameters_27",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#lt",
            "text": "fun box lt(\n  y: I64 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-I64/#parameters_28",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#le",
            "text": "fun box le(\n  y: I64 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-I64/#parameters_29",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ge",
            "text": "fun box ge(\n  y: I64 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-I64/#parameters_30",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#gt",
            "text": "fun box gt(\n  y: I64 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-I64/#parameters_31",
            "text": "y:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-I64/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-I64/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-I64/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-I64/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i64_1",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-I64/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-I64/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-I64/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-I64/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-I64/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-I64/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-I64/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-I64/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-I64/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-I64/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-I64/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-I64/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-I64/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-I64/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I64/#compare",
            "text": "fun box compare(\n  that: I64 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-I64/#parameters_32",
            "text": "that:  I64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I64/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/",
            "text": "ILong\n\u00b6\n\n\n[Source]\n\n\nprimitive val ILong is\n  _SignedInteger[ILong val, ULong val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[ILong val, ULong val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: ILong val)\n: ILong val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ILong val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: ILong val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: ILong val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box clz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ctz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: ILong val)\n: (ILong val , ILong val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nILong\n val , \nILong\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: ILong val)\n: (ILong val , ILong val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nILong\n val , \nILong\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: ILong val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nILong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive ILong"
        },
        {
            "location": "/builtin-ILong/#ilong",
            "text": "[Source]  primitive val ILong is\n  _SignedInteger[ILong val, ULong val] val",
            "title": "ILong"
        },
        {
            "location": "/builtin-ILong/#implements",
            "text": "_SignedInteger[ILong val, ULong val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-ILong/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ILong/#create",
            "text": "[Source]  new val create(\n  value: ILong val)\n: ILong val^",
            "title": "create"
        },
        {
            "location": "/builtin-ILong/#parameters",
            "text": "value:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns",
            "text": "ILong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ILong val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-ILong/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_1",
            "text": "ILong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#min_value",
            "text": "[Source]  new val min_value()\n: ILong val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-ILong/#returns_2",
            "text": "ILong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#max_value",
            "text": "[Source]  new val max_value()\n: ILong val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-ILong/#returns_3",
            "text": "ILong  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ILong/#abs",
            "text": "[Source]  fun box abs()\n: ULong val",
            "title": "abs"
        },
        {
            "location": "/builtin-ILong/#returns_4",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: ILong val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-ILong/#returns_5",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#bswap",
            "text": "[Source]  fun box bswap()\n: ILong val",
            "title": "bswap"
        },
        {
            "location": "/builtin-ILong/#returns_6",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#popcount",
            "text": "[Source]  fun box popcount()\n: ULong val",
            "title": "popcount"
        },
        {
            "location": "/builtin-ILong/#returns_7",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#clz",
            "text": "[Source]  fun box clz()\n: ULong val",
            "title": "clz"
        },
        {
            "location": "/builtin-ILong/#returns_8",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ctz",
            "text": "[Source]  fun box ctz()\n: ULong val",
            "title": "ctz"
        },
        {
            "location": "/builtin-ILong/#returns_9",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#clz_unsafe",
            "text": "[Source]  fun box clz_unsafe()\n: ULong val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_10",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ctz_unsafe",
            "text": "[Source]  fun box ctz_unsafe()\n: ULong val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_11",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: ULong val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-ILong/#returns_12",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#min",
            "text": "[Source]  fun box min(\n  y: ILong val)\n: ILong val",
            "title": "min"
        },
        {
            "location": "/builtin-ILong/#parameters_2",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_13",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#max",
            "text": "[Source]  fun box max(\n  y: ILong val)\n: ILong val",
            "title": "max"
        },
        {
            "location": "/builtin-ILong/#parameters_3",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_14",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-ILong/#returns_15",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#addc",
            "text": "[Source]  fun box addc(\n  y: ILong val)\n: (ILong val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-ILong/#parameters_4",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_16",
            "text": "( ILong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#subc",
            "text": "[Source]  fun box subc(\n  y: ILong val)\n: (ILong val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-ILong/#parameters_5",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_17",
            "text": "( ILong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#mulc",
            "text": "[Source]  fun box mulc(\n  y: ILong val)\n: (ILong val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-ILong/#parameters_6",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_18",
            "text": "( ILong  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#shl",
            "text": "fun box shl(\n  y: ULong val)\n: ILong val",
            "title": "shl"
        },
        {
            "location": "/builtin-ILong/#parameters_7",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_19",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#shr",
            "text": "fun box shr(\n  y: ULong val)\n: ILong val",
            "title": "shr"
        },
        {
            "location": "/builtin-ILong/#parameters_8",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_20",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: ULong val)\n: ILong val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_9",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_21",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: ULong val)\n: ILong val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_10",
            "text": "y:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_22",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-ILong/#returns_23",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: ILong val)\n: ILong val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_11",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_24",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: ILong val)\n: ILong val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_12",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_25",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: ILong val)\n: ILong val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_13",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_26",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: ILong val)\n: ILong val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_14",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_27",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: ILong val)\n: (ILong val , ILong val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_15",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_28",
            "text": "( ILong  val ,  ILong  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: ILong val)\n: ILong val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-ILong/#parameters_16",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_29",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: ILong val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_30",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#op_and",
            "text": "fun box op_and(\n  y: ILong val)\n: ILong val",
            "title": "op_and"
        },
        {
            "location": "/builtin-ILong/#parameters_17",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_31",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#op_or",
            "text": "fun box op_or(\n  y: ILong val)\n: ILong val",
            "title": "op_or"
        },
        {
            "location": "/builtin-ILong/#parameters_18",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_32",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#op_xor",
            "text": "fun box op_xor(\n  y: ILong val)\n: ILong val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-ILong/#parameters_19",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_33",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#op_not",
            "text": "fun box op_not()\n: ILong val",
            "title": "op_not"
        },
        {
            "location": "/builtin-ILong/#returns_34",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#add",
            "text": "fun box add(\n  y: ILong val)\n: ILong val",
            "title": "add"
        },
        {
            "location": "/builtin-ILong/#parameters_20",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_35",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#sub",
            "text": "fun box sub(\n  y: ILong val)\n: ILong val",
            "title": "sub"
        },
        {
            "location": "/builtin-ILong/#parameters_21",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_36",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#mul",
            "text": "fun box mul(\n  y: ILong val)\n: ILong val",
            "title": "mul"
        },
        {
            "location": "/builtin-ILong/#parameters_22",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_37",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#div",
            "text": "fun box div(\n  y: ILong val)\n: ILong val",
            "title": "div"
        },
        {
            "location": "/builtin-ILong/#parameters_23",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_38",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#divmod",
            "text": "fun box divmod(\n  y: ILong val)\n: (ILong val , ILong val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-ILong/#parameters_24",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_39",
            "text": "( ILong  val ,  ILong  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#mod",
            "text": "fun box mod(\n  y: ILong val)\n: ILong val",
            "title": "mod"
        },
        {
            "location": "/builtin-ILong/#parameters_25",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_40",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#neg",
            "text": "fun box neg()\n: ILong val",
            "title": "neg"
        },
        {
            "location": "/builtin-ILong/#returns_41",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#eq",
            "text": "fun box eq(\n  y: ILong val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-ILong/#parameters_26",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ne",
            "text": "fun box ne(\n  y: ILong val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-ILong/#parameters_27",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#lt",
            "text": "fun box lt(\n  y: ILong val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-ILong/#parameters_28",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#le",
            "text": "fun box le(\n  y: ILong val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-ILong/#parameters_29",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ge",
            "text": "fun box ge(\n  y: ILong val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-ILong/#parameters_30",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#gt",
            "text": "fun box gt(\n  y: ILong val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-ILong/#parameters_31",
            "text": "y:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-ILong/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-ILong/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-ILong/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-ILong/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-ILong/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-ILong/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ilong_1",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-ILong/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-ILong/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-ILong/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-ILong/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-ILong/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-ILong/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-ILong/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-ILong/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-ILong/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-ILong/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-ILong/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-ILong/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ILong/#compare",
            "text": "fun box compare(\n  that: ILong val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-ILong/#parameters_32",
            "text": "that:  ILong  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ILong/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/",
            "text": "ISize\n\u00b6\n\n\n[Source]\n\n\nprimitive val ISize is\n  _SignedInteger[ISize val, USize val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[ISize val, USize val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: ISize val)\n: ISize val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ISize val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: ISize val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: ISize val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box clz_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ctz_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\nfun box mul_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\nfun box div_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\nfun box divmod_unsafe(\n  y: ISize val)\n: (ISize val , ISize val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nISize\n val , \nISize\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\nfun box mod_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\nfun box mul(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\nfun box div(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\nfun box divmod(\n  y: ISize val)\n: (ISize val , ISize val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nISize\n val , \nISize\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\nfun box mod(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: ISize val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive ISize"
        },
        {
            "location": "/builtin-ISize/#isize",
            "text": "[Source]  primitive val ISize is\n  _SignedInteger[ISize val, USize val] val",
            "title": "ISize"
        },
        {
            "location": "/builtin-ISize/#implements",
            "text": "_SignedInteger[ISize val, USize val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-ISize/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ISize/#create",
            "text": "[Source]  new val create(\n  value: ISize val)\n: ISize val^",
            "title": "create"
        },
        {
            "location": "/builtin-ISize/#parameters",
            "text": "value:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns",
            "text": "ISize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: ISize val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-ISize/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_1",
            "text": "ISize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#min_value",
            "text": "[Source]  new val min_value()\n: ISize val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-ISize/#returns_2",
            "text": "ISize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#max_value",
            "text": "[Source]  new val max_value()\n: ISize val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-ISize/#returns_3",
            "text": "ISize  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ISize/#abs",
            "text": "[Source]  fun box abs()\n: USize val",
            "title": "abs"
        },
        {
            "location": "/builtin-ISize/#returns_4",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: ISize val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-ISize/#returns_5",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#bswap",
            "text": "[Source]  fun box bswap()\n: ISize val",
            "title": "bswap"
        },
        {
            "location": "/builtin-ISize/#returns_6",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#popcount",
            "text": "[Source]  fun box popcount()\n: USize val",
            "title": "popcount"
        },
        {
            "location": "/builtin-ISize/#returns_7",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#clz",
            "text": "[Source]  fun box clz()\n: USize val",
            "title": "clz"
        },
        {
            "location": "/builtin-ISize/#returns_8",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ctz",
            "text": "[Source]  fun box ctz()\n: USize val",
            "title": "ctz"
        },
        {
            "location": "/builtin-ISize/#returns_9",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#clz_unsafe",
            "text": "[Source]  fun box clz_unsafe()\n: USize val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_10",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ctz_unsafe",
            "text": "[Source]  fun box ctz_unsafe()\n: USize val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_11",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: USize val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-ISize/#returns_12",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#min",
            "text": "[Source]  fun box min(\n  y: ISize val)\n: ISize val",
            "title": "min"
        },
        {
            "location": "/builtin-ISize/#parameters_2",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_13",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#max",
            "text": "[Source]  fun box max(\n  y: ISize val)\n: ISize val",
            "title": "max"
        },
        {
            "location": "/builtin-ISize/#parameters_3",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_14",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#addc",
            "text": "[Source]  fun box addc(\n  y: ISize val)\n: (ISize val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-ISize/#parameters_4",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_15",
            "text": "( ISize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#subc",
            "text": "[Source]  fun box subc(\n  y: ISize val)\n: (ISize val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-ISize/#parameters_5",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_16",
            "text": "( ISize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#mulc",
            "text": "[Source]  fun box mulc(\n  y: ISize val)\n: (ISize val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-ISize/#parameters_6",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_17",
            "text": "( ISize  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#shl",
            "text": "fun box shl(\n  y: USize val)\n: ISize val",
            "title": "shl"
        },
        {
            "location": "/builtin-ISize/#parameters_7",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_18",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#shr",
            "text": "fun box shr(\n  y: USize val)\n: ISize val",
            "title": "shr"
        },
        {
            "location": "/builtin-ISize/#parameters_8",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_19",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: USize val)\n: ISize val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_9",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_20",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: USize val)\n: ISize val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_10",
            "text": "y:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_21",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#string",
            "text": "fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-ISize/#returns_22",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: ISize val)\n: ISize val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_11",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_23",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: ISize val)\n: ISize val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_12",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_24",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#mul_unsafe",
            "text": "fun box mul_unsafe(\n  y: ISize val)\n: ISize val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_13",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_25",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#div_unsafe",
            "text": "fun box div_unsafe(\n  y: ISize val)\n: ISize val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_14",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_26",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#divmod_unsafe",
            "text": "fun box divmod_unsafe(\n  y: ISize val)\n: (ISize val , ISize val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_15",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_27",
            "text": "( ISize  val ,  ISize  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#mod_unsafe",
            "text": "fun box mod_unsafe(\n  y: ISize val)\n: ISize val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-ISize/#parameters_16",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_28",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: ISize val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_29",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#op_and",
            "text": "fun box op_and(\n  y: ISize val)\n: ISize val",
            "title": "op_and"
        },
        {
            "location": "/builtin-ISize/#parameters_17",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_30",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#op_or",
            "text": "fun box op_or(\n  y: ISize val)\n: ISize val",
            "title": "op_or"
        },
        {
            "location": "/builtin-ISize/#parameters_18",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_31",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#op_xor",
            "text": "fun box op_xor(\n  y: ISize val)\n: ISize val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-ISize/#parameters_19",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_32",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#op_not",
            "text": "fun box op_not()\n: ISize val",
            "title": "op_not"
        },
        {
            "location": "/builtin-ISize/#returns_33",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#add",
            "text": "fun box add(\n  y: ISize val)\n: ISize val",
            "title": "add"
        },
        {
            "location": "/builtin-ISize/#parameters_20",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_34",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#sub",
            "text": "fun box sub(\n  y: ISize val)\n: ISize val",
            "title": "sub"
        },
        {
            "location": "/builtin-ISize/#parameters_21",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_35",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#mul",
            "text": "fun box mul(\n  y: ISize val)\n: ISize val",
            "title": "mul"
        },
        {
            "location": "/builtin-ISize/#parameters_22",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_36",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#div",
            "text": "fun box div(\n  y: ISize val)\n: ISize val",
            "title": "div"
        },
        {
            "location": "/builtin-ISize/#parameters_23",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_37",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#divmod",
            "text": "fun box divmod(\n  y: ISize val)\n: (ISize val , ISize val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-ISize/#parameters_24",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_38",
            "text": "( ISize  val ,  ISize  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#mod",
            "text": "fun box mod(\n  y: ISize val)\n: ISize val",
            "title": "mod"
        },
        {
            "location": "/builtin-ISize/#parameters_25",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_39",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#neg",
            "text": "fun box neg()\n: ISize val",
            "title": "neg"
        },
        {
            "location": "/builtin-ISize/#returns_40",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#eq",
            "text": "fun box eq(\n  y: ISize val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-ISize/#parameters_26",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_41",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ne",
            "text": "fun box ne(\n  y: ISize val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-ISize/#parameters_27",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_42",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#lt",
            "text": "fun box lt(\n  y: ISize val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-ISize/#parameters_28",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_43",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#le",
            "text": "fun box le(\n  y: ISize val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-ISize/#parameters_29",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_44",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ge",
            "text": "fun box ge(\n  y: ISize val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-ISize/#parameters_30",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#gt",
            "text": "fun box gt(\n  y: ISize val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-ISize/#parameters_31",
            "text": "y:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#hash",
            "text": "fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-ISize/#returns_47",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#hash64",
            "text": "fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-ISize/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-ISize/#returns_49",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-ISize/#returns_50",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-ISize/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-ISize/#returns_52",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i128",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-ISize/#returns_53",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-ISize/#returns_54",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#isize_1",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-ISize/#returns_55",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-ISize/#returns_56",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-ISize/#returns_57",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-ISize/#returns_58",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-ISize/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-ISize/#returns_60",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-ISize/#returns_61",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-ISize/#returns_62",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#f32",
            "text": "fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-ISize/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#f64",
            "text": "fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-ISize/#returns_64",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_65",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_66",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_68",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_69",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_70",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_71",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_72",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_73",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_74",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_76",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_77",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_78",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#f32_unsafe",
            "text": "fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#f64_unsafe",
            "text": "fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-ISize/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ISize/#compare",
            "text": "fun box compare(\n  that: ISize val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-ISize/#parameters_32",
            "text": "that:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ISize/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/",
            "text": "I128\n\u00b6\n\n\n[Source]\n\n\nprimitive val I128 is\n  _SignedInteger[I128 val, U128 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\n_SignedInteger[I128 val, U128 val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: I128 val)\n: I128 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I128 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: I128 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: I128 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nfun box bit_reverse()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\npopcount\n\u00b6\n\n\n[Source]\n\n\nfun box popcount()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz\n\u00b6\n\n\n[Source]\n\n\nfun box clz()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz\n\u00b6\n\n\n[Source]\n\n\nfun box ctz()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbitwidth\n\u00b6\n\n\n[Source]\n\n\nfun box bitwidth()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: I128 val)\n: (I128 val , I128 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI128\n val , \nI128\n val)\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: I128 val)\n: (I128 val , I128 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI128\n val , \nI128\n val)\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nfun box addc(\n  y: I128 val)\n: (I128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI128\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nfun box subc(\n  y: I128 val)\n: (I128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI128\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nfun box mulc(\n  y: I128 val)\n: (I128 val , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI128\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\u00b6\n\n\nfun box shl(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshr\n\u00b6\n\n\nfun box shr(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshl_unsafe\n\u00b6\n\n\nfun box shl_unsafe(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshr_unsafe\n\u00b6\n\n\nfun box shr_unsafe(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\nfun box add_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\nfun box sub_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\nfun box neg_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\nfun box op_and(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\nfun box op_or(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\nfun box op_xor(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\nfun box op_not()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\nfun box add(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\nfun box sub(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\nfun box neg()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\nfun box eq(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\nfun box ne(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\nfun box lt(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\nfun box le(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\nfun box ge(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\nfun box gt(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: I128 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nI128\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive I128"
        },
        {
            "location": "/builtin-I128/#i128",
            "text": "[Source]  primitive val I128 is\n  _SignedInteger[I128 val, U128 val] val",
            "title": "I128"
        },
        {
            "location": "/builtin-I128/#implements",
            "text": "_SignedInteger[I128 val, U128 val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-I128/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I128/#create",
            "text": "[Source]  new val create(\n  value: I128 val)\n: I128 val^",
            "title": "create"
        },
        {
            "location": "/builtin-I128/#parameters",
            "text": "value:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns",
            "text": "I128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93",
            "text": "[Source]  new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[A] val)](\n  a: A)\n: I128 val^",
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        },
        {
            "location": "/builtin-I128/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_1",
            "text": "I128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#min_value",
            "text": "[Source]  new val min_value()\n: I128 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-I128/#returns_2",
            "text": "I128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#max_value",
            "text": "[Source]  new val max_value()\n: I128 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-I128/#returns_3",
            "text": "I128  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-I128/#abs",
            "text": "[Source]  fun box abs()\n: U128 val",
            "title": "abs"
        },
        {
            "location": "/builtin-I128/#returns_4",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#bit_reverse",
            "text": "[Source]  fun box bit_reverse()\n: I128 val",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-I128/#returns_5",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#bswap",
            "text": "[Source]  fun box bswap()\n: I128 val",
            "title": "bswap"
        },
        {
            "location": "/builtin-I128/#returns_6",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#popcount",
            "text": "[Source]  fun box popcount()\n: U128 val",
            "title": "popcount"
        },
        {
            "location": "/builtin-I128/#returns_7",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#clz",
            "text": "[Source]  fun box clz()\n: U128 val",
            "title": "clz"
        },
        {
            "location": "/builtin-I128/#returns_8",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ctz",
            "text": "[Source]  fun box ctz()\n: U128 val",
            "title": "ctz"
        },
        {
            "location": "/builtin-I128/#returns_9",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#clz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U128 val",
            "title": "clz_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_10",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ctz_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U128 val",
            "title": "ctz_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_11",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#bitwidth",
            "text": "[Source]  fun box bitwidth()\n: U128 val",
            "title": "bitwidth"
        },
        {
            "location": "/builtin-I128/#returns_12",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#min",
            "text": "[Source]  fun box min(\n  y: I128 val)\n: I128 val",
            "title": "min"
        },
        {
            "location": "/builtin-I128/#parameters_2",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_13",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#max",
            "text": "[Source]  fun box max(\n  y: I128 val)\n: I128 val",
            "title": "max"
        },
        {
            "location": "/builtin-I128/#parameters_3",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_14",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-I128/#returns_15",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-I128/#returns_16",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-I128/#returns_17",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#mul",
            "text": "[Source]  fun box mul(\n  y: I128 val)\n: I128 val",
            "title": "mul"
        },
        {
            "location": "/builtin-I128/#parameters_4",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_18",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#divmod",
            "text": "[Source]  fun box divmod(\n  y: I128 val)\n: (I128 val , I128 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-I128/#parameters_5",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_19",
            "text": "( I128  val ,  I128  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#div",
            "text": "[Source]  fun box div(\n  y: I128 val)\n: I128 val",
            "title": "div"
        },
        {
            "location": "/builtin-I128/#parameters_6",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_20",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#mod",
            "text": "[Source]  fun box mod(\n  y: I128 val)\n: I128 val",
            "title": "mod"
        },
        {
            "location": "/builtin-I128/#parameters_7",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_21",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#mul_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: I128 val)\n: I128 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_8",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_22",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#divmod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: I128 val)\n: (I128 val , I128 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_9",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_23",
            "text": "( I128  val ,  I128  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#div_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: I128 val)\n: I128 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_10",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_24",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#mod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: I128 val)\n: I128 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_11",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_25",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-I128/#returns_26",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-I128/#returns_27",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#f32_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_28",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#f64_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_29",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#addc",
            "text": "[Source]  fun box addc(\n  y: I128 val)\n: (I128 val , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-I128/#parameters_12",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_30",
            "text": "( I128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#subc",
            "text": "[Source]  fun box subc(\n  y: I128 val)\n: (I128 val , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-I128/#parameters_13",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_31",
            "text": "( I128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#mulc",
            "text": "[Source]  fun box mulc(\n  y: I128 val)\n: (I128 val , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-I128/#parameters_14",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_32",
            "text": "( I128  val ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#shl",
            "text": "fun box shl(\n  y: U128 val)\n: I128 val",
            "title": "shl"
        },
        {
            "location": "/builtin-I128/#parameters_15",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_33",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#shr",
            "text": "fun box shr(\n  y: U128 val)\n: I128 val",
            "title": "shr"
        },
        {
            "location": "/builtin-I128/#parameters_16",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_34",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#shl_unsafe",
            "text": "fun box shl_unsafe(\n  y: U128 val)\n: I128 val",
            "title": "shl_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_17",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_35",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#shr_unsafe",
            "text": "fun box shr_unsafe(\n  y: U128 val)\n: I128 val",
            "title": "shr_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_18",
            "text": "y:  U128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_36",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#add_unsafe",
            "text": "fun box add_unsafe(\n  y: I128 val)\n: I128 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_19",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_37",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#sub_unsafe",
            "text": "fun box sub_unsafe(\n  y: I128 val)\n: I128 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-I128/#parameters_20",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_38",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#neg_unsafe",
            "text": "fun box neg_unsafe()\n: I128 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_39",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#op_and",
            "text": "fun box op_and(\n  y: I128 val)\n: I128 val",
            "title": "op_and"
        },
        {
            "location": "/builtin-I128/#parameters_21",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_40",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#op_or",
            "text": "fun box op_or(\n  y: I128 val)\n: I128 val",
            "title": "op_or"
        },
        {
            "location": "/builtin-I128/#parameters_22",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_41",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#op_xor",
            "text": "fun box op_xor(\n  y: I128 val)\n: I128 val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-I128/#parameters_23",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_42",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#op_not",
            "text": "fun box op_not()\n: I128 val",
            "title": "op_not"
        },
        {
            "location": "/builtin-I128/#returns_43",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#add",
            "text": "fun box add(\n  y: I128 val)\n: I128 val",
            "title": "add"
        },
        {
            "location": "/builtin-I128/#parameters_24",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_44",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#sub",
            "text": "fun box sub(\n  y: I128 val)\n: I128 val",
            "title": "sub"
        },
        {
            "location": "/builtin-I128/#parameters_25",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_45",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#neg",
            "text": "fun box neg()\n: I128 val",
            "title": "neg"
        },
        {
            "location": "/builtin-I128/#returns_46",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#eq",
            "text": "fun box eq(\n  y: I128 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-I128/#parameters_26",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_47",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ne",
            "text": "fun box ne(\n  y: I128 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-I128/#parameters_27",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_48",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#lt",
            "text": "fun box lt(\n  y: I128 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-I128/#parameters_28",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_49",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#le",
            "text": "fun box le(\n  y: I128 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-I128/#parameters_29",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_50",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ge",
            "text": "fun box ge(\n  y: I128 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-I128/#parameters_30",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_51",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#gt",
            "text": "fun box gt(\n  y: I128 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-I128/#parameters_31",
            "text": "y:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_52",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i8",
            "text": "fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-I128/#returns_53",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i16",
            "text": "fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-I128/#returns_54",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i32",
            "text": "fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-I128/#returns_55",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i64",
            "text": "fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-I128/#returns_56",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i128_1",
            "text": "fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-I128/#returns_57",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ilong",
            "text": "fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-I128/#returns_58",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#isize",
            "text": "fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-I128/#returns_59",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u8",
            "text": "fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-I128/#returns_60",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u16",
            "text": "fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-I128/#returns_61",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u32",
            "text": "fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-I128/#returns_62",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u64",
            "text": "fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-I128/#returns_63",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u128",
            "text": "fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-I128/#returns_64",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ulong",
            "text": "fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-I128/#returns_65",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#usize",
            "text": "fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-I128/#returns_66",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i8_unsafe",
            "text": "fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_67",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i16_unsafe",
            "text": "fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_68",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i32_unsafe",
            "text": "fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_69",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i64_unsafe",
            "text": "fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_70",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#i128_unsafe",
            "text": "fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_71",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ilong_unsafe",
            "text": "fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_72",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#isize_unsafe",
            "text": "fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_73",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u8_unsafe",
            "text": "fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_74",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u16_unsafe",
            "text": "fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_75",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u32_unsafe",
            "text": "fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_76",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u64_unsafe",
            "text": "fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_77",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#u128_unsafe",
            "text": "fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_78",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#ulong_unsafe",
            "text": "fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_79",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#usize_unsafe",
            "text": "fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-I128/#returns_80",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-I128/#compare",
            "text": "fun box compare(\n  that: I128 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-I128/#parameters_32",
            "text": "that:  I128  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-I128/#returns_81",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Signed/",
            "text": "Signed\n\u00b6\n\n\n[Source]\n\n\ntype Signed is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val)",
            "title": "type Signed"
        },
        {
            "location": "/builtin-Signed/#signed",
            "text": "[Source]  type Signed is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)",
            "title": "Signed"
        },
        {
            "location": "/builtin-Signed/#type-alias-for",
            "text": "( I8  val |  I16  val |  I32  val |  I64  val |  I128  val |  ILong  val |  ISize  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-Seq/",
            "text": "Seq[A: A]\n\u00b6\n\n\n[Source]\n\n\nA sequence of elements.\n\n\ninterface ref Seq[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a sequence, reserving space for len elements.\n\n\nnew ref create(\n  len: USize val = seq)\n: Seq[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSeq\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nreserve\n\u00b6\n\n\n[Source]\n\n\nReserve space for len elements.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturns the number of elements in the sequence.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nReplaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nRemoves all elements from the sequence.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\u00b6\n\n\n[Source]\n\n\nAdds an element to the end of the sequence.\n\n\nfun ref push(\n  value: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\u00b6\n\n\n[Source]\n\n\nRemoves an element from the end of the sequence.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\u00b6\n\n\n[Source]\n\n\nAdds an element to the beginning of the sequence.\n\n\nfun ref unshift(\n  value: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\u00b6\n\n\n[Source]\n\n\nRemoves an element from the beginning of the sequence.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\u00b6\n\n\n[Source]\n\n\nAdd len elements to the end of the list, starting from the given\noffset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseq: (\nReadSeq\n[A] box & \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nAdd len iterated elements to the end of the list, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\u00b6\n\n\n[Source]\n\n\nTruncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturns an iterator over the elements of the sequence.\n\n\nfun box values()\n: Iterator[this->A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nIterator\n[this->A] ref^",
            "title": "interface Seq"
        },
        {
            "location": "/builtin-Seq/#seq91a-a93",
            "text": "[Source]  A sequence of elements.  interface ref Seq[A: A]",
            "title": "Seq[A: A]"
        },
        {
            "location": "/builtin-Seq/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Seq/#create",
            "text": "[Source]  Create a sequence, reserving space for len elements.  new ref create(\n  len: USize val = seq)\n: Seq[A] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-Seq/#parameters",
            "text": "len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns",
            "text": "Seq [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Seq/#reserve",
            "text": "[Source]  Reserve space for len elements.  fun ref reserve(\n  len: USize val)\n: None val",
            "title": "reserve"
        },
        {
            "location": "/builtin-Seq/#parameters_1",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#size",
            "text": "[Source]  Returns the number of elements in the sequence.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/builtin-Seq/#returns_2",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#apply",
            "text": "[Source]  Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds.  fun box apply(\n  i: USize val)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/builtin-Seq/#parameters_2",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_3",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#update",
            "text": "[Source]  Replaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?",
            "title": "update"
        },
        {
            "location": "/builtin-Seq/#parameters_3",
            "text": "i:  USize  val  value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_4",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#clear",
            "text": "[Source]  Removes all elements from the sequence.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/builtin-Seq/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#push",
            "text": "[Source]  Adds an element to the end of the sequence.  fun ref push(\n  value: A)\n: None val",
            "title": "push"
        },
        {
            "location": "/builtin-Seq/#parameters_4",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#pop",
            "text": "[Source]  Removes an element from the end of the sequence.  fun ref pop()\n: A^ ?",
            "title": "pop"
        },
        {
            "location": "/builtin-Seq/#returns_7",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#unshift",
            "text": "[Source]  Adds an element to the beginning of the sequence.  fun ref unshift(\n  value: A)\n: None val",
            "title": "unshift"
        },
        {
            "location": "/builtin-Seq/#parameters_5",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#shift",
            "text": "[Source]  Removes an element from the beginning of the sequence.  fun ref shift()\n: A^ ?",
            "title": "shift"
        },
        {
            "location": "/builtin-Seq/#returns_9",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#append",
            "text": "[Source]  Add len elements to the end of the list, starting from the given\noffset.  fun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "append"
        },
        {
            "location": "/builtin-Seq/#parameters_6",
            "text": "seq: ( ReadSeq [A] box &  ReadElement [A^] box)  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#concat",
            "text": "[Source]  Add len iterated elements to the end of the list, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "concat"
        },
        {
            "location": "/builtin-Seq/#parameters_7",
            "text": "iter:  Iterator [A^] ref  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#truncate",
            "text": "[Source]  Truncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val",
            "title": "truncate"
        },
        {
            "location": "/builtin-Seq/#parameters_8",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Seq/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Seq/#values",
            "text": "[Source]  Returns an iterator over the elements of the sequence.  fun box values()\n: Iterator[this->A] ref^",
            "title": "values"
        },
        {
            "location": "/builtin-Seq/#returns_13",
            "text": "Iterator [this->A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/",
            "text": "Real[A: \nReal\n[A] val]\n\u00b6\n\n\n[Source]\n\n\ntrait val Real[A: Real[A] val] is\n  Stringable box,\n  _ArithmeticConvertible val,\n  Comparable[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStringable\n box\n\n\n_ArithmeticConvertible val\n\n\nComparable\n[A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: A)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nfun box add(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nfun box sub(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nneg\n\u00b6\n\n\n[Source]\n\n\nfun box neg()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "trait Real"
        },
        {
            "location": "/builtin-Real/#real91a-real91a93-val93",
            "text": "[Source]  trait val Real[A: Real[A] val] is\n  Stringable box,\n  _ArithmeticConvertible val,\n  Comparable[A] ref",
            "title": "Real[A: Real[A] val]"
        },
        {
            "location": "/builtin-Real/#implements",
            "text": "Stringable  box  _ArithmeticConvertible val  Comparable [A] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Real/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Real/#create",
            "text": "[Source]  new val create(\n  value: A)\n: Real[A] val^",
            "title": "create"
        },
        {
            "location": "/builtin-Real/#parameters",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-Real/#parameters_1",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_1",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#min_value",
            "text": "[Source]  new val min_value()\n: Real[A] val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-Real/#returns_2",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#max_value",
            "text": "[Source]  new val max_value()\n: Real[A] val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-Real/#returns_3",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Real/#add",
            "text": "[Source]  fun box add(\n  y: A)\n: A",
            "title": "add"
        },
        {
            "location": "/builtin-Real/#parameters_2",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_4",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#sub",
            "text": "[Source]  fun box sub(\n  y: A)\n: A",
            "title": "sub"
        },
        {
            "location": "/builtin-Real/#parameters_3",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_5",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#mul",
            "text": "[Source]  fun box mul(\n  y: A)\n: A",
            "title": "mul"
        },
        {
            "location": "/builtin-Real/#parameters_4",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_6",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#div",
            "text": "[Source]  fun box div(\n  y: A)\n: A",
            "title": "div"
        },
        {
            "location": "/builtin-Real/#parameters_5",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_7",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#divmod",
            "text": "[Source]  fun box divmod(\n  y: A)\n: (A , A)",
            "title": "divmod"
        },
        {
            "location": "/builtin-Real/#parameters_6",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_8",
            "text": "(A , A)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#mod",
            "text": "[Source]  fun box mod(\n  y: A)\n: A",
            "title": "mod"
        },
        {
            "location": "/builtin-Real/#parameters_7",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_9",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#neg",
            "text": "[Source]  fun box neg()\n: A",
            "title": "neg"
        },
        {
            "location": "/builtin-Real/#returns_10",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#eq",
            "text": "[Source]  fun box eq(\n  y: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Real/#parameters_8",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_11",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ne",
            "text": "[Source]  fun box ne(\n  y: box->A)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Real/#parameters_9",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_12",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#lt",
            "text": "[Source]  fun box lt(\n  y: box->A)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-Real/#parameters_10",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_13",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#le",
            "text": "[Source]  fun box le(\n  y: box->A)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-Real/#parameters_11",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_14",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ge",
            "text": "[Source]  fun box ge(\n  y: box->A)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-Real/#parameters_12",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_15",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#gt",
            "text": "[Source]  fun box gt(\n  y: box->A)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-Real/#parameters_13",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_16",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#min",
            "text": "[Source]  fun box min(\n  y: A)\n: A",
            "title": "min"
        },
        {
            "location": "/builtin-Real/#parameters_14",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_17",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#max",
            "text": "[Source]  fun box max(\n  y: A)\n: A",
            "title": "max"
        },
        {
            "location": "/builtin-Real/#parameters_15",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_18",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-Real/#returns_19",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-Real/#returns_20",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Real/#returns_21",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i8",
            "text": "[Source]  fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-Real/#returns_22",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i16",
            "text": "[Source]  fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-Real/#returns_23",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i32",
            "text": "[Source]  fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-Real/#returns_24",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i64",
            "text": "[Source]  fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-Real/#returns_25",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i128",
            "text": "[Source]  fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-Real/#returns_26",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ilong",
            "text": "[Source]  fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-Real/#returns_27",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#isize",
            "text": "[Source]  fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-Real/#returns_28",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u8",
            "text": "[Source]  fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-Real/#returns_29",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u16",
            "text": "[Source]  fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-Real/#returns_30",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u32",
            "text": "[Source]  fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-Real/#returns_31",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u64",
            "text": "[Source]  fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-Real/#returns_32",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u128",
            "text": "[Source]  fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-Real/#returns_33",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ulong",
            "text": "[Source]  fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-Real/#returns_34",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#usize",
            "text": "[Source]  fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-Real/#returns_35",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-Real/#returns_36",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-Real/#returns_37",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i8_unsafe",
            "text": "[Source]  fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_38",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i16_unsafe",
            "text": "[Source]  fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_39",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i32_unsafe",
            "text": "[Source]  fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_40",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i64_unsafe",
            "text": "[Source]  fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_41",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#i128_unsafe",
            "text": "[Source]  fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_42",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ilong_unsafe",
            "text": "[Source]  fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_43",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#isize_unsafe",
            "text": "[Source]  fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_44",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u8_unsafe",
            "text": "[Source]  fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_45",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u16_unsafe",
            "text": "[Source]  fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_46",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u32_unsafe",
            "text": "[Source]  fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_47",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u64_unsafe",
            "text": "[Source]  fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#u128_unsafe",
            "text": "[Source]  fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_49",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#ulong_unsafe",
            "text": "[Source]  fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_50",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#usize_unsafe",
            "text": "[Source]  fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_51",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#f32_unsafe",
            "text": "[Source]  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_52",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#f64_unsafe",
            "text": "[Source]  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-Real/#returns_53",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Real/#compare",
            "text": "fun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-Real/#parameters_16",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Real/#returns_54",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/",
            "text": "Integer[A: \nInteger\n[A] val]\n\u00b6\n\n\n[Source]\n\n\ntrait val Integer[A: Integer[A] val] is\n  Real[A] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nReal\n[A] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: A)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nadd_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box add_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box sub_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box neg_unsafe()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\naddc\n\u00b6\n\n\n[Source]\n\n\nAdd \ny\n to this integer and return the result and a flag indicating overflow.\n\n\nfun box addc(\n  y: A)\n: (A , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , \nBool\n val)\n\n\n\n\n\n\nsubc\n\u00b6\n\n\n[Source]\n\n\nSubtract \ny\n from this integer and return the result and a flag indicating overflow.\n\n\nfun box subc(\n  y: A)\n: (A , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , \nBool\n val)\n\n\n\n\n\n\nmulc\n\u00b6\n\n\n[Source]\n\n\nMultiply \ny\n with this integer and return the result and a flag indicating overflow.\n\n\nfun box mulc(\n  y: A)\n: (A , Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , \nBool\n val)\n\n\n\n\n\n\nop_and\n\u00b6\n\n\n[Source]\n\n\nfun box op_and(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nop_or\n\u00b6\n\n\n[Source]\n\n\nfun box op_or(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\n[Source]\n\n\nfun box op_xor(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nop_not\n\u00b6\n\n\n[Source]\n\n\nfun box op_not()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nbit_reverse\n\u00b6\n\n\n[Source]\n\n\nReverse the order of the bits within the integer.\nFor example, 0b11101101 (237) would return 0b10110111 (183).\n\n\nfun box bit_reverse()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nbswap\n\u00b6\n\n\n[Source]\n\n\nfun box bswap()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nfun box add(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nfun box sub(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nneg\n\u00b6\n\n\n[Source]\n\n\nfun box neg()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "trait Integer"
        },
        {
            "location": "/builtin-Integer/#integer91a-integer91a93-val93",
            "text": "[Source]  trait val Integer[A: Integer[A] val] is\n  Real[A] val",
            "title": "Integer[A: Integer[A] val]"
        },
        {
            "location": "/builtin-Integer/#implements",
            "text": "Real [A] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-Integer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Integer/#create",
            "text": "[Source]  new val create(\n  value: A)\n: Real[A] val^",
            "title": "create"
        },
        {
            "location": "/builtin-Integer/#parameters",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-Integer/#parameters_1",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_1",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#min_value",
            "text": "[Source]  new val min_value()\n: Real[A] val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-Integer/#returns_2",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#max_value",
            "text": "[Source]  new val max_value()\n: Real[A] val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-Integer/#returns_3",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Integer/#add_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box add_unsafe(\n  y: A)\n: A",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_2",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_4",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#sub_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box sub_unsafe(\n  y: A)\n: A",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_3",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_5",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#mul_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: A)\n: A",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_4",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_6",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#div_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: A)\n: A",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_5",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_7",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#divmod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: A)\n: (A , A)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_6",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_8",
            "text": "(A , A)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#mod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: A)\n: A",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-Integer/#parameters_7",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_9",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#neg_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box neg_unsafe()\n: A",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_10",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#addc",
            "text": "[Source]  Add  y  to this integer and return the result and a flag indicating overflow.  fun box addc(\n  y: A)\n: (A , Bool val)",
            "title": "addc"
        },
        {
            "location": "/builtin-Integer/#parameters_8",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_11",
            "text": "(A ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#subc",
            "text": "[Source]  Subtract  y  from this integer and return the result and a flag indicating overflow.  fun box subc(\n  y: A)\n: (A , Bool val)",
            "title": "subc"
        },
        {
            "location": "/builtin-Integer/#parameters_9",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_12",
            "text": "(A ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#mulc",
            "text": "[Source]  Multiply  y  with this integer and return the result and a flag indicating overflow.  fun box mulc(\n  y: A)\n: (A , Bool val)",
            "title": "mulc"
        },
        {
            "location": "/builtin-Integer/#parameters_10",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_13",
            "text": "(A ,  Bool  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#op_and",
            "text": "[Source]  fun box op_and(\n  y: A)\n: A",
            "title": "op_and"
        },
        {
            "location": "/builtin-Integer/#parameters_11",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_14",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#op_or",
            "text": "[Source]  fun box op_or(\n  y: A)\n: A",
            "title": "op_or"
        },
        {
            "location": "/builtin-Integer/#parameters_12",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_15",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#op_xor",
            "text": "[Source]  fun box op_xor(\n  y: A)\n: A",
            "title": "op_xor"
        },
        {
            "location": "/builtin-Integer/#parameters_13",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_16",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#op_not",
            "text": "[Source]  fun box op_not()\n: A",
            "title": "op_not"
        },
        {
            "location": "/builtin-Integer/#returns_17",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#bit_reverse",
            "text": "[Source]  Reverse the order of the bits within the integer.\nFor example, 0b11101101 (237) would return 0b10110111 (183).  fun box bit_reverse()\n: A",
            "title": "bit_reverse"
        },
        {
            "location": "/builtin-Integer/#returns_18",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#bswap",
            "text": "[Source]  fun box bswap()\n: A",
            "title": "bswap"
        },
        {
            "location": "/builtin-Integer/#returns_19",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#add",
            "text": "[Source]  fun box add(\n  y: A)\n: A",
            "title": "add"
        },
        {
            "location": "/builtin-Integer/#parameters_14",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_20",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#sub",
            "text": "[Source]  fun box sub(\n  y: A)\n: A",
            "title": "sub"
        },
        {
            "location": "/builtin-Integer/#parameters_15",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_21",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#mul",
            "text": "[Source]  fun box mul(\n  y: A)\n: A",
            "title": "mul"
        },
        {
            "location": "/builtin-Integer/#parameters_16",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_22",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#div",
            "text": "[Source]  fun box div(\n  y: A)\n: A",
            "title": "div"
        },
        {
            "location": "/builtin-Integer/#parameters_17",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_23",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#divmod",
            "text": "[Source]  fun box divmod(\n  y: A)\n: (A , A)",
            "title": "divmod"
        },
        {
            "location": "/builtin-Integer/#parameters_18",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_24",
            "text": "(A , A)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#mod",
            "text": "[Source]  fun box mod(\n  y: A)\n: A",
            "title": "mod"
        },
        {
            "location": "/builtin-Integer/#parameters_19",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_25",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#neg",
            "text": "[Source]  fun box neg()\n: A",
            "title": "neg"
        },
        {
            "location": "/builtin-Integer/#returns_26",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#eq",
            "text": "[Source]  fun box eq(\n  y: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Integer/#parameters_20",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_27",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ne",
            "text": "[Source]  fun box ne(\n  y: box->A)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Integer/#parameters_21",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_28",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#lt",
            "text": "[Source]  fun box lt(\n  y: box->A)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-Integer/#parameters_22",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_29",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#le",
            "text": "[Source]  fun box le(\n  y: box->A)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-Integer/#parameters_23",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_30",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ge",
            "text": "[Source]  fun box ge(\n  y: box->A)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-Integer/#parameters_24",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_31",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#gt",
            "text": "[Source]  fun box gt(\n  y: box->A)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-Integer/#parameters_25",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_32",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#min",
            "text": "[Source]  fun box min(\n  y: A)\n: A",
            "title": "min"
        },
        {
            "location": "/builtin-Integer/#parameters_26",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_33",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#max",
            "text": "[Source]  fun box max(\n  y: A)\n: A",
            "title": "max"
        },
        {
            "location": "/builtin-Integer/#parameters_27",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_34",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-Integer/#returns_35",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-Integer/#returns_36",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Integer/#returns_37",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i8",
            "text": "[Source]  fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-Integer/#returns_38",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i16",
            "text": "[Source]  fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-Integer/#returns_39",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i32",
            "text": "[Source]  fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-Integer/#returns_40",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i64",
            "text": "[Source]  fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-Integer/#returns_41",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i128",
            "text": "[Source]  fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-Integer/#returns_42",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ilong",
            "text": "[Source]  fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-Integer/#returns_43",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#isize",
            "text": "[Source]  fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-Integer/#returns_44",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u8",
            "text": "[Source]  fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-Integer/#returns_45",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u16",
            "text": "[Source]  fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-Integer/#returns_46",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u32",
            "text": "[Source]  fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-Integer/#returns_47",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u64",
            "text": "[Source]  fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-Integer/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u128",
            "text": "[Source]  fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-Integer/#returns_49",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ulong",
            "text": "[Source]  fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-Integer/#returns_50",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#usize",
            "text": "[Source]  fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-Integer/#returns_51",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-Integer/#returns_52",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-Integer/#returns_53",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i8_unsafe",
            "text": "[Source]  fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_54",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i16_unsafe",
            "text": "[Source]  fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_55",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i32_unsafe",
            "text": "[Source]  fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_56",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i64_unsafe",
            "text": "[Source]  fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_57",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#i128_unsafe",
            "text": "[Source]  fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_58",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ilong_unsafe",
            "text": "[Source]  fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_59",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#isize_unsafe",
            "text": "[Source]  fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_60",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u8_unsafe",
            "text": "[Source]  fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_61",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u16_unsafe",
            "text": "[Source]  fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_62",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u32_unsafe",
            "text": "[Source]  fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_63",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u64_unsafe",
            "text": "[Source]  fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_64",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#u128_unsafe",
            "text": "[Source]  fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_65",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#ulong_unsafe",
            "text": "[Source]  fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_66",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#usize_unsafe",
            "text": "[Source]  fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_67",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#f32_unsafe",
            "text": "[Source]  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_68",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#f64_unsafe",
            "text": "[Source]  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-Integer/#returns_69",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Integer/#compare",
            "text": "fun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-Integer/#parameters_28",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Integer/#returns_70",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/",
            "text": "FloatingPoint[A: \nFloatingPoint\n[A] val]\n\u00b6\n\n\n[Source]\n\n\ntrait val FloatingPoint[A: FloatingPoint[A] val] is\n  Real[A] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nReal\n[A] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\nmin_normalised\n\u00b6\n\n\n[Source]\n\n\nnew val min_normalised()\n: FloatingPoint[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFloatingPoint\n[A] val^\n\n\n\n\n\n\nepsilon\n\u00b6\n\n\n[Source]\n\n\nnew val epsilon()\n: FloatingPoint[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFloatingPoint\n[A] val^\n\n\n\n\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: A)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nnew val min_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nnew val max_value()\n: Real[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nradix\n\u00b6\n\n\n[Source]\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\u00b6\n\n\n[Source]\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\u00b6\n\n\n[Source]\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\u00b6\n\n\n[Source]\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\u00b6\n\n\n[Source]\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\u00b6\n\n\n[Source]\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\u00b6\n\n\n[Source]\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box add_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box sub_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box mul_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box div_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box divmod_unsafe(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box mod_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box neg_unsafe()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\neq_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box eq_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box ne_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box lt_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box le_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box ge_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box gt_unsafe(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nceil\n\u00b6\n\n\n[Source]\n\n\nfun box ceil()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nfloor\n\u00b6\n\n\n[Source]\n\n\nfun box floor()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nround\n\u00b6\n\n\n[Source]\n\n\nfun box round()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ntrunc\n\u00b6\n\n\n[Source]\n\n\nfun box trunc()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nfinite\n\u00b6\n\n\n[Source]\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\u00b6\n\n\n[Source]\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\u00b6\n\n\n[Source]\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\u00b6\n\n\n[Source]\n\n\nfun box ldexp(\n  x: A,\n  exponent: I32 val)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: A\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nfrexp\n\u00b6\n\n\n[Source]\n\n\nfun box frexp()\n: (A , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , \nU32\n val)\n\n\n\n\n\n\nlog\n\u00b6\n\n\n[Source]\n\n\nfun box log()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nlog2\n\u00b6\n\n\n[Source]\n\n\nfun box log2()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nlog10\n\u00b6\n\n\n[Source]\n\n\nfun box log10()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nlogb\n\u00b6\n\n\n[Source]\n\n\nfun box logb()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\npow\n\u00b6\n\n\n[Source]\n\n\nfun box pow(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\npowi\n\u00b6\n\n\n[Source]\n\n\nfun box powi(\n  y: I32 val)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsqrt\n\u00b6\n\n\n[Source]\n\n\nfun box sqrt()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsqrt_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ncbrt\n\u00b6\n\n\n[Source]\n\n\nfun box cbrt()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nexp\n\u00b6\n\n\n[Source]\n\n\nfun box exp()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nexp2\n\u00b6\n\n\n[Source]\n\n\nfun box exp2()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ncos\n\u00b6\n\n\n[Source]\n\n\nfun box cos()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsin\n\u00b6\n\n\n[Source]\n\n\nfun box sin()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ntan\n\u00b6\n\n\n[Source]\n\n\nfun box tan()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ncosh\n\u00b6\n\n\n[Source]\n\n\nfun box cosh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsinh\n\u00b6\n\n\n[Source]\n\n\nfun box sinh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ntanh\n\u00b6\n\n\n[Source]\n\n\nfun box tanh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nacos\n\u00b6\n\n\n[Source]\n\n\nfun box acos()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nasin\n\u00b6\n\n\n[Source]\n\n\nfun box asin()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\natan\n\u00b6\n\n\n[Source]\n\n\nfun box atan()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\natan2\n\u00b6\n\n\n[Source]\n\n\nfun box atan2(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nacosh\n\u00b6\n\n\n[Source]\n\n\nfun box acosh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nasinh\n\u00b6\n\n\n[Source]\n\n\nfun box asinh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\natanh\n\u00b6\n\n\n[Source]\n\n\nfun box atanh()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ncopysign\n\u00b6\n\n\n[Source]\n\n\nfun box copysign(\n  sign: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsign: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nfun box add(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nfun box sub(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nneg\n\u00b6\n\n\n[Source]\n\n\nfun box neg()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "trait FloatingPoint"
        },
        {
            "location": "/builtin-FloatingPoint/#floatingpoint91a-floatingpoint91a93-val93",
            "text": "[Source]  trait val FloatingPoint[A: FloatingPoint[A] val] is\n  Real[A] val",
            "title": "FloatingPoint[A: FloatingPoint[A] val]"
        },
        {
            "location": "/builtin-FloatingPoint/#implements",
            "text": "Real [A] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-FloatingPoint/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FloatingPoint/#min_normalised",
            "text": "[Source]  new val min_normalised()\n: FloatingPoint[A] val^",
            "title": "min_normalised"
        },
        {
            "location": "/builtin-FloatingPoint/#returns",
            "text": "FloatingPoint [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#epsilon",
            "text": "[Source]  new val epsilon()\n: FloatingPoint[A] val^",
            "title": "epsilon"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_1",
            "text": "FloatingPoint [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#create",
            "text": "[Source]  new val create(\n  value: A)\n: Real[A] val^",
            "title": "create"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_2",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: Real[A] val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_1",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_3",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#min_value",
            "text": "[Source]  new val min_value()\n: Real[A] val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_4",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#max_value",
            "text": "[Source]  new val max_value()\n: Real[A] val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_5",
            "text": "Real [A] val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-FloatingPoint/#radix",
            "text": "[Source]  fun tag radix()\n: U8 val",
            "title": "radix"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_6",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#precision2",
            "text": "[Source]  fun tag precision2()\n: U8 val",
            "title": "precision2"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_7",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#precision10",
            "text": "[Source]  fun tag precision10()\n: U8 val",
            "title": "precision10"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_8",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#min_exp2",
            "text": "[Source]  fun tag min_exp2()\n: I16 val",
            "title": "min_exp2"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_9",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#min_exp10",
            "text": "[Source]  fun tag min_exp10()\n: I16 val",
            "title": "min_exp10"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_10",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#max_exp2",
            "text": "[Source]  fun tag max_exp2()\n: I16 val",
            "title": "max_exp2"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_11",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#max_exp10",
            "text": "[Source]  fun tag max_exp10()\n: I16 val",
            "title": "max_exp10"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_12",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#add_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box add_unsafe(\n  y: A)\n: A",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_2",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_13",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sub_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box sub_unsafe(\n  y: A)\n: A",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_3",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_14",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#mul_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box mul_unsafe(\n  y: A)\n: A",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_4",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_15",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#div_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box div_unsafe(\n  y: A)\n: A",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_5",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_16",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#divmod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box divmod_unsafe(\n  y: A)\n: (A , A)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_6",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_17",
            "text": "(A , A)",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#mod_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box mod_unsafe(\n  y: A)\n: A",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_7",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_18",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#neg_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box neg_unsafe()\n: A",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_19",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#eq_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box eq_unsafe(\n  y: box->A)\n: Bool val",
            "title": "eq_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_8",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_20",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ne_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box ne_unsafe(\n  y: box->A)\n: Bool val",
            "title": "ne_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_9",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_21",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#lt_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box lt_unsafe(\n  y: box->A)\n: Bool val",
            "title": "lt_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_10",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_22",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#le_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box le_unsafe(\n  y: box->A)\n: Bool val",
            "title": "le_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_11",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_23",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ge_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box ge_unsafe(\n  y: box->A)\n: Bool val",
            "title": "ge_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_12",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_24",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#gt_unsafe",
            "text": "[Source]  Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box gt_unsafe(\n  y: box->A)\n: Bool val",
            "title": "gt_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_13",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#abs",
            "text": "[Source]  fun box abs()\n: A",
            "title": "abs"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_26",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ceil",
            "text": "[Source]  fun box ceil()\n: A",
            "title": "ceil"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_27",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#floor",
            "text": "[Source]  fun box floor()\n: A",
            "title": "floor"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_28",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#round",
            "text": "[Source]  fun box round()\n: A",
            "title": "round"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_29",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#trunc",
            "text": "[Source]  fun box trunc()\n: A",
            "title": "trunc"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_30",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#finite",
            "text": "[Source]  fun box finite()\n: Bool val",
            "title": "finite"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_31",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#infinite",
            "text": "[Source]  fun box infinite()\n: Bool val",
            "title": "infinite"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_32",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#nan",
            "text": "[Source]  fun box nan()\n: Bool val",
            "title": "nan"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_33",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ldexp",
            "text": "[Source]  fun box ldexp(\n  x: A,\n  exponent: I32 val)\n: A",
            "title": "ldexp"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_14",
            "text": "x: A  exponent:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_34",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#frexp",
            "text": "[Source]  fun box frexp()\n: (A , U32 val)",
            "title": "frexp"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_35",
            "text": "(A ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#log",
            "text": "[Source]  fun box log()\n: A",
            "title": "log"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_36",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#log2",
            "text": "[Source]  fun box log2()\n: A",
            "title": "log2"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_37",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#log10",
            "text": "[Source]  fun box log10()\n: A",
            "title": "log10"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_38",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#logb",
            "text": "[Source]  fun box logb()\n: A",
            "title": "logb"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_39",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#pow",
            "text": "[Source]  fun box pow(\n  y: A)\n: A",
            "title": "pow"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_15",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_40",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#powi",
            "text": "[Source]  fun box powi(\n  y: I32 val)\n: A",
            "title": "powi"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_16",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_41",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sqrt",
            "text": "[Source]  fun box sqrt()\n: A",
            "title": "sqrt"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_42",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sqrt_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: A",
            "title": "sqrt_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_43",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#cbrt",
            "text": "[Source]  fun box cbrt()\n: A",
            "title": "cbrt"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_44",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#exp",
            "text": "[Source]  fun box exp()\n: A",
            "title": "exp"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_45",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#exp2",
            "text": "[Source]  fun box exp2()\n: A",
            "title": "exp2"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_46",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#cos",
            "text": "[Source]  fun box cos()\n: A",
            "title": "cos"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_47",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sin",
            "text": "[Source]  fun box sin()\n: A",
            "title": "sin"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_48",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#tan",
            "text": "[Source]  fun box tan()\n: A",
            "title": "tan"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_49",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#cosh",
            "text": "[Source]  fun box cosh()\n: A",
            "title": "cosh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_50",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sinh",
            "text": "[Source]  fun box sinh()\n: A",
            "title": "sinh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_51",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#tanh",
            "text": "[Source]  fun box tanh()\n: A",
            "title": "tanh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_52",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#acos",
            "text": "[Source]  fun box acos()\n: A",
            "title": "acos"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_53",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#asin",
            "text": "[Source]  fun box asin()\n: A",
            "title": "asin"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_54",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#atan",
            "text": "[Source]  fun box atan()\n: A",
            "title": "atan"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_55",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#atan2",
            "text": "[Source]  fun box atan2(\n  y: A)\n: A",
            "title": "atan2"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_17",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_56",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#acosh",
            "text": "[Source]  fun box acosh()\n: A",
            "title": "acosh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_57",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#asinh",
            "text": "[Source]  fun box asinh()\n: A",
            "title": "asinh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_58",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#atanh",
            "text": "[Source]  fun box atanh()\n: A",
            "title": "atanh"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_59",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#copysign",
            "text": "[Source]  fun box copysign(\n  sign: A)\n: A",
            "title": "copysign"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_18",
            "text": "sign: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_60",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_61",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#add",
            "text": "[Source]  fun box add(\n  y: A)\n: A",
            "title": "add"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_19",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_62",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#sub",
            "text": "[Source]  fun box sub(\n  y: A)\n: A",
            "title": "sub"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_20",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_63",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#mul",
            "text": "[Source]  fun box mul(\n  y: A)\n: A",
            "title": "mul"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_21",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_64",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#div",
            "text": "[Source]  fun box div(\n  y: A)\n: A",
            "title": "div"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_22",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_65",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#divmod",
            "text": "[Source]  fun box divmod(\n  y: A)\n: (A , A)",
            "title": "divmod"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_23",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_66",
            "text": "(A , A)",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#mod",
            "text": "[Source]  fun box mod(\n  y: A)\n: A",
            "title": "mod"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_24",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_67",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#neg",
            "text": "[Source]  fun box neg()\n: A",
            "title": "neg"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_68",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#eq",
            "text": "[Source]  fun box eq(\n  y: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_25",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_69",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ne",
            "text": "[Source]  fun box ne(\n  y: box->A)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_26",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_70",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#lt",
            "text": "[Source]  fun box lt(\n  y: box->A)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_27",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_71",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#le",
            "text": "[Source]  fun box le(\n  y: box->A)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_28",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_72",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ge",
            "text": "[Source]  fun box ge(\n  y: box->A)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_29",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_73",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#gt",
            "text": "[Source]  fun box gt(\n  y: box->A)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_30",
            "text": "y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_74",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#min",
            "text": "[Source]  fun box min(\n  y: A)\n: A",
            "title": "min"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_31",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_75",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#max",
            "text": "[Source]  fun box max(\n  y: A)\n: A",
            "title": "max"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_32",
            "text": "y: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_76",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_77",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i8",
            "text": "[Source]  fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_79",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i16",
            "text": "[Source]  fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_80",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i32",
            "text": "[Source]  fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_81",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i64",
            "text": "[Source]  fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_82",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i128",
            "text": "[Source]  fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_83",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ilong",
            "text": "[Source]  fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_84",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#isize",
            "text": "[Source]  fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_85",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u8",
            "text": "[Source]  fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_86",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u16",
            "text": "[Source]  fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_87",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u32",
            "text": "[Source]  fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_88",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u64",
            "text": "[Source]  fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_89",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u128",
            "text": "[Source]  fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_90",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ulong",
            "text": "[Source]  fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_91",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#usize",
            "text": "[Source]  fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_92",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_93",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_94",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i8_unsafe",
            "text": "[Source]  fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_95",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i16_unsafe",
            "text": "[Source]  fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_96",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i32_unsafe",
            "text": "[Source]  fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_97",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i64_unsafe",
            "text": "[Source]  fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_98",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#i128_unsafe",
            "text": "[Source]  fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_99",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ilong_unsafe",
            "text": "[Source]  fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_100",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#isize_unsafe",
            "text": "[Source]  fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_101",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u8_unsafe",
            "text": "[Source]  fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_102",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u16_unsafe",
            "text": "[Source]  fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_103",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u32_unsafe",
            "text": "[Source]  fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_104",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u64_unsafe",
            "text": "[Source]  fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_105",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#u128_unsafe",
            "text": "[Source]  fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_106",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#ulong_unsafe",
            "text": "[Source]  fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_107",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#usize_unsafe",
            "text": "[Source]  fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_108",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#f32_unsafe",
            "text": "[Source]  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_109",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#f64_unsafe",
            "text": "[Source]  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_110",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-FloatingPoint/#compare",
            "text": "fun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-FloatingPoint/#parameters_33",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-FloatingPoint/#returns_111",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Number/",
            "text": "Number\n\u00b6\n\n\n[Source]\n\n\ntype Number is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val)",
            "title": "type Number"
        },
        {
            "location": "/builtin-Number/#number",
            "text": "[Source]  type Number is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)",
            "title": "Number"
        },
        {
            "location": "/builtin-Number/#type-alias-for",
            "text": "( I8  val |  I16  val |  I32  val |  I64  val |  I128  val |  ILong  val |  ISize  val |  U8  val |  U16  val |  U32  val |  U64  val |  U128  val |  ULong  val |  USize  val |  F32  val |  F64  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-Int/",
            "text": "Int\n\u00b6\n\n\n[Source]\n\n\ntype Int is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val)",
            "title": "type Int"
        },
        {
            "location": "/builtin-Int/#int",
            "text": "[Source]  type Int is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)",
            "title": "Int"
        },
        {
            "location": "/builtin-Int/#type-alias-for",
            "text": "( I8  val |  I16  val |  I32  val |  I64  val |  I128  val |  ILong  val |  ISize  val |  U8  val |  U16  val |  U32  val |  U64  val |  U128  val |  ULong  val |  USize  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-ReadSeq/",
            "text": "ReadSeq[A: A]\n\u00b6\n\n\n[Source]\n\n\nThe readable interface of a sequence.\n\n\ninterface box ReadSeq[A: A]\n\n\n\n\nPublic Functions\n\u00b6\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturns the number of elements in the sequence.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns this->A, not A.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturns an iterator over the elements of the sequence. Note that this\niterates over this->A, not A.\n\n\nfun box values()\n: Iterator[this->A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nIterator\n[this->A] ref^",
            "title": "interface ReadSeq"
        },
        {
            "location": "/builtin-ReadSeq/#readseq91a-a93",
            "text": "[Source]  The readable interface of a sequence.  interface box ReadSeq[A: A]",
            "title": "ReadSeq[A: A]"
        },
        {
            "location": "/builtin-ReadSeq/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ReadSeq/#size",
            "text": "[Source]  Returns the number of elements in the sequence.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/builtin-ReadSeq/#returns",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ReadSeq/#apply",
            "text": "[Source]  Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns this->A, not A.  fun box apply(\n  i: USize val)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/builtin-ReadSeq/#parameters",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ReadSeq/#returns_1",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-ReadSeq/#values",
            "text": "[Source]  Returns an iterator over the elements of the sequence. Note that this\niterates over this->A, not A.  fun box values()\n: Iterator[this->A] ref^",
            "title": "values"
        },
        {
            "location": "/builtin-ReadSeq/#returns_2",
            "text": "Iterator [this->A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ReadElement/",
            "text": "ReadElement[A: A]\n\u00b6\n\n\n[Source]\n\n\nUsed to show that a ReadSeq can return an element of a specific unmodified\ntype.\n\n\ninterface box ReadElement[A: A]\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply(\n  i: USize val)\n: A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA ?",
            "title": "interface ReadElement"
        },
        {
            "location": "/builtin-ReadElement/#readelement91a-a93",
            "text": "[Source]  Used to show that a ReadSeq can return an element of a specific unmodified\ntype.  interface box ReadElement[A: A]",
            "title": "ReadElement[A: A]"
        },
        {
            "location": "/builtin-ReadElement/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ReadElement/#apply",
            "text": "[Source]  fun box apply(\n  i: USize val)\n: A ?",
            "title": "apply"
        },
        {
            "location": "/builtin-ReadElement/#parameters",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ReadElement/#returns",
            "text": "A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/",
            "text": "Pointer[A: A]\n\u00b6\n\n\n[Source]\n\n\nA Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\nincluded in a union or intersection, or be a subtype of any interface. Most\nfunctions on a Pointer[A] are private to maintain memory safety.\n\n\nstruct ref Pointer[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nA null pointer.\n\n\nnew ref create()\n: Pointer[A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPointer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nConvert the pointer into an integer.\n\n\nfun tag usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nis_null\n\u00b6\n\n\n[Source]\n\n\nReturn true for a null pointer, false for anything else.\n\n\nfun tag is_null()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nReturn true if this address is that address.\n\n\nfun tag eq(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nReturn true if this address is less than that address.\n\n\nfun tag lt(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun tag ne(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun tag le(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun tag ge(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun tag gt(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nReturns a hash of the address.\n\n\nfun tag hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nReturns a 64-bit hash of the address.\n\n\nfun tag hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val",
            "title": "struct Pointer"
        },
        {
            "location": "/builtin-Pointer/#pointer91a-a93",
            "text": "[Source]  A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\nincluded in a union or intersection, or be a subtype of any interface. Most\nfunctions on a Pointer[A] are private to maintain memory safety.  struct ref Pointer[A: A]",
            "title": "Pointer[A: A]"
        },
        {
            "location": "/builtin-Pointer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Pointer/#create",
            "text": "[Source]  A null pointer.  new ref create()\n: Pointer[A] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-Pointer/#returns",
            "text": "Pointer [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Pointer/#usize",
            "text": "[Source]  Convert the pointer into an integer.  fun tag usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-Pointer/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#is_null",
            "text": "[Source]  Return true for a null pointer, false for anything else.  fun tag is_null()\n: Bool val",
            "title": "is_null"
        },
        {
            "location": "/builtin-Pointer/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#eq",
            "text": "[Source]  Return true if this address is that address.  fun tag eq(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Pointer/#parameters",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#lt",
            "text": "[Source]  Return true if this address is less than that address.  fun tag lt(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-Pointer/#parameters_1",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#ne",
            "text": "[Source]  fun tag ne(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Pointer/#parameters_2",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#le",
            "text": "[Source]  fun tag le(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-Pointer/#parameters_3",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#ge",
            "text": "[Source]  fun tag ge(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-Pointer/#parameters_4",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#gt",
            "text": "[Source]  fun tag gt(\n  that: Pointer[A] tag)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-Pointer/#parameters_5",
            "text": "that:  Pointer [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Pointer/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#hash",
            "text": "[Source]  Returns a hash of the address.  fun tag hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-Pointer/#returns_9",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Pointer/#hash64",
            "text": "[Source]  Returns a 64-bit hash of the address.  fun tag hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-Pointer/#returns_10",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/",
            "text": "Platform\n\u00b6\n\n\n[Source]\n\n\nprimitive val Platform\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Platform val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPlatform\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nbsd\n\u00b6\n\n\n[Source]\n\n\nfun box bsd()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nfreebsd\n\u00b6\n\n\n[Source]\n\n\nfun box freebsd()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndragonfly\n\u00b6\n\n\n[Source]\n\n\nfun box dragonfly()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlinux\n\u00b6\n\n\n[Source]\n\n\nfun box linux()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nosx\n\u00b6\n\n\n[Source]\n\n\nfun box osx()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nposix\n\u00b6\n\n\n[Source]\n\n\nfun box posix()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwindows\n\u00b6\n\n\n[Source]\n\n\nfun box windows()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nx86\n\u00b6\n\n\n[Source]\n\n\nfun box x86()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\narm\n\u00b6\n\n\n[Source]\n\n\nfun box arm()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlp64\n\u00b6\n\n\n[Source]\n\n\nfun box lp64()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nllp64\n\u00b6\n\n\n[Source]\n\n\nfun box llp64()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nilp32\n\u00b6\n\n\n[Source]\n\n\nfun box ilp32()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nbigendian\n\u00b6\n\n\n[Source]\n\n\nfun box bigendian()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlittleendian\n\u00b6\n\n\n[Source]\n\n\nfun box littleendian()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnative128\n\u00b6\n\n\n[Source]\n\n\nfun box native128()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndebug\n\u00b6\n\n\n[Source]\n\n\nfun box debug()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Platform val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPlatform\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Platform val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPlatform\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Platform"
        },
        {
            "location": "/builtin-Platform/#platform",
            "text": "[Source]  primitive val Platform",
            "title": "Platform"
        },
        {
            "location": "/builtin-Platform/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Platform/#create",
            "text": "[Source]  new val create()\n: Platform val^",
            "title": "create"
        },
        {
            "location": "/builtin-Platform/#returns",
            "text": "Platform  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Platform/#bsd",
            "text": "[Source]  fun box bsd()\n: Bool val",
            "title": "bsd"
        },
        {
            "location": "/builtin-Platform/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#freebsd",
            "text": "[Source]  fun box freebsd()\n: Bool val",
            "title": "freebsd"
        },
        {
            "location": "/builtin-Platform/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#dragonfly",
            "text": "[Source]  fun box dragonfly()\n: Bool val",
            "title": "dragonfly"
        },
        {
            "location": "/builtin-Platform/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#linux",
            "text": "[Source]  fun box linux()\n: Bool val",
            "title": "linux"
        },
        {
            "location": "/builtin-Platform/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#osx",
            "text": "[Source]  fun box osx()\n: Bool val",
            "title": "osx"
        },
        {
            "location": "/builtin-Platform/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#posix",
            "text": "[Source]  fun box posix()\n: Bool val",
            "title": "posix"
        },
        {
            "location": "/builtin-Platform/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#windows",
            "text": "[Source]  fun box windows()\n: Bool val",
            "title": "windows"
        },
        {
            "location": "/builtin-Platform/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#x86",
            "text": "[Source]  fun box x86()\n: Bool val",
            "title": "x86"
        },
        {
            "location": "/builtin-Platform/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#arm",
            "text": "[Source]  fun box arm()\n: Bool val",
            "title": "arm"
        },
        {
            "location": "/builtin-Platform/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#lp64",
            "text": "[Source]  fun box lp64()\n: Bool val",
            "title": "lp64"
        },
        {
            "location": "/builtin-Platform/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#llp64",
            "text": "[Source]  fun box llp64()\n: Bool val",
            "title": "llp64"
        },
        {
            "location": "/builtin-Platform/#returns_11",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#ilp32",
            "text": "[Source]  fun box ilp32()\n: Bool val",
            "title": "ilp32"
        },
        {
            "location": "/builtin-Platform/#returns_12",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#bigendian",
            "text": "[Source]  fun box bigendian()\n: Bool val",
            "title": "bigendian"
        },
        {
            "location": "/builtin-Platform/#returns_13",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#littleendian",
            "text": "[Source]  fun box littleendian()\n: Bool val",
            "title": "littleendian"
        },
        {
            "location": "/builtin-Platform/#returns_14",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#native128",
            "text": "[Source]  fun box native128()\n: Bool val",
            "title": "native128"
        },
        {
            "location": "/builtin-Platform/#returns_15",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#debug",
            "text": "[Source]  fun box debug()\n: Bool val",
            "title": "debug"
        },
        {
            "location": "/builtin-Platform/#returns_16",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#eq",
            "text": "[Source]  fun box eq(\n  that: Platform val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Platform/#parameters",
            "text": "that:  Platform  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Platform/#returns_17",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Platform/#ne",
            "text": "[Source]  fun box ne(\n  that: Platform val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Platform/#parameters_1",
            "text": "that:  Platform  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Platform/#returns_18",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-None/",
            "text": "None\n\u00b6\n\n\n[Source]\n\n\nprimitive val None is\n  Stringable box\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: None val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: None val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNone\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: None val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNone\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive None"
        },
        {
            "location": "/builtin-None/#none",
            "text": "[Source]  primitive val None is\n  Stringable box",
            "title": "None"
        },
        {
            "location": "/builtin-None/#implements",
            "text": "Stringable  box",
            "title": "Implements"
        },
        {
            "location": "/builtin-None/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-None/#create",
            "text": "[Source]  new val create()\n: None val^",
            "title": "create"
        },
        {
            "location": "/builtin-None/#returns",
            "text": "None  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-None/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-None/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-None/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-None/#eq",
            "text": "[Source]  fun box eq(\n  that: None val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-None/#parameters",
            "text": "that:  None  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-None/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-None/#ne",
            "text": "[Source]  fun box ne(\n  that: None val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-None/#parameters_1",
            "text": "that:  None  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-None/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-MaybePointer/",
            "text": "MaybePointer[A: A]\n\u00b6\n\n\n[Source]\n\n\nA MaybePointer[A] is used to encode a possibly-null type. It should\n\nonly\n be used for structs that need to be passed to and from the C FFI.\n\n\nAn optional type for anything that isn't a struct should be encoded as a\nunion type, for example (A | None).\n\n\nstruct ref MaybePointer[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nThis re-encodes the type of \nthat\n from A to MaybePointer[A], allowing\n\nthat\n to be assigned to a field or variable of type MaybePointer[A]. It\ndoesn't allocate a wrapper object: there is no containing object for \nthat\n.\n\n\nnew ref create(\n  that: A)\n: MaybePointer[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMaybePointer\n[A] ref^\n\n\n\n\n\n\nnone\n\u00b6\n\n\n[Source]\n\n\nThis returns a null pointer typed as a MaybePointer[A].\n\n\nnew ref none()\n: MaybePointer[A] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMaybePointer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nThis re-encodes the type of \nthis\n from MaybePointer[A] to A, allowing\n\nthis\n to be assigned to a field of variable of type A. If \nthis\n is a null\npointer, an error is raised.\n\n\nfun box apply()\n: this->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nis_none\n\u00b6\n\n\n[Source]\n\n\nReturns true if \nthis\n is null (ie apply would raise an error).\n\n\nfun box is_none()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "struct MaybePointer"
        },
        {
            "location": "/builtin-MaybePointer/#maybepointer91a-a93",
            "text": "[Source]  A MaybePointer[A] is used to encode a possibly-null type. It should only  be used for structs that need to be passed to and from the C FFI.  An optional type for anything that isn't a struct should be encoded as a\nunion type, for example (A | None).  struct ref MaybePointer[A: A]",
            "title": "MaybePointer[A: A]"
        },
        {
            "location": "/builtin-MaybePointer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-MaybePointer/#create",
            "text": "[Source]  This re-encodes the type of  that  from A to MaybePointer[A], allowing that  to be assigned to a field or variable of type MaybePointer[A]. It\ndoesn't allocate a wrapper object: there is no containing object for  that .  new ref create(\n  that: A)\n: MaybePointer[A] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-MaybePointer/#parameters",
            "text": "that: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-MaybePointer/#returns",
            "text": "MaybePointer [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-MaybePointer/#none",
            "text": "[Source]  This returns a null pointer typed as a MaybePointer[A].  new ref none()\n: MaybePointer[A] ref^",
            "title": "none"
        },
        {
            "location": "/builtin-MaybePointer/#returns_1",
            "text": "MaybePointer [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-MaybePointer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-MaybePointer/#apply",
            "text": "[Source]  This re-encodes the type of  this  from MaybePointer[A] to A, allowing this  to be assigned to a field of variable of type A. If  this  is a null\npointer, an error is raised.  fun box apply()\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/builtin-MaybePointer/#returns_2",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-MaybePointer/#is_none",
            "text": "[Source]  Returns true if  this  is null (ie apply would raise an error).  fun box is_none()\n: Bool val",
            "title": "is_none"
        },
        {
            "location": "/builtin-MaybePointer/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Iterator/",
            "text": "Iterator[A: A]\n\u00b6\n\n\n[Source]\n\n\nIterators generate a series of values, one value at a time on each call to \nnext()\n.\n\n\nAn Iterator is considered exhausted, once its \nhas_next()\n method returns \nfalse\n.\nThus every call to \nnext()\n should be preceeded with a call to \nhas_next()\n to\ncheck for exhaustiveness.\n\n\nUsage\n\u00b6\n\n\nGiven the rules for using Iterators mentioned above, basic usage\nof an iterator looks like this:\n\n\nwhile iterator.has_next() do\n  let elem = iterator.next()?\n  // do something with elem\nend\n\n\n\n\nThe \nFor\n-loop provides a more concise way of iteration:\n\n\nfor elem in iterator do\n  // do something with elem\nend\n\n\n\n\nIteration using \nWhile\n is more flexible as it allows to continue iterating if a call to \nnext()\n errors.\nThe \nFor\n-loop does not allow this.\n\n\nImplementing Iterators\n\u00b6\n\n\nIterator implementations need to adhere to the following rules to be considered well-behaved:\n\n\n\n\nIf the Iterator is exhausted, \nhas_next()\n needs to return \nfalse\n.\n\n\nOnce \nhas_next()\n returned \nfalse\n it is not allowed to switch back to \ntrue\n\n  (Unless the Iterator supports rewinding)\n\n\nhas_next()\n does not change its returned value if \nnext()\n has not been called.\n  That means, that between two calls to \nnext()\n any number of calls to \nhas_next()\n\n  need to return the same value. (Unless the Iterator supports rewinding)\n\n\nA call to \nnext()\n erroring does not necessarily denote exhaustiveness.\n\n\n\n\nExample\n\u00b6\n\n\n// Generates values from `from` to 0\nclass ref Countdown is Iterator[USize]\n  var _cur: USize\n  var _has_next: Bool = true\n\n  new ref create(from: USize) =>\n    _cur = from\n\n  fun ref has_next(): Bool =>\n    _has_next\n\n  fun ref next(): USize =>\n    let elem = _cur = _cur - 1\n    if elem == 0 then\n      _has_next = false\n    end\n    elem\n\n\n\n\ninterface ref Iterator[A: A]\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nReturns \ntrue\n if this Iterator is not yet exhausted.\nThat means that a value returned from a subsequent call to \nnext()\n\nis a valid part of this iterator.\n\n\nReturns \nfalse\n if this Iterator is exhausted.\n\n\nThe behavior of \nnext()\n after this function returned \nfalse\n is undefined,\nit might throw an error or return values which are not part of this Iterator.\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nGenerate the next value.\n\n\nThis might error, which does not necessarily mean that the Iterator is exhausted.\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA ?",
            "title": "interface Iterator"
        },
        {
            "location": "/builtin-Iterator/#iterator91a-a93",
            "text": "[Source]  Iterators generate a series of values, one value at a time on each call to  next() .  An Iterator is considered exhausted, once its  has_next()  method returns  false .\nThus every call to  next()  should be preceeded with a call to  has_next()  to\ncheck for exhaustiveness.",
            "title": "Iterator[A: A]"
        },
        {
            "location": "/builtin-Iterator/#usage",
            "text": "Given the rules for using Iterators mentioned above, basic usage\nof an iterator looks like this:  while iterator.has_next() do\n  let elem = iterator.next()?\n  // do something with elem\nend  The  For -loop provides a more concise way of iteration:  for elem in iterator do\n  // do something with elem\nend  Iteration using  While  is more flexible as it allows to continue iterating if a call to  next()  errors.\nThe  For -loop does not allow this.",
            "title": "Usage"
        },
        {
            "location": "/builtin-Iterator/#implementing-iterators",
            "text": "Iterator implementations need to adhere to the following rules to be considered well-behaved:   If the Iterator is exhausted,  has_next()  needs to return  false .  Once  has_next()  returned  false  it is not allowed to switch back to  true \n  (Unless the Iterator supports rewinding)  has_next()  does not change its returned value if  next()  has not been called.\n  That means, that between two calls to  next()  any number of calls to  has_next() \n  need to return the same value. (Unless the Iterator supports rewinding)  A call to  next()  erroring does not necessarily denote exhaustiveness.",
            "title": "Implementing Iterators"
        },
        {
            "location": "/builtin-Iterator/#example",
            "text": "// Generates values from `from` to 0\nclass ref Countdown is Iterator[USize]\n  var _cur: USize\n  var _has_next: Bool = true\n\n  new ref create(from: USize) =>\n    _cur = from\n\n  fun ref has_next(): Bool =>\n    _has_next\n\n  fun ref next(): USize =>\n    let elem = _cur = _cur - 1\n    if elem == 0 then\n      _has_next = false\n    end\n    elem  interface ref Iterator[A: A]",
            "title": "Example"
        },
        {
            "location": "/builtin-Iterator/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Iterator/#has_next",
            "text": "[Source]  Returns  true  if this Iterator is not yet exhausted.\nThat means that a value returned from a subsequent call to  next() \nis a valid part of this iterator.  Returns  false  if this Iterator is exhausted.  The behavior of  next()  after this function returned  false  is undefined,\nit might throw an error or return values which are not part of this Iterator.  fun ref has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-Iterator/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Iterator/#next",
            "text": "[Source]  Generate the next value.  This might error, which does not necessarily mean that the Iterator is exhausted.  fun ref next()\n: A ?",
            "title": "next"
        },
        {
            "location": "/builtin-Iterator/#returns_1",
            "text": "A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/",
            "text": "F32\n\u00b6\n\n\n[Source]\n\n\nprimitive val F32 is\n  FloatingPoint[F32 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFloatingPoint\n[\nF32\n val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: F32 val = seq)\n: F32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nF32\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\npi\n\u00b6\n\n\n[Source]\n\n\nnew val pi()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\ne\n\u00b6\n\n\n[Source]\n\n\nnew val e()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nfrom_bits\n\u00b6\n\n\n[Source]\n\n\nnew val from_bits(\n  i: U32 val)\n: F32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: F32 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nMinimum negative value representable.\n\n\nnew val min_value()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nMaximum positive value representable.\n\n\nnew val max_value()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmin_normalised\n\u00b6\n\n\n[Source]\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nnew val min_normalised()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nepsilon\n\u00b6\n\n\n[Source]\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nnew val epsilon()\n: F32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nbits\n\u00b6\n\n\n[Source]\n\n\nfun box bits()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nradix\n\u00b6\n\n\n[Source]\n\n\nExponent radix.\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\u00b6\n\n\n[Source]\n\n\nMantissa precision in bits.\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\u00b6\n\n\n[Source]\n\n\nMantissa precision in decimal digits.\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\u00b6\n\n\n[Source]\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\u00b6\n\n\n[Source]\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\u00b6\n\n\n[Source]\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\u00b6\n\n\n[Source]\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nceil\n\u00b6\n\n\n[Source]\n\n\nfun box ceil()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfloor\n\u00b6\n\n\n[Source]\n\n\nfun box floor()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nround\n\u00b6\n\n\n[Source]\n\n\nfun box round()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntrunc\n\u00b6\n\n\n[Source]\n\n\nfun box trunc()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfinite\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is +/-infinity\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is NaN.\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\u00b6\n\n\n[Source]\n\n\nfun box ldexp(\n  x: F32 val,\n  exponent: I32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: \nF32\n val\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfrexp\n\u00b6\n\n\n[Source]\n\n\nfun box frexp()\n: (F32 val , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF32\n val , \nU32\n val)\n\n\n\n\n\n\nlog\n\u00b6\n\n\n[Source]\n\n\nfun box log()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlog2\n\u00b6\n\n\n[Source]\n\n\nfun box log2()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlog10\n\u00b6\n\n\n[Source]\n\n\nfun box log10()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlogb\n\u00b6\n\n\n[Source]\n\n\nfun box logb()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\npow\n\u00b6\n\n\n[Source]\n\n\nfun box pow(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\npowi\n\u00b6\n\n\n[Source]\n\n\nfun box powi(\n  y: I32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsqrt\n\u00b6\n\n\n[Source]\n\n\nfun box sqrt()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsqrt_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncbrt\n\u00b6\n\n\n[Source]\n\n\nfun box cbrt()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nexp\n\u00b6\n\n\n[Source]\n\n\nfun box exp()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nexp2\n\u00b6\n\n\n[Source]\n\n\nfun box exp2()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncos\n\u00b6\n\n\n[Source]\n\n\nfun box cos()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsin\n\u00b6\n\n\n[Source]\n\n\nfun box sin()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntan\n\u00b6\n\n\n[Source]\n\n\nfun box tan()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncosh\n\u00b6\n\n\n[Source]\n\n\nfun box cosh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsinh\n\u00b6\n\n\n[Source]\n\n\nfun box sinh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntanh\n\u00b6\n\n\n[Source]\n\n\nfun box tanh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nacos\n\u00b6\n\n\n[Source]\n\n\nfun box acos()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nasin\n\u00b6\n\n\n[Source]\n\n\nfun box asin()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\natan\n\u00b6\n\n\n[Source]\n\n\nfun box atan()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\natan2\n\u00b6\n\n\n[Source]\n\n\nfun box atan2(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nacosh\n\u00b6\n\n\n[Source]\n\n\nfun box acosh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nasinh\n\u00b6\n\n\n[Source]\n\n\nfun box asinh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\natanh\n\u00b6\n\n\n[Source]\n\n\nfun box atanh()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncopysign\n\u00b6\n\n\n[Source]\n\n\nfun box copysign(\n  sign: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsign: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box add_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box sub_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box mul_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box div_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box divmod_unsafe(\n  y: F32 val)\n: (F32 val , F32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF32\n val , \nF32\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box mod_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box neg_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\neq_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box eq_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ne_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box lt_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box le_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ge_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box gt_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nfun box add(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nfun box sub(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: F32 val)\n: (F32 val , F32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF32\n val , \nF32\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\n[Source]\n\n\nfun box neg()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: F32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive F32"
        },
        {
            "location": "/builtin-F32/#f32",
            "text": "[Source]  primitive val F32 is\n  FloatingPoint[F32 val] val",
            "title": "F32"
        },
        {
            "location": "/builtin-F32/#implements",
            "text": "FloatingPoint [ F32  val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-F32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-F32/#create",
            "text": "[Source]  new val create(\n  value: F32 val = seq)\n: F32 val^",
            "title": "create"
        },
        {
            "location": "/builtin-F32/#parameters",
            "text": "value:  F32  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#pi",
            "text": "[Source]  new val pi()\n: F32 val^",
            "title": "pi"
        },
        {
            "location": "/builtin-F32/#returns_1",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#e",
            "text": "[Source]  new val e()\n: F32 val^",
            "title": "e"
        },
        {
            "location": "/builtin-F32/#returns_2",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#from_bits",
            "text": "[Source]  new val from_bits(\n  i: U32 val)\n: F32 val^",
            "title": "from_bits"
        },
        {
            "location": "/builtin-F32/#parameters_1",
            "text": "i:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_3",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: F32 val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-F32/#parameters_2",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_4",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#min_value",
            "text": "[Source]  Minimum negative value representable.  new val min_value()\n: F32 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-F32/#returns_5",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#max_value",
            "text": "[Source]  Maximum positive value representable.  new val max_value()\n: F32 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-F32/#returns_6",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#min_normalised",
            "text": "[Source]  Minimum positive value representable at full precision (ie a normalised\nnumber).  new val min_normalised()\n: F32 val^",
            "title": "min_normalised"
        },
        {
            "location": "/builtin-F32/#returns_7",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#epsilon",
            "text": "[Source]  Minimum positive value such that (1 + epsilon) != 1.  new val epsilon()\n: F32 val^",
            "title": "epsilon"
        },
        {
            "location": "/builtin-F32/#returns_8",
            "text": "F32  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-F32/#bits",
            "text": "[Source]  fun box bits()\n: U32 val",
            "title": "bits"
        },
        {
            "location": "/builtin-F32/#returns_9",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#radix",
            "text": "[Source]  Exponent radix.  fun tag radix()\n: U8 val",
            "title": "radix"
        },
        {
            "location": "/builtin-F32/#returns_10",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#precision2",
            "text": "[Source]  Mantissa precision in bits.  fun tag precision2()\n: U8 val",
            "title": "precision2"
        },
        {
            "location": "/builtin-F32/#returns_11",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#precision10",
            "text": "[Source]  Mantissa precision in decimal digits.  fun tag precision10()\n: U8 val",
            "title": "precision10"
        },
        {
            "location": "/builtin-F32/#returns_12",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#min_exp2",
            "text": "[Source]  Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp2()\n: I16 val",
            "title": "min_exp2"
        },
        {
            "location": "/builtin-F32/#returns_13",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#min_exp10",
            "text": "[Source]  Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp10()\n: I16 val",
            "title": "min_exp10"
        },
        {
            "location": "/builtin-F32/#returns_14",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#max_exp2",
            "text": "[Source]  Maximum exponent value such that (2^exponent) - 1 is representable.  fun tag max_exp2()\n: I16 val",
            "title": "max_exp2"
        },
        {
            "location": "/builtin-F32/#returns_15",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#max_exp10",
            "text": "[Source]  Maximum exponent value such that (10^exponent) - 1 is representable.  fun tag max_exp10()\n: I16 val",
            "title": "max_exp10"
        },
        {
            "location": "/builtin-F32/#returns_16",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#abs",
            "text": "[Source]  fun box abs()\n: F32 val",
            "title": "abs"
        },
        {
            "location": "/builtin-F32/#returns_17",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ceil",
            "text": "[Source]  fun box ceil()\n: F32 val",
            "title": "ceil"
        },
        {
            "location": "/builtin-F32/#returns_18",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#floor",
            "text": "[Source]  fun box floor()\n: F32 val",
            "title": "floor"
        },
        {
            "location": "/builtin-F32/#returns_19",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#round",
            "text": "[Source]  fun box round()\n: F32 val",
            "title": "round"
        },
        {
            "location": "/builtin-F32/#returns_20",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#trunc",
            "text": "[Source]  fun box trunc()\n: F32 val",
            "title": "trunc"
        },
        {
            "location": "/builtin-F32/#returns_21",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#min",
            "text": "[Source]  fun box min(\n  y: F32 val)\n: F32 val",
            "title": "min"
        },
        {
            "location": "/builtin-F32/#parameters_3",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_22",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#max",
            "text": "[Source]  fun box max(\n  y: F32 val)\n: F32 val",
            "title": "max"
        },
        {
            "location": "/builtin-F32/#parameters_4",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_23",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#finite",
            "text": "[Source]  Check whether this number is finite, ie not +/-infinity and not NaN.  fun box finite()\n: Bool val",
            "title": "finite"
        },
        {
            "location": "/builtin-F32/#returns_24",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#infinite",
            "text": "[Source]  Check whether this number is +/-infinity  fun box infinite()\n: Bool val",
            "title": "infinite"
        },
        {
            "location": "/builtin-F32/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#nan",
            "text": "[Source]  Check whether this number is NaN.  fun box nan()\n: Bool val",
            "title": "nan"
        },
        {
            "location": "/builtin-F32/#returns_26",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ldexp",
            "text": "[Source]  fun box ldexp(\n  x: F32 val,\n  exponent: I32 val)\n: F32 val",
            "title": "ldexp"
        },
        {
            "location": "/builtin-F32/#parameters_5",
            "text": "x:  F32  val  exponent:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_27",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#frexp",
            "text": "[Source]  fun box frexp()\n: (F32 val , U32 val)",
            "title": "frexp"
        },
        {
            "location": "/builtin-F32/#returns_28",
            "text": "( F32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#log",
            "text": "[Source]  fun box log()\n: F32 val",
            "title": "log"
        },
        {
            "location": "/builtin-F32/#returns_29",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#log2",
            "text": "[Source]  fun box log2()\n: F32 val",
            "title": "log2"
        },
        {
            "location": "/builtin-F32/#returns_30",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#log10",
            "text": "[Source]  fun box log10()\n: F32 val",
            "title": "log10"
        },
        {
            "location": "/builtin-F32/#returns_31",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#logb",
            "text": "[Source]  fun box logb()\n: F32 val",
            "title": "logb"
        },
        {
            "location": "/builtin-F32/#returns_32",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#pow",
            "text": "[Source]  fun box pow(\n  y: F32 val)\n: F32 val",
            "title": "pow"
        },
        {
            "location": "/builtin-F32/#parameters_6",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_33",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#powi",
            "text": "[Source]  fun box powi(\n  y: I32 val)\n: F32 val",
            "title": "powi"
        },
        {
            "location": "/builtin-F32/#parameters_7",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_34",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sqrt",
            "text": "[Source]  fun box sqrt()\n: F32 val",
            "title": "sqrt"
        },
        {
            "location": "/builtin-F32/#returns_35",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sqrt_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: F32 val",
            "title": "sqrt_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_36",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#cbrt",
            "text": "[Source]  fun box cbrt()\n: F32 val",
            "title": "cbrt"
        },
        {
            "location": "/builtin-F32/#returns_37",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#exp",
            "text": "[Source]  fun box exp()\n: F32 val",
            "title": "exp"
        },
        {
            "location": "/builtin-F32/#returns_38",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#exp2",
            "text": "[Source]  fun box exp2()\n: F32 val",
            "title": "exp2"
        },
        {
            "location": "/builtin-F32/#returns_39",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#cos",
            "text": "[Source]  fun box cos()\n: F32 val",
            "title": "cos"
        },
        {
            "location": "/builtin-F32/#returns_40",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sin",
            "text": "[Source]  fun box sin()\n: F32 val",
            "title": "sin"
        },
        {
            "location": "/builtin-F32/#returns_41",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#tan",
            "text": "[Source]  fun box tan()\n: F32 val",
            "title": "tan"
        },
        {
            "location": "/builtin-F32/#returns_42",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#cosh",
            "text": "[Source]  fun box cosh()\n: F32 val",
            "title": "cosh"
        },
        {
            "location": "/builtin-F32/#returns_43",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sinh",
            "text": "[Source]  fun box sinh()\n: F32 val",
            "title": "sinh"
        },
        {
            "location": "/builtin-F32/#returns_44",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#tanh",
            "text": "[Source]  fun box tanh()\n: F32 val",
            "title": "tanh"
        },
        {
            "location": "/builtin-F32/#returns_45",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#acos",
            "text": "[Source]  fun box acos()\n: F32 val",
            "title": "acos"
        },
        {
            "location": "/builtin-F32/#returns_46",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#asin",
            "text": "[Source]  fun box asin()\n: F32 val",
            "title": "asin"
        },
        {
            "location": "/builtin-F32/#returns_47",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#atan",
            "text": "[Source]  fun box atan()\n: F32 val",
            "title": "atan"
        },
        {
            "location": "/builtin-F32/#returns_48",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#atan2",
            "text": "[Source]  fun box atan2(\n  y: F32 val)\n: F32 val",
            "title": "atan2"
        },
        {
            "location": "/builtin-F32/#parameters_8",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_49",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#acosh",
            "text": "[Source]  fun box acosh()\n: F32 val",
            "title": "acosh"
        },
        {
            "location": "/builtin-F32/#returns_50",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#asinh",
            "text": "[Source]  fun box asinh()\n: F32 val",
            "title": "asinh"
        },
        {
            "location": "/builtin-F32/#returns_51",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#atanh",
            "text": "[Source]  fun box atanh()\n: F32 val",
            "title": "atanh"
        },
        {
            "location": "/builtin-F32/#returns_52",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#copysign",
            "text": "[Source]  fun box copysign(\n  sign: F32 val)\n: F32 val",
            "title": "copysign"
        },
        {
            "location": "/builtin-F32/#parameters_9",
            "text": "sign:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_53",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-F32/#returns_54",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-F32/#returns_55",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i128",
            "text": "[Source]  fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-F32/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u128",
            "text": "[Source]  fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-F32/#returns_57",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i128_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_58",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u128_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_59",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#add_unsafe",
            "text": "[Source]  fun box add_unsafe(\n  y: F32 val)\n: F32 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_10",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_60",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sub_unsafe",
            "text": "[Source]  fun box sub_unsafe(\n  y: F32 val)\n: F32 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_11",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_61",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#mul_unsafe",
            "text": "[Source]  fun box mul_unsafe(\n  y: F32 val)\n: F32 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_12",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_62",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#div_unsafe",
            "text": "[Source]  fun box div_unsafe(\n  y: F32 val)\n: F32 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_13",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_63",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#divmod_unsafe",
            "text": "[Source]  fun box divmod_unsafe(\n  y: F32 val)\n: (F32 val , F32 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_14",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_64",
            "text": "( F32  val ,  F32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#mod_unsafe",
            "text": "[Source]  fun box mod_unsafe(\n  y: F32 val)\n: F32 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_15",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_65",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#neg_unsafe",
            "text": "[Source]  fun box neg_unsafe()\n: F32 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_66",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#eq_unsafe",
            "text": "[Source]  fun box eq_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "eq_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_16",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_67",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ne_unsafe",
            "text": "[Source]  fun box ne_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "ne_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_17",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_68",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#lt_unsafe",
            "text": "[Source]  fun box lt_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "lt_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_18",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_69",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#le_unsafe",
            "text": "[Source]  fun box le_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "le_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_19",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_70",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ge_unsafe",
            "text": "[Source]  fun box ge_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "ge_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_20",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_71",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#gt_unsafe",
            "text": "[Source]  fun box gt_unsafe(\n  y: F32 val)\n: Bool val",
            "title": "gt_unsafe"
        },
        {
            "location": "/builtin-F32/#parameters_21",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_72",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-F32/#returns_73",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#add",
            "text": "[Source]  fun box add(\n  y: F32 val)\n: F32 val",
            "title": "add"
        },
        {
            "location": "/builtin-F32/#parameters_22",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_74",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#sub",
            "text": "[Source]  fun box sub(\n  y: F32 val)\n: F32 val",
            "title": "sub"
        },
        {
            "location": "/builtin-F32/#parameters_23",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_75",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#mul",
            "text": "[Source]  fun box mul(\n  y: F32 val)\n: F32 val",
            "title": "mul"
        },
        {
            "location": "/builtin-F32/#parameters_24",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_76",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#div",
            "text": "[Source]  fun box div(\n  y: F32 val)\n: F32 val",
            "title": "div"
        },
        {
            "location": "/builtin-F32/#parameters_25",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_77",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#divmod",
            "text": "[Source]  fun box divmod(\n  y: F32 val)\n: (F32 val , F32 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-F32/#parameters_26",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_78",
            "text": "( F32  val ,  F32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#mod",
            "text": "[Source]  fun box mod(\n  y: F32 val)\n: F32 val",
            "title": "mod"
        },
        {
            "location": "/builtin-F32/#parameters_27",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_79",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#neg",
            "text": "[Source]  fun box neg()\n: F32 val",
            "title": "neg"
        },
        {
            "location": "/builtin-F32/#returns_80",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#eq",
            "text": "[Source]  fun box eq(\n  y: F32 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-F32/#parameters_28",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_81",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ne",
            "text": "[Source]  fun box ne(\n  y: F32 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-F32/#parameters_29",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_82",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#lt",
            "text": "[Source]  fun box lt(\n  y: F32 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-F32/#parameters_30",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_83",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#le",
            "text": "[Source]  fun box le(\n  y: F32 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-F32/#parameters_31",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_84",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ge",
            "text": "[Source]  fun box ge(\n  y: F32 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-F32/#parameters_32",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_85",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#gt",
            "text": "[Source]  fun box gt(\n  y: F32 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-F32/#parameters_33",
            "text": "y:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_86",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i8",
            "text": "[Source]  fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-F32/#returns_87",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i16",
            "text": "[Source]  fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-F32/#returns_88",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i32",
            "text": "[Source]  fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-F32/#returns_89",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i64",
            "text": "[Source]  fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-F32/#returns_90",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ilong",
            "text": "[Source]  fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-F32/#returns_91",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#isize",
            "text": "[Source]  fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-F32/#returns_92",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u8",
            "text": "[Source]  fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-F32/#returns_93",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u16",
            "text": "[Source]  fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-F32/#returns_94",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u32",
            "text": "[Source]  fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-F32/#returns_95",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u64",
            "text": "[Source]  fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-F32/#returns_96",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ulong",
            "text": "[Source]  fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-F32/#returns_97",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#usize",
            "text": "[Source]  fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-F32/#returns_98",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#f32_1",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-F32/#returns_99",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#f64",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-F32/#returns_100",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i8_unsafe",
            "text": "[Source]  fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_101",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i16_unsafe",
            "text": "[Source]  fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_102",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i32_unsafe",
            "text": "[Source]  fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_103",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#i64_unsafe",
            "text": "[Source]  fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_104",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ilong_unsafe",
            "text": "[Source]  fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_105",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#isize_unsafe",
            "text": "[Source]  fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_106",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u8_unsafe",
            "text": "[Source]  fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_107",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u16_unsafe",
            "text": "[Source]  fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_108",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u32_unsafe",
            "text": "[Source]  fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_109",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#u64_unsafe",
            "text": "[Source]  fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_110",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#ulong_unsafe",
            "text": "[Source]  fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_111",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#usize_unsafe",
            "text": "[Source]  fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_112",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#f32_unsafe",
            "text": "[Source]  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_113",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#f64_unsafe",
            "text": "[Source]  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-F32/#returns_114",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F32/#compare",
            "text": "fun box compare(\n  that: F32 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-F32/#parameters_34",
            "text": "that:  F32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F32/#returns_115",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/",
            "text": "F64\n\u00b6\n\n\n[Source]\n\n\nprimitive val F64 is\n  FloatingPoint[F64 val] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFloatingPoint\n[\nF64\n val] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  value: F64 val = seq)\n: F64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nF64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\npi\n\u00b6\n\n\n[Source]\n\n\nnew val pi()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\ne\n\u00b6\n\n\n[Source]\n\n\nnew val e()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nfrom_bits\n\u00b6\n\n\n[Source]\n\n\nnew val from_bits(\n  i: U64 val)\n: F64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) & \nReal\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: F64 val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmin_value\n\u00b6\n\n\n[Source]\n\n\nMinimum negative value representable.\n\n\nnew val min_value()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmax_value\n\u00b6\n\n\n[Source]\n\n\nMaximum positive value representable.\n\n\nnew val max_value()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmin_normalised\n\u00b6\n\n\n[Source]\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nnew val min_normalised()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nepsilon\n\u00b6\n\n\n[Source]\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nnew val epsilon()\n: F64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nbits\n\u00b6\n\n\n[Source]\n\n\nfun box bits()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nradix\n\u00b6\n\n\n[Source]\n\n\nExponent radix.\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\u00b6\n\n\n[Source]\n\n\nMantissa precision in bits.\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\u00b6\n\n\n[Source]\n\n\nMantissa precision in decimal digits.\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\u00b6\n\n\n[Source]\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\u00b6\n\n\n[Source]\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\u00b6\n\n\n[Source]\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\u00b6\n\n\n[Source]\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nfun box abs()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nceil\n\u00b6\n\n\n[Source]\n\n\nfun box ceil()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfloor\n\u00b6\n\n\n[Source]\n\n\nfun box floor()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nround\n\u00b6\n\n\n[Source]\n\n\nfun box round()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntrunc\n\u00b6\n\n\n[Source]\n\n\nfun box trunc()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmin\n\u00b6\n\n\n[Source]\n\n\nfun box min(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmax\n\u00b6\n\n\n[Source]\n\n\nfun box max(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfinite\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is +/-infinity\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\u00b6\n\n\n[Source]\n\n\nCheck whether this number is NaN.\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\u00b6\n\n\n[Source]\n\n\nfun box ldexp(\n  x: F64 val,\n  exponent: I32 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: \nF64\n val\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfrexp\n\u00b6\n\n\n[Source]\n\n\nfun box frexp()\n: (F64 val , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF64\n val , \nU32\n val)\n\n\n\n\n\n\nlog\n\u00b6\n\n\n[Source]\n\n\nfun box log()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlog2\n\u00b6\n\n\n[Source]\n\n\nfun box log2()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlog10\n\u00b6\n\n\n[Source]\n\n\nfun box log10()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlogb\n\u00b6\n\n\n[Source]\n\n\nfun box logb()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\npow\n\u00b6\n\n\n[Source]\n\n\nfun box pow(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\npowi\n\u00b6\n\n\n[Source]\n\n\nfun box powi(\n  y: I32 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsqrt\n\u00b6\n\n\n[Source]\n\n\nfun box sqrt()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsqrt_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncbrt\n\u00b6\n\n\n[Source]\n\n\nfun box cbrt()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nexp\n\u00b6\n\n\n[Source]\n\n\nfun box exp()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nexp2\n\u00b6\n\n\n[Source]\n\n\nfun box exp2()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncos\n\u00b6\n\n\n[Source]\n\n\nfun box cos()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsin\n\u00b6\n\n\n[Source]\n\n\nfun box sin()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntan\n\u00b6\n\n\n[Source]\n\n\nfun box tan()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncosh\n\u00b6\n\n\n[Source]\n\n\nfun box cosh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsinh\n\u00b6\n\n\n[Source]\n\n\nfun box sinh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntanh\n\u00b6\n\n\n[Source]\n\n\nfun box tanh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nacos\n\u00b6\n\n\n[Source]\n\n\nfun box acos()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nasin\n\u00b6\n\n\n[Source]\n\n\nfun box asin()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\natan\n\u00b6\n\n\n[Source]\n\n\nfun box atan()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\natan2\n\u00b6\n\n\n[Source]\n\n\nfun box atan2(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nacosh\n\u00b6\n\n\n[Source]\n\n\nfun box acosh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nasinh\n\u00b6\n\n\n[Source]\n\n\nfun box asinh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\natanh\n\u00b6\n\n\n[Source]\n\n\nfun box atanh()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncopysign\n\u00b6\n\n\n[Source]\n\n\nfun box copysign(\n  sign: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsign: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni128\n\u00b6\n\n\n[Source]\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128\n\u00b6\n\n\n[Source]\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\ni128_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128_unsafe\n\u00b6\n\n\n[Source]\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box add_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsub_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box sub_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmul_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box mul_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndiv_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box div_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box divmod_unsafe(\n  y: F64 val)\n: (F64 val , F64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF64\n val , \nF64\n val)\n\n\n\n\n\n\nmod_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box mod_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nneg_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box neg_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\neq_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box eq_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ne_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box lt_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box le_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ge_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box gt_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nfun box add(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nfun box sub(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmul\n\u00b6\n\n\n[Source]\n\n\nfun box mul(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndiv\n\u00b6\n\n\n[Source]\n\n\nfun box div(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndivmod\n\u00b6\n\n\n[Source]\n\n\nfun box divmod(\n  y: F64 val)\n: (F64 val , F64 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nF64\n val , \nF64\n val)\n\n\n\n\n\n\nmod\n\u00b6\n\n\n[Source]\n\n\nfun box mod(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\nneg\n\u00b6\n\n\n[Source]\n\n\nfun box neg()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\u00b6\n\n\n[Source]\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\u00b6\n\n\n[Source]\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\u00b6\n\n\n[Source]\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\u00b6\n\n\n[Source]\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong\n\u00b6\n\n\n[Source]\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\u00b6\n\n\n[Source]\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\u00b6\n\n\n[Source]\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\u00b6\n\n\n[Source]\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\u00b6\n\n\n[Source]\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\u00b6\n\n\n[Source]\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong\n\u00b6\n\n\n[Source]\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\u00b6\n\n\n[Source]\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\u00b6\n\n\n[Source]\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\u00b6\n\n\n[Source]\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\u00b6\n\n\n[Source]\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\nfun box compare(\n  that: F64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "primitive F64"
        },
        {
            "location": "/builtin-F64/#f64",
            "text": "[Source]  primitive val F64 is\n  FloatingPoint[F64 val] val",
            "title": "F64"
        },
        {
            "location": "/builtin-F64/#implements",
            "text": "FloatingPoint [ F64  val] val",
            "title": "Implements"
        },
        {
            "location": "/builtin-F64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-F64/#create",
            "text": "[Source]  new val create(\n  value: F64 val = seq)\n: F64 val^",
            "title": "create"
        },
        {
            "location": "/builtin-F64/#parameters",
            "text": "value:  F64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#pi",
            "text": "[Source]  new val pi()\n: F64 val^",
            "title": "pi"
        },
        {
            "location": "/builtin-F64/#returns_1",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#e",
            "text": "[Source]  new val e()\n: F64 val^",
            "title": "e"
        },
        {
            "location": "/builtin-F64/#returns_2",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#from_bits",
            "text": "[Source]  new val from_bits(\n  i: U64 val)\n: F64 val^",
            "title": "from_bits"
        },
        {
            "location": "/builtin-F64/#parameters_1",
            "text": "i:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_3",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93",
            "text": "[Source]  new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) & Real[B] val)](\n  a: B)\n: F64 val^",
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        },
        {
            "location": "/builtin-F64/#parameters_2",
            "text": "a: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_4",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#min_value",
            "text": "[Source]  Minimum negative value representable.  new val min_value()\n: F64 val^",
            "title": "min_value"
        },
        {
            "location": "/builtin-F64/#returns_5",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#max_value",
            "text": "[Source]  Maximum positive value representable.  new val max_value()\n: F64 val^",
            "title": "max_value"
        },
        {
            "location": "/builtin-F64/#returns_6",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#min_normalised",
            "text": "[Source]  Minimum positive value representable at full precision (ie a normalised\nnumber).  new val min_normalised()\n: F64 val^",
            "title": "min_normalised"
        },
        {
            "location": "/builtin-F64/#returns_7",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#epsilon",
            "text": "[Source]  Minimum positive value such that (1 + epsilon) != 1.  new val epsilon()\n: F64 val^",
            "title": "epsilon"
        },
        {
            "location": "/builtin-F64/#returns_8",
            "text": "F64  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-F64/#bits",
            "text": "[Source]  fun box bits()\n: U64 val",
            "title": "bits"
        },
        {
            "location": "/builtin-F64/#returns_9",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#radix",
            "text": "[Source]  Exponent radix.  fun tag radix()\n: U8 val",
            "title": "radix"
        },
        {
            "location": "/builtin-F64/#returns_10",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#precision2",
            "text": "[Source]  Mantissa precision in bits.  fun tag precision2()\n: U8 val",
            "title": "precision2"
        },
        {
            "location": "/builtin-F64/#returns_11",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#precision10",
            "text": "[Source]  Mantissa precision in decimal digits.  fun tag precision10()\n: U8 val",
            "title": "precision10"
        },
        {
            "location": "/builtin-F64/#returns_12",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#min_exp2",
            "text": "[Source]  Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp2()\n: I16 val",
            "title": "min_exp2"
        },
        {
            "location": "/builtin-F64/#returns_13",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#min_exp10",
            "text": "[Source]  Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp10()\n: I16 val",
            "title": "min_exp10"
        },
        {
            "location": "/builtin-F64/#returns_14",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#max_exp2",
            "text": "[Source]  Maximum exponent value such that (2^exponent) - 1 is representable.  fun tag max_exp2()\n: I16 val",
            "title": "max_exp2"
        },
        {
            "location": "/builtin-F64/#returns_15",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#max_exp10",
            "text": "[Source]  Maximum exponent value such that (10^exponent) - 1 is representable.  fun tag max_exp10()\n: I16 val",
            "title": "max_exp10"
        },
        {
            "location": "/builtin-F64/#returns_16",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#abs",
            "text": "[Source]  fun box abs()\n: F64 val",
            "title": "abs"
        },
        {
            "location": "/builtin-F64/#returns_17",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ceil",
            "text": "[Source]  fun box ceil()\n: F64 val",
            "title": "ceil"
        },
        {
            "location": "/builtin-F64/#returns_18",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#floor",
            "text": "[Source]  fun box floor()\n: F64 val",
            "title": "floor"
        },
        {
            "location": "/builtin-F64/#returns_19",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#round",
            "text": "[Source]  fun box round()\n: F64 val",
            "title": "round"
        },
        {
            "location": "/builtin-F64/#returns_20",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#trunc",
            "text": "[Source]  fun box trunc()\n: F64 val",
            "title": "trunc"
        },
        {
            "location": "/builtin-F64/#returns_21",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#min",
            "text": "[Source]  fun box min(\n  y: F64 val)\n: F64 val",
            "title": "min"
        },
        {
            "location": "/builtin-F64/#parameters_3",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_22",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#max",
            "text": "[Source]  fun box max(\n  y: F64 val)\n: F64 val",
            "title": "max"
        },
        {
            "location": "/builtin-F64/#parameters_4",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_23",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#finite",
            "text": "[Source]  Check whether this number is finite, ie not +/-infinity and not NaN.  fun box finite()\n: Bool val",
            "title": "finite"
        },
        {
            "location": "/builtin-F64/#returns_24",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#infinite",
            "text": "[Source]  Check whether this number is +/-infinity  fun box infinite()\n: Bool val",
            "title": "infinite"
        },
        {
            "location": "/builtin-F64/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#nan",
            "text": "[Source]  Check whether this number is NaN.  fun box nan()\n: Bool val",
            "title": "nan"
        },
        {
            "location": "/builtin-F64/#returns_26",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ldexp",
            "text": "[Source]  fun box ldexp(\n  x: F64 val,\n  exponent: I32 val)\n: F64 val",
            "title": "ldexp"
        },
        {
            "location": "/builtin-F64/#parameters_5",
            "text": "x:  F64  val  exponent:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_27",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#frexp",
            "text": "[Source]  fun box frexp()\n: (F64 val , U32 val)",
            "title": "frexp"
        },
        {
            "location": "/builtin-F64/#returns_28",
            "text": "( F64  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#log",
            "text": "[Source]  fun box log()\n: F64 val",
            "title": "log"
        },
        {
            "location": "/builtin-F64/#returns_29",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#log2",
            "text": "[Source]  fun box log2()\n: F64 val",
            "title": "log2"
        },
        {
            "location": "/builtin-F64/#returns_30",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#log10",
            "text": "[Source]  fun box log10()\n: F64 val",
            "title": "log10"
        },
        {
            "location": "/builtin-F64/#returns_31",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#logb",
            "text": "[Source]  fun box logb()\n: F64 val",
            "title": "logb"
        },
        {
            "location": "/builtin-F64/#returns_32",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#pow",
            "text": "[Source]  fun box pow(\n  y: F64 val)\n: F64 val",
            "title": "pow"
        },
        {
            "location": "/builtin-F64/#parameters_6",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_33",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#powi",
            "text": "[Source]  fun box powi(\n  y: I32 val)\n: F64 val",
            "title": "powi"
        },
        {
            "location": "/builtin-F64/#parameters_7",
            "text": "y:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_34",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sqrt",
            "text": "[Source]  fun box sqrt()\n: F64 val",
            "title": "sqrt"
        },
        {
            "location": "/builtin-F64/#returns_35",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sqrt_unsafe",
            "text": "[Source]  Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: F64 val",
            "title": "sqrt_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_36",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#cbrt",
            "text": "[Source]  fun box cbrt()\n: F64 val",
            "title": "cbrt"
        },
        {
            "location": "/builtin-F64/#returns_37",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#exp",
            "text": "[Source]  fun box exp()\n: F64 val",
            "title": "exp"
        },
        {
            "location": "/builtin-F64/#returns_38",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#exp2",
            "text": "[Source]  fun box exp2()\n: F64 val",
            "title": "exp2"
        },
        {
            "location": "/builtin-F64/#returns_39",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#cos",
            "text": "[Source]  fun box cos()\n: F64 val",
            "title": "cos"
        },
        {
            "location": "/builtin-F64/#returns_40",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sin",
            "text": "[Source]  fun box sin()\n: F64 val",
            "title": "sin"
        },
        {
            "location": "/builtin-F64/#returns_41",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#tan",
            "text": "[Source]  fun box tan()\n: F64 val",
            "title": "tan"
        },
        {
            "location": "/builtin-F64/#returns_42",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#cosh",
            "text": "[Source]  fun box cosh()\n: F64 val",
            "title": "cosh"
        },
        {
            "location": "/builtin-F64/#returns_43",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sinh",
            "text": "[Source]  fun box sinh()\n: F64 val",
            "title": "sinh"
        },
        {
            "location": "/builtin-F64/#returns_44",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#tanh",
            "text": "[Source]  fun box tanh()\n: F64 val",
            "title": "tanh"
        },
        {
            "location": "/builtin-F64/#returns_45",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#acos",
            "text": "[Source]  fun box acos()\n: F64 val",
            "title": "acos"
        },
        {
            "location": "/builtin-F64/#returns_46",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#asin",
            "text": "[Source]  fun box asin()\n: F64 val",
            "title": "asin"
        },
        {
            "location": "/builtin-F64/#returns_47",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#atan",
            "text": "[Source]  fun box atan()\n: F64 val",
            "title": "atan"
        },
        {
            "location": "/builtin-F64/#returns_48",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#atan2",
            "text": "[Source]  fun box atan2(\n  y: F64 val)\n: F64 val",
            "title": "atan2"
        },
        {
            "location": "/builtin-F64/#parameters_8",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_49",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#acosh",
            "text": "[Source]  fun box acosh()\n: F64 val",
            "title": "acosh"
        },
        {
            "location": "/builtin-F64/#returns_50",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#asinh",
            "text": "[Source]  fun box asinh()\n: F64 val",
            "title": "asinh"
        },
        {
            "location": "/builtin-F64/#returns_51",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#atanh",
            "text": "[Source]  fun box atanh()\n: F64 val",
            "title": "atanh"
        },
        {
            "location": "/builtin-F64/#returns_52",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#copysign",
            "text": "[Source]  fun box copysign(\n  sign: F64 val)\n: F64 val",
            "title": "copysign"
        },
        {
            "location": "/builtin-F64/#parameters_9",
            "text": "sign:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_53",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/builtin-F64/#returns_54",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/builtin-F64/#returns_55",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i128",
            "text": "[Source]  fun box i128()\n: I128 val",
            "title": "i128"
        },
        {
            "location": "/builtin-F64/#returns_56",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u128",
            "text": "[Source]  fun box u128()\n: U128 val",
            "title": "u128"
        },
        {
            "location": "/builtin-F64/#returns_57",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i128_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i128_unsafe()\n: I128 val",
            "title": "i128_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_58",
            "text": "I128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u128_unsafe",
            "text": "[Source]  Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u128_unsafe()\n: U128 val",
            "title": "u128_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_59",
            "text": "U128  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#add_unsafe",
            "text": "[Source]  fun box add_unsafe(\n  y: F64 val)\n: F64 val",
            "title": "add_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_10",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_60",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sub_unsafe",
            "text": "[Source]  fun box sub_unsafe(\n  y: F64 val)\n: F64 val",
            "title": "sub_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_11",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_61",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#mul_unsafe",
            "text": "[Source]  fun box mul_unsafe(\n  y: F64 val)\n: F64 val",
            "title": "mul_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_12",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_62",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#div_unsafe",
            "text": "[Source]  fun box div_unsafe(\n  y: F64 val)\n: F64 val",
            "title": "div_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_13",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_63",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#divmod_unsafe",
            "text": "[Source]  fun box divmod_unsafe(\n  y: F64 val)\n: (F64 val , F64 val)",
            "title": "divmod_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_14",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_64",
            "text": "( F64  val ,  F64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#mod_unsafe",
            "text": "[Source]  fun box mod_unsafe(\n  y: F64 val)\n: F64 val",
            "title": "mod_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_15",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_65",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#neg_unsafe",
            "text": "[Source]  fun box neg_unsafe()\n: F64 val",
            "title": "neg_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_66",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#eq_unsafe",
            "text": "[Source]  fun box eq_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "eq_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_16",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_67",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ne_unsafe",
            "text": "[Source]  fun box ne_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "ne_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_17",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_68",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#lt_unsafe",
            "text": "[Source]  fun box lt_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "lt_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_18",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_69",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#le_unsafe",
            "text": "[Source]  fun box le_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "le_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_19",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_70",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ge_unsafe",
            "text": "[Source]  fun box ge_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "ge_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_20",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_71",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#gt_unsafe",
            "text": "[Source]  fun box gt_unsafe(\n  y: F64 val)\n: Bool val",
            "title": "gt_unsafe"
        },
        {
            "location": "/builtin-F64/#parameters_21",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_72",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-F64/#returns_73",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#add",
            "text": "[Source]  fun box add(\n  y: F64 val)\n: F64 val",
            "title": "add"
        },
        {
            "location": "/builtin-F64/#parameters_22",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_74",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#sub",
            "text": "[Source]  fun box sub(\n  y: F64 val)\n: F64 val",
            "title": "sub"
        },
        {
            "location": "/builtin-F64/#parameters_23",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_75",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#mul",
            "text": "[Source]  fun box mul(\n  y: F64 val)\n: F64 val",
            "title": "mul"
        },
        {
            "location": "/builtin-F64/#parameters_24",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_76",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#div",
            "text": "[Source]  fun box div(\n  y: F64 val)\n: F64 val",
            "title": "div"
        },
        {
            "location": "/builtin-F64/#parameters_25",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_77",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#divmod",
            "text": "[Source]  fun box divmod(\n  y: F64 val)\n: (F64 val , F64 val)",
            "title": "divmod"
        },
        {
            "location": "/builtin-F64/#parameters_26",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_78",
            "text": "( F64  val ,  F64  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#mod",
            "text": "[Source]  fun box mod(\n  y: F64 val)\n: F64 val",
            "title": "mod"
        },
        {
            "location": "/builtin-F64/#parameters_27",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_79",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#neg",
            "text": "[Source]  fun box neg()\n: F64 val",
            "title": "neg"
        },
        {
            "location": "/builtin-F64/#returns_80",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#eq",
            "text": "[Source]  fun box eq(\n  y: F64 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-F64/#parameters_28",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_81",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ne",
            "text": "[Source]  fun box ne(\n  y: F64 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-F64/#parameters_29",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_82",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#lt",
            "text": "[Source]  fun box lt(\n  y: F64 val)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-F64/#parameters_30",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_83",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#le",
            "text": "[Source]  fun box le(\n  y: F64 val)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-F64/#parameters_31",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_84",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ge",
            "text": "[Source]  fun box ge(\n  y: F64 val)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-F64/#parameters_32",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_85",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#gt",
            "text": "[Source]  fun box gt(\n  y: F64 val)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-F64/#parameters_33",
            "text": "y:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_86",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i8",
            "text": "[Source]  fun box i8()\n: I8 val",
            "title": "i8"
        },
        {
            "location": "/builtin-F64/#returns_87",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i16",
            "text": "[Source]  fun box i16()\n: I16 val",
            "title": "i16"
        },
        {
            "location": "/builtin-F64/#returns_88",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i32",
            "text": "[Source]  fun box i32()\n: I32 val",
            "title": "i32"
        },
        {
            "location": "/builtin-F64/#returns_89",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i64",
            "text": "[Source]  fun box i64()\n: I64 val",
            "title": "i64"
        },
        {
            "location": "/builtin-F64/#returns_90",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ilong",
            "text": "[Source]  fun box ilong()\n: ILong val",
            "title": "ilong"
        },
        {
            "location": "/builtin-F64/#returns_91",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#isize",
            "text": "[Source]  fun box isize()\n: ISize val",
            "title": "isize"
        },
        {
            "location": "/builtin-F64/#returns_92",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u8",
            "text": "[Source]  fun box u8()\n: U8 val",
            "title": "u8"
        },
        {
            "location": "/builtin-F64/#returns_93",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u16",
            "text": "[Source]  fun box u16()\n: U16 val",
            "title": "u16"
        },
        {
            "location": "/builtin-F64/#returns_94",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u32",
            "text": "[Source]  fun box u32()\n: U32 val",
            "title": "u32"
        },
        {
            "location": "/builtin-F64/#returns_95",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u64",
            "text": "[Source]  fun box u64()\n: U64 val",
            "title": "u64"
        },
        {
            "location": "/builtin-F64/#returns_96",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ulong",
            "text": "[Source]  fun box ulong()\n: ULong val",
            "title": "ulong"
        },
        {
            "location": "/builtin-F64/#returns_97",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#usize",
            "text": "[Source]  fun box usize()\n: USize val",
            "title": "usize"
        },
        {
            "location": "/builtin-F64/#returns_98",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#f32",
            "text": "[Source]  fun box f32()\n: F32 val",
            "title": "f32"
        },
        {
            "location": "/builtin-F64/#returns_99",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#f64_1",
            "text": "[Source]  fun box f64()\n: F64 val",
            "title": "f64"
        },
        {
            "location": "/builtin-F64/#returns_100",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i8_unsafe",
            "text": "[Source]  fun box i8_unsafe()\n: I8 val",
            "title": "i8_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_101",
            "text": "I8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i16_unsafe",
            "text": "[Source]  fun box i16_unsafe()\n: I16 val",
            "title": "i16_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_102",
            "text": "I16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i32_unsafe",
            "text": "[Source]  fun box i32_unsafe()\n: I32 val",
            "title": "i32_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_103",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#i64_unsafe",
            "text": "[Source]  fun box i64_unsafe()\n: I64 val",
            "title": "i64_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_104",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ilong_unsafe",
            "text": "[Source]  fun box ilong_unsafe()\n: ILong val",
            "title": "ilong_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_105",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#isize_unsafe",
            "text": "[Source]  fun box isize_unsafe()\n: ISize val",
            "title": "isize_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_106",
            "text": "ISize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u8_unsafe",
            "text": "[Source]  fun box u8_unsafe()\n: U8 val",
            "title": "u8_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_107",
            "text": "U8  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u16_unsafe",
            "text": "[Source]  fun box u16_unsafe()\n: U16 val",
            "title": "u16_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_108",
            "text": "U16  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u32_unsafe",
            "text": "[Source]  fun box u32_unsafe()\n: U32 val",
            "title": "u32_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_109",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#u64_unsafe",
            "text": "[Source]  fun box u64_unsafe()\n: U64 val",
            "title": "u64_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_110",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#ulong_unsafe",
            "text": "[Source]  fun box ulong_unsafe()\n: ULong val",
            "title": "ulong_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_111",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#usize_unsafe",
            "text": "[Source]  fun box usize_unsafe()\n: USize val",
            "title": "usize_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_112",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#f32_unsafe",
            "text": "[Source]  fun box f32_unsafe()\n: F32 val",
            "title": "f32_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_113",
            "text": "F32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#f64_unsafe",
            "text": "[Source]  fun box f64_unsafe()\n: F64 val",
            "title": "f64_unsafe"
        },
        {
            "location": "/builtin-F64/#returns_114",
            "text": "F64  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-F64/#compare",
            "text": "fun box compare(\n  that: F64 val)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-F64/#parameters_34",
            "text": "that:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-F64/#returns_115",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Float/",
            "text": "Float\n\u00b6\n\n\n[Source]\n\n\ntype Float is\n  (F32 val | F64 val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nF32\n val | \nF64\n val)",
            "title": "type Float"
        },
        {
            "location": "/builtin-Float/#float",
            "text": "[Source]  type Float is\n  (F32 val | F64 val)",
            "title": "Float"
        },
        {
            "location": "/builtin-Float/#type-alias-for",
            "text": "( F32  val |  F64  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-Env/",
            "text": "Env\n\u00b6\n\n\n[Source]\n\n\nAn environment holds the command line and other values injected into the\nprogram by default by the runtime.\n\n\nclass val Env\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nBuild an artificial environment. A root capability may be supplied.\n\n\nnew val create(\n  root': (AmbientAuth val | None val),\n  input': InputStream tag,\n  out': OutStream tag,\n  err': OutStream tag,\n  args': Array[String val] val,\n  vars': Array[String val] val,\n  exitcode': {(I32)} val)\n: Env val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nroot': (\nAmbientAuth\n val | \nNone\n val)\n\n\ninput': \nInputStream\n tag\n\n\nout': \nOutStream\n tag\n\n\nerr': \nOutStream\n tag\n\n\nargs': \nArray\n[\nString\n val] val\n\n\nvars': \nArray\n[\nString\n val] val\n\n\nexitcode': {(I32)} val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nEnv\n val^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet root: (\nAmbientAuth\n val | \nNone\n val)\n\u00b6\n\n\n[Source]\n\n\nThe root capability.\n\n\nCan be \nNone\n for artificially constructed \nEnv\n instances.\n\n\n\n\nlet input: \nInputStream\n tag\n\u00b6\n\n\n[Source]\n\n\nStdin represented as an actor.\n\n\n\n\nlet out: \nOutStream\n tag\n\u00b6\n\n\n[Source]\n\n\nStdout\n\n\n\n\nlet err: \nOutStream\n tag\n\u00b6\n\n\n[Source]\n\n\nStderr\n\n\n\n\nlet args: \nArray\n[\nString\n val] val\n\u00b6\n\n\n[Source]\n\n\nThe command line used to start the program.\n\n\n\n\nlet vars: \nArray\n[\nString\n val] val\n\u00b6\n\n\n[Source]\n\n\nThe program's environment variables.\n\n\n\n\nlet exitcode: {(I32)} val\n\u00b6\n\n\n[Source]\n\n\nSets the environment's exit code. The exit code of the root environment will\nbe the exit code of the application, which defaults to 0.",
            "title": "class Env"
        },
        {
            "location": "/builtin-Env/#env",
            "text": "[Source]  An environment holds the command line and other values injected into the\nprogram by default by the runtime.  class val Env",
            "title": "Env"
        },
        {
            "location": "/builtin-Env/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Env/#create",
            "text": "[Source]  Build an artificial environment. A root capability may be supplied.  new val create(\n  root': (AmbientAuth val | None val),\n  input': InputStream tag,\n  out': OutStream tag,\n  err': OutStream tag,\n  args': Array[String val] val,\n  vars': Array[String val] val,\n  exitcode': {(I32)} val)\n: Env val^",
            "title": "create"
        },
        {
            "location": "/builtin-Env/#parameters",
            "text": "root': ( AmbientAuth  val |  None  val)  input':  InputStream  tag  out':  OutStream  tag  err':  OutStream  tag  args':  Array [ String  val] val  vars':  Array [ String  val] val  exitcode': {(I32)} val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Env/#returns",
            "text": "Env  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Env/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/builtin-Env/#let-root-ambientauth-val-none-val",
            "text": "[Source]  The root capability.  Can be  None  for artificially constructed  Env  instances.",
            "title": "let root: (AmbientAuth val | None val)"
        },
        {
            "location": "/builtin-Env/#let-input-inputstream-tag",
            "text": "[Source]  Stdin represented as an actor.",
            "title": "let input: InputStream tag"
        },
        {
            "location": "/builtin-Env/#let-out-outstream-tag",
            "text": "[Source]  Stdout",
            "title": "let out: OutStream tag"
        },
        {
            "location": "/builtin-Env/#let-err-outstream-tag",
            "text": "[Source]  Stderr",
            "title": "let err: OutStream tag"
        },
        {
            "location": "/builtin-Env/#let-args-array91string-val93-val",
            "text": "[Source]  The command line used to start the program.",
            "title": "let args: Array[String val] val"
        },
        {
            "location": "/builtin-Env/#let-vars-array91string-val93-val",
            "text": "[Source]  The program's environment variables.",
            "title": "let vars: Array[String val] val"
        },
        {
            "location": "/builtin-Env/#let-exitcode-i32-val",
            "text": "[Source]  Sets the environment's exit code. The exit code of the root environment will\nbe the exit code of the application, which defaults to 0.",
            "title": "let exitcode: {(I32)} val"
        },
        {
            "location": "/builtin-DoNotOptimise/",
            "text": "DoNotOptimise\n\u00b6\n\n\n[Source]\n\n\nContains functions preventing some compiler optimisations, namely dead code\nremoval. This is useful for benchmarking purposes.\n\n\nprimitive val DoNotOptimise\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: DoNotOptimise val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDoNotOptimise\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply[A: A]\n\u00b6\n\n\n[Source]\n\n\nPrevent the compiler from optimising out obj and any computation it is\nderived from. This doesn't prevent constant propagation.\n\n\nfun box apply[A: A](\n  obj: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nobj: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nobserve\n\u00b6\n\n\n[Source]\n\n\nPrevent the compiler from optimising out writes to an object marked by\nthe apply function.\n\n\nfun box observe()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: DoNotOptimise val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDoNotOptimise\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: DoNotOptimise val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDoNotOptimise\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive DoNotOptimise"
        },
        {
            "location": "/builtin-DoNotOptimise/#donotoptimise",
            "text": "[Source]  Contains functions preventing some compiler optimisations, namely dead code\nremoval. This is useful for benchmarking purposes.  primitive val DoNotOptimise",
            "title": "DoNotOptimise"
        },
        {
            "location": "/builtin-DoNotOptimise/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-DoNotOptimise/#create",
            "text": "[Source]  new val create()\n: DoNotOptimise val^",
            "title": "create"
        },
        {
            "location": "/builtin-DoNotOptimise/#returns",
            "text": "DoNotOptimise  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-DoNotOptimise/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-DoNotOptimise/#apply91a-a93",
            "text": "[Source]  Prevent the compiler from optimising out obj and any computation it is\nderived from. This doesn't prevent constant propagation.  fun box apply[A: A](\n  obj: A)\n: None val",
            "title": "apply[A: A]"
        },
        {
            "location": "/builtin-DoNotOptimise/#parameters",
            "text": "obj: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-DoNotOptimise/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-DoNotOptimise/#observe",
            "text": "[Source]  Prevent the compiler from optimising out writes to an object marked by\nthe apply function.  fun box observe()\n: None val",
            "title": "observe"
        },
        {
            "location": "/builtin-DoNotOptimise/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-DoNotOptimise/#eq",
            "text": "[Source]  fun box eq(\n  that: DoNotOptimise val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-DoNotOptimise/#parameters_1",
            "text": "that:  DoNotOptimise  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-DoNotOptimise/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-DoNotOptimise/#ne",
            "text": "[Source]  fun box ne(\n  that: DoNotOptimise val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-DoNotOptimise/#parameters_2",
            "text": "that:  DoNotOptimise  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-DoNotOptimise/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Less/",
            "text": "Less\n\u00b6\n\n\n[Source]\n\n\nprimitive val Less is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Less val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nLess\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Less"
        },
        {
            "location": "/builtin-Less/#less",
            "text": "[Source]  primitive val Less is\n  Equatable[(Less val | Equal val | Greater val)] ref",
            "title": "Less"
        },
        {
            "location": "/builtin-Less/#implements",
            "text": "Equatable [( Less  val |  Equal  val |  Greater  val)] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Less/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Less/#create",
            "text": "[Source]  new val create()\n: Less val^",
            "title": "create"
        },
        {
            "location": "/builtin-Less/#returns",
            "text": "Less  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Less/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Less/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Less/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Less/#eq",
            "text": "[Source]  fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Less/#parameters",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Less/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Less/#ne",
            "text": "[Source]  fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Less/#parameters_1",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Less/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equal/",
            "text": "Equal\n\u00b6\n\n\n[Source]\n\n\nprimitive val Equal is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Equal val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nEqual\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Equal"
        },
        {
            "location": "/builtin-Equal/#equal",
            "text": "[Source]  primitive val Equal is\n  Equatable[(Less val | Equal val | Greater val)] ref",
            "title": "Equal"
        },
        {
            "location": "/builtin-Equal/#implements",
            "text": "Equatable [( Less  val |  Equal  val |  Greater  val)] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Equal/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Equal/#create",
            "text": "[Source]  new val create()\n: Equal val^",
            "title": "create"
        },
        {
            "location": "/builtin-Equal/#returns",
            "text": "Equal  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equal/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Equal/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Equal/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equal/#eq",
            "text": "[Source]  fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Equal/#parameters",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Equal/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equal/#ne",
            "text": "[Source]  fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Equal/#parameters_1",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Equal/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Greater/",
            "text": "Greater\n\u00b6\n\n\n[Source]\n\n\nprimitive val Greater is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Greater val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nGreater\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Greater"
        },
        {
            "location": "/builtin-Greater/#greater",
            "text": "[Source]  primitive val Greater is\n  Equatable[(Less val | Equal val | Greater val)] ref",
            "title": "Greater"
        },
        {
            "location": "/builtin-Greater/#implements",
            "text": "Equatable [( Less  val |  Equal  val |  Greater  val)] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Greater/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Greater/#create",
            "text": "[Source]  new val create()\n: Greater val^",
            "title": "create"
        },
        {
            "location": "/builtin-Greater/#returns",
            "text": "Greater  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Greater/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Greater/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Greater/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Greater/#eq",
            "text": "[Source]  fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Greater/#parameters",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Greater/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Greater/#ne",
            "text": "[Source]  fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Greater/#parameters_1",
            "text": "that: ( Less  val |  Equal  val |  Greater  val)",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Greater/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Compare/",
            "text": "Compare\n\u00b6\n\n\n[Source]\n\n\ntype Compare is\n  (Less val | Equal val | Greater val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "type Compare"
        },
        {
            "location": "/builtin-Compare/#compare",
            "text": "[Source]  type Compare is\n  (Less val | Equal val | Greater val)",
            "title": "Compare"
        },
        {
            "location": "/builtin-Compare/#type-alias-for",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-HasEq/",
            "text": "HasEq[A: A]\n\u00b6\n\n\n[Source]\n\n\ninterface ref HasEq[A: A]\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "interface HasEq"
        },
        {
            "location": "/builtin-HasEq/#haseq91a-a93",
            "text": "[Source]  interface ref HasEq[A: A]",
            "title": "HasEq[A: A]"
        },
        {
            "location": "/builtin-HasEq/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-HasEq/#eq",
            "text": "[Source]  fun box eq(\n  that: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-HasEq/#parameters",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-HasEq/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equatable/",
            "text": "Equatable[A: \nEquatable\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\ninterface ref Equatable[A: Equatable[A] #read]\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "interface Equatable"
        },
        {
            "location": "/builtin-Equatable/#equatable91a-equatable91a93-read93",
            "text": "[Source]  interface ref Equatable[A: Equatable[A] #read]",
            "title": "Equatable[A: Equatable[A] #read]"
        },
        {
            "location": "/builtin-Equatable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Equatable/#eq",
            "text": "[Source]  fun box eq(\n  that: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Equatable/#parameters",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Equatable/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Equatable/#ne",
            "text": "[Source]  fun box ne(\n  that: box->A)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Equatable/#parameters_1",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Equatable/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/",
            "text": "Comparable[A: \nComparable\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\ninterface ref Comparable[A: Comparable[A] #read] is\n  Equatable[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nEquatable\n[A] ref\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nfun box lt(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nfun box le(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nfun box ge(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nfun box gt(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\n[Source]\n\n\nfun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "interface Comparable"
        },
        {
            "location": "/builtin-Comparable/#comparable91a-comparable91a93-read93",
            "text": "[Source]  interface ref Comparable[A: Comparable[A] #read] is\n  Equatable[A] ref",
            "title": "Comparable[A: Comparable[A] #read]"
        },
        {
            "location": "/builtin-Comparable/#implements",
            "text": "Equatable [A] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Comparable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Comparable/#lt",
            "text": "[Source]  fun box lt(\n  that: box->A)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/builtin-Comparable/#parameters",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#le",
            "text": "[Source]  fun box le(\n  that: box->A)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/builtin-Comparable/#parameters_1",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#ge",
            "text": "[Source]  fun box ge(\n  that: box->A)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/builtin-Comparable/#parameters_2",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#gt",
            "text": "[Source]  fun box gt(\n  that: box->A)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/builtin-Comparable/#parameters_3",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#compare",
            "text": "[Source]  fun box compare(\n  that: box->A)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/builtin-Comparable/#parameters_4",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_4",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#eq",
            "text": "[Source]  fun box eq(\n  that: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Comparable/#parameters_5",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Comparable/#ne",
            "text": "[Source]  fun box ne(\n  that: box->A)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Comparable/#parameters_6",
            "text": "that: box->A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Comparable/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/",
            "text": "Bool\n\u00b6\n\n\n[Source]\n\n\nprimitive val Bool is\n  Stringable box\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  from: Bool val)\n: Bool val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_and\n\u00b6\n\n\n[Source]\n\n\nfun box op_and(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_or\n\u00b6\n\n\n[Source]\n\n\nfun box op_or(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\n[Source]\n\n\nfun box op_xor(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_not\n\u00b6\n\n\n[Source]\n\n\nfun box op_not()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\u00b6\n\n\n[Source]\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^",
            "title": "primitive Bool"
        },
        {
            "location": "/builtin-Bool/#bool",
            "text": "[Source]  primitive val Bool is\n  Stringable box",
            "title": "Bool"
        },
        {
            "location": "/builtin-Bool/#implements",
            "text": "Stringable  box",
            "title": "Implements"
        },
        {
            "location": "/builtin-Bool/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Bool/#create",
            "text": "[Source]  new val create(\n  from: Bool val)\n: Bool val^",
            "title": "create"
        },
        {
            "location": "/builtin-Bool/#parameters",
            "text": "from:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns",
            "text": "Bool  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Bool/#eq",
            "text": "[Source]  fun box eq(\n  y: Bool val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-Bool/#parameters_1",
            "text": "y:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#ne",
            "text": "[Source]  fun box ne(\n  y: Bool val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-Bool/#parameters_2",
            "text": "y:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#op_and",
            "text": "[Source]  fun box op_and(\n  y: Bool val)\n: Bool val",
            "title": "op_and"
        },
        {
            "location": "/builtin-Bool/#parameters_3",
            "text": "y:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#op_or",
            "text": "[Source]  fun box op_or(\n  y: Bool val)\n: Bool val",
            "title": "op_or"
        },
        {
            "location": "/builtin-Bool/#parameters_4",
            "text": "y:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#op_xor",
            "text": "[Source]  fun box op_xor(\n  y: Bool val)\n: Bool val",
            "title": "op_xor"
        },
        {
            "location": "/builtin-Bool/#parameters_5",
            "text": "y:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Bool/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#op_not",
            "text": "[Source]  fun box op_not()\n: Bool val",
            "title": "op_not"
        },
        {
            "location": "/builtin-Bool/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Bool/#string",
            "text": "[Source]  fun box string()\n: String iso^",
            "title": "string"
        },
        {
            "location": "/builtin-Bool/#returns_7",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEventID/",
            "text": "AsioEventID\n\u00b6\n\n\n[Source]\n\n\ntype AsioEventID is\n  Pointer[AsioEvent val] tag\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nPointer\n[\nAsioEvent\n val] tag",
            "title": "type AsioEventID"
        },
        {
            "location": "/builtin-AsioEventID/#asioeventid",
            "text": "[Source]  type AsioEventID is\n  Pointer[AsioEvent val] tag",
            "title": "AsioEventID"
        },
        {
            "location": "/builtin-AsioEventID/#type-alias-for",
            "text": "Pointer [ AsioEvent  val] tag",
            "title": "Type Alias For"
        },
        {
            "location": "/builtin-AsioEventNotify/",
            "text": "AsioEventNotify\n\u00b6\n\n\n[Source]\n\n\ninterface tag AsioEventNotify",
            "title": "interface AsioEventNotify"
        },
        {
            "location": "/builtin-AsioEventNotify/#asioeventnotify",
            "text": "[Source]  interface tag AsioEventNotify",
            "title": "AsioEventNotify"
        },
        {
            "location": "/builtin-AsioEvent/",
            "text": "AsioEvent\n\u00b6\n\n\n[Source]\n\n\nFunctions for asynchronous event notification.\n\n\nprimitive val AsioEvent\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: AsioEvent val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nAsioEvent\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnone\n\u00b6\n\n\n[Source]\n\n\nAn empty event.\n\n\nfun box none()\n: Pointer[AsioEvent val] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPointer\n[\nAsioEvent\n val] tag\n\n\n\n\n\n\nreadable\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags contain the readable flag.\n\n\nfun box readable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwriteable\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags contain the writeable flag.\n\n\nfun box writeable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndisposable\n\u00b6\n\n\n[Source]\n\n\nReturns true if the event should be disposed of.\n\n\nfun box disposable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nfun box dispose()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread\n\u00b6\n\n\n[Source]\n\n\nfun box read()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nfun box write()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ntimer\n\u00b6\n\n\n[Source]\n\n\nfun box timer()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsignal\n\u00b6\n\n\n[Source]\n\n\nfun box signal()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread_write\n\u00b6\n\n\n[Source]\n\n\nfun box read_write()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\noneshot\n\u00b6\n\n\n[Source]\n\n\nfun box oneshot()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread_write_oneshot\n\u00b6\n\n\n[Source]\n\n\nfun box read_write_oneshot()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: AsioEvent val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAsioEvent\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: AsioEvent val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAsioEvent\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive AsioEvent"
        },
        {
            "location": "/builtin-AsioEvent/#asioevent",
            "text": "[Source]  Functions for asynchronous event notification.  primitive val AsioEvent",
            "title": "AsioEvent"
        },
        {
            "location": "/builtin-AsioEvent/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-AsioEvent/#create",
            "text": "[Source]  new val create()\n: AsioEvent val^",
            "title": "create"
        },
        {
            "location": "/builtin-AsioEvent/#returns",
            "text": "AsioEvent  val^",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-AsioEvent/#none",
            "text": "[Source]  An empty event.  fun box none()\n: Pointer[AsioEvent val] tag",
            "title": "none"
        },
        {
            "location": "/builtin-AsioEvent/#returns_1",
            "text": "Pointer [ AsioEvent  val] tag",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#readable",
            "text": "[Source]  Returns true if the flags contain the readable flag.  fun box readable(\n  flags: U32 val)\n: Bool val",
            "title": "readable"
        },
        {
            "location": "/builtin-AsioEvent/#parameters",
            "text": "flags:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AsioEvent/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#writeable",
            "text": "[Source]  Returns true if the flags contain the writeable flag.  fun box writeable(\n  flags: U32 val)\n: Bool val",
            "title": "writeable"
        },
        {
            "location": "/builtin-AsioEvent/#parameters_1",
            "text": "flags:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AsioEvent/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#disposable",
            "text": "[Source]  Returns true if the event should be disposed of.  fun box disposable(\n  flags: U32 val)\n: Bool val",
            "title": "disposable"
        },
        {
            "location": "/builtin-AsioEvent/#parameters_2",
            "text": "flags:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AsioEvent/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#dispose",
            "text": "[Source]  fun box dispose()\n: U32 val",
            "title": "dispose"
        },
        {
            "location": "/builtin-AsioEvent/#returns_5",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#read",
            "text": "[Source]  fun box read()\n: U32 val",
            "title": "read"
        },
        {
            "location": "/builtin-AsioEvent/#returns_6",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#write",
            "text": "[Source]  fun box write()\n: U32 val",
            "title": "write"
        },
        {
            "location": "/builtin-AsioEvent/#returns_7",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#timer",
            "text": "[Source]  fun box timer()\n: U32 val",
            "title": "timer"
        },
        {
            "location": "/builtin-AsioEvent/#returns_8",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#signal",
            "text": "[Source]  fun box signal()\n: U32 val",
            "title": "signal"
        },
        {
            "location": "/builtin-AsioEvent/#returns_9",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#read_write",
            "text": "[Source]  fun box read_write()\n: U32 val",
            "title": "read_write"
        },
        {
            "location": "/builtin-AsioEvent/#returns_10",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#oneshot",
            "text": "[Source]  fun box oneshot()\n: U32 val",
            "title": "oneshot"
        },
        {
            "location": "/builtin-AsioEvent/#returns_11",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#read_write_oneshot",
            "text": "[Source]  fun box read_write_oneshot()\n: U32 val",
            "title": "read_write_oneshot"
        },
        {
            "location": "/builtin-AsioEvent/#returns_12",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#eq",
            "text": "[Source]  fun box eq(\n  that: AsioEvent val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-AsioEvent/#parameters_3",
            "text": "that:  AsioEvent  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AsioEvent/#returns_13",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AsioEvent/#ne",
            "text": "[Source]  fun box ne(\n  that: AsioEvent val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-AsioEvent/#parameters_4",
            "text": "that:  AsioEvent  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AsioEvent/#returns_14",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/",
            "text": "Array[A: A]\n\u00b6\n\n\n[Source]\n\n\nContiguous, resizable memory to store elements of type A.\n\n\nUsage\n\u00b6\n\n\nCreating an Array of String.\n\n\n  let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  // array.size() == 3\n  // array.space() >= 3\n\n\n\n\nCreating an empty Array of String, which may hold at least 10 elements before\nrequesting more space.\n\n\n  let array = Array(10)\n  // array.size() == 0\n  // array.space() >= 10\n\n\n\n\nAccessing elements can be done via the \napply(i: USize): this->A ?\n method.\nThe provided index might be out of bounds so \napply\n is partial and has to be\ncalled within a try-catch block or inside another partial method.\n\n\n  let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  let is_second_element_wobat = try\n    // indexes start from 0, so 1 is the second element\n    array(1)? == \"wombat\"\n  else\n    false\n  end\n\n\n\n\nAdding and removing elements to and from the end of the Array can be done via\n\npush\n and \npop\n methods. You could treat the array as a FIFO queue using\nthose methods.\n\n\n  while (array.size() > 0) do\n    let elem = array.pop()?\n    // do something with element\n  end\n\n\n\n\nModifying the Array can be done via \nupdate\n, \ninsert\n and \ndelete\n methods\nwhich alter the Array at an arbitrary index, moving elements left (when\ndeleting) or right (when inserting) as necessary.\n\n\nIterating over the elements of an Array can be done using the \nvalues\n method.\n\n\n  for element in array.values() do\n      // do something with element\n  end\n\n\n\n\nMemory allocation\n\u00b6\n\n\nArray allocates contiguous memory. It always allocates at least enough memory\nspace to hold all of its elements. Space is the number of elements the Array\ncan hold without allocating more memory. The \nspace()\n method returns the\nnumber of elements an Array can hold. The \nsize()\n method returns the number\nof elements the Array holds.\n\n\nDifferent data types require different amounts of memory. Array[U64] with size\nof 6 will take more memory than an Array[U8] of the same size.\n\n\nWhen creating an Array or adding more elements will calculate the next power\nof 2 of the requested number of elements and allocate that much space, with a\nlower bound of space for 8 elements.\n\n\nHere's a few examples of the space allocated when initialising an Array with\nvarious number of elements:\n\n\n\n\n\n\n\n\nsize\n\n\nspace\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0\n\n\n\n\n\n\n1\n\n\n8\n\n\n\n\n\n\n8\n\n\n8\n\n\n\n\n\n\n9\n\n\n16\n\n\n\n\n\n\n16\n\n\n16\n\n\n\n\n\n\n17\n\n\n32\n\n\n\n\n\n\n\n\nCall the \ncompact()\n method to ask the GC to reclaim unused space. There are\nno guarantees that the GC will actually reclaim any space.\n\n\nclass ref Array[A: A] is\n  Seq[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nSeq\n[A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate an array with zero elements, but space for len elements.\n\n\nnew ref create(\n  len: USize val = seq)\n: Array[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\ninit\n\u00b6\n\n\n[Source]\n\n\nCreate an array of len elements, all initialised to the given value.\n\n\nnew ref init(\n  from: A^,\n  len: USize val)\n: Array[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: A^\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\nfrom_cpointer\n\u00b6\n\n\n[Source]\n\n\nCreate an array from a C-style pointer and length. The contents are not\ncopied.\n\n\nnew ref from_cpointer(\n  ptr: Pointer[A] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: Array[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nptr: \nPointer\n[A] ref\n\n\nlen: \nUSize\n val\n\n\nalloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\ncpointer\n\u00b6\n\n\n[Source]\n\n\nReturn the underlying C-style pointer.\n\n\nfun box cpointer(\n  offset: USize val = seq)\n: Pointer[A] tag\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPointer\n[A] tag\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nThe number of elements in the array.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\u00b6\n\n\n[Source]\n\n\nThe available space in the array.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreserve\n\u00b6\n\n\n[Source]\n\n\nReserve space for len elements, including whatever elements are already in\nthe array. Array space grows geometrically.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncompact\n\u00b6\n\n\n[Source]\n\n\nTry to remove unused space, making it available for garbage collection. The\nrequest may be ignored.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nundefined[optional B: (A & \nReal\n[B] val & (\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val))]\n\u00b6\n\n\n[Source]\n\n\nResize to len elements, populating previously empty elements with random\nmemory. This is only allowed for an array of numbers.\n\n\nfun ref undefined[optional B: (A & Real[B] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))](\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nChange the i-th element, raising an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\ninsert\n\u00b6\n\n\n[Source]\n\n\nInsert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.\n\n\nfun ref insert(\n  i: USize val,\n  value: A)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\ndelete\n\u00b6\n\n\n[Source]\n\n\nDelete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.\n\n\nfun ref delete(\n  i: USize val)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\ntruncate\n\u00b6\n\n\n[Source]\n\n\nTruncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim_in_place\n\u00b6\n\n\n[Source]\n\n\nTrim the array to a portion of itself, covering \nfrom\n until \nto\n.\nUnlike slice, the operation does not allocate a new array nor copy elements.\n\n\nfun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim\n\u00b6\n\n\n[Source]\n\n\nReturn a shared portion of this array, covering \nfrom\n until \nto\n.\nBoth the original and the new array are immutable, as they share memory.\nThe operation does not allocate a new array pointer nor copy elements.\n\n\nfun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: Array[A] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[A] val\n\n\n\n\n\n\nchop\n\u00b6\n\n\n[Source]\n\n\nChops the array in half at the split point requested and returns both\nthe left and right portions. The original array is trimmed in place and\nreturned as the right portion. If the split point is larger than the\narray, the left portion is the original array and the right portion\nis a new empty array.\nBoth arrays are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new array pointer nor copy elements.\n\n\nfun iso chop(\n  split_point: USize val)\n: (Array[A] iso^ , Array[A] iso^)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsplit_point: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nArray\n[A] iso^ , \nArray\n[A] iso^)\n\n\n\n\n\n\ncopy_to\n\u00b6\n\n\n[Source]\n\n\nCopy len elements from this(src_idx) to dst(dst_idx).\n\n\nfun box copy_to(\n  dst: Array[this->A!] ref,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndst: \nArray\n[this->A!] ref\n\n\nsrc_idx: \nUSize\n val\n\n\ndst_idx: \nUSize\n val\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove n elements from the array, beginning at index i.\n\n\nfun ref remove(\n  i: USize val,\n  n: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nRemove all elements from the array.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\u00b6\n\n\n[Source]\n\n\nAdd an element to the end of the array.\n\n\nfun ref push(\n  value: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\u00b6\n\n\n[Source]\n\n\nRemove an element from the end of the array.\nThe removed element is returned.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\u00b6\n\n\n[Source]\n\n\nAdd an element to the beginning of the array.\n\n\nfun ref unshift(\n  value: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\u00b6\n\n\n[Source]\n\n\nRemove an element from the beginning of the array.\nThe removed element is returned.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\u00b6\n\n\n[Source]\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseq: (\nReadSeq\n[A] box & \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nAdd len iterated elements to the end of the array, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfind\n\u00b6\n\n\n[Source]\n\n\nFind the \nnth\n appearance of \nvalue\n from the beginning of the array,\nstarting at \noffset\n and examining higher indices, and using the supplied\n\npredicate\n for comparisons. Returns the index of the value, or raise an\nerror if the value isn't present.\n\n\nBy default, the search starts at the first element of the array, returns\nthe first instance of \nvalue\n found, and uses object identity for\ncomparison.\n\n\nfun box find(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: USize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A!\n\n\noffset: \nUSize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\npredicate: {(box->A!, box->A!): Bool}[A] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nReturns true if the array contains \nvalue\n, false otherwise.\n\n\nfun box contains(\n  value: A!,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A!\n\n\npredicate: {(box->A!, box->A!): Bool}[A] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nrfind\n\u00b6\n\n\n[Source]\n\n\nFind the \nnth\n appearance of \nvalue\n from the end of the array, starting at\n\noffset\n and examining lower indices, and using the supplied \npredicate\n for\ncomparisons. Returns the index of the value, or raise an error if the value\nisn't present.\n\n\nBy default, the search starts at the last element of the array, returns the\nfirst instance of \nvalue\n found, and uses object identity for comparison.\n\n\nfun box rfind(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: USize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A!\n\n\noffset: \nUSize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\npredicate: {(box->A!, box->A!): Bool}[A] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nclone\n\u00b6\n\n\n[Source]\n\n\nClone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.\n\n\nfun box clone()\n: Array[this->A!] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[this->A!] ref^\n\n\n\n\n\n\nslice\n\u00b6\n\n\n[Source]\n\n\nCreate a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.\n\n\nfun box slice(\n  from: USize val = seq,\n  to: USize val = seq,\n  step: USize val = seq)\n: Array[this->A!] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\nstep: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[this->A!] ref^\n\n\n\n\n\n\npermute\n\u00b6\n\n\n[Source]\n\n\nCreate a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun box permute(\n  indices: Iterator[USize val] ref)\n: Array[this->A!] ref^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nindices: \nIterator\n[\nUSize\n val] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[this->A!] ref^ ?\n\n\n\n\n\n\nreverse\n\u00b6\n\n\n[Source]\n\n\nCreate a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun box reverse()\n: Array[this->A!] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[this->A!] ref^\n\n\n\n\n\n\nreverse_in_place\n\u00b6\n\n\n[Source]\n\n\nReverse the array in place.\n\n\nfun ref reverse_in_place()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nswap_elements\n\u00b6\n\n\n[Source]\n\n\nSwap the element at index i with the element at index j.\nIf either i or j are out of bounds, an error is raised.\n\n\nfun ref swap_elements(\n  i: USize val,\n  j: USize val)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nj: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nkeys\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the indices in the array.\n\n\nfun box keys()\n: ArrayKeys[A, this->Array[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayKeys\n[A, this->\nArray\n[A] ref] ref^\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the values in the array.\n\n\nfun box values()\n: ArrayValues[A, this->Array[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayValues\n[A, this->\nArray\n[A] ref] ref^\n\n\n\n\n\n\npairs\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the (index, value) pairs in the array.\n\n\nfun box pairs()\n: ArrayPairs[A, this->Array[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayPairs\n[A, this->\nArray\n[A] ref] ref^",
            "title": "class Array"
        },
        {
            "location": "/builtin-Array/#array91a-a93",
            "text": "[Source]  Contiguous, resizable memory to store elements of type A.",
            "title": "Array[A: A]"
        },
        {
            "location": "/builtin-Array/#usage",
            "text": "Creating an Array of String.    let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  // array.size() == 3\n  // array.space() >= 3  Creating an empty Array of String, which may hold at least 10 elements before\nrequesting more space.    let array = Array(10)\n  // array.size() == 0\n  // array.space() >= 10  Accessing elements can be done via the  apply(i: USize): this->A ?  method.\nThe provided index might be out of bounds so  apply  is partial and has to be\ncalled within a try-catch block or inside another partial method.    let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n  let is_second_element_wobat = try\n    // indexes start from 0, so 1 is the second element\n    array(1)? == \"wombat\"\n  else\n    false\n  end  Adding and removing elements to and from the end of the Array can be done via push  and  pop  methods. You could treat the array as a FIFO queue using\nthose methods.    while (array.size() > 0) do\n    let elem = array.pop()?\n    // do something with element\n  end  Modifying the Array can be done via  update ,  insert  and  delete  methods\nwhich alter the Array at an arbitrary index, moving elements left (when\ndeleting) or right (when inserting) as necessary.  Iterating over the elements of an Array can be done using the  values  method.    for element in array.values() do\n      // do something with element\n  end",
            "title": "Usage"
        },
        {
            "location": "/builtin-Array/#memory-allocation",
            "text": "Array allocates contiguous memory. It always allocates at least enough memory\nspace to hold all of its elements. Space is the number of elements the Array\ncan hold without allocating more memory. The  space()  method returns the\nnumber of elements an Array can hold. The  size()  method returns the number\nof elements the Array holds.  Different data types require different amounts of memory. Array[U64] with size\nof 6 will take more memory than an Array[U8] of the same size.  When creating an Array or adding more elements will calculate the next power\nof 2 of the requested number of elements and allocate that much space, with a\nlower bound of space for 8 elements.  Here's a few examples of the space allocated when initialising an Array with\nvarious number of elements:     size  space      0  0    1  8    8  8    9  16    16  16    17  32     Call the  compact()  method to ask the GC to reclaim unused space. There are\nno guarantees that the GC will actually reclaim any space.  class ref Array[A: A] is\n  Seq[A] ref",
            "title": "Memory allocation"
        },
        {
            "location": "/builtin-Array/#implements",
            "text": "Seq [A] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-Array/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Array/#create",
            "text": "[Source]  Create an array with zero elements, but space for len elements.  new ref create(\n  len: USize val = seq)\n: Array[A] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-Array/#parameters",
            "text": "len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns",
            "text": "Array [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#init",
            "text": "[Source]  Create an array of len elements, all initialised to the given value.  new ref init(\n  from: A^,\n  len: USize val)\n: Array[A] ref^",
            "title": "init"
        },
        {
            "location": "/builtin-Array/#parameters_1",
            "text": "from: A^  len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_1",
            "text": "Array [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#from_cpointer",
            "text": "[Source]  Create an array from a C-style pointer and length. The contents are not\ncopied.  new ref from_cpointer(\n  ptr: Pointer[A] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: Array[A] ref^",
            "title": "from_cpointer"
        },
        {
            "location": "/builtin-Array/#parameters_2",
            "text": "ptr:  Pointer [A] ref  len:  USize  val  alloc:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_2",
            "text": "Array [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-Array/#cpointer",
            "text": "[Source]  Return the underlying C-style pointer.  fun box cpointer(\n  offset: USize val = seq)\n: Pointer[A] tag",
            "title": "cpointer"
        },
        {
            "location": "/builtin-Array/#parameters_3",
            "text": "offset:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_3",
            "text": "Pointer [A] tag",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#size",
            "text": "[Source]  The number of elements in the array.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/builtin-Array/#returns_4",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#space",
            "text": "[Source]  The available space in the array.  fun box space()\n: USize val",
            "title": "space"
        },
        {
            "location": "/builtin-Array/#returns_5",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#reserve",
            "text": "[Source]  Reserve space for len elements, including whatever elements are already in\nthe array. Array space grows geometrically.  fun ref reserve(\n  len: USize val)\n: None val",
            "title": "reserve"
        },
        {
            "location": "/builtin-Array/#parameters_4",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#compact",
            "text": "[Source]  Try to remove unused space, making it available for garbage collection. The\nrequest may be ignored.  fun ref compact()\n: None val",
            "title": "compact"
        },
        {
            "location": "/builtin-Array/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#undefined91optional-b-a-real91b93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93",
            "text": "[Source]  Resize to len elements, populating previously empty elements with random\nmemory. This is only allowed for an array of numbers.  fun ref undefined[optional B: (A & Real[B] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))](\n  len: USize val)\n: None val",
            "title": "undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"
        },
        {
            "location": "/builtin-Array/#parameters_5",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#apply",
            "text": "[Source]  Get the i-th element, raising an error if the index is out of bounds.  fun box apply(\n  i: USize val)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/builtin-Array/#parameters_6",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_9",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#update",
            "text": "[Source]  Change the i-th element, raising an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?",
            "title": "update"
        },
        {
            "location": "/builtin-Array/#parameters_7",
            "text": "i:  USize  val  value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_10",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#insert",
            "text": "[Source]  Insert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.  fun ref insert(\n  i: USize val,\n  value: A)\n: None val ?",
            "title": "insert"
        },
        {
            "location": "/builtin-Array/#parameters_8",
            "text": "i:  USize  val  value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_11",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#delete",
            "text": "[Source]  Delete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.  fun ref delete(\n  i: USize val)\n: A^ ?",
            "title": "delete"
        },
        {
            "location": "/builtin-Array/#parameters_9",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_12",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#truncate",
            "text": "[Source]  Truncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val",
            "title": "truncate"
        },
        {
            "location": "/builtin-Array/#parameters_10",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#trim_in_place",
            "text": "[Source]  Trim the array to a portion of itself, covering  from  until  to .\nUnlike slice, the operation does not allocate a new array nor copy elements.  fun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val",
            "title": "trim_in_place"
        },
        {
            "location": "/builtin-Array/#parameters_11",
            "text": "from:  USize  val = seq  to:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_14",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#trim",
            "text": "[Source]  Return a shared portion of this array, covering  from  until  to .\nBoth the original and the new array are immutable, as they share memory.\nThe operation does not allocate a new array pointer nor copy elements.  fun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: Array[A] val",
            "title": "trim"
        },
        {
            "location": "/builtin-Array/#parameters_12",
            "text": "from:  USize  val = seq  to:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_15",
            "text": "Array [A] val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#chop",
            "text": "[Source]  Chops the array in half at the split point requested and returns both\nthe left and right portions. The original array is trimmed in place and\nreturned as the right portion. If the split point is larger than the\narray, the left portion is the original array and the right portion\nis a new empty array.\nBoth arrays are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new array pointer nor copy elements.  fun iso chop(\n  split_point: USize val)\n: (Array[A] iso^ , Array[A] iso^)",
            "title": "chop"
        },
        {
            "location": "/builtin-Array/#parameters_13",
            "text": "split_point:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_16",
            "text": "( Array [A] iso^ ,  Array [A] iso^)",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#copy_to",
            "text": "[Source]  Copy len elements from this(src_idx) to dst(dst_idx).  fun box copy_to(\n  dst: Array[this->A!] ref,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val",
            "title": "copy_to"
        },
        {
            "location": "/builtin-Array/#parameters_14",
            "text": "dst:  Array [this->A!] ref  src_idx:  USize  val  dst_idx:  USize  val  len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_17",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#remove",
            "text": "[Source]  Remove n elements from the array, beginning at index i.  fun ref remove(\n  i: USize val,\n  n: USize val)\n: None val",
            "title": "remove"
        },
        {
            "location": "/builtin-Array/#parameters_15",
            "text": "i:  USize  val  n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_18",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#clear",
            "text": "[Source]  Remove all elements from the array.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/builtin-Array/#returns_19",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#push",
            "text": "[Source]  Add an element to the end of the array.  fun ref push(\n  value: A)\n: None val",
            "title": "push"
        },
        {
            "location": "/builtin-Array/#parameters_16",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_20",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#pop",
            "text": "[Source]  Remove an element from the end of the array.\nThe removed element is returned.  fun ref pop()\n: A^ ?",
            "title": "pop"
        },
        {
            "location": "/builtin-Array/#returns_21",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#unshift",
            "text": "[Source]  Add an element to the beginning of the array.  fun ref unshift(\n  value: A)\n: None val",
            "title": "unshift"
        },
        {
            "location": "/builtin-Array/#parameters_17",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_22",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#shift",
            "text": "[Source]  Remove an element from the beginning of the array.\nThe removed element is returned.  fun ref shift()\n: A^ ?",
            "title": "shift"
        },
        {
            "location": "/builtin-Array/#returns_23",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#append",
            "text": "[Source]  Append the elements from a sequence, starting from the given offset.  fun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "append"
        },
        {
            "location": "/builtin-Array/#parameters_18",
            "text": "seq: ( ReadSeq [A] box &  ReadElement [A^] box)  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_24",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#concat",
            "text": "[Source]  Add len iterated elements to the end of the array, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "concat"
        },
        {
            "location": "/builtin-Array/#parameters_19",
            "text": "iter:  Iterator [A^] ref  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_25",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#find",
            "text": "[Source]  Find the  nth  appearance of  value  from the beginning of the array,\nstarting at  offset  and examining higher indices, and using the supplied predicate  for comparisons. Returns the index of the value, or raise an\nerror if the value isn't present.  By default, the search starts at the first element of the array, returns\nthe first instance of  value  found, and uses object identity for\ncomparison.  fun box find(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: USize val ?",
            "title": "find"
        },
        {
            "location": "/builtin-Array/#parameters_20",
            "text": "value: A!  offset:  USize  val = seq  nth:  USize  val = seq  predicate: {(box->A!, box->A!): Bool}[A] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_26",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#contains",
            "text": "[Source]  Returns true if the array contains  value , false otherwise.  fun box contains(\n  value: A!,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/builtin-Array/#parameters_21",
            "text": "value: A!  predicate: {(box->A!, box->A!): Bool}[A] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_27",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#rfind",
            "text": "[Source]  Find the  nth  appearance of  value  from the end of the array, starting at offset  and examining lower indices, and using the supplied  predicate  for\ncomparisons. Returns the index of the value, or raise an error if the value\nisn't present.  By default, the search starts at the last element of the array, returns the\nfirst instance of  value  found, and uses object identity for comparison.  fun box rfind(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box->A!, box->A!): Bool}[A] val = seq)\n: USize val ?",
            "title": "rfind"
        },
        {
            "location": "/builtin-Array/#parameters_22",
            "text": "value: A!  offset:  USize  val = seq  nth:  USize  val = seq  predicate: {(box->A!, box->A!): Bool}[A] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_28",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#clone",
            "text": "[Source]  Clone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.  fun box clone()\n: Array[this->A!] ref^",
            "title": "clone"
        },
        {
            "location": "/builtin-Array/#returns_29",
            "text": "Array [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#slice",
            "text": "[Source]  Create a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.  fun box slice(\n  from: USize val = seq,\n  to: USize val = seq,\n  step: USize val = seq)\n: Array[this->A!] ref^",
            "title": "slice"
        },
        {
            "location": "/builtin-Array/#parameters_23",
            "text": "from:  USize  val = seq  to:  USize  val = seq  step:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_30",
            "text": "Array [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#permute",
            "text": "[Source]  Create a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.  fun box permute(\n  indices: Iterator[USize val] ref)\n: Array[this->A!] ref^ ?",
            "title": "permute"
        },
        {
            "location": "/builtin-Array/#parameters_24",
            "text": "indices:  Iterator [ USize  val] ref",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_31",
            "text": "Array [this->A!] ref^ ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#reverse",
            "text": "[Source]  Create a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.  fun box reverse()\n: Array[this->A!] ref^",
            "title": "reverse"
        },
        {
            "location": "/builtin-Array/#returns_32",
            "text": "Array [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#reverse_in_place",
            "text": "[Source]  Reverse the array in place.  fun ref reverse_in_place()\n: None val",
            "title": "reverse_in_place"
        },
        {
            "location": "/builtin-Array/#returns_33",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#swap_elements",
            "text": "[Source]  Swap the element at index i with the element at index j.\nIf either i or j are out of bounds, an error is raised.  fun ref swap_elements(\n  i: USize val,\n  j: USize val)\n: None val ?",
            "title": "swap_elements"
        },
        {
            "location": "/builtin-Array/#parameters_25",
            "text": "i:  USize  val  j:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-Array/#returns_34",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#keys",
            "text": "[Source]  Return an iterator over the indices in the array.  fun box keys()\n: ArrayKeys[A, this->Array[A] ref] ref^",
            "title": "keys"
        },
        {
            "location": "/builtin-Array/#returns_35",
            "text": "ArrayKeys [A, this-> Array [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#values",
            "text": "[Source]  Return an iterator over the values in the array.  fun box values()\n: ArrayValues[A, this->Array[A] ref] ref^",
            "title": "values"
        },
        {
            "location": "/builtin-Array/#returns_36",
            "text": "ArrayValues [A, this-> Array [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-Array/#pairs",
            "text": "[Source]  Return an iterator over the (index, value) pairs in the array.  fun box pairs()\n: ArrayPairs[A, this->Array[A] ref] ref^",
            "title": "pairs"
        },
        {
            "location": "/builtin-Array/#returns_37",
            "text": "ArrayPairs [A, this-> Array [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayKeys/",
            "text": "ArrayKeys[A: A, B: \nArray\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\nclass ref ArrayKeys[A: A, B: Array[A] #read] is\n  Iterator[USize val] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[\nUSize\n val] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  array: B)\n: ArrayKeys[A, B] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\narray: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayKeys\n[A, B] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val",
            "title": "class ArrayKeys"
        },
        {
            "location": "/builtin-ArrayKeys/#arraykeys91a-a-b-array91a93-read93",
            "text": "[Source]  class ref ArrayKeys[A: A, B: Array[A] #read] is\n  Iterator[USize val] ref",
            "title": "ArrayKeys[A: A, B: Array[A] #read]"
        },
        {
            "location": "/builtin-ArrayKeys/#implements",
            "text": "Iterator [ USize  val] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-ArrayKeys/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayKeys/#create",
            "text": "[Source]  new ref create(\n  array: B)\n: ArrayKeys[A, B] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-ArrayKeys/#parameters",
            "text": "array: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ArrayKeys/#returns",
            "text": "ArrayKeys [A, B] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayKeys/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ArrayKeys/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-ArrayKeys/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayKeys/#next",
            "text": "[Source]  fun ref next()\n: USize val",
            "title": "next"
        },
        {
            "location": "/builtin-ArrayKeys/#returns_2",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayValues/",
            "text": "ArrayValues[A: A, B: \nArray\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\nclass ref ArrayValues[A: A, B: Array[A] #read] is\n  Iterator[B->A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[B->A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  array: B)\n: ArrayValues[A, B] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\narray: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayValues\n[A, B] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: B->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nB->A ?\n\n\n\n\n\n\nrewind\n\u00b6\n\n\n[Source]\n\n\nfun ref rewind()\n: ArrayValues[A, B] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayValues\n[A, B] ref",
            "title": "class ArrayValues"
        },
        {
            "location": "/builtin-ArrayValues/#arrayvalues91a-a-b-array91a93-read93",
            "text": "[Source]  class ref ArrayValues[A: A, B: Array[A] #read] is\n  Iterator[B->A] ref",
            "title": "ArrayValues[A: A, B: Array[A] #read]"
        },
        {
            "location": "/builtin-ArrayValues/#implements",
            "text": "Iterator [B->A] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-ArrayValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayValues/#create",
            "text": "[Source]  new ref create(\n  array: B)\n: ArrayValues[A, B] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-ArrayValues/#parameters",
            "text": "array: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ArrayValues/#returns",
            "text": "ArrayValues [A, B] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayValues/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ArrayValues/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-ArrayValues/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayValues/#next",
            "text": "[Source]  fun ref next()\n: B->A ?",
            "title": "next"
        },
        {
            "location": "/builtin-ArrayValues/#returns_2",
            "text": "B->A ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayValues/#rewind",
            "text": "[Source]  fun ref rewind()\n: ArrayValues[A, B] ref",
            "title": "rewind"
        },
        {
            "location": "/builtin-ArrayValues/#returns_3",
            "text": "ArrayValues [A, B] ref",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayPairs/",
            "text": "ArrayPairs[A: A, B: \nArray\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\nclass ref ArrayPairs[A: A, B: Array[A] #read] is\n  Iterator[(USize val , B->A)] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[(\nUSize\n val , B->A)] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  array: B)\n: ArrayPairs[A, B] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\narray: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArrayPairs\n[A, B] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: (USize val , B->A) ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nUSize\n val , B->A) ?",
            "title": "class ArrayPairs"
        },
        {
            "location": "/builtin-ArrayPairs/#arraypairs91a-a-b-array91a93-read93",
            "text": "[Source]  class ref ArrayPairs[A: A, B: Array[A] #read] is\n  Iterator[(USize val , B->A)] ref",
            "title": "ArrayPairs[A: A, B: Array[A] #read]"
        },
        {
            "location": "/builtin-ArrayPairs/#implements",
            "text": "Iterator [( USize  val , B->A)] ref",
            "title": "Implements"
        },
        {
            "location": "/builtin-ArrayPairs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayPairs/#create",
            "text": "[Source]  new ref create(\n  array: B)\n: ArrayPairs[A, B] ref^",
            "title": "create"
        },
        {
            "location": "/builtin-ArrayPairs/#parameters",
            "text": "array: B",
            "title": "Parameters"
        },
        {
            "location": "/builtin-ArrayPairs/#returns",
            "text": "ArrayPairs [A, B] ref^",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayPairs/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-ArrayPairs/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/builtin-ArrayPairs/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-ArrayPairs/#next",
            "text": "[Source]  fun ref next()\n: (USize val , B->A) ?",
            "title": "next"
        },
        {
            "location": "/builtin-ArrayPairs/#returns_2",
            "text": "( USize  val , B->A) ?",
            "title": "Returns"
        },
        {
            "location": "/builtin-Any/",
            "text": "Any\n\u00b6\n\n\n[Source]\n\n\ninterface tag Any",
            "title": "interface Any"
        },
        {
            "location": "/builtin-Any/#any",
            "text": "[Source]  interface tag Any",
            "title": "Any"
        },
        {
            "location": "/builtin-AmbientAuth/",
            "text": "AmbientAuth\n\u00b6\n\n\n[Source]\n\n\nThis type represents the root capability. When a Pony program starts, the\nEnv passed to the Main actor contains an instance of the root capability.\n\n\nAmbient access to the root capability is denied outside of the builtin\npackage. Inside the builtin package, only Env creates a Root.\n\n\nThe root capability can be used by any package that wants to establish a\nprinciple of least authority. A typical usage is to have a parameter on a\nconstructor for some resource that expects a limiting capability specific to\nthe package, but will also accept the root capability as representing\nunlimited access.\n\n\nprimitive val AmbientAuth\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: AmbientAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAmbientAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: AmbientAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAmbientAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive AmbientAuth"
        },
        {
            "location": "/builtin-AmbientAuth/#ambientauth",
            "text": "[Source]  This type represents the root capability. When a Pony program starts, the\nEnv passed to the Main actor contains an instance of the root capability.  Ambient access to the root capability is denied outside of the builtin\npackage. Inside the builtin package, only Env creates a Root.  The root capability can be used by any package that wants to establish a\nprinciple of least authority. A typical usage is to have a parameter on a\nconstructor for some resource that expects a limiting capability specific to\nthe package, but will also accept the root capability as representing\nunlimited access.  primitive val AmbientAuth",
            "title": "AmbientAuth"
        },
        {
            "location": "/builtin-AmbientAuth/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/builtin-AmbientAuth/#eq",
            "text": "[Source]  fun box eq(\n  that: AmbientAuth val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/builtin-AmbientAuth/#parameters",
            "text": "that:  AmbientAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AmbientAuth/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/builtin-AmbientAuth/#ne",
            "text": "[Source]  fun box ne(\n  that: AmbientAuth val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/builtin-AmbientAuth/#parameters_1",
            "text": "that:  AmbientAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/builtin-AmbientAuth/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum--index/",
            "text": "No package doc string provided for capsicum.\n\n\nPublic Types\n\u00b6\n\n\n\n\ntype CapRights\n\n\nclass CapRights0\n\n\nprimitive Cap",
            "title": "Package"
        },
        {
            "location": "/capsicum--index/#public-types",
            "text": "type CapRights  class CapRights0  primitive Cap",
            "title": "Public Types"
        },
        {
            "location": "/capsicum-CapRights/",
            "text": "CapRights\n\u00b6\n\n\n[Source]\n\n\ntype CapRights is\n  CapRights0 ref\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nCapRights0\n ref",
            "title": "type CapRights"
        },
        {
            "location": "/capsicum-CapRights/#caprights",
            "text": "[Source]  type CapRights is\n  CapRights0 ref",
            "title": "CapRights"
        },
        {
            "location": "/capsicum-CapRights/#type-alias-for",
            "text": "CapRights0  ref",
            "title": "Type Alias For"
        },
        {
            "location": "/capsicum-CapRights0/",
            "text": "CapRights0\n\u00b6\n\n\n[Source]\n\n\nVersion 0 of the capsicum cap_rights_t structure.\n\n\nclass ref CapRights0\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nInitialises with no rights.\n\n\nnew ref create()\n: CapRights0 ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nCapRights0\n ref^\n\n\n\n\n\n\nfrom\n\u00b6\n\n\n[Source]\n\n\nInitialises with the rights from a FileCaps.\n\n\nnew ref from(\n  caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box)\n: CapRights0 ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ncaps: \nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nCapRights0\n ref^\n\n\n\n\n\n\ndescriptor\n\u00b6\n\n\n[Source]\n\n\nInitialises with the rights on the given file descriptor.\n\n\nnew ref descriptor(\n  fd: I32 val)\n: CapRights0 ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfd: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nCapRights0\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nset\n\u00b6\n\n\n[Source]\n\n\nfun ref set(\n  cap: U64 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ncap: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunset\n\u00b6\n\n\n[Source]\n\n\nfun ref unset(\n  cap: U64 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ncap: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nlimit\n\u00b6\n\n\n[Source]\n\n\nLimits the fd to the encoded rights.\n\n\nfun box limit(\n  fd: I32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfd: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmerge\n\u00b6\n\n\n[Source]\n\n\nMerge the rights in that into this.\n\n\nfun ref merge(\n  that: CapRights0 ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nCapRights0\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove the rights in that from this.\n\n\nfun ref remove(\n  that: CapRights0 ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nCapRights0\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nClear all rights.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nCheck that this is a superset of the rights in that.\n\n\nfun box contains(\n  that: CapRights0 ref)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nCapRights0\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "class CapRights0"
        },
        {
            "location": "/capsicum-CapRights0/#caprights0",
            "text": "[Source]  Version 0 of the capsicum cap_rights_t structure.  class ref CapRights0",
            "title": "CapRights0"
        },
        {
            "location": "/capsicum-CapRights0/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/capsicum-CapRights0/#create",
            "text": "[Source]  Initialises with no rights.  new ref create()\n: CapRights0 ref^",
            "title": "create"
        },
        {
            "location": "/capsicum-CapRights0/#returns",
            "text": "CapRights0  ref^",
            "title": "Returns"
        },
        {
            "location": "/capsicum-CapRights0/#from",
            "text": "[Source]  Initialises with the rights from a FileCaps.  new ref from(\n  caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box)\n: CapRights0 ref^",
            "title": "from"
        },
        {
            "location": "/capsicum-CapRights0/#parameters",
            "text": "caps:  Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] box",
            "title": "Parameters"
        },
        {
            "location": "/capsicum-CapRights0/#returns_1",
            "text": "CapRights0  ref^",
            "title": "Returns"
        },
        {
            "location": "/capsicum-CapRights0/#descriptor",
            "text": "[Source]  Initialises with the rights on the given file descriptor.  new ref descriptor(\n  fd: I32 val)\n: CapRights0 ref^",
            "title": "descriptor"
        },
        {
            "location": "/capsicum-CapRights0/#parameters_1",
            "text": "fd:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/capsicum-CapRights0/#returns_2",
            "text": "CapRights0  ref^",
            "title": "Returns"
        },
        {
            "location": "/capsicum-CapRights0/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/capsicum-CapRights0/#set",
            "text": "[Source]  fun ref set(\n  cap: U64 val)\n: None val",
            "title": "set"
        },
        {
            "location": "/capsicum-CapRights0/#parameters_2",
            "text": "cap:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/capsicum-CapRights0/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-CapRights0/#unset",
            "text": "[Source]  fun ref unset(\n  cap: U64 val)\n: None val",
            "title": "unset"
        },
        {
            "location": "/capsicum-CapRights0/#parameters_3",
            "text": "cap:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/capsicum-CapRights0/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-CapRights0/#limit",
            "text": "[Source]  Limits the fd to the encoded rights.  fun box limit(\n  fd: I32 val)\n: Bool val",
            "title": "limit"
        },
        {
            "location": "/capsicum-CapRights0/#parameters_4",
            "text": "fd:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/capsicum-CapRights0/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-CapRights0/#merge",
            "text": "[Source]  Merge the rights in that into this.  fun ref merge(\n  that: CapRights0 ref)\n: None val",
            "title": "merge"
        },
        {
            "location": "/capsicum-CapRights0/#parameters_5",
            "text": "that:  CapRights0  ref",
            "title": "Parameters"
        },
        {
            "location": "/capsicum-CapRights0/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-CapRights0/#remove",
            "text": "[Source]  Remove the rights in that from this.  fun ref remove(\n  that: CapRights0 ref)\n: None val",
            "title": "remove"
        },
        {
            "location": "/capsicum-CapRights0/#parameters_6",
            "text": "that:  CapRights0  ref",
            "title": "Parameters"
        },
        {
            "location": "/capsicum-CapRights0/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-CapRights0/#clear",
            "text": "[Source]  Clear all rights.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/capsicum-CapRights0/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-CapRights0/#contains",
            "text": "[Source]  Check that this is a superset of the rights in that.  fun box contains(\n  that: CapRights0 ref)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/capsicum-CapRights0/#parameters_7",
            "text": "that:  CapRights0  ref",
            "title": "Parameters"
        },
        {
            "location": "/capsicum-CapRights0/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/",
            "text": "Cap\n\u00b6\n\n\n[Source]\n\n\nThe Capsicum rights.\n\n\nprimitive val Cap\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Cap val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nCap\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nenter\n\u00b6\n\n\n[Source]\n\n\nThis places the current process into capability mode, a mode of execution\nin which processes may only issue system calls operating on file\ndescriptors or reading limited global system state. Access to global name\nspaces, such as file system or IPC name spaces, is prevented.\n\n\nfun box enter()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nread\n\u00b6\n\n\n[Source]\n\n\nfun box read()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nfun box write()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nseek_tell\n\u00b6\n\n\n[Source]\n\n\nfun box seek_tell()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nseek\n\u00b6\n\n\n[Source]\n\n\nfun box seek()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\npread\n\u00b6\n\n\n[Source]\n\n\nfun box pread()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\npwrite\n\u00b6\n\n\n[Source]\n\n\nfun box pwrite()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap\n\u00b6\n\n\n[Source]\n\n\nfun box mmap()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_r\n\u00b6\n\n\n[Source]\n\n\nfun box mmap_r()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_w\n\u00b6\n\n\n[Source]\n\n\nfun box mmap_w()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_x\n\u00b6\n\n\n[Source]\n\n\nfun box mmap_x()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_rw\n\u00b6\n\n\n[Source]\n\n\nfun box mmap_rw()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_rx\n\u00b6\n\n\n[Source]\n\n\nfun box mmap_rx()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_wx\n\u00b6\n\n\n[Source]\n\n\nfun box mmap_wx()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_rwx\n\u00b6\n\n\n[Source]\n\n\nfun box mmap_rwx()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ncreat\n\u00b6\n\n\n[Source]\n\n\nfun box creat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfexecve\n\u00b6\n\n\n[Source]\n\n\nfun box fexecve()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfsync\n\u00b6\n\n\n[Source]\n\n\nfun box fsync()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nftruncate\n\u00b6\n\n\n[Source]\n\n\nfun box ftruncate()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nlookup\n\u00b6\n\n\n[Source]\n\n\nfun box lookup()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchdir\n\u00b6\n\n\n[Source]\n\n\nfun box fchdir()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchflags\n\u00b6\n\n\n[Source]\n\n\nfun box fchflags()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nchflagsat\n\u00b6\n\n\n[Source]\n\n\nfun box chflagsat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchmod\n\u00b6\n\n\n[Source]\n\n\nfun box fchmod()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchmodat\n\u00b6\n\n\n[Source]\n\n\nfun box fchmodat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchown\n\u00b6\n\n\n[Source]\n\n\nfun box fchown()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchownat\n\u00b6\n\n\n[Source]\n\n\nfun box fchownat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfcntl\n\u00b6\n\n\n[Source]\n\n\nfun box fcntl()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nflock\n\u00b6\n\n\n[Source]\n\n\nfun box flock()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfpathconf\n\u00b6\n\n\n[Source]\n\n\nfun box fpathconf()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfsck\n\u00b6\n\n\n[Source]\n\n\nfun box fsck()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfstat\n\u00b6\n\n\n[Source]\n\n\nfun box fstat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfstatat\n\u00b6\n\n\n[Source]\n\n\nfun box fstatat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfstatfs\n\u00b6\n\n\n[Source]\n\n\nfun box fstatfs()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfutimes\n\u00b6\n\n\n[Source]\n\n\nfun box futimes()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfutimesat\n\u00b6\n\n\n[Source]\n\n\nfun box futimesat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nlinkat\n\u00b6\n\n\n[Source]\n\n\nfun box linkat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmkdirat\n\u00b6\n\n\n[Source]\n\n\nfun box mkdirat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmkfifoat\n\u00b6\n\n\n[Source]\n\n\nfun box mkfifoat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmknodat\n\u00b6\n\n\n[Source]\n\n\nfun box mknodat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrenameat\n\u00b6\n\n\n[Source]\n\n\nfun box renameat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsymlinkat\n\u00b6\n\n\n[Source]\n\n\nfun box symlinkat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nunlinkat\n\u00b6\n\n\n[Source]\n\n\nfun box unlinkat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\naccept\n\u00b6\n\n\n[Source]\n\n\nfun box accept()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbind\n\u00b6\n\n\n[Source]\n\n\nfun box bind()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nconnect\n\u00b6\n\n\n[Source]\n\n\nfun box connect()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ngetpeername\n\u00b6\n\n\n[Source]\n\n\nfun box getpeername()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ngetsockname\n\u00b6\n\n\n[Source]\n\n\nfun box getsockname()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ngetsockopt\n\u00b6\n\n\n[Source]\n\n\nfun box getsockopt()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nlisten\n\u00b6\n\n\n[Source]\n\n\nfun box listen()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\npeeloff\n\u00b6\n\n\n[Source]\n\n\nfun box peeloff()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrecv\n\u00b6\n\n\n[Source]\n\n\nfun box recv()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsend\n\u00b6\n\n\n[Source]\n\n\nfun box send()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsetsockopt\n\u00b6\n\n\n[Source]\n\n\nfun box setsockopt()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshutdown\n\u00b6\n\n\n[Source]\n\n\nfun box shutdown()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbindat\n\u00b6\n\n\n[Source]\n\n\nfun box bindat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nconnectat\n\u00b6\n\n\n[Source]\n\n\nfun box connectat()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsock_client\n\u00b6\n\n\n[Source]\n\n\nfun box sock_client()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsock_server\n\u00b6\n\n\n[Source]\n\n\nfun box sock_server()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmac_get\n\u00b6\n\n\n[Source]\n\n\nfun box mac_get()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmac_set\n\u00b6\n\n\n[Source]\n\n\nfun box mac_set()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsem_getvalue\n\u00b6\n\n\n[Source]\n\n\nfun box sem_getvalue()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsem_post\n\u00b6\n\n\n[Source]\n\n\nfun box sem_post()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsem_wait\n\u00b6\n\n\n[Source]\n\n\nfun box sem_wait()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nevent\n\u00b6\n\n\n[Source]\n\n\nfun box event()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nkqueue_event\n\u00b6\n\n\n[Source]\n\n\nfun box kqueue_event()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nioctl\n\u00b6\n\n\n[Source]\n\n\nfun box ioctl()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nttyhook\n\u00b6\n\n\n[Source]\n\n\nfun box ttyhook()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\npdgetpid\n\u00b6\n\n\n[Source]\n\n\nfun box pdgetpid()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\npdwait\n\u00b6\n\n\n[Source]\n\n\nfun box pdwait()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\npdkill\n\u00b6\n\n\n[Source]\n\n\nfun box pdkill()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nexattr_delete\n\u00b6\n\n\n[Source]\n\n\nfun box exattr_delete()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nexattr_get\n\u00b6\n\n\n[Source]\n\n\nfun box exattr_get()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nexattr_list\n\u00b6\n\n\n[Source]\n\n\nfun box exattr_list()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nexattr_set\n\u00b6\n\n\n[Source]\n\n\nfun box exattr_set()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nacl_check\n\u00b6\n\n\n[Source]\n\n\nfun box acl_check()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nacl_delete\n\u00b6\n\n\n[Source]\n\n\nfun box acl_delete()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nacl_get\n\u00b6\n\n\n[Source]\n\n\nfun box acl_get()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nacl_set\n\u00b6\n\n\n[Source]\n\n\nfun box acl_set()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nkqueue_change\n\u00b6\n\n\n[Source]\n\n\nfun box kqueue_change()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nkqueue\n\u00b6\n\n\n[Source]\n\n\nfun box kqueue()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Cap val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nCap\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Cap val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nCap\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Cap"
        },
        {
            "location": "/capsicum-Cap/#cap",
            "text": "[Source]  The Capsicum rights.  primitive val Cap",
            "title": "Cap"
        },
        {
            "location": "/capsicum-Cap/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/capsicum-Cap/#create",
            "text": "[Source]  new val create()\n: Cap val^",
            "title": "create"
        },
        {
            "location": "/capsicum-Cap/#returns",
            "text": "Cap  val^",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/capsicum-Cap/#enter",
            "text": "[Source]  This places the current process into capability mode, a mode of execution\nin which processes may only issue system calls operating on file\ndescriptors or reading limited global system state. Access to global name\nspaces, such as file system or IPC name spaces, is prevented.  fun box enter()\n: Bool val",
            "title": "enter"
        },
        {
            "location": "/capsicum-Cap/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#read",
            "text": "[Source]  fun box read()\n: U64 val",
            "title": "read"
        },
        {
            "location": "/capsicum-Cap/#returns_2",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#write",
            "text": "[Source]  fun box write()\n: U64 val",
            "title": "write"
        },
        {
            "location": "/capsicum-Cap/#returns_3",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#seek_tell",
            "text": "[Source]  fun box seek_tell()\n: U64 val",
            "title": "seek_tell"
        },
        {
            "location": "/capsicum-Cap/#returns_4",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#seek",
            "text": "[Source]  fun box seek()\n: U64 val",
            "title": "seek"
        },
        {
            "location": "/capsicum-Cap/#returns_5",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#pread",
            "text": "[Source]  fun box pread()\n: U64 val",
            "title": "pread"
        },
        {
            "location": "/capsicum-Cap/#returns_6",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#pwrite",
            "text": "[Source]  fun box pwrite()\n: U64 val",
            "title": "pwrite"
        },
        {
            "location": "/capsicum-Cap/#returns_7",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mmap",
            "text": "[Source]  fun box mmap()\n: U64 val",
            "title": "mmap"
        },
        {
            "location": "/capsicum-Cap/#returns_8",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mmap_r",
            "text": "[Source]  fun box mmap_r()\n: U64 val",
            "title": "mmap_r"
        },
        {
            "location": "/capsicum-Cap/#returns_9",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mmap_w",
            "text": "[Source]  fun box mmap_w()\n: U64 val",
            "title": "mmap_w"
        },
        {
            "location": "/capsicum-Cap/#returns_10",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mmap_x",
            "text": "[Source]  fun box mmap_x()\n: U64 val",
            "title": "mmap_x"
        },
        {
            "location": "/capsicum-Cap/#returns_11",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mmap_rw",
            "text": "[Source]  fun box mmap_rw()\n: U64 val",
            "title": "mmap_rw"
        },
        {
            "location": "/capsicum-Cap/#returns_12",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mmap_rx",
            "text": "[Source]  fun box mmap_rx()\n: U64 val",
            "title": "mmap_rx"
        },
        {
            "location": "/capsicum-Cap/#returns_13",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mmap_wx",
            "text": "[Source]  fun box mmap_wx()\n: U64 val",
            "title": "mmap_wx"
        },
        {
            "location": "/capsicum-Cap/#returns_14",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mmap_rwx",
            "text": "[Source]  fun box mmap_rwx()\n: U64 val",
            "title": "mmap_rwx"
        },
        {
            "location": "/capsicum-Cap/#returns_15",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#creat",
            "text": "[Source]  fun box creat()\n: U64 val",
            "title": "creat"
        },
        {
            "location": "/capsicum-Cap/#returns_16",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fexecve",
            "text": "[Source]  fun box fexecve()\n: U64 val",
            "title": "fexecve"
        },
        {
            "location": "/capsicum-Cap/#returns_17",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fsync",
            "text": "[Source]  fun box fsync()\n: U64 val",
            "title": "fsync"
        },
        {
            "location": "/capsicum-Cap/#returns_18",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#ftruncate",
            "text": "[Source]  fun box ftruncate()\n: U64 val",
            "title": "ftruncate"
        },
        {
            "location": "/capsicum-Cap/#returns_19",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#lookup",
            "text": "[Source]  fun box lookup()\n: U64 val",
            "title": "lookup"
        },
        {
            "location": "/capsicum-Cap/#returns_20",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fchdir",
            "text": "[Source]  fun box fchdir()\n: U64 val",
            "title": "fchdir"
        },
        {
            "location": "/capsicum-Cap/#returns_21",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fchflags",
            "text": "[Source]  fun box fchflags()\n: U64 val",
            "title": "fchflags"
        },
        {
            "location": "/capsicum-Cap/#returns_22",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#chflagsat",
            "text": "[Source]  fun box chflagsat()\n: U64 val",
            "title": "chflagsat"
        },
        {
            "location": "/capsicum-Cap/#returns_23",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fchmod",
            "text": "[Source]  fun box fchmod()\n: U64 val",
            "title": "fchmod"
        },
        {
            "location": "/capsicum-Cap/#returns_24",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fchmodat",
            "text": "[Source]  fun box fchmodat()\n: U64 val",
            "title": "fchmodat"
        },
        {
            "location": "/capsicum-Cap/#returns_25",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fchown",
            "text": "[Source]  fun box fchown()\n: U64 val",
            "title": "fchown"
        },
        {
            "location": "/capsicum-Cap/#returns_26",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fchownat",
            "text": "[Source]  fun box fchownat()\n: U64 val",
            "title": "fchownat"
        },
        {
            "location": "/capsicum-Cap/#returns_27",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fcntl",
            "text": "[Source]  fun box fcntl()\n: U64 val",
            "title": "fcntl"
        },
        {
            "location": "/capsicum-Cap/#returns_28",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#flock",
            "text": "[Source]  fun box flock()\n: U64 val",
            "title": "flock"
        },
        {
            "location": "/capsicum-Cap/#returns_29",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fpathconf",
            "text": "[Source]  fun box fpathconf()\n: U64 val",
            "title": "fpathconf"
        },
        {
            "location": "/capsicum-Cap/#returns_30",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fsck",
            "text": "[Source]  fun box fsck()\n: U64 val",
            "title": "fsck"
        },
        {
            "location": "/capsicum-Cap/#returns_31",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fstat",
            "text": "[Source]  fun box fstat()\n: U64 val",
            "title": "fstat"
        },
        {
            "location": "/capsicum-Cap/#returns_32",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fstatat",
            "text": "[Source]  fun box fstatat()\n: U64 val",
            "title": "fstatat"
        },
        {
            "location": "/capsicum-Cap/#returns_33",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#fstatfs",
            "text": "[Source]  fun box fstatfs()\n: U64 val",
            "title": "fstatfs"
        },
        {
            "location": "/capsicum-Cap/#returns_34",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#futimes",
            "text": "[Source]  fun box futimes()\n: U64 val",
            "title": "futimes"
        },
        {
            "location": "/capsicum-Cap/#returns_35",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#futimesat",
            "text": "[Source]  fun box futimesat()\n: U64 val",
            "title": "futimesat"
        },
        {
            "location": "/capsicum-Cap/#returns_36",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#linkat",
            "text": "[Source]  fun box linkat()\n: U64 val",
            "title": "linkat"
        },
        {
            "location": "/capsicum-Cap/#returns_37",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mkdirat",
            "text": "[Source]  fun box mkdirat()\n: U64 val",
            "title": "mkdirat"
        },
        {
            "location": "/capsicum-Cap/#returns_38",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mkfifoat",
            "text": "[Source]  fun box mkfifoat()\n: U64 val",
            "title": "mkfifoat"
        },
        {
            "location": "/capsicum-Cap/#returns_39",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mknodat",
            "text": "[Source]  fun box mknodat()\n: U64 val",
            "title": "mknodat"
        },
        {
            "location": "/capsicum-Cap/#returns_40",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#renameat",
            "text": "[Source]  fun box renameat()\n: U64 val",
            "title": "renameat"
        },
        {
            "location": "/capsicum-Cap/#returns_41",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#symlinkat",
            "text": "[Source]  fun box symlinkat()\n: U64 val",
            "title": "symlinkat"
        },
        {
            "location": "/capsicum-Cap/#returns_42",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#unlinkat",
            "text": "[Source]  fun box unlinkat()\n: U64 val",
            "title": "unlinkat"
        },
        {
            "location": "/capsicum-Cap/#returns_43",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#accept",
            "text": "[Source]  fun box accept()\n: U64 val",
            "title": "accept"
        },
        {
            "location": "/capsicum-Cap/#returns_44",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#bind",
            "text": "[Source]  fun box bind()\n: U64 val",
            "title": "bind"
        },
        {
            "location": "/capsicum-Cap/#returns_45",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#connect",
            "text": "[Source]  fun box connect()\n: U64 val",
            "title": "connect"
        },
        {
            "location": "/capsicum-Cap/#returns_46",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#getpeername",
            "text": "[Source]  fun box getpeername()\n: U64 val",
            "title": "getpeername"
        },
        {
            "location": "/capsicum-Cap/#returns_47",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#getsockname",
            "text": "[Source]  fun box getsockname()\n: U64 val",
            "title": "getsockname"
        },
        {
            "location": "/capsicum-Cap/#returns_48",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#getsockopt",
            "text": "[Source]  fun box getsockopt()\n: U64 val",
            "title": "getsockopt"
        },
        {
            "location": "/capsicum-Cap/#returns_49",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#listen",
            "text": "[Source]  fun box listen()\n: U64 val",
            "title": "listen"
        },
        {
            "location": "/capsicum-Cap/#returns_50",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#peeloff",
            "text": "[Source]  fun box peeloff()\n: U64 val",
            "title": "peeloff"
        },
        {
            "location": "/capsicum-Cap/#returns_51",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#recv",
            "text": "[Source]  fun box recv()\n: U64 val",
            "title": "recv"
        },
        {
            "location": "/capsicum-Cap/#returns_52",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#send",
            "text": "[Source]  fun box send()\n: U64 val",
            "title": "send"
        },
        {
            "location": "/capsicum-Cap/#returns_53",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#setsockopt",
            "text": "[Source]  fun box setsockopt()\n: U64 val",
            "title": "setsockopt"
        },
        {
            "location": "/capsicum-Cap/#returns_54",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#shutdown",
            "text": "[Source]  fun box shutdown()\n: U64 val",
            "title": "shutdown"
        },
        {
            "location": "/capsicum-Cap/#returns_55",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#bindat",
            "text": "[Source]  fun box bindat()\n: U64 val",
            "title": "bindat"
        },
        {
            "location": "/capsicum-Cap/#returns_56",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#connectat",
            "text": "[Source]  fun box connectat()\n: U64 val",
            "title": "connectat"
        },
        {
            "location": "/capsicum-Cap/#returns_57",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#sock_client",
            "text": "[Source]  fun box sock_client()\n: U64 val",
            "title": "sock_client"
        },
        {
            "location": "/capsicum-Cap/#returns_58",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#sock_server",
            "text": "[Source]  fun box sock_server()\n: U64 val",
            "title": "sock_server"
        },
        {
            "location": "/capsicum-Cap/#returns_59",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mac_get",
            "text": "[Source]  fun box mac_get()\n: U64 val",
            "title": "mac_get"
        },
        {
            "location": "/capsicum-Cap/#returns_60",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#mac_set",
            "text": "[Source]  fun box mac_set()\n: U64 val",
            "title": "mac_set"
        },
        {
            "location": "/capsicum-Cap/#returns_61",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#sem_getvalue",
            "text": "[Source]  fun box sem_getvalue()\n: U64 val",
            "title": "sem_getvalue"
        },
        {
            "location": "/capsicum-Cap/#returns_62",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#sem_post",
            "text": "[Source]  fun box sem_post()\n: U64 val",
            "title": "sem_post"
        },
        {
            "location": "/capsicum-Cap/#returns_63",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#sem_wait",
            "text": "[Source]  fun box sem_wait()\n: U64 val",
            "title": "sem_wait"
        },
        {
            "location": "/capsicum-Cap/#returns_64",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#event",
            "text": "[Source]  fun box event()\n: U64 val",
            "title": "event"
        },
        {
            "location": "/capsicum-Cap/#returns_65",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#kqueue_event",
            "text": "[Source]  fun box kqueue_event()\n: U64 val",
            "title": "kqueue_event"
        },
        {
            "location": "/capsicum-Cap/#returns_66",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#ioctl",
            "text": "[Source]  fun box ioctl()\n: U64 val",
            "title": "ioctl"
        },
        {
            "location": "/capsicum-Cap/#returns_67",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#ttyhook",
            "text": "[Source]  fun box ttyhook()\n: U64 val",
            "title": "ttyhook"
        },
        {
            "location": "/capsicum-Cap/#returns_68",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#pdgetpid",
            "text": "[Source]  fun box pdgetpid()\n: U64 val",
            "title": "pdgetpid"
        },
        {
            "location": "/capsicum-Cap/#returns_69",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#pdwait",
            "text": "[Source]  fun box pdwait()\n: U64 val",
            "title": "pdwait"
        },
        {
            "location": "/capsicum-Cap/#returns_70",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#pdkill",
            "text": "[Source]  fun box pdkill()\n: U64 val",
            "title": "pdkill"
        },
        {
            "location": "/capsicum-Cap/#returns_71",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#exattr_delete",
            "text": "[Source]  fun box exattr_delete()\n: U64 val",
            "title": "exattr_delete"
        },
        {
            "location": "/capsicum-Cap/#returns_72",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#exattr_get",
            "text": "[Source]  fun box exattr_get()\n: U64 val",
            "title": "exattr_get"
        },
        {
            "location": "/capsicum-Cap/#returns_73",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#exattr_list",
            "text": "[Source]  fun box exattr_list()\n: U64 val",
            "title": "exattr_list"
        },
        {
            "location": "/capsicum-Cap/#returns_74",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#exattr_set",
            "text": "[Source]  fun box exattr_set()\n: U64 val",
            "title": "exattr_set"
        },
        {
            "location": "/capsicum-Cap/#returns_75",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#acl_check",
            "text": "[Source]  fun box acl_check()\n: U64 val",
            "title": "acl_check"
        },
        {
            "location": "/capsicum-Cap/#returns_76",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#acl_delete",
            "text": "[Source]  fun box acl_delete()\n: U64 val",
            "title": "acl_delete"
        },
        {
            "location": "/capsicum-Cap/#returns_77",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#acl_get",
            "text": "[Source]  fun box acl_get()\n: U64 val",
            "title": "acl_get"
        },
        {
            "location": "/capsicum-Cap/#returns_78",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#acl_set",
            "text": "[Source]  fun box acl_set()\n: U64 val",
            "title": "acl_set"
        },
        {
            "location": "/capsicum-Cap/#returns_79",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#kqueue_change",
            "text": "[Source]  fun box kqueue_change()\n: U64 val",
            "title": "kqueue_change"
        },
        {
            "location": "/capsicum-Cap/#returns_80",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#kqueue",
            "text": "[Source]  fun box kqueue()\n: U64 val",
            "title": "kqueue"
        },
        {
            "location": "/capsicum-Cap/#returns_81",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#eq",
            "text": "[Source]  fun box eq(\n  that: Cap val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/capsicum-Cap/#parameters",
            "text": "that:  Cap  val",
            "title": "Parameters"
        },
        {
            "location": "/capsicum-Cap/#returns_82",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/capsicum-Cap/#ne",
            "text": "[Source]  fun box ne(\n  that: Cap val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/capsicum-Cap/#parameters_1",
            "text": "that:  Cap  val",
            "title": "Parameters"
        },
        {
            "location": "/capsicum-Cap/#returns_83",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections--index/",
            "text": "No package doc string provided for collections.\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive Sort\n\n\ntype Set\n\n\ntype SetIs\n\n\nclass HashSet\n\n\nclass SetValues\n\n\nclass RingBuffer\n\n\nclass Reverse\n\n\nclass Range\n\n\ntype Map\n\n\ntype MapIs\n\n\nclass HashMap\n\n\nclass MapKeys\n\n\nclass MapValues\n\n\nclass MapPairs\n\n\nclass ListNode\n\n\nclass List\n\n\nclass ListNodes\n\n\nclass ListValues\n\n\ninterface Hashable\n\n\ninterface Hashable64\n\n\ninterface HashFunction\n\n\ninterface HashFunction64\n\n\nprimitive HashEq\n\n\nprimitive HashEq64\n\n\nprimitive HashIs\n\n\nprimitive HashByteSeq\n\n\ninterface Flag\n\n\nclass Flags",
            "title": "Package"
        },
        {
            "location": "/collections--index/#public-types",
            "text": "primitive Sort  type Set  type SetIs  class HashSet  class SetValues  class RingBuffer  class Reverse  class Range  type Map  type MapIs  class HashMap  class MapKeys  class MapValues  class MapPairs  class ListNode  class List  class ListNodes  class ListValues  interface Hashable  interface Hashable64  interface HashFunction  interface HashFunction64  primitive HashEq  primitive HashEq64  primitive HashIs  primitive HashByteSeq  interface Flag  class Flags",
            "title": "Public Types"
        },
        {
            "location": "/collections-Sort/",
            "text": "Sort[A: \nSeq\n[B] ref, B: \nComparable\n[B] #read]\n\u00b6\n\n\n[Source]\n\n\nImplementation of dual-pivot quicksort.\n\n\nprimitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Sort[A, B] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSort\n[A, B] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nSort the given seq.\n\n\nfun box apply(\n  a: A)\n: A^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Sort[A, B] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSort\n[A, B] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Sort[A, B] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSort\n[A, B] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Sort"
        },
        {
            "location": "/collections-Sort/#sort91a-seq91b93-ref-b-comparable91b93-read93",
            "text": "[Source]  Implementation of dual-pivot quicksort.  primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]",
            "title": "Sort[A: Seq[B] ref, B: Comparable[B] #read]"
        },
        {
            "location": "/collections-Sort/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Sort/#create",
            "text": "[Source]  new val create()\n: Sort[A, B] val^",
            "title": "create"
        },
        {
            "location": "/collections-Sort/#returns",
            "text": "Sort [A, B] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-Sort/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Sort/#apply",
            "text": "[Source]  Sort the given seq.  fun box apply(\n  a: A)\n: A^",
            "title": "apply"
        },
        {
            "location": "/collections-Sort/#parameters",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Sort/#returns_1",
            "text": "A^",
            "title": "Returns"
        },
        {
            "location": "/collections-Sort/#eq",
            "text": "[Source]  fun box eq(\n  that: Sort[A, B] val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-Sort/#parameters_1",
            "text": "that:  Sort [A, B] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-Sort/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Sort/#ne",
            "text": "[Source]  fun box ne(\n  that: Sort[A, B] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-Sort/#parameters_2",
            "text": "that:  Sort [A, B] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-Sort/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Set/",
            "text": "Set[A: (\nHashable\n #read & \nEquatable\n[A] #read)]\n\u00b6\n\n\n[Source]\n\n\ntype Set[A: (Hashable #read & Equatable[A] #read)] is\n  HashSet[A, HashEq[A] val] ref\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashSet\n[A, \nHashEq\n[A] val] ref",
            "title": "type Set"
        },
        {
            "location": "/collections-Set/#set91a-hashable-read-equatable91a93-read93",
            "text": "[Source]  type Set[A: (Hashable #read & Equatable[A] #read)] is\n  HashSet[A, HashEq[A] val] ref",
            "title": "Set[A: (Hashable #read &amp; Equatable[A] #read)]"
        },
        {
            "location": "/collections-Set/#type-alias-for",
            "text": "HashSet [A,  HashEq [A] val] ref",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-SetIs/",
            "text": "SetIs[A: A]\n\u00b6\n\n\n[Source]\n\n\ntype SetIs[A: A] is\n  HashSet[A, HashIs[A!] val] ref\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashSet\n[A, \nHashIs\n[A!] val] ref",
            "title": "type SetIs"
        },
        {
            "location": "/collections-SetIs/#setis91a-a93",
            "text": "[Source]  type SetIs[A: A] is\n  HashSet[A, HashIs[A!] val] ref",
            "title": "SetIs[A: A]"
        },
        {
            "location": "/collections-SetIs/#type-alias-for",
            "text": "HashSet [A,  HashIs [A!] val] ref",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-HashSet/",
            "text": "HashSet[A: A, H: \nHashFunction\n[A!] val]\n\u00b6\n\n\n[Source]\n\n\nA set, built on top of a HashMap. This is implemented as map of an alias of\na type to itself\n\n\nclass ref HashSet[A: A, H: HashFunction[A!] val] is\n  Comparable[HashSet[A, H] box] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nComparable\n[\nHashSet\n[A, H] box] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nDefaults to a prealloc of 8.\n\n\nnew ref create(\n  prealloc: USize val = seq)\n: HashSet[A, H] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nprealloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[A, H] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nThe number of items in the set.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\u00b6\n\n\n[Source]\n\n\nThe available space in the set.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturn the value if its in the set, otherwise raise an error.\n\n\nfun box apply(\n  value: box->A!)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nChecks whether the set contains the value.\n\n\nfun box contains(\n  value: box->A!)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nRemove all elements from the set.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset\n\u00b6\n\n\n[Source]\n\n\nAdd a value to the set.\n\n\nfun ref set(\n  value: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunset\n\u00b6\n\n\n[Source]\n\n\nRemove a value from the set.\n\n\nfun ref unset(\n  value: box->A!)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nextract\n\u00b6\n\n\n[Source]\n\n\nRemove a value from the set and return it. Raises an error if the value\nwasn't in the set.\n\n\nfun ref extract(\n  value: box->A!)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunion\n\u00b6\n\n\n[Source]\n\n\nAdd everything in that to the set.\n\n\nfun ref union(\n  that: Iterator[A^] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nIterator\n[A^] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nintersect[optional K: \nHashFunction\n[box->A!] val]\n\u00b6\n\n\n[Source]\n\n\nRemove everything that isn't in that.\n\n\nfun ref intersect[optional K: HashFunction[box->A!] val](\n  that: HashSet[box->A!, K] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[box->A!, K] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndifference\n\u00b6\n\n\n[Source]\n\n\nRemove elements in this which are also in that. Add elements in that which\nare not in this.\n\n\nfun ref difference(\n  that: Iterator[A^] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nIterator\n[A^] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove everything that is in that.\n\n\nfun ref remove(\n  that: Iterator[box->A!] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nIterator\n[box->A!] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nAdd a value to the set.\n\n\nfun box add[optional K: HashFunction[this->A!] val](\n  value: this->A!)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: this->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nsub[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nRemove a value from the set.\n\n\nfun box sub[optional K: HashFunction[this->A!] val](\n  value: box->this->A!)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: box->this->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nop_or[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a set with the elements of both this and that.\n\n\nfun box op_or[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: this->\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nop_and[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a set with the elements that are in both this and that.\n\n\nfun box op_and[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: this->\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nop_xor[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a set with the elements that are in either set but not both.\n\n\nfun box op_xor[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: this->\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nwithout[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a set with the elements of this that are not in that.\n\n\nfun box without[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: this->\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\nclone[optional K: \nHashFunction\n[this->A!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a clone. The element type may be different due to aliasing and\nviewpoint adaptation.\n\n\nfun box clone[optional K: HashFunction[this->A!] val]()\n: HashSet[this->A!, K] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashSet\n[this->A!, K] ref^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nReturns true if the sets contain the same elements.\n\n\nfun box eq(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nReturns false if the sets contain the same elements.\n\n\nfun box ne(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nReturns true if every element in this is also in that, and this has fewer\nelements than that.\n\n\nfun box lt(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nReturns true if every element in this is also in that.\n\n\nfun box le(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nReturns true if every element in that is also in this, and this has more\nelements than that.\n\n\nfun box gt(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nReturns true if every element in that is also in this.\n\n\nfun box ge(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext_index\n\u00b6\n\n\n[Source]\n\n\nGiven an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.\n\n\nfun box next_index(\n  prev: USize val = seq)\n: USize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nprev: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nindex\n\u00b6\n\n\n[Source]\n\n\nReturns the value at a given index. Raise an error if the index is not\npopulated.\n\n\nfun box index(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the values.\n\n\nfun box values()\n: SetValues[A, H, this->HashSet[A, H] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSetValues\n[A, H, this->\nHashSet\n[A, H] ref] ref^\n\n\n\n\n\n\ncompare\n\u00b6\n\n\n[Source]\n\n\nfun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)",
            "title": "class HashSet"
        },
        {
            "location": "/collections-HashSet/#hashset91a-a-h-hashfunction91a93-val93",
            "text": "[Source]  A set, built on top of a HashMap. This is implemented as map of an alias of\na type to itself  class ref HashSet[A: A, H: HashFunction[A!] val] is\n  Comparable[HashSet[A, H] box] ref",
            "title": "HashSet[A: A, H: HashFunction[A!] val]"
        },
        {
            "location": "/collections-HashSet/#implements",
            "text": "Comparable [ HashSet [A, H] box] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-HashSet/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashSet/#create",
            "text": "[Source]  Defaults to a prealloc of 8.  new ref create(\n  prealloc: USize val = seq)\n: HashSet[A, H] ref^",
            "title": "create"
        },
        {
            "location": "/collections-HashSet/#parameters",
            "text": "prealloc:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns",
            "text": "HashSet [A, H] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashSet/#size",
            "text": "[Source]  The number of items in the set.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-HashSet/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#space",
            "text": "[Source]  The available space in the set.  fun box space()\n: USize val",
            "title": "space"
        },
        {
            "location": "/collections-HashSet/#returns_2",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#apply",
            "text": "[Source]  Return the value if its in the set, otherwise raise an error.  fun box apply(\n  value: box->A!)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-HashSet/#parameters_1",
            "text": "value: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_3",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#contains",
            "text": "[Source]  Checks whether the set contains the value.  fun box contains(\n  value: box->A!)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/collections-HashSet/#parameters_2",
            "text": "value: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#clear",
            "text": "[Source]  Remove all elements from the set.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/collections-HashSet/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#set",
            "text": "[Source]  Add a value to the set.  fun ref set(\n  value: A)\n: None val",
            "title": "set"
        },
        {
            "location": "/collections-HashSet/#parameters_3",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#unset",
            "text": "[Source]  Remove a value from the set.  fun ref unset(\n  value: box->A!)\n: None val",
            "title": "unset"
        },
        {
            "location": "/collections-HashSet/#parameters_4",
            "text": "value: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#extract",
            "text": "[Source]  Remove a value from the set and return it. Raises an error if the value\nwasn't in the set.  fun ref extract(\n  value: box->A!)\n: A^ ?",
            "title": "extract"
        },
        {
            "location": "/collections-HashSet/#parameters_5",
            "text": "value: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_8",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#union",
            "text": "[Source]  Add everything in that to the set.  fun ref union(\n  that: Iterator[A^] ref)\n: None val",
            "title": "union"
        },
        {
            "location": "/collections-HashSet/#parameters_6",
            "text": "that:  Iterator [A^] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#intersect91optional-k-hashfunction91box-a93-val93",
            "text": "[Source]  Remove everything that isn't in that.  fun ref intersect[optional K: HashFunction[box->A!] val](\n  that: HashSet[box->A!, K] ref)\n: None val",
            "title": "intersect[optional K: HashFunction[box-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_7",
            "text": "that:  HashSet [box->A!, K] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#difference",
            "text": "[Source]  Remove elements in this which are also in that. Add elements in that which\nare not in this.  fun ref difference(\n  that: Iterator[A^] ref)\n: None val",
            "title": "difference"
        },
        {
            "location": "/collections-HashSet/#parameters_8",
            "text": "that:  Iterator [A^] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#remove",
            "text": "[Source]  Remove everything that is in that.  fun ref remove(\n  that: Iterator[box->A!] ref)\n: None val",
            "title": "remove"
        },
        {
            "location": "/collections-HashSet/#parameters_9",
            "text": "that:  Iterator [box->A!] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#add91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Add a value to the set.  fun box add[optional K: HashFunction[this->A!] val](\n  value: this->A!)\n: HashSet[this->A!, K] ref^",
            "title": "add[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_10",
            "text": "value: this->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_13",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#sub91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Remove a value from the set.  fun box sub[optional K: HashFunction[this->A!] val](\n  value: box->this->A!)\n: HashSet[this->A!, K] ref^",
            "title": "sub[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_11",
            "text": "value: box->this->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_14",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#op_or91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Create a set with the elements of both this and that.  fun box op_or[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^",
            "title": "op_or[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_12",
            "text": "that: this-> HashSet [A, H] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_15",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#op_and91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Create a set with the elements that are in both this and that.  fun box op_and[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^",
            "title": "op_and[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_13",
            "text": "that: this-> HashSet [A, H] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_16",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#op_xor91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Create a set with the elements that are in either set but not both.  fun box op_xor[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^",
            "title": "op_xor[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_14",
            "text": "that: this-> HashSet [A, H] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_17",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#without91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Create a set with the elements of this that are not in that.  fun box without[optional K: HashFunction[this->A!] val](\n  that: this->HashSet[A, H] ref)\n: HashSet[this->A!, K] ref^",
            "title": "without[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#parameters_15",
            "text": "that: this-> HashSet [A, H] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_18",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#clone91optional-k-hashfunction91this-a93-val93",
            "text": "[Source]  Create a clone. The element type may be different due to aliasing and\nviewpoint adaptation.  fun box clone[optional K: HashFunction[this->A!] val]()\n: HashSet[this->A!, K] ref^",
            "title": "clone[optional K: HashFunction[this-&gt;A!] val]"
        },
        {
            "location": "/collections-HashSet/#returns_19",
            "text": "HashSet [this->A!, K] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#eq",
            "text": "[Source]  Returns true if the sets contain the same elements.  fun box eq(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashSet/#parameters_16",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_20",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#ne",
            "text": "[Source]  Returns false if the sets contain the same elements.  fun box ne(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-HashSet/#parameters_17",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_21",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#lt",
            "text": "[Source]  Returns true if every element in this is also in that, and this has fewer\nelements than that.  fun box lt(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/collections-HashSet/#parameters_18",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_22",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#le",
            "text": "[Source]  Returns true if every element in this is also in that.  fun box le(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/collections-HashSet/#parameters_19",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_23",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#gt",
            "text": "[Source]  Returns true if every element in that is also in this, and this has more\nelements than that.  fun box gt(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/collections-HashSet/#parameters_20",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_24",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#ge",
            "text": "[Source]  Returns true if every element in that is also in this.  fun box ge(\n  that: HashSet[A, H] box)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/collections-HashSet/#parameters_21",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#next_index",
            "text": "[Source]  Given an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.  fun box next_index(\n  prev: USize val = seq)\n: USize val ?",
            "title": "next_index"
        },
        {
            "location": "/collections-HashSet/#parameters_22",
            "text": "prev:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_26",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#index",
            "text": "[Source]  Returns the value at a given index. Raise an error if the index is not\npopulated.  fun box index(\n  i: USize val)\n: this->A ?",
            "title": "index"
        },
        {
            "location": "/collections-HashSet/#parameters_23",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_27",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#values",
            "text": "[Source]  Return an iterator over the values.  fun box values()\n: SetValues[A, H, this->HashSet[A, H] ref] ref^",
            "title": "values"
        },
        {
            "location": "/collections-HashSet/#returns_28",
            "text": "SetValues [A, H, this-> HashSet [A, H] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashSet/#compare",
            "text": "[Source]  fun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/collections-HashSet/#parameters_24",
            "text": "that:  HashSet [A, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashSet/#returns_29",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/collections-SetValues/",
            "text": "SetValues[A: A, H: \nHashFunction\n[A!] val, S: \nHashSet\n[A, H] #read]\n\u00b6\n\n\n[Source]\n\n\nAn iterator over the values in a set.\n\n\nclass ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is\n  Iterator[S->A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[S->A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreates an iterator for the given set.\n\n\nnew ref create(\n  set: S)\n: SetValues[A, H, S] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nset: S\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSetValues\n[A, H, S] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.\n\n\nfun ref next()\n: S->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nS->A ?",
            "title": "class SetValues"
        },
        {
            "location": "/collections-SetValues/#setvalues91a-a-h-hashfunction91a93-val-s-hashset91a-h93-read93",
            "text": "[Source]  An iterator over the values in a set.  class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is\n  Iterator[S->A] ref",
            "title": "SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read]"
        },
        {
            "location": "/collections-SetValues/#implements",
            "text": "Iterator [S->A] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-SetValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-SetValues/#create",
            "text": "[Source]  Creates an iterator for the given set.  new ref create(\n  set: S)\n: SetValues[A, H, S] ref^",
            "title": "create"
        },
        {
            "location": "/collections-SetValues/#parameters",
            "text": "set: S",
            "title": "Parameters"
        },
        {
            "location": "/collections-SetValues/#returns",
            "text": "SetValues [A, H, S] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-SetValues/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-SetValues/#has_next",
            "text": "[Source]  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-SetValues/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-SetValues/#next",
            "text": "[Source]  Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.  fun ref next()\n: S->A ?",
            "title": "next"
        },
        {
            "location": "/collections-SetValues/#returns_2",
            "text": "S->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/",
            "text": "RingBuffer[A: A]\n\u00b6\n\n\n[Source]\n\n\nA ring buffer.\n\n\nclass ref RingBuffer[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a ring buffer with a fixed size. The size will be rounded up to the\nnext power of 2.\n\n\nnew ref create(\n  len: USize val)\n: RingBuffer[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nRingBuffer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhead\n\u00b6\n\n\n[Source]\n\n\nThe first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.\n\n\nfun box head()\n: USize val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nThe number of elements that have been added to the ring.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\u00b6\n\n\n[Source]\n\n\nThe available space in the ring.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nGet the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.\n\n\nfun box apply(\n  i: USize val)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\npush\n\u00b6\n\n\n[Source]\n\n\nAdd an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring. Returns true if an element was dropped.\n\n\nfun ref push(\n  value: A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nClear the queue.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class RingBuffer"
        },
        {
            "location": "/collections-RingBuffer/#ringbuffer91a-a93",
            "text": "[Source]  A ring buffer.  class ref RingBuffer[A: A]",
            "title": "RingBuffer[A: A]"
        },
        {
            "location": "/collections-RingBuffer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-RingBuffer/#create",
            "text": "[Source]  Create a ring buffer with a fixed size. The size will be rounded up to the\nnext power of 2.  new ref create(\n  len: USize val)\n: RingBuffer[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-RingBuffer/#parameters",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-RingBuffer/#returns",
            "text": "RingBuffer [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-RingBuffer/#head",
            "text": "[Source]  The first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.  fun box head()\n: USize val ?",
            "title": "head"
        },
        {
            "location": "/collections-RingBuffer/#returns_1",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#size",
            "text": "[Source]  The number of elements that have been added to the ring.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-RingBuffer/#returns_2",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#space",
            "text": "[Source]  The available space in the ring.  fun box space()\n: USize val",
            "title": "space"
        },
        {
            "location": "/collections-RingBuffer/#returns_3",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#apply",
            "text": "[Source]  Get the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.  fun box apply(\n  i: USize val)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-RingBuffer/#parameters_1",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-RingBuffer/#returns_4",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#push",
            "text": "[Source]  Add an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring. Returns true if an element was dropped.  fun ref push(\n  value: A)\n: Bool val",
            "title": "push"
        },
        {
            "location": "/collections-RingBuffer/#parameters_2",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-RingBuffer/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-RingBuffer/#clear",
            "text": "[Source]  Clear the queue.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/collections-RingBuffer/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Reverse/",
            "text": "Reverse[optional A: (\nReal\n[A] val & (\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val))]\n\u00b6\n\n\n[Source]\n\n\nProduces [max, min].\n\n\nclass ref Reverse[optional A: (Real[A] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  max: A,\n  min: A,\n  dec: A = seq)\n: Reverse[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmax: A\n\n\nmin: A\n\n\ndec: A = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReverse\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nrewind\n\u00b6\n\n\n[Source]\n\n\nfun ref rewind()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class Reverse"
        },
        {
            "location": "/collections-Reverse/#reverse91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93",
            "text": "[Source]  Produces [max, min].  class ref Reverse[optional A: (Real[A] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref",
            "title": "Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"
        },
        {
            "location": "/collections-Reverse/#implements",
            "text": "Iterator [A] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-Reverse/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Reverse/#create",
            "text": "[Source]  new ref create(\n  max: A,\n  min: A,\n  dec: A = seq)\n: Reverse[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-Reverse/#parameters",
            "text": "max: A  min: A  dec: A = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-Reverse/#returns",
            "text": "Reverse [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-Reverse/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Reverse/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-Reverse/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Reverse/#next",
            "text": "[Source]  fun ref next()\n: A",
            "title": "next"
        },
        {
            "location": "/collections-Reverse/#returns_2",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/collections-Reverse/#rewind",
            "text": "[Source]  fun ref rewind()\n: None val",
            "title": "rewind"
        },
        {
            "location": "/collections-Reverse/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Range/",
            "text": "Range[optional A: (\nReal\n[A] val & (\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val))]\n\u00b6\n\n\n[Source]\n\n\nProduces \n[min, max)\n with a step of \ninc\n for any \nNumber\n type.\n\n\n// iterating with for-loop\nfor i in Range(0, 10) do\n  env.out.print(i.string())\nend\n\n// iterating over Range of U8 with while-loop\nlet range = Range[U8](5, 100, 5)\nwhile range.has_next() do\n  handle_u8(range.next())\nend\n\n\n\n\nSupports \nmin\n being smaller than \nmax\n with negative \ninc\n\nbut only for signed integer types and floats:\n\n\nvar previous = 11\nfor left in Range[I64](10, -5, -1) do\n  if not (left < previous) then\n    error\n  end\n  previous = left\nend\n\n\n\n\nIf the \nstep\n is not moving \nmin\n towards \nmax\n or if it is \n0\n,\nthe Range is considered infinite and iterating over it\nwill never terminate:\n\n\nlet infinite_range1 = Range(0, 1, 0)\ninfinite_range1.is_infinite() == true\n\nlet infinite_range2 = Range[I8](0, 10, -1)\nfor _ in infinite_range2 do\n  env.out.print(\"will this ever end?\")\n  env.err.print(\"no, never!\")\nend\n\n\n\n\nWhen using \nRange\n with  floating point types (\nF32\n and \nF64\n)\n\ninc\n steps < 1.0 are possible. If any of the arguments contains\n\nNaN\n, \n+Inf\n or \n-Inf\n the range is considered infinite as operations on\nany of them won't move \nmin\n towards \nmax\n.\nThe actual values produced by such a \nRange\n are determined by what IEEE 754\ndefines as the result of \nmin\n + \ninc\n:\n\n\nfor and_a_half in Range[F64](0.5, 100) do\n  handle_half(and_a_half)\nend\n\n// this Range will produce 0 at first, then infinitely NaN\nlet nan: F64 = F64(0) / F64(0)\nfor what_am_i in Range[F64](0, 1000, nan) do\n  wild_guess(what_am_i)\nend\n\n\n\n\nclass ref Range[optional A: (Real[A] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  min: A,\n  max: A,\n  inc: A = seq)\n: Range[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmin: A\n\n\nmax: A\n\n\ninc: A = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nRange\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA\n\n\n\n\n\n\nrewind\n\u00b6\n\n\n[Source]\n\n\nfun ref rewind()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nis_infinite\n\u00b6\n\n\n[Source]\n\n\nfun box is_infinite()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "class Range"
        },
        {
            "location": "/collections-Range/#range91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93",
            "text": "[Source]  Produces  [min, max)  with a step of  inc  for any  Number  type.  // iterating with for-loop\nfor i in Range(0, 10) do\n  env.out.print(i.string())\nend\n\n// iterating over Range of U8 with while-loop\nlet range = Range[U8](5, 100, 5)\nwhile range.has_next() do\n  handle_u8(range.next())\nend  Supports  min  being smaller than  max  with negative  inc \nbut only for signed integer types and floats:  var previous = 11\nfor left in Range[I64](10, -5, -1) do\n  if not (left < previous) then\n    error\n  end\n  previous = left\nend  If the  step  is not moving  min  towards  max  or if it is  0 ,\nthe Range is considered infinite and iterating over it\nwill never terminate:  let infinite_range1 = Range(0, 1, 0)\ninfinite_range1.is_infinite() == true\n\nlet infinite_range2 = Range[I8](0, 10, -1)\nfor _ in infinite_range2 do\n  env.out.print(\"will this ever end?\")\n  env.err.print(\"no, never!\")\nend  When using  Range  with  floating point types ( F32  and  F64 ) inc  steps < 1.0 are possible. If any of the arguments contains NaN ,  +Inf  or  -Inf  the range is considered infinite as operations on\nany of them won't move  min  towards  max .\nThe actual values produced by such a  Range  are determined by what IEEE 754\ndefines as the result of  min  +  inc :  for and_a_half in Range[F64](0.5, 100) do\n  handle_half(and_a_half)\nend\n\n// this Range will produce 0 at first, then infinitely NaN\nlet nan: F64 = F64(0) / F64(0)\nfor what_am_i in Range[F64](0, 1000, nan) do\n  wild_guess(what_am_i)\nend  class ref Range[optional A: (Real[A] val & (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref",
            "title": "Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"
        },
        {
            "location": "/collections-Range/#implements",
            "text": "Iterator [A] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-Range/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Range/#create",
            "text": "[Source]  new ref create(\n  min: A,\n  max: A,\n  inc: A = seq)\n: Range[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-Range/#parameters",
            "text": "min: A  max: A  inc: A = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-Range/#returns",
            "text": "Range [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-Range/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Range/#has_next",
            "text": "[Source]  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-Range/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Range/#next",
            "text": "[Source]  fun ref next()\n: A",
            "title": "next"
        },
        {
            "location": "/collections-Range/#returns_2",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/collections-Range/#rewind",
            "text": "[Source]  fun ref rewind()\n: None val",
            "title": "rewind"
        },
        {
            "location": "/collections-Range/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Range/#is_infinite",
            "text": "[Source]  fun box is_infinite()\n: Bool val",
            "title": "is_infinite"
        },
        {
            "location": "/collections-Range/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Map/",
            "text": "Map[K: (\nHashable\n #read & \nEquatable\n[K] #read), V: V]\n\u00b6\n\n\n[Source]\n\n\nThis is a map that uses structural equality on the key.\n\n\ntype Map[K: (Hashable #read & Equatable[K] #read), V: V] is\n  HashMap[K, V, HashEq[K] val] ref\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashMap\n[K, V, \nHashEq\n[K] val] ref",
            "title": "type Map"
        },
        {
            "location": "/collections-Map/#map91k-hashable-read-equatable91k93-read-v-v93",
            "text": "[Source]  This is a map that uses structural equality on the key.  type Map[K: (Hashable #read & Equatable[K] #read), V: V] is\n  HashMap[K, V, HashEq[K] val] ref",
            "title": "Map[K: (Hashable #read &amp; Equatable[K] #read), V: V]"
        },
        {
            "location": "/collections-Map/#type-alias-for",
            "text": "HashMap [K, V,  HashEq [K] val] ref",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-MapIs/",
            "text": "MapIs[K: K, V: V]\n\u00b6\n\n\n[Source]\n\n\nThis is a map that uses identity comparison on the key.\n\n\ntype MapIs[K: K, V: V] is\n  HashMap[K, V, HashIs[K] val] ref\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nHashMap\n[K, V, \nHashIs\n[K] val] ref",
            "title": "type MapIs"
        },
        {
            "location": "/collections-MapIs/#mapis91k-k-v-v93",
            "text": "[Source]  This is a map that uses identity comparison on the key.  type MapIs[K: K, V: V] is\n  HashMap[K, V, HashIs[K] val] ref",
            "title": "MapIs[K: K, V: V]"
        },
        {
            "location": "/collections-MapIs/#type-alias-for",
            "text": "HashMap [K, V,  HashIs [K] val] ref",
            "title": "Type Alias For"
        },
        {
            "location": "/collections-HashMap/",
            "text": "HashMap[K: K, V: V, H: \nHashFunction\n[K] val]\n\u00b6\n\n\n[Source]\n\n\nA quadratic probing hash map. Resize occurs at a load factor of 0.75. A\nresized map has 2 times the space. The hash function can be plugged in to the\ntype to create different kinds of maps.\n\n\nclass ref HashMap[K: K, V: V, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate an array with space for prealloc elements without triggering a\nresize. Defaults to 6.\n\n\nnew ref create(\n  prealloc: USize val = seq)\n: HashMap[K, V, H] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nprealloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[K, V, H] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nThe number of items in the map.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\u00b6\n\n\n[Source]\n\n\nThe available space in the map. Resize will happen when\nsize / space >= 0.75.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nGets a value from the map. Raises an error if no such item exists.\n\n\nfun box apply(\n  key: box->K!)\n: this->V ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: box->K!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->V ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nSets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.\n\n\nfun ref update(\n  key: K,\n  value: V)\n: (V^ | None val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(V^ | \nNone\n val)\n\n\n\n\n\n\nupsert\n\u00b6\n\n\n[Source]\n\n\nCombines a provided value with the current value for the provided key\nusing the provided function. If the provided key has not been added to\nthe map yet, it sets its value to the provided value.\n\n\nAs a simple example, say we had a map with I64 values and we wanted to\nadd 4 to the current value for key \"test\", which let's say is currently 2.\nWe call\n\n\nm.upsert(\"test\", 4, {(x, y) => x - y })\n\n\nThis changes the value associated with \"test\" to -2.\n\n\nIf we have not yet added the key \"new-key\" to the map and we call\n\n\nm.upsert(\"new-key\", 4, {(x, y) => x - y })\n\n\nthen \"new-key\" is added to the map with a value of -4.\n\n\nReturns the value that we set the key to\n\n\nfun ref upsert(\n  key: K,\n  value: V,\n  f: {(V, V): V^}[K, V, H] box)\n: V ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\nf: {(V, V): V^}[K, V, H] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nV ?\n\n\n\n\n\n\ninsert\n\u00b6\n\n\n[Source]\n\n\nSet a value in the map. Returns the new value, allowing reuse.\n\n\nfun ref insert(\n  key: K,\n  value: V)\n: V ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nV ?\n\n\n\n\n\n\ninsert_if_absent\n\u00b6\n\n\n[Source]\n\n\nSet a value in the map if the key doesn't already exist in the Map.\nSaves an extra lookup when doing a pattern like:\n\n\nif not my_map.contains(my_key) then\n  my_map(my_key) = my_value\nend\n\n\n\n\nReturns the value, the same as \ninsert\n, allowing 'insert_if_absent'\nto be used as a drop-in replacement for \ninsert\n.\n\n\nfun ref insert_if_absent(\n  key: K,\n  value: V)\n: V ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nV ?\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nDelete a value from the map and return it. Raises an error if there was no\nvalue for the given key.\n\n\nfun ref remove(\n  key: box->K!)\n: (K^ , V^) ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: box->K!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(K^ , V^) ?\n\n\n\n\n\n\nget_or_else\n\u00b6\n\n\n[Source]\n\n\nGet the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.\n\n\nfun box get_or_else(\n  key: box->K!,\n  alt: this->V)\n: this->V\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: box->K!\n\n\nalt: this->V\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->V\n\n\n\n\n\n\ncontains\n\u00b6\n\n\n[Source]\n\n\nChecks whether the map contains the key k\n\n\nfun box contains(\n  k: box->K!)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nk: box->K!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nAdd K, V pairs from the iterator to the map.\n\n\nfun ref concat(\n  iter: Iterator[(K^ , V^)] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[(K^ , V^)] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd[optional H2: \nHashFunction\n[this->K!] val]\n\u00b6\n\n\n[Source]\n\n\nThis with the new (key, value) mapping.\n\n\nfun box add[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: this->K!\n\n\nvalue: this->V!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[this->K!, this->V!, H2] ref^\n\n\n\n\n\n\nsub[optional H2: \nHashFunction\n[this->K!] val]\n\u00b6\n\n\n[Source]\n\n\nThis without the given key.\n\n\nfun box sub[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nkey: this->K!\n\n\nvalue: this->V!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[this->K!, this->V!, H2] ref^\n\n\n\n\n\n\nnext_index\n\u00b6\n\n\n[Source]\n\n\nGiven an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.\n\n\nfun box next_index(\n  prev: USize val = seq)\n: USize val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nprev: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nindex\n\u00b6\n\n\n[Source]\n\n\nReturns the key and value at a given index.\nRaise an error if the index is not populated.\n\n\nfun box index(\n  i: USize val)\n: (this->K , this->V) ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(this->K , this->V) ?\n\n\n\n\n\n\ncompact\n\u00b6\n\n\n[Source]\n\n\nMinimise the memory used for the map.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclone[optional H2: \nHashFunction\n[this->K!] val]\n\u00b6\n\n\n[Source]\n\n\nCreate a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.\n\n\nfun box clone[optional H2: HashFunction[this->K!] val]()\n: HashMap[this->K!, this->V!, H2] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashMap\n[this->K!, this->V!, H2] ref^\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nRemove all entries.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nkeys\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the keys.\n\n\nfun box keys()\n: MapKeys[K, V, H, this->HashMap[K, V, H] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapKeys\n[K, V, H, this->\nHashMap\n[K, V, H] ref] ref^\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the values.\n\n\nfun box values()\n: MapValues[K, V, H, this->HashMap[K, V, H] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapValues\n[K, V, H, this->\nHashMap\n[K, V, H] ref] ref^\n\n\n\n\n\n\npairs\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator over the keys and values.\n\n\nfun box pairs()\n: MapPairs[K, V, H, this->HashMap[K, V, H] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapPairs\n[K, V, H, this->\nHashMap\n[K, V, H] ref] ref^",
            "title": "class HashMap"
        },
        {
            "location": "/collections-HashMap/#hashmap91k-k-v-v-h-hashfunction91k93-val93",
            "text": "[Source]  A quadratic probing hash map. Resize occurs at a load factor of 0.75. A\nresized map has 2 times the space. The hash function can be plugged in to the\ntype to create different kinds of maps.  class ref HashMap[K: K, V: V, H: HashFunction[K] val]",
            "title": "HashMap[K: K, V: V, H: HashFunction[K] val]"
        },
        {
            "location": "/collections-HashMap/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashMap/#create",
            "text": "[Source]  Create an array with space for prealloc elements without triggering a\nresize. Defaults to 6.  new ref create(\n  prealloc: USize val = seq)\n: HashMap[K, V, H] ref^",
            "title": "create"
        },
        {
            "location": "/collections-HashMap/#parameters",
            "text": "prealloc:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns",
            "text": "HashMap [K, V, H] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashMap/#size",
            "text": "[Source]  The number of items in the map.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-HashMap/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#space",
            "text": "[Source]  The available space in the map. Resize will happen when\nsize / space >= 0.75.  fun box space()\n: USize val",
            "title": "space"
        },
        {
            "location": "/collections-HashMap/#returns_2",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#apply",
            "text": "[Source]  Gets a value from the map. Raises an error if no such item exists.  fun box apply(\n  key: box->K!)\n: this->V ?",
            "title": "apply"
        },
        {
            "location": "/collections-HashMap/#parameters_1",
            "text": "key: box->K!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_3",
            "text": "this->V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#update",
            "text": "[Source]  Sets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.  fun ref update(\n  key: K,\n  value: V)\n: (V^ | None val)",
            "title": "update"
        },
        {
            "location": "/collections-HashMap/#parameters_2",
            "text": "key: K  value: V",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_4",
            "text": "(V^ |  None  val)",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#upsert",
            "text": "[Source]  Combines a provided value with the current value for the provided key\nusing the provided function. If the provided key has not been added to\nthe map yet, it sets its value to the provided value.  As a simple example, say we had a map with I64 values and we wanted to\nadd 4 to the current value for key \"test\", which let's say is currently 2.\nWe call  m.upsert(\"test\", 4, {(x, y) => x - y })  This changes the value associated with \"test\" to -2.  If we have not yet added the key \"new-key\" to the map and we call  m.upsert(\"new-key\", 4, {(x, y) => x - y })  then \"new-key\" is added to the map with a value of -4.  Returns the value that we set the key to  fun ref upsert(\n  key: K,\n  value: V,\n  f: {(V, V): V^}[K, V, H] box)\n: V ?",
            "title": "upsert"
        },
        {
            "location": "/collections-HashMap/#parameters_3",
            "text": "key: K  value: V  f: {(V, V): V^}[K, V, H] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_5",
            "text": "V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#insert",
            "text": "[Source]  Set a value in the map. Returns the new value, allowing reuse.  fun ref insert(\n  key: K,\n  value: V)\n: V ?",
            "title": "insert"
        },
        {
            "location": "/collections-HashMap/#parameters_4",
            "text": "key: K  value: V",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_6",
            "text": "V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#insert_if_absent",
            "text": "[Source]  Set a value in the map if the key doesn't already exist in the Map.\nSaves an extra lookup when doing a pattern like:  if not my_map.contains(my_key) then\n  my_map(my_key) = my_value\nend  Returns the value, the same as  insert , allowing 'insert_if_absent'\nto be used as a drop-in replacement for  insert .  fun ref insert_if_absent(\n  key: K,\n  value: V)\n: V ?",
            "title": "insert_if_absent"
        },
        {
            "location": "/collections-HashMap/#parameters_5",
            "text": "key: K  value: V",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_7",
            "text": "V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#remove",
            "text": "[Source]  Delete a value from the map and return it. Raises an error if there was no\nvalue for the given key.  fun ref remove(\n  key: box->K!)\n: (K^ , V^) ?",
            "title": "remove"
        },
        {
            "location": "/collections-HashMap/#parameters_6",
            "text": "key: box->K!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_8",
            "text": "(K^ , V^) ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#get_or_else",
            "text": "[Source]  Get the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.  fun box get_or_else(\n  key: box->K!,\n  alt: this->V)\n: this->V",
            "title": "get_or_else"
        },
        {
            "location": "/collections-HashMap/#parameters_7",
            "text": "key: box->K!  alt: this->V",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_9",
            "text": "this->V",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#contains",
            "text": "[Source]  Checks whether the map contains the key k  fun box contains(\n  k: box->K!)\n: Bool val",
            "title": "contains"
        },
        {
            "location": "/collections-HashMap/#parameters_8",
            "text": "k: box->K!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#concat",
            "text": "[Source]  Add K, V pairs from the iterator to the map.  fun ref concat(\n  iter: Iterator[(K^ , V^)] ref)\n: None val",
            "title": "concat"
        },
        {
            "location": "/collections-HashMap/#parameters_9",
            "text": "iter:  Iterator [(K^ , V^)] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#add91optional-h2-hashfunction91this-k93-val93",
            "text": "[Source]  This with the new (key, value) mapping.  fun box add[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2] ref^",
            "title": "add[optional H2: HashFunction[this-&gt;K!] val]"
        },
        {
            "location": "/collections-HashMap/#parameters_10",
            "text": "key: this->K!  value: this->V!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_12",
            "text": "HashMap [this->K!, this->V!, H2] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#sub91optional-h2-hashfunction91this-k93-val93",
            "text": "[Source]  This without the given key.  fun box sub[optional H2: HashFunction[this->K!] val](\n  key: this->K!,\n  value: this->V!)\n: HashMap[this->K!, this->V!, H2] ref^",
            "title": "sub[optional H2: HashFunction[this-&gt;K!] val]"
        },
        {
            "location": "/collections-HashMap/#parameters_11",
            "text": "key: this->K!  value: this->V!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_13",
            "text": "HashMap [this->K!, this->V!, H2] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#next_index",
            "text": "[Source]  Given an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.  fun box next_index(\n  prev: USize val = seq)\n: USize val ?",
            "title": "next_index"
        },
        {
            "location": "/collections-HashMap/#parameters_12",
            "text": "prev:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_14",
            "text": "USize  val ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#index",
            "text": "[Source]  Returns the key and value at a given index.\nRaise an error if the index is not populated.  fun box index(\n  i: USize val)\n: (this->K , this->V) ?",
            "title": "index"
        },
        {
            "location": "/collections-HashMap/#parameters_13",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashMap/#returns_15",
            "text": "(this->K , this->V) ?",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#compact",
            "text": "[Source]  Minimise the memory used for the map.  fun ref compact()\n: None val",
            "title": "compact"
        },
        {
            "location": "/collections-HashMap/#returns_16",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#clone91optional-h2-hashfunction91this-k93-val93",
            "text": "[Source]  Create a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.  fun box clone[optional H2: HashFunction[this->K!] val]()\n: HashMap[this->K!, this->V!, H2] ref^",
            "title": "clone[optional H2: HashFunction[this-&gt;K!] val]"
        },
        {
            "location": "/collections-HashMap/#returns_17",
            "text": "HashMap [this->K!, this->V!, H2] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#clear",
            "text": "[Source]  Remove all entries.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/collections-HashMap/#returns_18",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#keys",
            "text": "[Source]  Return an iterator over the keys.  fun box keys()\n: MapKeys[K, V, H, this->HashMap[K, V, H] ref] ref^",
            "title": "keys"
        },
        {
            "location": "/collections-HashMap/#returns_19",
            "text": "MapKeys [K, V, H, this-> HashMap [K, V, H] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#values",
            "text": "[Source]  Return an iterator over the values.  fun box values()\n: MapValues[K, V, H, this->HashMap[K, V, H] ref] ref^",
            "title": "values"
        },
        {
            "location": "/collections-HashMap/#returns_20",
            "text": "MapValues [K, V, H, this-> HashMap [K, V, H] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashMap/#pairs",
            "text": "[Source]  Return an iterator over the keys and values.  fun box pairs()\n: MapPairs[K, V, H, this->HashMap[K, V, H] ref] ref^",
            "title": "pairs"
        },
        {
            "location": "/collections-HashMap/#returns_21",
            "text": "MapPairs [K, V, H, this-> HashMap [K, V, H] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-MapKeys/",
            "text": "MapKeys[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H] #read]\n\u00b6\n\n\n[Source]\n\n\nAn iterator over the keys in a map.\n\n\nclass ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->K] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[M->K] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreates an iterator for the given map.\n\n\nnew ref create(\n  map: M)\n: MapKeys[K, V, H, M] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmap: M\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapKeys\n[K, V, H, M] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nReturns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.\n\n\nfun ref next()\n: M->K ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nM->K ?",
            "title": "class MapKeys"
        },
        {
            "location": "/collections-MapKeys/#mapkeys91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93",
            "text": "[Source]  An iterator over the keys in a map.  class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->K] ref",
            "title": "MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"
        },
        {
            "location": "/collections-MapKeys/#implements",
            "text": "Iterator [M->K] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-MapKeys/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapKeys/#create",
            "text": "[Source]  Creates an iterator for the given map.  new ref create(\n  map: M)\n: MapKeys[K, V, H, M] ref^",
            "title": "create"
        },
        {
            "location": "/collections-MapKeys/#parameters",
            "text": "map: M",
            "title": "Parameters"
        },
        {
            "location": "/collections-MapKeys/#returns",
            "text": "MapKeys [K, V, H, M] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-MapKeys/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-MapKeys/#has_next",
            "text": "[Source]  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-MapKeys/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-MapKeys/#next",
            "text": "[Source]  Returns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.  fun ref next()\n: M->K ?",
            "title": "next"
        },
        {
            "location": "/collections-MapKeys/#returns_2",
            "text": "M->K ?",
            "title": "Returns"
        },
        {
            "location": "/collections-MapValues/",
            "text": "MapValues[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H] #read]\n\u00b6\n\n\n[Source]\n\n\nAn iterator over the values in a map.\n\n\nclass ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->V] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[M->V] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreates an iterator for the given map.\n\n\nnew ref create(\n  map: M)\n: MapValues[K, V, H, M] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmap: M\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapValues\n[K, V, H, M] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.\n\n\nfun ref next()\n: M->V ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nM->V ?",
            "title": "class MapValues"
        },
        {
            "location": "/collections-MapValues/#mapvalues91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93",
            "text": "[Source]  An iterator over the values in a map.  class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->V] ref",
            "title": "MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"
        },
        {
            "location": "/collections-MapValues/#implements",
            "text": "Iterator [M->V] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-MapValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapValues/#create",
            "text": "[Source]  Creates an iterator for the given map.  new ref create(\n  map: M)\n: MapValues[K, V, H, M] ref^",
            "title": "create"
        },
        {
            "location": "/collections-MapValues/#parameters",
            "text": "map: M",
            "title": "Parameters"
        },
        {
            "location": "/collections-MapValues/#returns",
            "text": "MapValues [K, V, H, M] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-MapValues/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-MapValues/#has_next",
            "text": "[Source]  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-MapValues/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-MapValues/#next",
            "text": "[Source]  Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.  fun ref next()\n: M->V ?",
            "title": "next"
        },
        {
            "location": "/collections-MapValues/#returns_2",
            "text": "M->V ?",
            "title": "Returns"
        },
        {
            "location": "/collections-MapPairs/",
            "text": "MapPairs[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H] #read]\n\u00b6\n\n\n[Source]\n\n\nAn iterator over the keys and values in a map.\n\n\nclass ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[(M->K , M->V)] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[(M->K , M->V)] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreates an iterator for the given map.\n\n\nnew ref create(\n  map: M)\n: MapPairs[K, V, H, M] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmap: M\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nMapPairs\n[K, V, H, M] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nReturns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.\n\n\nfun ref next()\n: (M->K , M->V) ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(M->K , M->V) ?",
            "title": "class MapPairs"
        },
        {
            "location": "/collections-MapPairs/#mappairs91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93",
            "text": "[Source]  An iterator over the keys and values in a map.  class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[(M->K , M->V)] ref",
            "title": "MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"
        },
        {
            "location": "/collections-MapPairs/#implements",
            "text": "Iterator [(M->K , M->V)] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-MapPairs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapPairs/#create",
            "text": "[Source]  Creates an iterator for the given map.  new ref create(\n  map: M)\n: MapPairs[K, V, H, M] ref^",
            "title": "create"
        },
        {
            "location": "/collections-MapPairs/#parameters",
            "text": "map: M",
            "title": "Parameters"
        },
        {
            "location": "/collections-MapPairs/#returns",
            "text": "MapPairs [K, V, H, M] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-MapPairs/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-MapPairs/#has_next",
            "text": "[Source]  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-MapPairs/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-MapPairs/#next",
            "text": "[Source]  Returns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.  fun ref next()\n: (M->K , M->V) ?",
            "title": "next"
        },
        {
            "location": "/collections-MapPairs/#returns_2",
            "text": "(M->K , M->V) ?",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/",
            "text": "ListNode[A: A]\n\u00b6\n\n\n[Source]\n\n\nA node in a list.\n\n\nclass ref ListNode[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a node. Initially, it is not in any list.\n\n\nnew ref create(\n  item: (A | None val) = seq)\n: ListNode[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nitem: (A | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListNode\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturn the item, if we have one, otherwise raise an error.\n\n\nfun box apply()\n: this->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nReplace the item and return the previous one. Raise an error if we have no\nprevious value.\n\n\nfun ref update(\n  value: (A | None val))\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: (A | \nNone\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\npop\n\u00b6\n\n\n[Source]\n\n\nRemove the item from the node, if we have one, otherwise raise an error.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nprepend\n\u00b6\n\n\n[Source]\n\n\nPrepend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is prepended. Returns true if \nthat\n was removed from another\nlist.\n\n\nfun ref prepend(\n  that: ListNode[A] ref)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nListNode\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nappend\n\u00b6\n\n\n[Source]\n\n\nAppend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is appended. Returns true if \nthat\n was removed from another\nlist.\n\n\nfun ref append(\n  that: ListNode[A] ref)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nListNode\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove a node from a list.\n\n\nfun ref remove()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhas_prev\n\u00b6\n\n\n[Source]\n\n\nReturn true if there is a previous node.\n\n\nfun box has_prev()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nReturn true if there is a next node.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nprev\n\u00b6\n\n\n[Source]\n\n\nReturn the previous node.\n\n\nfun box prev()\n: (this->ListNode[A] ref | None val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(this->\nListNode\n[A] ref | \nNone\n val)\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nReturn the next node.\n\n\nfun box next()\n: (this->ListNode[A] ref | None val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(this->\nListNode\n[A] ref | \nNone\n val)",
            "title": "class ListNode"
        },
        {
            "location": "/collections-ListNode/#listnode91a-a93",
            "text": "[Source]  A node in a list.  class ref ListNode[A: A]",
            "title": "ListNode[A: A]"
        },
        {
            "location": "/collections-ListNode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListNode/#create",
            "text": "[Source]  Create a node. Initially, it is not in any list.  new ref create(\n  item: (A | None val) = seq)\n: ListNode[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-ListNode/#parameters",
            "text": "item: (A |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListNode/#returns",
            "text": "ListNode [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-ListNode/#apply",
            "text": "[Source]  Return the item, if we have one, otherwise raise an error.  fun box apply()\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-ListNode/#returns_1",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#update",
            "text": "[Source]  Replace the item and return the previous one. Raise an error if we have no\nprevious value.  fun ref update(\n  value: (A | None val))\n: A^ ?",
            "title": "update"
        },
        {
            "location": "/collections-ListNode/#parameters_1",
            "text": "value: (A |  None  val)",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListNode/#returns_2",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#pop",
            "text": "[Source]  Remove the item from the node, if we have one, otherwise raise an error.  fun ref pop()\n: A^ ?",
            "title": "pop"
        },
        {
            "location": "/collections-ListNode/#returns_3",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#prepend",
            "text": "[Source]  Prepend a node to this one. If  that  is already in a list, it is removed\nbefore it is prepended. Returns true if  that  was removed from another\nlist.  fun ref prepend(\n  that: ListNode[A] ref)\n: Bool val",
            "title": "prepend"
        },
        {
            "location": "/collections-ListNode/#parameters_2",
            "text": "that:  ListNode [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListNode/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#append",
            "text": "[Source]  Append a node to this one. If  that  is already in a list, it is removed\nbefore it is appended. Returns true if  that  was removed from another\nlist.  fun ref append(\n  that: ListNode[A] ref)\n: Bool val",
            "title": "append"
        },
        {
            "location": "/collections-ListNode/#parameters_3",
            "text": "that:  ListNode [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListNode/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#remove",
            "text": "[Source]  Remove a node from a list.  fun ref remove()\n: None val",
            "title": "remove"
        },
        {
            "location": "/collections-ListNode/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#has_prev",
            "text": "[Source]  Return true if there is a previous node.  fun box has_prev()\n: Bool val",
            "title": "has_prev"
        },
        {
            "location": "/collections-ListNode/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#has_next",
            "text": "[Source]  Return true if there is a next node.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-ListNode/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#prev",
            "text": "[Source]  Return the previous node.  fun box prev()\n: (this->ListNode[A] ref | None val)",
            "title": "prev"
        },
        {
            "location": "/collections-ListNode/#returns_9",
            "text": "(this-> ListNode [A] ref |  None  val)",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNode/#next",
            "text": "[Source]  Return the next node.  fun box next()\n: (this->ListNode[A] ref | None val)",
            "title": "next"
        },
        {
            "location": "/collections-ListNode/#returns_10",
            "text": "(this-> ListNode [A] ref |  None  val)",
            "title": "Returns"
        },
        {
            "location": "/collections-List/",
            "text": "List[A: A]\n\u00b6\n\n\n[Source]\n\n\nA doubly linked list.\n\n\nclass ref List[A: A] is\n  Seq[A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nSeq\n[A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nDo nothing, but be compatible with Seq.\n\n\nnew ref create(\n  len: USize val = seq)\n: List[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nunit\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list from an element.\n\n\nnew ref unit(\n  a: A)\n: List[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nfrom\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list from the sequence passed in.\n\n\nnew ref from(\n  seq: Array[A^] ref)\n: List[A] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseq: \nArray\n[A^] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nreserve\n\u00b6\n\n\n[Source]\n\n\nDo nothing, but be compatible with Seq.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturns the number of items in the list.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val = seq)\n: this->A ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->A ?\n\n\n\n\n\n\nupdate\n\u00b6\n\n\n[Source]\n\n\nChange the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nindex\n\u00b6\n\n\n[Source]\n\n\nGets the i-th node, raising an error if the index is out of bounds.\n\n\nfun box index(\n  i: USize val)\n: this->ListNode[A] ref ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->\nListNode\n[A] ref ?\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove the i-th node, raising an error if the index is out of bounds.\nThe removed node is returned.\n\n\nfun ref remove(\n  i: USize val)\n: ListNode[A] ref ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListNode\n[A] ref ?\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nEmpties the list.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhead\n\u00b6\n\n\n[Source]\n\n\nGet the head of the list.\n\n\nfun box head()\n: this->ListNode[A] ref ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->\nListNode\n[A] ref ?\n\n\n\n\n\n\ntail\n\u00b6\n\n\n[Source]\n\n\nGet the tail of the list.\n\n\nfun box tail()\n: this->ListNode[A] ref ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nthis->\nListNode\n[A] ref ?\n\n\n\n\n\n\nprepend_node\n\u00b6\n\n\n[Source]\n\n\nAdds a node to the head of the list.\n\n\nfun ref prepend_node(\n  node: ListNode[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnode: \nListNode\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nappend_node\n\u00b6\n\n\n[Source]\n\n\nAdds a node to the tail of the list.\n\n\nfun ref append_node(\n  node: ListNode[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnode: \nListNode\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nappend_list\n\u00b6\n\n\n[Source]\n\n\nRemove all nodes from that and append them to this.\n\n\nfun ref append_list(\n  that: List[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nList\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nprepend_list\n\u00b6\n\n\n[Source]\n\n\nRemove all nodes from that and prepend them to this.\n\n\nfun ref prepend_list(\n  that: List[A] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nList\n[A] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\u00b6\n\n\n[Source]\n\n\nAdds a value to the tail of the list.\n\n\nfun ref push(\n  a: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\u00b6\n\n\n[Source]\n\n\nRemoves a value from the tail of the list.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\u00b6\n\n\n[Source]\n\n\nAdds a value to the head of the list.\n\n\nfun ref unshift(\n  a: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\u00b6\n\n\n[Source]\n\n\nRemoves a value from the head of the list.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\u00b6\n\n\n[Source]\n\n\nAppend len elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseq: (\nReadSeq\n[A] box & \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\u00b6\n\n\n[Source]\n\n\nAdd len iterated elements to the end of the list, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\u00b6\n\n\n[Source]\n\n\nTruncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclone\n\u00b6\n\n\n[Source]\n\n\nClone the list.\n\n\nfun box clone()\n: List[this->A!] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\nmap[B: B]\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list by applying a function to every member of the list.\n\n\nfun box map[B: B](\n  f: {(this->A!): B^}[A, B] box)\n: List[B] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): B^}[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\nflat_map[B: B]\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.\n\n\nfun box flat_map[B: B](\n  f: {(this->A!): List[B]}[A, B] box)\n: List[B] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): List[B]}[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\nfilter\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list with those elements that satisfy a provided predicate.\n\n\nfun box filter(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\nfold[B: B]\n\u00b6\n\n\n[Source]\n\n\nFolds the elements of the list using the supplied function.\n\n\nfun box fold[B: B](\n  f: {(B!, this->A!): B^}[A, B] box,\n  acc: B)\n: B\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(B!, this->A!): B^}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nB\n\n\n\n\n\n\nevery\n\u00b6\n\n\n[Source]\n\n\nReturns true if every element satisfies the provided predicate, false\notherwise.\n\n\nfun box every(\n  f: {(this->A!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexists\n\u00b6\n\n\n[Source]\n\n\nReturns true if at least one element satisfies the provided predicate,\nfalse otherwise.\n\n\nfun box exists(\n  f: {(this->A!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\npartition\n\u00b6\n\n\n[Source]\n\n\nBuilds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.\n\n\nfun box partition(\n  f: {(this->A!): Bool}[A] box)\n: (List[this->A!] ref^ , List[this->A!] ref^)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nList\n[this->A!] ref^ , \nList\n[this->A!] ref^)\n\n\n\n\n\n\ndrop\n\u00b6\n\n\n[Source]\n\n\nBuilds a list by dropping the first n elements.\n\n\nfun box drop(\n  n: USize val)\n: List[this->A!] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\ntake\n\u00b6\n\n\n[Source]\n\n\nBuilds a list of the first n elements.\n\n\nfun box take(\n  n: USize val)\n: List[this->A!] ref\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref\n\n\n\n\n\n\ntake_while\n\u00b6\n\n\n[Source]\n\n\nBuilds a list of elements satisfying the provided predicate until one does\nnot.\n\n\nfun box take_while(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nf: {(this->A!): Bool}[A] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\nreverse\n\u00b6\n\n\n[Source]\n\n\nBuilds a new list by reversing the elements in the list.\n\n\nfun box reverse()\n: List[this->A!] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nList\n[this->A!] ref^\n\n\n\n\n\n\ncontains[optional B: (A & \nHasEq\n[A!] #read)]\n\u00b6\n\n\n[Source]\n\n\nReturns true if the list contains the provided element, false otherwise.\n\n\nfun box contains[optional B: (A & HasEq[A!] #read)](\n  a: box->B)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\na: box->B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnodes\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun box nodes()\n: ListNodes[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListNodes\n[A, this->\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nrnodes\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun box rnodes()\n: ListNodes[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListNodes\n[A, this->\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator on the values in the list.\n\n\nfun box values()\n: ListValues[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListValues\n[A, this->\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nrvalues\n\u00b6\n\n\n[Source]\n\n\nReturn an iterator on the values in the list.\n\n\nfun box rvalues()\n: ListValues[A, this->ListNode[A] ref] ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListValues\n[A, this->\nListNode\n[A] ref] ref^",
            "title": "class List"
        },
        {
            "location": "/collections-List/#list91a-a93",
            "text": "[Source]  A doubly linked list.  class ref List[A: A] is\n  Seq[A] ref",
            "title": "List[A: A]"
        },
        {
            "location": "/collections-List/#implements",
            "text": "Seq [A] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-List/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-List/#create",
            "text": "[Source]  Do nothing, but be compatible with Seq.  new ref create(\n  len: USize val = seq)\n: List[A] ref^",
            "title": "create"
        },
        {
            "location": "/collections-List/#parameters",
            "text": "len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns",
            "text": "List [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#unit",
            "text": "[Source]  Builds a new list from an element.  new ref unit(\n  a: A)\n: List[A] ref^",
            "title": "unit"
        },
        {
            "location": "/collections-List/#parameters_1",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_1",
            "text": "List [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#from",
            "text": "[Source]  Builds a new list from the sequence passed in.  new ref from(\n  seq: Array[A^] ref)\n: List[A] ref^",
            "title": "from"
        },
        {
            "location": "/collections-List/#parameters_2",
            "text": "seq:  Array [A^] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_2",
            "text": "List [A] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-List/#reserve",
            "text": "[Source]  Do nothing, but be compatible with Seq.  fun ref reserve(\n  len: USize val)\n: None val",
            "title": "reserve"
        },
        {
            "location": "/collections-List/#parameters_3",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#size",
            "text": "[Source]  Returns the number of items in the list.  fun box size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/collections-List/#returns_4",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#apply",
            "text": "[Source]  Get the i-th element, raising an error if the index is out of bounds.  fun box apply(\n  i: USize val = seq)\n: this->A ?",
            "title": "apply"
        },
        {
            "location": "/collections-List/#parameters_4",
            "text": "i:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_5",
            "text": "this->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#update",
            "text": "[Source]  Change the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?",
            "title": "update"
        },
        {
            "location": "/collections-List/#parameters_5",
            "text": "i:  USize  val  value: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_6",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#index",
            "text": "[Source]  Gets the i-th node, raising an error if the index is out of bounds.  fun box index(\n  i: USize val)\n: this->ListNode[A] ref ?",
            "title": "index"
        },
        {
            "location": "/collections-List/#parameters_6",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_7",
            "text": "this-> ListNode [A] ref ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#remove",
            "text": "[Source]  Remove the i-th node, raising an error if the index is out of bounds.\nThe removed node is returned.  fun ref remove(\n  i: USize val)\n: ListNode[A] ref ?",
            "title": "remove"
        },
        {
            "location": "/collections-List/#parameters_7",
            "text": "i:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_8",
            "text": "ListNode [A] ref ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#clear",
            "text": "[Source]  Empties the list.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/collections-List/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#head",
            "text": "[Source]  Get the head of the list.  fun box head()\n: this->ListNode[A] ref ?",
            "title": "head"
        },
        {
            "location": "/collections-List/#returns_10",
            "text": "this-> ListNode [A] ref ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#tail",
            "text": "[Source]  Get the tail of the list.  fun box tail()\n: this->ListNode[A] ref ?",
            "title": "tail"
        },
        {
            "location": "/collections-List/#returns_11",
            "text": "this-> ListNode [A] ref ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#prepend_node",
            "text": "[Source]  Adds a node to the head of the list.  fun ref prepend_node(\n  node: ListNode[A] ref)\n: None val",
            "title": "prepend_node"
        },
        {
            "location": "/collections-List/#parameters_8",
            "text": "node:  ListNode [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#append_node",
            "text": "[Source]  Adds a node to the tail of the list.  fun ref append_node(\n  node: ListNode[A] ref)\n: None val",
            "title": "append_node"
        },
        {
            "location": "/collections-List/#parameters_9",
            "text": "node:  ListNode [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#append_list",
            "text": "[Source]  Remove all nodes from that and append them to this.  fun ref append_list(\n  that: List[A] ref)\n: None val",
            "title": "append_list"
        },
        {
            "location": "/collections-List/#parameters_10",
            "text": "that:  List [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_14",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#prepend_list",
            "text": "[Source]  Remove all nodes from that and prepend them to this.  fun ref prepend_list(\n  that: List[A] ref)\n: None val",
            "title": "prepend_list"
        },
        {
            "location": "/collections-List/#parameters_11",
            "text": "that:  List [A] ref",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_15",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#push",
            "text": "[Source]  Adds a value to the tail of the list.  fun ref push(\n  a: A)\n: None val",
            "title": "push"
        },
        {
            "location": "/collections-List/#parameters_12",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_16",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#pop",
            "text": "[Source]  Removes a value from the tail of the list.  fun ref pop()\n: A^ ?",
            "title": "pop"
        },
        {
            "location": "/collections-List/#returns_17",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#unshift",
            "text": "[Source]  Adds a value to the head of the list.  fun ref unshift(\n  a: A)\n: None val",
            "title": "unshift"
        },
        {
            "location": "/collections-List/#parameters_13",
            "text": "a: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_18",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#shift",
            "text": "[Source]  Removes a value from the head of the list.  fun ref shift()\n: A^ ?",
            "title": "shift"
        },
        {
            "location": "/collections-List/#returns_19",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#append",
            "text": "[Source]  Append len elements from a sequence, starting from the given offset.  fun ref append(\n  seq: (ReadSeq[A] box & ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "append"
        },
        {
            "location": "/collections-List/#parameters_14",
            "text": "seq: ( ReadSeq [A] box &  ReadElement [A^] box)  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_20",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#concat",
            "text": "[Source]  Add len iterated elements to the end of the list, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val",
            "title": "concat"
        },
        {
            "location": "/collections-List/#parameters_15",
            "text": "iter:  Iterator [A^] ref  offset:  USize  val = seq  len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_21",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#truncate",
            "text": "[Source]  Truncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val",
            "title": "truncate"
        },
        {
            "location": "/collections-List/#parameters_16",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_22",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#clone",
            "text": "[Source]  Clone the list.  fun box clone()\n: List[this->A!] ref^",
            "title": "clone"
        },
        {
            "location": "/collections-List/#returns_23",
            "text": "List [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#map91b-b93",
            "text": "[Source]  Builds a new list by applying a function to every member of the list.  fun box map[B: B](\n  f: {(this->A!): B^}[A, B] box)\n: List[B] ref^",
            "title": "map[B: B]"
        },
        {
            "location": "/collections-List/#parameters_17",
            "text": "f: {(this->A!): B^}[A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_24",
            "text": "List [B] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#flat_map91b-b93",
            "text": "[Source]  Builds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.  fun box flat_map[B: B](\n  f: {(this->A!): List[B]}[A, B] box)\n: List[B] ref^",
            "title": "flat_map[B: B]"
        },
        {
            "location": "/collections-List/#parameters_18",
            "text": "f: {(this->A!): List[B]}[A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_25",
            "text": "List [B] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#filter",
            "text": "[Source]  Builds a new list with those elements that satisfy a provided predicate.  fun box filter(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^",
            "title": "filter"
        },
        {
            "location": "/collections-List/#parameters_19",
            "text": "f: {(this->A!): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_26",
            "text": "List [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#fold91b-b93",
            "text": "[Source]  Folds the elements of the list using the supplied function.  fun box fold[B: B](\n  f: {(B!, this->A!): B^}[A, B] box,\n  acc: B)\n: B",
            "title": "fold[B: B]"
        },
        {
            "location": "/collections-List/#parameters_20",
            "text": "f: {(B!, this->A!): B^}[A, B] box  acc: B",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_27",
            "text": "B",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#every",
            "text": "[Source]  Returns true if every element satisfies the provided predicate, false\notherwise.  fun box every(\n  f: {(this->A!): Bool}[A] box)\n: Bool val",
            "title": "every"
        },
        {
            "location": "/collections-List/#parameters_21",
            "text": "f: {(this->A!): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_28",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#exists",
            "text": "[Source]  Returns true if at least one element satisfies the provided predicate,\nfalse otherwise.  fun box exists(\n  f: {(this->A!): Bool}[A] box)\n: Bool val",
            "title": "exists"
        },
        {
            "location": "/collections-List/#parameters_22",
            "text": "f: {(this->A!): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_29",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#partition",
            "text": "[Source]  Builds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.  fun box partition(\n  f: {(this->A!): Bool}[A] box)\n: (List[this->A!] ref^ , List[this->A!] ref^)",
            "title": "partition"
        },
        {
            "location": "/collections-List/#parameters_23",
            "text": "f: {(this->A!): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_30",
            "text": "( List [this->A!] ref^ ,  List [this->A!] ref^)",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#drop",
            "text": "[Source]  Builds a list by dropping the first n elements.  fun box drop(\n  n: USize val)\n: List[this->A!] ref^",
            "title": "drop"
        },
        {
            "location": "/collections-List/#parameters_24",
            "text": "n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_31",
            "text": "List [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#take",
            "text": "[Source]  Builds a list of the first n elements.  fun box take(\n  n: USize val)\n: List[this->A!] ref",
            "title": "take"
        },
        {
            "location": "/collections-List/#parameters_25",
            "text": "n:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_32",
            "text": "List [this->A!] ref",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#take_while",
            "text": "[Source]  Builds a list of elements satisfying the provided predicate until one does\nnot.  fun box take_while(\n  f: {(this->A!): Bool}[A] box)\n: List[this->A!] ref^",
            "title": "take_while"
        },
        {
            "location": "/collections-List/#parameters_26",
            "text": "f: {(this->A!): Bool}[A] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_33",
            "text": "List [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#reverse",
            "text": "[Source]  Builds a new list by reversing the elements in the list.  fun box reverse()\n: List[this->A!] ref^",
            "title": "reverse"
        },
        {
            "location": "/collections-List/#returns_34",
            "text": "List [this->A!] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#contains91optional-b-a-haseq91a93-read93",
            "text": "[Source]  Returns true if the list contains the provided element, false otherwise.  fun box contains[optional B: (A & HasEq[A!] #read)](\n  a: box->B)\n: Bool val",
            "title": "contains[optional B: (A &amp; HasEq[A!] #read)]"
        },
        {
            "location": "/collections-List/#parameters_27",
            "text": "a: box->B",
            "title": "Parameters"
        },
        {
            "location": "/collections-List/#returns_35",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#nodes",
            "text": "[Source]  Return an iterator on the nodes in the list.  fun box nodes()\n: ListNodes[A, this->ListNode[A] ref] ref^",
            "title": "nodes"
        },
        {
            "location": "/collections-List/#returns_36",
            "text": "ListNodes [A, this-> ListNode [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#rnodes",
            "text": "[Source]  Return an iterator on the nodes in the list.  fun box rnodes()\n: ListNodes[A, this->ListNode[A] ref] ref^",
            "title": "rnodes"
        },
        {
            "location": "/collections-List/#returns_37",
            "text": "ListNodes [A, this-> ListNode [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#values",
            "text": "[Source]  Return an iterator on the values in the list.  fun box values()\n: ListValues[A, this->ListNode[A] ref] ref^",
            "title": "values"
        },
        {
            "location": "/collections-List/#returns_38",
            "text": "ListValues [A, this-> ListNode [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-List/#rvalues",
            "text": "[Source]  Return an iterator on the values in the list.  fun box rvalues()\n: ListValues[A, this->ListNode[A] ref] ref^",
            "title": "rvalues"
        },
        {
            "location": "/collections-List/#returns_39",
            "text": "ListValues [A, this-> ListNode [A] ref] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNodes/",
            "text": "ListNodes[A: A, N: \nListNode\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\nIterate over the nodes in a list.\n\n\nclass ref ListNodes[A: A, N: ListNode[A] #read] is\n  Iterator[N] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[N] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nKeep the next list node to be examined.\n\n\nnew ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListNodes[A, N] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nhead: (N | \nNone\n val)\n\n\nreverse: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListNodes\n[A, N] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nIf we have a list node, we have more values.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nGet the list node and replace it with the next one.\n\n\nfun ref next()\n: N ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nN ?",
            "title": "class ListNodes"
        },
        {
            "location": "/collections-ListNodes/#listnodes91a-a-n-listnode91a93-read93",
            "text": "[Source]  Iterate over the nodes in a list.  class ref ListNodes[A: A, N: ListNode[A] #read] is\n  Iterator[N] ref",
            "title": "ListNodes[A: A, N: ListNode[A] #read]"
        },
        {
            "location": "/collections-ListNodes/#implements",
            "text": "Iterator [N] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-ListNodes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListNodes/#create",
            "text": "[Source]  Keep the next list node to be examined.  new ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListNodes[A, N] ref^",
            "title": "create"
        },
        {
            "location": "/collections-ListNodes/#parameters",
            "text": "head: (N |  None  val)  reverse:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListNodes/#returns",
            "text": "ListNodes [A, N] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNodes/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-ListNodes/#has_next",
            "text": "[Source]  If we have a list node, we have more values.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-ListNodes/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListNodes/#next",
            "text": "[Source]  Get the list node and replace it with the next one.  fun ref next()\n: N ?",
            "title": "next"
        },
        {
            "location": "/collections-ListNodes/#returns_2",
            "text": "N ?",
            "title": "Returns"
        },
        {
            "location": "/collections-ListValues/",
            "text": "ListValues[A: A, N: \nListNode\n[A] #read]\n\u00b6\n\n\n[Source]\n\n\nIterate over the values in a list.\n\n\nclass ref ListValues[A: A, N: ListNode[A] #read] is\n  Iterator[N->A] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[N->A] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nKeep the next list node to be examined.\n\n\nnew ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListValues[A, N] ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nhead: (N | \nNone\n val)\n\n\nreverse: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nListValues\n[A, N] ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nIf we have a list node, we have more values.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nGet the value of the list node and replace it with the next one.\n\n\nfun ref next()\n: N->A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nN->A ?",
            "title": "class ListValues"
        },
        {
            "location": "/collections-ListValues/#listvalues91a-a-n-listnode91a93-read93",
            "text": "[Source]  Iterate over the values in a list.  class ref ListValues[A: A, N: ListNode[A] #read] is\n  Iterator[N->A] ref",
            "title": "ListValues[A: A, N: ListNode[A] #read]"
        },
        {
            "location": "/collections-ListValues/#implements",
            "text": "Iterator [N->A] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-ListValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListValues/#create",
            "text": "[Source]  Keep the next list node to be examined.  new ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListValues[A, N] ref^",
            "title": "create"
        },
        {
            "location": "/collections-ListValues/#parameters",
            "text": "head: (N |  None  val)  reverse:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/collections-ListValues/#returns",
            "text": "ListValues [A, N] ref^",
            "title": "Returns"
        },
        {
            "location": "/collections-ListValues/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-ListValues/#has_next",
            "text": "[Source]  If we have a list node, we have more values.  fun box has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/collections-ListValues/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-ListValues/#next",
            "text": "[Source]  Get the value of the list node and replace it with the next one.  fun ref next()\n: N->A ?",
            "title": "next"
        },
        {
            "location": "/collections-ListValues/#returns_2",
            "text": "N->A ?",
            "title": "Returns"
        },
        {
            "location": "/collections-Hashable/",
            "text": "Hashable\n\u00b6\n\n\n[Source]\n\n\nAnything with a hash method is hashable.\n\n\ninterface ref Hashable\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val",
            "title": "interface Hashable"
        },
        {
            "location": "/collections-Hashable/#hashable",
            "text": "[Source]  Anything with a hash method is hashable.  interface ref Hashable",
            "title": "Hashable"
        },
        {
            "location": "/collections-Hashable/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Hashable/#hash",
            "text": "[Source]  fun box hash()\n: USize val",
            "title": "hash"
        },
        {
            "location": "/collections-Hashable/#returns",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Hashable64/",
            "text": "Hashable64\n\u00b6\n\n\n[Source]\n\n\nA version of Hashable that returns 64-bit hashes on every platform.\n\n\ninterface ref Hashable64\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val",
            "title": "interface Hashable64"
        },
        {
            "location": "/collections-Hashable64/#hashable64",
            "text": "[Source]  A version of Hashable that returns 64-bit hashes on every platform.  interface ref Hashable64",
            "title": "Hashable64"
        },
        {
            "location": "/collections-Hashable64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Hashable64/#hash64",
            "text": "[Source]  fun box hash64()\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/collections-Hashable64/#returns",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction/",
            "text": "HashFunction[A: A]\n\u00b6\n\n\n[Source]\n\n\nA pluggable hash function.\n\n\ninterface val HashFunction[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nData structures create instances internally. Use a primitive if possible.\n\n\nnew val create()\n: HashFunction[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashFunction\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nCalculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.\n\n\nfun box hash(\n  x: box->A!)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nDetermine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.\n\n\nfun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\ny: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "interface HashFunction"
        },
        {
            "location": "/collections-HashFunction/#hashfunction91a-a93",
            "text": "[Source]  A pluggable hash function.  interface val HashFunction[A: A]",
            "title": "HashFunction[A: A]"
        },
        {
            "location": "/collections-HashFunction/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashFunction/#create",
            "text": "[Source]  Data structures create instances internally. Use a primitive if possible.  new val create()\n: HashFunction[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-HashFunction/#returns",
            "text": "HashFunction [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashFunction/#hash",
            "text": "[Source]  Calculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.  fun box hash(\n  x: box->A!)\n: USize val",
            "title": "hash"
        },
        {
            "location": "/collections-HashFunction/#parameters",
            "text": "x: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashFunction/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction/#eq",
            "text": "[Source]  Determine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.  fun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashFunction/#parameters_1",
            "text": "x: box->A!  y: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashFunction/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction64/",
            "text": "HashFunction64[A: A]\n\u00b6\n\n\n[Source]\n\n\nA pluggable hash function with 64-bit hashes.\n\n\ninterface val HashFunction64[A: A]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nData structures create instances internally. Use a primitive if possible.\n\n\nnew val create()\n: HashFunction64[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashFunction64\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nCalculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.\n\n\nfun box hash64(\n  x: box->A!)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nDetermine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.\n\n\nfun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\ny: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "interface HashFunction64"
        },
        {
            "location": "/collections-HashFunction64/#hashfunction6491a-a93",
            "text": "[Source]  A pluggable hash function with 64-bit hashes.  interface val HashFunction64[A: A]",
            "title": "HashFunction64[A: A]"
        },
        {
            "location": "/collections-HashFunction64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashFunction64/#create",
            "text": "[Source]  Data structures create instances internally. Use a primitive if possible.  new val create()\n: HashFunction64[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-HashFunction64/#returns",
            "text": "HashFunction64 [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashFunction64/#hash64",
            "text": "[Source]  Calculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.  fun box hash64(\n  x: box->A!)\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/collections-HashFunction64/#parameters",
            "text": "x: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashFunction64/#returns_1",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashFunction64/#eq",
            "text": "[Source]  Determine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.  fun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashFunction64/#parameters_1",
            "text": "x: box->A!  y: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashFunction64/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq/",
            "text": "HashEq[A: (\nHashable\n #read & \nEquatable\n[A] #read)]\n\u00b6\n\n\n[Source]\n\n\nprimitive val HashEq[A: (Hashable #read & Equatable[A] #read)] is\n  HashFunction[A] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nHashFunction\n[A] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: HashEq[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashEq\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nUse the hash function from the type parameter.\n\n\nfun box hash(\n  x: box->A)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nUse the structural equality function from the type parameter.\n\n\nfun box eq(\n  x: box->A,\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: HashEq[A] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashEq\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive HashEq"
        },
        {
            "location": "/collections-HashEq/#hasheq91a-hashable-read-equatable91a93-read93",
            "text": "[Source]  primitive val HashEq[A: (Hashable #read & Equatable[A] #read)] is\n  HashFunction[A] val",
            "title": "HashEq[A: (Hashable #read &amp; Equatable[A] #read)]"
        },
        {
            "location": "/collections-HashEq/#implements",
            "text": "HashFunction [A] val",
            "title": "Implements"
        },
        {
            "location": "/collections-HashEq/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashEq/#create",
            "text": "[Source]  new val create()\n: HashEq[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-HashEq/#returns",
            "text": "HashEq [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashEq/#hash",
            "text": "[Source]  Use the hash function from the type parameter.  fun box hash(\n  x: box->A)\n: USize val",
            "title": "hash"
        },
        {
            "location": "/collections-HashEq/#parameters",
            "text": "x: box->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq/#eq",
            "text": "[Source]  Use the structural equality function from the type parameter.  fun box eq(\n  x: box->A,\n  y: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashEq/#parameters_1",
            "text": "x: box->A  y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq/#ne",
            "text": "[Source]  fun box ne(\n  that: HashEq[A] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-HashEq/#parameters_2",
            "text": "that:  HashEq [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq64/",
            "text": "HashEq64[A: (\nHashable64\n #read & \nEquatable\n[A] #read)]\n\u00b6\n\n\n[Source]\n\n\nprimitive val HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is\n  HashFunction64[A] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nHashFunction64\n[A] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: HashEq64[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashEq64\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nUse the hash function from the type parameter.\n\n\nfun box hash64(\n  x: box->A)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nUse the structural equality function from the type parameter.\n\n\nfun box eq(\n  x: box->A,\n  y: box->A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A\n\n\ny: box->A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: HashEq64[A] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashEq64\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive HashEq64"
        },
        {
            "location": "/collections-HashEq64/#hasheq6491a-hashable64-read-equatable91a93-read93",
            "text": "[Source]  primitive val HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is\n  HashFunction64[A] val",
            "title": "HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)]"
        },
        {
            "location": "/collections-HashEq64/#implements",
            "text": "HashFunction64 [A] val",
            "title": "Implements"
        },
        {
            "location": "/collections-HashEq64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashEq64/#create",
            "text": "[Source]  new val create()\n: HashEq64[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-HashEq64/#returns",
            "text": "HashEq64 [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashEq64/#hash64",
            "text": "[Source]  Use the hash function from the type parameter.  fun box hash64(\n  x: box->A)\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/collections-HashEq64/#parameters",
            "text": "x: box->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq64/#returns_1",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq64/#eq",
            "text": "[Source]  Use the structural equality function from the type parameter.  fun box eq(\n  x: box->A,\n  y: box->A)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashEq64/#parameters_1",
            "text": "x: box->A  y: box->A",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq64/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashEq64/#ne",
            "text": "[Source]  fun box ne(\n  that: HashEq64[A] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-HashEq64/#parameters_2",
            "text": "that:  HashEq64 [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashEq64/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashIs/",
            "text": "HashIs[A: A]\n\u00b6\n\n\n[Source]\n\n\nprimitive val HashIs[A: A] is\n  HashFunction[A] val,\n  HashFunction64[A] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nHashFunction\n[A] val\n\n\nHashFunction64\n[A] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: HashIs[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashIs\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nHash the identity rather than the contents.\n\n\nfun box hash(\n  x: box->A!)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nHash the identity rather than the contents.\n\n\nfun box hash64(\n  x: box->A!)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nDetermine equality by identity rather than structurally.\n\n\nfun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: box->A!\n\n\ny: box->A!\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: HashIs[A] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashIs\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive HashIs"
        },
        {
            "location": "/collections-HashIs/#hashis91a-a93",
            "text": "[Source]  primitive val HashIs[A: A] is\n  HashFunction[A] val,\n  HashFunction64[A] val",
            "title": "HashIs[A: A]"
        },
        {
            "location": "/collections-HashIs/#implements",
            "text": "HashFunction [A] val  HashFunction64 [A] val",
            "title": "Implements"
        },
        {
            "location": "/collections-HashIs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashIs/#create",
            "text": "[Source]  new val create()\n: HashIs[A] val^",
            "title": "create"
        },
        {
            "location": "/collections-HashIs/#returns",
            "text": "HashIs [A] val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashIs/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashIs/#hash",
            "text": "[Source]  Hash the identity rather than the contents.  fun box hash(\n  x: box->A!)\n: USize val",
            "title": "hash"
        },
        {
            "location": "/collections-HashIs/#parameters",
            "text": "x: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashIs/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashIs/#hash64",
            "text": "[Source]  Hash the identity rather than the contents.  fun box hash64(\n  x: box->A!)\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/collections-HashIs/#parameters_1",
            "text": "x: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashIs/#returns_2",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashIs/#eq",
            "text": "[Source]  Determine equality by identity rather than structurally.  fun box eq(\n  x: box->A!,\n  y: box->A!)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashIs/#parameters_2",
            "text": "x: box->A!  y: box->A!",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashIs/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashIs/#ne",
            "text": "[Source]  fun box ne(\n  that: HashIs[A] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-HashIs/#parameters_3",
            "text": "that:  HashIs [A] val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashIs/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashByteSeq/",
            "text": "HashByteSeq\n\u00b6\n\n\n[Source]\n\n\nHash and equality functions for arbitrary ByteSeq.\n\n\nprimitive val HashByteSeq is\n  HashFunction[(String box | Array[U8 val] box)] val,\n  HashFunction64[(String box | Array[U8 val] box)] val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nHashFunction\n[(\nString\n box | \nArray\n[\nU8\n val] box)] val\n\n\nHashFunction64\n[(\nString\n box | \nArray\n[\nU8\n val] box)] val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: HashByteSeq val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nHashByteSeq\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhash\n\u00b6\n\n\n[Source]\n\n\nfun box hash(\n  x: (String box | Array[U8 val] box))\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nhash64\n\u00b6\n\n\n[Source]\n\n\nfun box hash64(\n  x: (String box | Array[U8 val] box))\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  x: (String box | Array[U8 val] box),\n  y: (String box | Array[U8 val] box))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\ny: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: HashByteSeq val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nHashByteSeq\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive HashByteSeq"
        },
        {
            "location": "/collections-HashByteSeq/#hashbyteseq",
            "text": "[Source]  Hash and equality functions for arbitrary ByteSeq.  primitive val HashByteSeq is\n  HashFunction[(String box | Array[U8 val] box)] val,\n  HashFunction64[(String box | Array[U8 val] box)] val",
            "title": "HashByteSeq"
        },
        {
            "location": "/collections-HashByteSeq/#implements",
            "text": "HashFunction [( String  box |  Array [ U8  val] box)] val  HashFunction64 [( String  box |  Array [ U8  val] box)] val",
            "title": "Implements"
        },
        {
            "location": "/collections-HashByteSeq/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashByteSeq/#create",
            "text": "[Source]  new val create()\n: HashByteSeq val^",
            "title": "create"
        },
        {
            "location": "/collections-HashByteSeq/#returns",
            "text": "HashByteSeq  val^",
            "title": "Returns"
        },
        {
            "location": "/collections-HashByteSeq/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-HashByteSeq/#hash",
            "text": "[Source]  fun box hash(\n  x: (String box | Array[U8 val] box))\n: USize val",
            "title": "hash"
        },
        {
            "location": "/collections-HashByteSeq/#parameters",
            "text": "x: ( String  box |  Array [ U8  val] box)",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashByteSeq/#returns_1",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashByteSeq/#hash64",
            "text": "[Source]  fun box hash64(\n  x: (String box | Array[U8 val] box))\n: U64 val",
            "title": "hash64"
        },
        {
            "location": "/collections-HashByteSeq/#parameters_1",
            "text": "x: ( String  box |  Array [ U8  val] box)",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashByteSeq/#returns_2",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashByteSeq/#eq",
            "text": "[Source]  fun box eq(\n  x: (String box | Array[U8 val] box),\n  y: (String box | Array[U8 val] box))\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-HashByteSeq/#parameters_2",
            "text": "x: ( String  box |  Array [ U8  val] box)  y: ( String  box |  Array [ U8  val] box)",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashByteSeq/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-HashByteSeq/#ne",
            "text": "[Source]  fun box ne(\n  that: HashByteSeq val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-HashByteSeq/#parameters_3",
            "text": "that:  HashByteSeq  val",
            "title": "Parameters"
        },
        {
            "location": "/collections-HashByteSeq/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flag/",
            "text": "Flag[A: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) & \nInteger\n[A] val)]\n\u00b6\n\n\n[Source]\n\n\nA flag should be a primitive with a value method that returns the bits that\nrepresent the flag. This allows a flag to encode a single bit, or any\ncombination of bits.\n\n\ninterface val Flag[A: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[A] val)]\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA",
            "title": "interface Flag"
        },
        {
            "location": "/collections-Flag/#flag91a-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93",
            "text": "[Source]  A flag should be a primitive with a value method that returns the bits that\nrepresent the flag. This allows a flag to encode a single bit, or any\ncombination of bits.  interface val Flag[A: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[A] val)]",
            "title": "Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"
        },
        {
            "location": "/collections-Flag/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Flag/#value",
            "text": "[Source]  fun box value()\n: A",
            "title": "value"
        },
        {
            "location": "/collections-Flag/#returns",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/",
            "text": "Flags[A: \nFlag\n[B] val, optional B: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) & \nInteger\n[B] val)]\n\u00b6\n\n\n[Source]\n\n\nFlags is a set of flags. The flags that are recognised should be passed as\na union type for type parameter A. For example:\n\n\nprimitive SSE\n  fun value(): U64 => 1\n\n\nprimitive AVX\n  fun value(): U64 => 2\n\n\nprimitive RDTSCP\n  fun value(): U64 => 4\n\n\ntype Features is Flags[(SSE | AVX | RDTSCP)]\n\n\nType parameter B is the unlying field used to store the flags.\n\n\nclass ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[B] val)] is\n  Comparable[Flags[A, B] box] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nComparable\n[\nFlags\n[A, B] box] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create()\n: Flags[A, B] iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nReturns the bit encoding of the set flags.\n\n\nfun box value()\n: B\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nB\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flag is set.\n\n\nfun box apply(\n  flag: A)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nall\n\u00b6\n\n\n[Source]\n\n\nSets all bits, including undefined flags.\n\n\nfun ref all()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nUnsets all flags.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset\n\u00b6\n\n\n[Source]\n\n\nSets the flag.\n\n\nfun ref set(\n  flag: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunset\n\u00b6\n\n\n[Source]\n\n\nUnsets the flag.\n\n\nfun ref unset(\n  flag: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nflip\n\u00b6\n\n\n[Source]\n\n\nSets the flag if it is unset, unsets the flag if it is set.\n\n\nfun ref flip(\n  flag: A)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunion\n\u00b6\n\n\n[Source]\n\n\nThe union of this and that.\n\n\nfun ref union(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nintersect\n\u00b6\n\n\n[Source]\n\n\nThe intersection of this and that.\n\n\nfun ref intersect(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndifference\n\u00b6\n\n\n[Source]\n\n\nThe symmetric difference of this and that.\n\n\nfun ref difference(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nUnset flags that are set in that.\n\n\nfun ref remove(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd\n\u00b6\n\n\n[Source]\n\n\nThis with the flag set.\n\n\nfun box add(\n  flag: A)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nsub\n\u00b6\n\n\n[Source]\n\n\nThis with the flag unset.\n\n\nfun box sub(\n  flag: A)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nop_or\n\u00b6\n\n\n[Source]\n\n\nThe union of this and that.\n\n\nfun box op_or(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nop_and\n\u00b6\n\n\n[Source]\n\n\nThe intersection of this and that.\n\n\nfun box op_and(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nop_xor\n\u00b6\n\n\n[Source]\n\n\nThe symmetric difference of this and that.\n\n\nfun box op_xor(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nwithout\n\u00b6\n\n\n[Source]\n\n\nThe flags in this that are not in that.\n\n\nfun box without(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nclone\n\u00b6\n\n\n[Source]\n\n\nCreate a clone.\n\n\nfun box clone()\n: Flags[A, B] iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nReturns true if this has the same flags set as that.\n\n\nfun box eq(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.\n\n\nfun box lt(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.\n\n\nfun box le(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.\n\n\nfun box gt(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\u00b6\n\n\n[Source]\n\n\nReturns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.\n\n\nfun box ge(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncompare\n\u00b6\n\n\n[Source]\n\n\nfun box compare(\n  that: Flags[A, B] box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "class Flags"
        },
        {
            "location": "/collections-Flags/#flags91a-flag91b93-val-optional-b-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91b93-val93",
            "text": "[Source]  Flags is a set of flags. The flags that are recognised should be passed as\na union type for type parameter A. For example:  primitive SSE\n  fun value(): U64 => 1  primitive AVX\n  fun value(): U64 => 2  primitive RDTSCP\n  fun value(): U64 => 4  type Features is Flags[(SSE | AVX | RDTSCP)]  Type parameter B is the unlying field used to store the flags.  class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) & Integer[B] val)] is\n  Comparable[Flags[A, B] box] ref",
            "title": "Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[B] val)]"
        },
        {
            "location": "/collections-Flags/#implements",
            "text": "Comparable [ Flags [A, B] box] ref",
            "title": "Implements"
        },
        {
            "location": "/collections-Flags/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Flags/#create",
            "text": "[Source]  new iso create()\n: Flags[A, B] iso^",
            "title": "create"
        },
        {
            "location": "/collections-Flags/#returns",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/collections-Flags/#value",
            "text": "[Source]  Returns the bit encoding of the set flags.  fun box value()\n: B",
            "title": "value"
        },
        {
            "location": "/collections-Flags/#returns_1",
            "text": "B",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#apply",
            "text": "[Source]  Returns true if the flag is set.  fun box apply(\n  flag: A)\n: Bool val",
            "title": "apply"
        },
        {
            "location": "/collections-Flags/#parameters",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#all",
            "text": "[Source]  Sets all bits, including undefined flags.  fun ref all()\n: None val",
            "title": "all"
        },
        {
            "location": "/collections-Flags/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#clear",
            "text": "[Source]  Unsets all flags.  fun ref clear()\n: None val",
            "title": "clear"
        },
        {
            "location": "/collections-Flags/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#set",
            "text": "[Source]  Sets the flag.  fun ref set(\n  flag: A)\n: None val",
            "title": "set"
        },
        {
            "location": "/collections-Flags/#parameters_1",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#unset",
            "text": "[Source]  Unsets the flag.  fun ref unset(\n  flag: A)\n: None val",
            "title": "unset"
        },
        {
            "location": "/collections-Flags/#parameters_2",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#flip",
            "text": "[Source]  Sets the flag if it is unset, unsets the flag if it is set.  fun ref flip(\n  flag: A)\n: None val",
            "title": "flip"
        },
        {
            "location": "/collections-Flags/#parameters_3",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#union",
            "text": "[Source]  The union of this and that.  fun ref union(\n  that: Flags[A, B] box)\n: None val",
            "title": "union"
        },
        {
            "location": "/collections-Flags/#parameters_4",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#intersect",
            "text": "[Source]  The intersection of this and that.  fun ref intersect(\n  that: Flags[A, B] box)\n: None val",
            "title": "intersect"
        },
        {
            "location": "/collections-Flags/#parameters_5",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#difference",
            "text": "[Source]  The symmetric difference of this and that.  fun ref difference(\n  that: Flags[A, B] box)\n: None val",
            "title": "difference"
        },
        {
            "location": "/collections-Flags/#parameters_6",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#remove",
            "text": "[Source]  Unset flags that are set in that.  fun ref remove(\n  that: Flags[A, B] box)\n: None val",
            "title": "remove"
        },
        {
            "location": "/collections-Flags/#parameters_7",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#add",
            "text": "[Source]  This with the flag set.  fun box add(\n  flag: A)\n: Flags[A, B] iso^",
            "title": "add"
        },
        {
            "location": "/collections-Flags/#parameters_8",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_12",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#sub",
            "text": "[Source]  This with the flag unset.  fun box sub(\n  flag: A)\n: Flags[A, B] iso^",
            "title": "sub"
        },
        {
            "location": "/collections-Flags/#parameters_9",
            "text": "flag: A",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_13",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#op_or",
            "text": "[Source]  The union of this and that.  fun box op_or(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^",
            "title": "op_or"
        },
        {
            "location": "/collections-Flags/#parameters_10",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_14",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#op_and",
            "text": "[Source]  The intersection of this and that.  fun box op_and(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^",
            "title": "op_and"
        },
        {
            "location": "/collections-Flags/#parameters_11",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_15",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#op_xor",
            "text": "[Source]  The symmetric difference of this and that.  fun box op_xor(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^",
            "title": "op_xor"
        },
        {
            "location": "/collections-Flags/#parameters_12",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_16",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#without",
            "text": "[Source]  The flags in this that are not in that.  fun box without(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^",
            "title": "without"
        },
        {
            "location": "/collections-Flags/#parameters_13",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_17",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#clone",
            "text": "[Source]  Create a clone.  fun box clone()\n: Flags[A, B] iso^",
            "title": "clone"
        },
        {
            "location": "/collections-Flags/#returns_18",
            "text": "Flags [A, B] iso^",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#eq",
            "text": "[Source]  Returns true if this has the same flags set as that.  fun box eq(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/collections-Flags/#parameters_14",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_19",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#lt",
            "text": "[Source]  Returns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.  fun box lt(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "lt"
        },
        {
            "location": "/collections-Flags/#parameters_15",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_20",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#le",
            "text": "[Source]  Returns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.  fun box le(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "le"
        },
        {
            "location": "/collections-Flags/#parameters_16",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_21",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#gt",
            "text": "[Source]  Returns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.  fun box gt(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "gt"
        },
        {
            "location": "/collections-Flags/#parameters_17",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_22",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#ge",
            "text": "[Source]  Returns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.  fun box ge(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "ge"
        },
        {
            "location": "/collections-Flags/#parameters_18",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_23",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#compare",
            "text": "[Source]  fun box compare(\n  that: Flags[A, B] box)\n: (Less val | Equal val | Greater val)",
            "title": "compare"
        },
        {
            "location": "/collections-Flags/#parameters_19",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_24",
            "text": "( Less  val |  Equal  val |  Greater  val)",
            "title": "Returns"
        },
        {
            "location": "/collections-Flags/#ne",
            "text": "[Source]  fun box ne(\n  that: Flags[A, B] box)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/collections-Flags/#parameters_20",
            "text": "that:  Flags [A, B] box",
            "title": "Parameters"
        },
        {
            "location": "/collections-Flags/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/encode-base64--index/",
            "text": "Base64 package\n\u00b6\n\n\nThe Base64 package contains support for doing Base64 binary-to-text encodings.\nWe currently have support 3 encodings: PEM, MIME and URL.\n\n\nTo learn more about Base64, we suggest you check out the\n\nwikipedia entry\n.\n\n\nExample code\n\u00b6\n\n\nuse \"encode/base64\"\n\nactor Main\n  new create(env: Env) =>\n    env.out.print(Base64.encode(\"foobar\"))\n    try\n      env.out.print(Base64.decode[String iso](\"Zm9vYmFy\")?)\n    end\n\n\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive Base64",
            "title": "Package"
        },
        {
            "location": "/encode-base64--index/#base64-package",
            "text": "The Base64 package contains support for doing Base64 binary-to-text encodings.\nWe currently have support 3 encodings: PEM, MIME and URL.  To learn more about Base64, we suggest you check out the wikipedia entry .",
            "title": "Base64 package"
        },
        {
            "location": "/encode-base64--index/#example-code",
            "text": "use \"encode/base64\"\n\nactor Main\n  new create(env: Env) =>\n    env.out.print(Base64.encode(\"foobar\"))\n    try\n      env.out.print(Base64.decode[String iso](\"Zm9vYmFy\")?)\n    end",
            "title": "Example code"
        },
        {
            "location": "/encode-base64--index/#public-types",
            "text": "primitive Base64",
            "title": "Public Types"
        },
        {
            "location": "/encode-base64-Base64/",
            "text": "Base64\n\u00b6\n\n\n[Source]\n\n\nprimitive val Base64\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Base64 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBase64\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nencode_pem\n\u00b6\n\n\n[Source]\n\n\nEncode for PEM (RFC 1421).\n\n\nfun box encode_pem(\n  data: ReadSeq[U8 val] box)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nencode_mime\n\u00b6\n\n\n[Source]\n\n\nEncode for MIME (RFC 2045).\n\n\nfun box encode_mime(\n  data: ReadSeq[U8 val] box)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nencode_url[optional A: \nSeq\n[\nU8\n val] iso]\n\u00b6\n\n\n[Source]\n\n\nEncode for URLs (RFC 4648). Padding characters are stripped by default.\n\n\nfun box encode_url[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  pad: Bool val = seq)\n: A^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\npad: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^\n\n\n\n\n\n\nencode[optional A: \nSeq\n[\nU8\n val] iso]\n\u00b6\n\n\n[Source]\n\n\nConfigurable encoding. The defaults are for RFC 4648.\n\n\nfun box encode[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  at62: U8 val = seq,\n  at63: U8 val = seq,\n  pad: U8 val = seq,\n  linelen: USize val = seq,\n  linesep: String val = seq)\n: A^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\nat62: \nU8\n val = seq\n\n\nat63: \nU8\n val = seq\n\n\npad: \nU8\n val = seq\n\n\nlinelen: \nUSize\n val = seq\n\n\nlinesep: \nString\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^\n\n\n\n\n\n\ndecode_url[optional A: \nSeq\n[\nU8\n val] iso]\n\u00b6\n\n\n[Source]\n\n\nDecode for URLs (RFC 4648).\n\n\nfun box decode_url[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\ndecode[optional A: \nSeq\n[\nU8\n val] iso]\n\u00b6\n\n\n[Source]\n\n\nConfigurable decoding. The defaults are for RFC 4648. Missing padding is\nnot an error. Non-base64 data, other than whitespace (which can appear at\nany time), is an error.\n\n\nfun box decode[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  at62: U8 val = seq,\n  at63: U8 val = seq,\n  pad: U8 val = seq)\n: A^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\nat62: \nU8\n val = seq\n\n\nat63: \nU8\n val = seq\n\n\npad: \nU8\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA^ ?\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Base64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nBase64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Base64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nBase64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Base64"
        },
        {
            "location": "/encode-base64-Base64/#base64",
            "text": "[Source]  primitive val Base64",
            "title": "Base64"
        },
        {
            "location": "/encode-base64-Base64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/encode-base64-Base64/#create",
            "text": "[Source]  new val create()\n: Base64 val^",
            "title": "create"
        },
        {
            "location": "/encode-base64-Base64/#returns",
            "text": "Base64  val^",
            "title": "Returns"
        },
        {
            "location": "/encode-base64-Base64/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/encode-base64-Base64/#encode_pem",
            "text": "[Source]  Encode for PEM (RFC 1421).  fun box encode_pem(\n  data: ReadSeq[U8 val] box)\n: String iso^",
            "title": "encode_pem"
        },
        {
            "location": "/encode-base64-Base64/#parameters",
            "text": "data:  ReadSeq [ U8  val] box",
            "title": "Parameters"
        },
        {
            "location": "/encode-base64-Base64/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/encode-base64-Base64/#encode_mime",
            "text": "[Source]  Encode for MIME (RFC 2045).  fun box encode_mime(\n  data: ReadSeq[U8 val] box)\n: String iso^",
            "title": "encode_mime"
        },
        {
            "location": "/encode-base64-Base64/#parameters_1",
            "text": "data:  ReadSeq [ U8  val] box",
            "title": "Parameters"
        },
        {
            "location": "/encode-base64-Base64/#returns_2",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/encode-base64-Base64/#encode_url91optional-a-seq91u8-val93-iso93",
            "text": "[Source]  Encode for URLs (RFC 4648). Padding characters are stripped by default.  fun box encode_url[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  pad: Bool val = seq)\n: A^",
            "title": "encode_url[optional A: Seq[U8 val] iso]"
        },
        {
            "location": "/encode-base64-Base64/#parameters_2",
            "text": "data:  ReadSeq [ U8  val] box  pad:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/encode-base64-Base64/#returns_3",
            "text": "A^",
            "title": "Returns"
        },
        {
            "location": "/encode-base64-Base64/#encode91optional-a-seq91u8-val93-iso93",
            "text": "[Source]  Configurable encoding. The defaults are for RFC 4648.  fun box encode[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  at62: U8 val = seq,\n  at63: U8 val = seq,\n  pad: U8 val = seq,\n  linelen: USize val = seq,\n  linesep: String val = seq)\n: A^",
            "title": "encode[optional A: Seq[U8 val] iso]"
        },
        {
            "location": "/encode-base64-Base64/#parameters_3",
            "text": "data:  ReadSeq [ U8  val] box  at62:  U8  val = seq  at63:  U8  val = seq  pad:  U8  val = seq  linelen:  USize  val = seq  linesep:  String  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/encode-base64-Base64/#returns_4",
            "text": "A^",
            "title": "Returns"
        },
        {
            "location": "/encode-base64-Base64/#decode_url91optional-a-seq91u8-val93-iso93",
            "text": "[Source]  Decode for URLs (RFC 4648).  fun box decode_url[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box)\n: A^ ?",
            "title": "decode_url[optional A: Seq[U8 val] iso]"
        },
        {
            "location": "/encode-base64-Base64/#parameters_4",
            "text": "data:  ReadSeq [ U8  val] box",
            "title": "Parameters"
        },
        {
            "location": "/encode-base64-Base64/#returns_5",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/encode-base64-Base64/#decode91optional-a-seq91u8-val93-iso93",
            "text": "[Source]  Configurable decoding. The defaults are for RFC 4648. Missing padding is\nnot an error. Non-base64 data, other than whitespace (which can appear at\nany time), is an error.  fun box decode[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  at62: U8 val = seq,\n  at63: U8 val = seq,\n  pad: U8 val = seq)\n: A^ ?",
            "title": "decode[optional A: Seq[U8 val] iso]"
        },
        {
            "location": "/encode-base64-Base64/#parameters_5",
            "text": "data:  ReadSeq [ U8  val] box  at62:  U8  val = seq  at63:  U8  val = seq  pad:  U8  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/encode-base64-Base64/#returns_6",
            "text": "A^ ?",
            "title": "Returns"
        },
        {
            "location": "/encode-base64-Base64/#eq",
            "text": "[Source]  fun box eq(\n  that: Base64 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/encode-base64-Base64/#parameters_6",
            "text": "that:  Base64  val",
            "title": "Parameters"
        },
        {
            "location": "/encode-base64-Base64/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/encode-base64-Base64/#ne",
            "text": "[Source]  fun box ne(\n  that: Base64 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/encode-base64-Base64/#parameters_7",
            "text": "that:  Base64  val",
            "title": "Parameters"
        },
        {
            "location": "/encode-base64-Base64/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files--index/",
            "text": "Files package\n\u00b6\n\n\nThe Files package provides classes for working with files and\ndirectories.\n\n\nFiles are identified by \nFilePath\n objects, which represent both the\npath to the file and the capabilites for accessing the file at that\npath. \nFilePath\n objects can be used with the \nCreateFile\n and\n\nOpenFile\n primitives and the \nFile\n class to get a reference to a\nfile that can be used to write to and/or read from the file. It can\nalso be used with the \nDirectory\n object to get a reference to a\ndirectory object that can be used for directory operations.\n\n\nThe \nFileLine\n class allows a file to be accessed one line at a time.\n\n\nThe \nFileStream\n actor provides the ability to asynchronously write to\na file.\n\n\nThe \nPath\n primitive can be used to do path-related operations on\nstrings and characters.\n\n\nExample program\n\u00b6\n\n\nThis program opens the files that are given as command line arguments\nand prints their contents.\n\n\nuse \"files\"\n\nactor Main\n  new create(env: Env) =>\n    try\n      for file_name in env.args.slice(1).values() do\n        let path = FilePath(env.root as AmbientAuth, file_name)?\n        match OpenFile(path)\n        | let file: File =>\n          while file.errno() is FileOK do\n            env.out.write(file.read(1024))\n          end\n        else\n          env.err.print(\"Error opening file '\" + file_name + \"'\")\n        end\n      end\n    end\n\n\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive Path\n\n\nactor FileStream\n\n\ninterface WalkHandler\n\n\nclass FilePath\n\n\nclass FileMode\n\n\nclass FileInfo\n\n\nprimitive FileCreate\n\n\nprimitive FileChmod\n\n\nprimitive FileChown\n\n\nprimitive FileLink\n\n\nprimitive FileLookup\n\n\nprimitive FileMkdir\n\n\nprimitive FileRead\n\n\nprimitive FileRemove\n\n\nprimitive FileRename\n\n\nprimitive FileSeek\n\n\nprimitive FileStat\n\n\nprimitive FileSync\n\n\nprimitive FileTime\n\n\nprimitive FileTruncate\n\n\nprimitive FileWrite\n\n\nprimitive FileExec\n\n\ntype FileCaps\n\n\nprimitive FileOK\n\n\nprimitive FileError\n\n\nprimitive FileEOF\n\n\nprimitive FileBadFileNumber\n\n\nprimitive FileExists\n\n\nprimitive FilePermissionDenied\n\n\ntype FileErrNo\n\n\nprimitive CreateFile\n\n\nprimitive OpenFile\n\n\nclass File\n\n\nclass FileLines\n\n\nclass Directory",
            "title": "Package"
        },
        {
            "location": "/files--index/#files-package",
            "text": "The Files package provides classes for working with files and\ndirectories.  Files are identified by  FilePath  objects, which represent both the\npath to the file and the capabilites for accessing the file at that\npath.  FilePath  objects can be used with the  CreateFile  and OpenFile  primitives and the  File  class to get a reference to a\nfile that can be used to write to and/or read from the file. It can\nalso be used with the  Directory  object to get a reference to a\ndirectory object that can be used for directory operations.  The  FileLine  class allows a file to be accessed one line at a time.  The  FileStream  actor provides the ability to asynchronously write to\na file.  The  Path  primitive can be used to do path-related operations on\nstrings and characters.",
            "title": "Files package"
        },
        {
            "location": "/files--index/#example-program",
            "text": "This program opens the files that are given as command line arguments\nand prints their contents.  use \"files\"\n\nactor Main\n  new create(env: Env) =>\n    try\n      for file_name in env.args.slice(1).values() do\n        let path = FilePath(env.root as AmbientAuth, file_name)?\n        match OpenFile(path)\n        | let file: File =>\n          while file.errno() is FileOK do\n            env.out.write(file.read(1024))\n          end\n        else\n          env.err.print(\"Error opening file '\" + file_name + \"'\")\n        end\n      end\n    end",
            "title": "Example program"
        },
        {
            "location": "/files--index/#public-types",
            "text": "primitive Path  actor FileStream  interface WalkHandler  class FilePath  class FileMode  class FileInfo  primitive FileCreate  primitive FileChmod  primitive FileChown  primitive FileLink  primitive FileLookup  primitive FileMkdir  primitive FileRead  primitive FileRemove  primitive FileRename  primitive FileSeek  primitive FileStat  primitive FileSync  primitive FileTime  primitive FileTruncate  primitive FileWrite  primitive FileExec  type FileCaps  primitive FileOK  primitive FileError  primitive FileEOF  primitive FileBadFileNumber  primitive FileExists  primitive FilePermissionDenied  type FileErrNo  primitive CreateFile  primitive OpenFile  class File  class FileLines  class Directory",
            "title": "Public Types"
        },
        {
            "location": "/files-Path/",
            "text": "Path\n\u00b6\n\n\n[Source]\n\n\nOperations on paths that do not require a capability. The operations can be\nused to manipulate path names, but give no access to the resulting paths.\n\n\nprimitive val Path\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Path val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPath\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nis_sep\n\u00b6\n\n\n[Source]\n\n\nDetermine if a byte is a path separator.\n\n\nfun box is_sep(\n  c: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nc: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nsep\n\u00b6\n\n\n[Source]\n\n\nReturn the path separator as a string.\n\n\nfun tag sep()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nis_abs\n\u00b6\n\n\n[Source]\n\n\nReturn true if the path is an absolute path.\n\n\nfun box is_abs(\n  path: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\njoin\n\u00b6\n\n\n[Source]\n\n\nJoin two paths together. If the next_path is absolute, simply return it.\nThe returned path will be cleaned.\n\n\nfun box join(\n  path: String val,\n  next_path: String val)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\nnext_path: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nclean\n\u00b6\n\n\n[Source]\n\n\nReplace multiple separators with a single separator.\nConvert / to the OS separator.\nRemove instances of . from the path.\nRemove instances of .. and the preceding path element from the path.\nThe result will have no trailing slash unless it is a root directory.\nIf the result would be empty, \".\" will be returned instead.\n\n\nfun box clean(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nnormcase\n\u00b6\n\n\n[Source]\n\n\nNormalizes the case of path for the runtime platform.\n\n\nfun box normcase(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ncwd\n\u00b6\n\n\n[Source]\n\n\nReturns the program's working directory. Setting the working directory is\nnot supported, as it is not concurrency-safe.\n\n\nfun box cwd()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nReturns a cleaned, absolute path.\n\n\nfun box abs(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nrel\n\u00b6\n\n\n[Source]\n\n\nReturns a path such that Path.join(to, Path.rel(to, target)) == target.\nRaises an error if this isn't possible.\n\n\nfun box rel(\n  to: String val,\n  target: String val)\n: String val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nto: \nString\n val\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val ?\n\n\n\n\n\n\nsplit\n\u00b6\n\n\n[Source]\n\n\nSplits the path into a pair, (head, tail) where tail is the last pathname\ncomponent and head is everything leading up to that. The tail part will\nnever contain a slash; if path ends in a slash, tail will be empty. If\nthere is no slash in path, head will be empty. If path is empty, both head\nand tail are empty. The path in head will be cleaned before it is returned.\nIn all cases, join(head, tail) returns a path to the same location as path\n(but the strings may differ). Also see the functions dir() and base().\n\n\nfun box split(\n  path: String val,\n  separator: String val = seq)\n: (String val , String val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\nseparator: \nString\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nString\n val , \nString\n val)\n\n\n\n\n\n\nbase\n\u00b6\n\n\n[Source]\n\n\nReturn the path after the last separator, or the whole path if there is no\nseparator.\nIf \nwith_ext\n is \nfalse\n, the extension as defined by the \next()\n method\nwill be omitted from the result.\n\n\nfun box base(\n  path: String val,\n  with_ext: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\nwith_ext: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ndir\n\u00b6\n\n\n[Source]\n\n\nReturn a cleaned path before the last separator, or the whole path if there\nis no separator.\n\n\nfun box dir(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\next\n\u00b6\n\n\n[Source]\n\n\nReturn the file extension, i.e. the part after the last dot as long as that\ndot is after all separators. Return an empty string for no extension.\n\n\nfun box ext(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nvolume\n\u00b6\n\n\n[Source]\n\n\nOn Windows, this returns the drive letter or UNC base at the beginning of\nthe path, if there is one. Otherwise, this returns an empty string.\n\n\nfun box volume(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nfrom_slash\n\u00b6\n\n\n[Source]\n\n\nChanges each / in the path to the OS specific separator.\n\n\nfun box from_slash(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nto_slash\n\u00b6\n\n\n[Source]\n\n\nChanges each OS specific separator in the path to /.\n\n\nfun box to_slash(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ncanonical\n\u00b6\n\n\n[Source]\n\n\nReturn the equivalent canonical absolute path. Raise an error if there\nisn't one.\n\n\nfun box canonical(\n  path: String val)\n: String val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val ?\n\n\n\n\n\n\nis_list_sep\n\u00b6\n\n\n[Source]\n\n\nDetermine if a byte is a path list separator.\n\n\nfun box is_list_sep(\n  c: U8 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nc: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlist_sep\n\u00b6\n\n\n[Source]\n\n\nReturn the path list separator as a string.\n\n\nfun box list_sep()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nsplit_list\n\u00b6\n\n\n[Source]\n\n\nSeparate a list of paths into an array of cleaned paths.\n\n\nfun box split_list(\n  path: String val)\n: Array[String val] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nString\n val] iso^\n\n\n\n\n\n\nrandom\n\u00b6\n\n\n[Source]\n\n\nReturns a pseudo-random base, suitable as a temporary file name or\ndirectory name, but not guaranteed to not already exist.\n\n\nfun box random(\n  len: USize val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Path val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Path val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Path"
        },
        {
            "location": "/files-Path/#path",
            "text": "[Source]  Operations on paths that do not require a capability. The operations can be\nused to manipulate path names, but give no access to the resulting paths.  primitive val Path",
            "title": "Path"
        },
        {
            "location": "/files-Path/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-Path/#create",
            "text": "[Source]  new val create()\n: Path val^",
            "title": "create"
        },
        {
            "location": "/files-Path/#returns",
            "text": "Path  val^",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-Path/#is_sep",
            "text": "[Source]  Determine if a byte is a path separator.  fun box is_sep(\n  c: U8 val)\n: Bool val",
            "title": "is_sep"
        },
        {
            "location": "/files-Path/#parameters",
            "text": "c:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#sep",
            "text": "[Source]  Return the path separator as a string.  fun tag sep()\n: String val",
            "title": "sep"
        },
        {
            "location": "/files-Path/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#is_abs",
            "text": "[Source]  Return true if the path is an absolute path.  fun box is_abs(\n  path: String val)\n: Bool val",
            "title": "is_abs"
        },
        {
            "location": "/files-Path/#parameters_1",
            "text": "path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#join",
            "text": "[Source]  Join two paths together. If the next_path is absolute, simply return it.\nThe returned path will be cleaned.  fun box join(\n  path: String val,\n  next_path: String val)\n: String val",
            "title": "join"
        },
        {
            "location": "/files-Path/#parameters_2",
            "text": "path:  String  val  next_path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_4",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#clean",
            "text": "[Source]  Replace multiple separators with a single separator.\nConvert / to the OS separator.\nRemove instances of . from the path.\nRemove instances of .. and the preceding path element from the path.\nThe result will have no trailing slash unless it is a root directory.\nIf the result would be empty, \".\" will be returned instead.  fun box clean(\n  path: String val)\n: String val",
            "title": "clean"
        },
        {
            "location": "/files-Path/#parameters_3",
            "text": "path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_5",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#normcase",
            "text": "[Source]  Normalizes the case of path for the runtime platform.  fun box normcase(\n  path: String val)\n: String val",
            "title": "normcase"
        },
        {
            "location": "/files-Path/#parameters_4",
            "text": "path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_6",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#cwd",
            "text": "[Source]  Returns the program's working directory. Setting the working directory is\nnot supported, as it is not concurrency-safe.  fun box cwd()\n: String val",
            "title": "cwd"
        },
        {
            "location": "/files-Path/#returns_7",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#abs",
            "text": "[Source]  Returns a cleaned, absolute path.  fun box abs(\n  path: String val)\n: String val",
            "title": "abs"
        },
        {
            "location": "/files-Path/#parameters_5",
            "text": "path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_8",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#rel",
            "text": "[Source]  Returns a path such that Path.join(to, Path.rel(to, target)) == target.\nRaises an error if this isn't possible.  fun box rel(\n  to: String val,\n  target: String val)\n: String val ?",
            "title": "rel"
        },
        {
            "location": "/files-Path/#parameters_6",
            "text": "to:  String  val  target:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_9",
            "text": "String  val ?",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#split",
            "text": "[Source]  Splits the path into a pair, (head, tail) where tail is the last pathname\ncomponent and head is everything leading up to that. The tail part will\nnever contain a slash; if path ends in a slash, tail will be empty. If\nthere is no slash in path, head will be empty. If path is empty, both head\nand tail are empty. The path in head will be cleaned before it is returned.\nIn all cases, join(head, tail) returns a path to the same location as path\n(but the strings may differ). Also see the functions dir() and base().  fun box split(\n  path: String val,\n  separator: String val = seq)\n: (String val , String val)",
            "title": "split"
        },
        {
            "location": "/files-Path/#parameters_7",
            "text": "path:  String  val  separator:  String  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_10",
            "text": "( String  val ,  String  val)",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#base",
            "text": "[Source]  Return the path after the last separator, or the whole path if there is no\nseparator.\nIf  with_ext  is  false , the extension as defined by the  ext()  method\nwill be omitted from the result.  fun box base(\n  path: String val,\n  with_ext: Bool val = seq)\n: String val",
            "title": "base"
        },
        {
            "location": "/files-Path/#parameters_8",
            "text": "path:  String  val  with_ext:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_11",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#dir",
            "text": "[Source]  Return a cleaned path before the last separator, or the whole path if there\nis no separator.  fun box dir(\n  path: String val)\n: String val",
            "title": "dir"
        },
        {
            "location": "/files-Path/#parameters_9",
            "text": "path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_12",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#ext",
            "text": "[Source]  Return the file extension, i.e. the part after the last dot as long as that\ndot is after all separators. Return an empty string for no extension.  fun box ext(\n  path: String val)\n: String val",
            "title": "ext"
        },
        {
            "location": "/files-Path/#parameters_10",
            "text": "path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_13",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#volume",
            "text": "[Source]  On Windows, this returns the drive letter or UNC base at the beginning of\nthe path, if there is one. Otherwise, this returns an empty string.  fun box volume(\n  path: String val)\n: String val",
            "title": "volume"
        },
        {
            "location": "/files-Path/#parameters_11",
            "text": "path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_14",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#from_slash",
            "text": "[Source]  Changes each / in the path to the OS specific separator.  fun box from_slash(\n  path: String val)\n: String val",
            "title": "from_slash"
        },
        {
            "location": "/files-Path/#parameters_12",
            "text": "path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_15",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#to_slash",
            "text": "[Source]  Changes each OS specific separator in the path to /.  fun box to_slash(\n  path: String val)\n: String val",
            "title": "to_slash"
        },
        {
            "location": "/files-Path/#parameters_13",
            "text": "path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_16",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#canonical",
            "text": "[Source]  Return the equivalent canonical absolute path. Raise an error if there\nisn't one.  fun box canonical(\n  path: String val)\n: String val ?",
            "title": "canonical"
        },
        {
            "location": "/files-Path/#parameters_14",
            "text": "path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_17",
            "text": "String  val ?",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#is_list_sep",
            "text": "[Source]  Determine if a byte is a path list separator.  fun box is_list_sep(\n  c: U8 val)\n: Bool val",
            "title": "is_list_sep"
        },
        {
            "location": "/files-Path/#parameters_15",
            "text": "c:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_18",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#list_sep",
            "text": "[Source]  Return the path list separator as a string.  fun box list_sep()\n: String val",
            "title": "list_sep"
        },
        {
            "location": "/files-Path/#returns_19",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#split_list",
            "text": "[Source]  Separate a list of paths into an array of cleaned paths.  fun box split_list(\n  path: String val)\n: Array[String val] iso^",
            "title": "split_list"
        },
        {
            "location": "/files-Path/#parameters_16",
            "text": "path:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_20",
            "text": "Array [ String  val] iso^",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#random",
            "text": "[Source]  Returns a pseudo-random base, suitable as a temporary file name or\ndirectory name, but not guaranteed to not already exist.  fun box random(\n  len: USize val = seq)\n: String val",
            "title": "random"
        },
        {
            "location": "/files-Path/#parameters_17",
            "text": "len:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_21",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#eq",
            "text": "[Source]  fun box eq(\n  that: Path val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-Path/#parameters_18",
            "text": "that:  Path  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_22",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Path/#ne",
            "text": "[Source]  fun box ne(\n  that: Path val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-Path/#parameters_19",
            "text": "that:  Path  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Path/#returns_23",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileStream/",
            "text": "FileStream\n\u00b6\n\n\n[Source]\n\n\nAsynchronous access to a File object. Wraps file operations print, write,\nprintv and writev. The File will be disposed through File._final.\n\n\nactor tag FileStream is\n  OutStream tag\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nOutStream\n tag\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew tag create(\n  file: File iso)\n: FileStream tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfile: \nFile\n iso\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileStream\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\nprint\n\u00b6\n\n\n[Source]\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe print(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nprintv\n\u00b6\n\n\n[Source]\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe printv(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nwritev\n\u00b6\n\n\n[Source]\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val",
            "title": "actor FileStream"
        },
        {
            "location": "/files-FileStream/#filestream",
            "text": "[Source]  Asynchronous access to a File object. Wraps file operations print, write,\nprintv and writev. The File will be disposed through File._final.  actor tag FileStream is\n  OutStream tag",
            "title": "FileStream"
        },
        {
            "location": "/files-FileStream/#implements",
            "text": "OutStream  tag",
            "title": "Implements"
        },
        {
            "location": "/files-FileStream/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileStream/#create",
            "text": "[Source]  new tag create(\n  file: File iso)\n: FileStream tag^",
            "title": "create"
        },
        {
            "location": "/files-FileStream/#parameters",
            "text": "file:  File  iso",
            "title": "Parameters"
        },
        {
            "location": "/files-FileStream/#returns",
            "text": "FileStream  tag^",
            "title": "Returns"
        },
        {
            "location": "/files-FileStream/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/files-FileStream/#print",
            "text": "[Source]  Print some bytes and insert a newline afterwards.  be print(\n  data: (String val | Array[U8 val] val))",
            "title": "print"
        },
        {
            "location": "/files-FileStream/#parameters_1",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/files-FileStream/#write",
            "text": "[Source]  Print some bytes without inserting a newline afterwards.  be write(\n  data: (String val | Array[U8 val] val))",
            "title": "write"
        },
        {
            "location": "/files-FileStream/#parameters_2",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/files-FileStream/#printv",
            "text": "[Source]  Print an iterable collection of ByteSeqs.  be printv(\n  data: ByteSeqIter val)",
            "title": "printv"
        },
        {
            "location": "/files-FileStream/#parameters_3",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileStream/#writev",
            "text": "[Source]  Write an iterable collection of ByteSeqs.  be writev(\n  data: ByteSeqIter val)",
            "title": "writev"
        },
        {
            "location": "/files-FileStream/#parameters_4",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/files-WalkHandler/",
            "text": "WalkHandler\n\u00b6\n\n\n[Source]\n\n\nA handler for \nFilePath.walk\n.\n\n\ninterface ref WalkHandler\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun ref apply(\n  dir_path: FilePath val,\n  dir_entries: Array[String val] ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndir_path: \nFilePath\n val\n\n\ndir_entries: \nArray\n[\nString\n val] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface WalkHandler"
        },
        {
            "location": "/files-WalkHandler/#walkhandler",
            "text": "[Source]  A handler for  FilePath.walk .  interface ref WalkHandler",
            "title": "WalkHandler"
        },
        {
            "location": "/files-WalkHandler/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-WalkHandler/#apply",
            "text": "[Source]  fun ref apply(\n  dir_path: FilePath val,\n  dir_entries: Array[String val] ref)\n: None val",
            "title": "apply"
        },
        {
            "location": "/files-WalkHandler/#parameters",
            "text": "dir_path:  FilePath  val  dir_entries:  Array [ String  val] ref",
            "title": "Parameters"
        },
        {
            "location": "/files-WalkHandler/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/",
            "text": "FilePath\n\u00b6\n\n\n[Source]\n\n\nA FilePath represents a capability to access a path. The path will be\nrepresented as an absolute path and a set of capabilities for operations on\nthat path.\n\n\nclass val FilePath\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a new path. The caller must either provide the root capability or an\nexisting FilePath.\n\n\nIf the root capability is provided, path' will be relative to the program's\nworking directory. Otherwise, it will be relative to the existing FilePath,\nand the existing FilePath must be a prefix of the resulting path.\n\n\nThe resulting FilePath will have capabilities that are the intersection of\nthe supplied capabilities and the capabilities on the parent.\n\n\nnew val create(\n  base: (FilePath val | AmbientAuth val),\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: (\nFilePath\n val | \nAmbientAuth\n val)\n\n\npath': \nString\n val\n\n\ncaps': \nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFilePath\n val^ ?\n\n\n\n\n\n\nmkdtemp\n\u00b6\n\n\n[Source]\n\n\nCreate a temporary directory and returns a path to it. The directory's name\nwill begin with \nprefix\n. The caller must either provide the root\ncapability or an existing FilePath.\n\n\nIf AmbientAuth is provided, pattern will be relative to the program's\nworking directory. Otherwise, it will be relative to the existing\nFilePath, and the existing FilePath must be a prefix of the resulting path.\n\n\nThe resulting FilePath will have capabilities that are the intersection of\nthe supplied capabilities and the capabilities on the base.\n\n\nnew val mkdtemp(\n  base: (FilePath val | AmbientAuth val),\n  prefix: String val = seq,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbase: (\nFilePath\n val | \nAmbientAuth\n val)\n\n\nprefix: \nString\n val = seq\n\n\ncaps': \nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFilePath\n val^ ?\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet path: \nString\n val\n\u00b6\n\n\n[Source]\n\n\nAbsolute filesystem path.\n\n\n\n\nlet caps: \nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] ref\n\u00b6\n\n\n[Source]\n\n\nSet of capabilities for operations on \npath\n.\n\n\n\n\nPublic Functions\n\u00b6\n\n\njoin\n\u00b6\n\n\n[Source]\n\n\nReturn a new path relative to this one.\n\n\nfun val join(\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\npath': \nString\n val\n\n\ncaps': \nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFilePath\n val ?\n\n\n\n\n\n\nwalk\n\u00b6\n\n\n[Source]\n\n\nWalks a directory structure starting at this.\n\n\nhandler(dir_path, dir_entries)\n will be called for each directory\nstarting with this one. The handler can control which subdirectories are\nexpanded by removing them from the \ndir_entries\n list.\n\n\nfun val walk(\n  handler: WalkHandler ref,\n  follow_links: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nhandler: \nWalkHandler\n ref\n\n\nfollow_links: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncanonical\n\u00b6\n\n\n[Source]\n\n\nReturn the equivalent canonical absolute path. Raise an error if there\nisn't one.\n\n\nfun val canonical()\n: FilePath val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFilePath\n val ?\n\n\n\n\n\n\nexists\n\u00b6\n\n\n[Source]\n\n\nReturns true if the path exists. Returns false for a broken symlink.\n\n\nfun val exists()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmkdir\n\u00b6\n\n\n[Source]\n\n\nCreates the directory. Will recursively create each element. Returns true\nif the directory exists when we're done, false if it does not. If we do not\nhave the FileStat permission, this will return false even if the directory\ndoes exist.\n\n\nfun val mkdir(\n  must_create: Bool val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmust_create: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.\n\n\nfun val remove()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nrename\n\u00b6\n\n\n[Source]\n\n\nRename a file or directory.\n\n\nfun box rename(\n  new_path: FilePath val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnew_path: \nFilePath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nsymlink\n\u00b6\n\n\n[Source]\n\n\nCreate a symlink to a file or directory.\n\n\nfun box symlink(\n  link_name: FilePath val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlink_name: \nFilePath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nchmod\n\u00b6\n\n\n[Source]\n\n\nSet the FileMode for a path.\n\n\nfun box chmod(\n  mode: FileMode box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmode: \nFileMode\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nchown\n\u00b6\n\n\n[Source]\n\n\nSet the owner and group for a path. Does nothing on Windows.\n\n\nfun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nuid: \nU32\n val\n\n\ngid: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ntouch\n\u00b6\n\n\n[Source]\n\n\nSet the last access and modification times of a path to now.\n\n\nfun box touch()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nset_time\n\u00b6\n\n\n[Source]\n\n\nSet the last access and modification times of a path to the given values.\n\n\nfun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\natime: (\nI64\n val , \nI64\n val)\n\n\nmtime: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "class FilePath"
        },
        {
            "location": "/files-FilePath/#filepath",
            "text": "[Source]  A FilePath represents a capability to access a path. The path will be\nrepresented as an absolute path and a set of capabilities for operations on\nthat path.  class val FilePath",
            "title": "FilePath"
        },
        {
            "location": "/files-FilePath/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FilePath/#create",
            "text": "[Source]  Create a new path. The caller must either provide the root capability or an\nexisting FilePath.  If the root capability is provided, path' will be relative to the program's\nworking directory. Otherwise, it will be relative to the existing FilePath,\nand the existing FilePath must be a prefix of the resulting path.  The resulting FilePath will have capabilities that are the intersection of\nthe supplied capabilities and the capabilities on the parent.  new val create(\n  base: (FilePath val | AmbientAuth val),\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val^ ?",
            "title": "create"
        },
        {
            "location": "/files-FilePath/#parameters",
            "text": "base: ( FilePath  val |  AmbientAuth  val)  path':  String  val  caps':  Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePath/#returns",
            "text": "FilePath  val^ ?",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#mkdtemp",
            "text": "[Source]  Create a temporary directory and returns a path to it. The directory's name\nwill begin with  prefix . The caller must either provide the root\ncapability or an existing FilePath.  If AmbientAuth is provided, pattern will be relative to the program's\nworking directory. Otherwise, it will be relative to the existing\nFilePath, and the existing FilePath must be a prefix of the resulting path.  The resulting FilePath will have capabilities that are the intersection of\nthe supplied capabilities and the capabilities on the base.  new val mkdtemp(\n  base: (FilePath val | AmbientAuth val),\n  prefix: String val = seq,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val^ ?",
            "title": "mkdtemp"
        },
        {
            "location": "/files-FilePath/#parameters_1",
            "text": "base: ( FilePath  val |  AmbientAuth  val)  prefix:  String  val = seq  caps':  Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePath/#returns_1",
            "text": "FilePath  val^ ?",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/files-FilePath/#let-path-string-val",
            "text": "[Source]  Absolute filesystem path.",
            "title": "let path: String val"
        },
        {
            "location": "/files-FilePath/#let-caps-flags91filecreate-val-filechmod-val-filechown-val-filelink-val-filelookup-val-filemkdir-val-fileread-val-fileremove-val-filerename-val-fileseek-val-filestat-val-filesync-val-filetime-val-filetruncate-val-filewrite-val-fileexec-val-u32-val93-ref",
            "text": "[Source]  Set of capabilities for operations on  path .",
            "title": "let caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref"
        },
        {
            "location": "/files-FilePath/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FilePath/#join",
            "text": "[Source]  Return a new path relative to this one.  fun val join(\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val ?",
            "title": "join"
        },
        {
            "location": "/files-FilePath/#parameters_2",
            "text": "path':  String  val  caps':  Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] val = seq",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePath/#returns_2",
            "text": "FilePath  val ?",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#walk",
            "text": "[Source]  Walks a directory structure starting at this.  handler(dir_path, dir_entries)  will be called for each directory\nstarting with this one. The handler can control which subdirectories are\nexpanded by removing them from the  dir_entries  list.  fun val walk(\n  handler: WalkHandler ref,\n  follow_links: Bool val = seq)\n: None val",
            "title": "walk"
        },
        {
            "location": "/files-FilePath/#parameters_3",
            "text": "handler:  WalkHandler  ref  follow_links:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePath/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#canonical",
            "text": "[Source]  Return the equivalent canonical absolute path. Raise an error if there\nisn't one.  fun val canonical()\n: FilePath val ?",
            "title": "canonical"
        },
        {
            "location": "/files-FilePath/#returns_4",
            "text": "FilePath  val ?",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#exists",
            "text": "[Source]  Returns true if the path exists. Returns false for a broken symlink.  fun val exists()\n: Bool val",
            "title": "exists"
        },
        {
            "location": "/files-FilePath/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#mkdir",
            "text": "[Source]  Creates the directory. Will recursively create each element. Returns true\nif the directory exists when we're done, false if it does not. If we do not\nhave the FileStat permission, this will return false even if the directory\ndoes exist.  fun val mkdir(\n  must_create: Bool val = seq)\n: Bool val",
            "title": "mkdir"
        },
        {
            "location": "/files-FilePath/#parameters_4",
            "text": "must_create:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePath/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#remove",
            "text": "[Source]  Remove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.  fun val remove()\n: Bool val",
            "title": "remove"
        },
        {
            "location": "/files-FilePath/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#rename",
            "text": "[Source]  Rename a file or directory.  fun box rename(\n  new_path: FilePath val)\n: Bool val",
            "title": "rename"
        },
        {
            "location": "/files-FilePath/#parameters_5",
            "text": "new_path:  FilePath  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePath/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#symlink",
            "text": "[Source]  Create a symlink to a file or directory.  fun box symlink(\n  link_name: FilePath val)\n: Bool val",
            "title": "symlink"
        },
        {
            "location": "/files-FilePath/#parameters_6",
            "text": "link_name:  FilePath  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePath/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#chmod",
            "text": "[Source]  Set the FileMode for a path.  fun box chmod(\n  mode: FileMode box)\n: Bool val",
            "title": "chmod"
        },
        {
            "location": "/files-FilePath/#parameters_7",
            "text": "mode:  FileMode  box",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePath/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#chown",
            "text": "[Source]  Set the owner and group for a path. Does nothing on Windows.  fun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val",
            "title": "chown"
        },
        {
            "location": "/files-FilePath/#parameters_8",
            "text": "uid:  U32  val  gid:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePath/#returns_11",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#touch",
            "text": "[Source]  Set the last access and modification times of a path to now.  fun box touch()\n: Bool val",
            "title": "touch"
        },
        {
            "location": "/files-FilePath/#returns_12",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePath/#set_time",
            "text": "[Source]  Set the last access and modification times of a path to the given values.  fun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val",
            "title": "set_time"
        },
        {
            "location": "/files-FilePath/#parameters_9",
            "text": "atime: ( I64  val ,  I64  val)  mtime: ( I64  val ,  I64  val)",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePath/#returns_13",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileMode/",
            "text": "FileMode\n\u00b6\n\n\n[Source]\n\n\nThis stores a UNIX-style mode broken out into a Bool for each bit. For other\noperating systems, the mapping will be approximate. For example, on Windows,\nif the file is readable all the read Bools will be set, and if the file is\nwriteable, all the write Bools will be set.\n\n\nThe default mode is read/write for the owner, read-only for everyone else.\n\n\nclass ref FileMode\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create()\n: FileMode iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileMode\n iso^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nvar setuid: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if the SETUID bit is set.\n\n\n\n\nvar setgid: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if the SETGID bit is set.\n\n\n\n\nvar sticky: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if the sticky bit is set.\n\n\n\n\nvar owner_read: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if the owning user can read the file.\n\n\n\n\nvar owner_write: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if the owning user can write to the file.\n\n\n\n\nvar owner_exec: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if the owning user can execute the file.\n\n\n\n\nvar group_read: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if members of the owning group can read the file.\n\n\n\n\nvar group_write: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if members of the owning group can write to the file.\n\n\n\n\nvar group_exec: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if members of the owning group can execute the file.\n\n\n\n\nvar any_read: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if every user can read the file.\n\n\n\n\nvar any_write: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if every user can write to the file.\n\n\n\n\nvar any_exec: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\n`true if every user can execute the file.\n\n\n\n\nPublic Functions\n\u00b6\n\n\nexec\n\u00b6\n\n\n[Source]\n\n\nSet the executable flag for everyone.\n\n\nfun ref exec()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshared\n\u00b6\n\n\n[Source]\n\n\nSet the write flag for everyone to the same as owner_write.\n\n\nfun ref shared()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ngroup\n\u00b6\n\n\n[Source]\n\n\nClear all of the any-user flags.\n\n\nfun ref group()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nprivate\n\u00b6\n\n\n[Source]\n\n\nClear all of the group and any-user flags.\n\n\nfun ref private()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class FileMode"
        },
        {
            "location": "/files-FileMode/#filemode",
            "text": "[Source]  This stores a UNIX-style mode broken out into a Bool for each bit. For other\noperating systems, the mapping will be approximate. For example, on Windows,\nif the file is readable all the read Bools will be set, and if the file is\nwriteable, all the write Bools will be set.  The default mode is read/write for the owner, read-only for everyone else.  class ref FileMode",
            "title": "FileMode"
        },
        {
            "location": "/files-FileMode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileMode/#create",
            "text": "[Source]  new iso create()\n: FileMode iso^",
            "title": "create"
        },
        {
            "location": "/files-FileMode/#returns",
            "text": "FileMode  iso^",
            "title": "Returns"
        },
        {
            "location": "/files-FileMode/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/files-FileMode/#var-setuid-bool-val",
            "text": "[Source]  true  if the SETUID bit is set.",
            "title": "var setuid: Bool val"
        },
        {
            "location": "/files-FileMode/#var-setgid-bool-val",
            "text": "[Source]  true  if the SETGID bit is set.",
            "title": "var setgid: Bool val"
        },
        {
            "location": "/files-FileMode/#var-sticky-bool-val",
            "text": "[Source]  true  if the sticky bit is set.",
            "title": "var sticky: Bool val"
        },
        {
            "location": "/files-FileMode/#var-owner_read-bool-val",
            "text": "[Source]  true  if the owning user can read the file.",
            "title": "var owner_read: Bool val"
        },
        {
            "location": "/files-FileMode/#var-owner_write-bool-val",
            "text": "[Source]  true  if the owning user can write to the file.",
            "title": "var owner_write: Bool val"
        },
        {
            "location": "/files-FileMode/#var-owner_exec-bool-val",
            "text": "[Source]  true  if the owning user can execute the file.",
            "title": "var owner_exec: Bool val"
        },
        {
            "location": "/files-FileMode/#var-group_read-bool-val",
            "text": "[Source]  true  if members of the owning group can read the file.",
            "title": "var group_read: Bool val"
        },
        {
            "location": "/files-FileMode/#var-group_write-bool-val",
            "text": "[Source]  true  if members of the owning group can write to the file.",
            "title": "var group_write: Bool val"
        },
        {
            "location": "/files-FileMode/#var-group_exec-bool-val",
            "text": "[Source]  true  if members of the owning group can execute the file.",
            "title": "var group_exec: Bool val"
        },
        {
            "location": "/files-FileMode/#var-any_read-bool-val",
            "text": "[Source]  true  if every user can read the file.",
            "title": "var any_read: Bool val"
        },
        {
            "location": "/files-FileMode/#var-any_write-bool-val",
            "text": "[Source]  true  if every user can write to the file.",
            "title": "var any_write: Bool val"
        },
        {
            "location": "/files-FileMode/#var-any_exec-bool-val",
            "text": "[Source]  `true if every user can execute the file.",
            "title": "var any_exec: Bool val"
        },
        {
            "location": "/files-FileMode/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileMode/#exec",
            "text": "[Source]  Set the executable flag for everyone.  fun ref exec()\n: None val",
            "title": "exec"
        },
        {
            "location": "/files-FileMode/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileMode/#shared",
            "text": "[Source]  Set the write flag for everyone to the same as owner_write.  fun ref shared()\n: None val",
            "title": "shared"
        },
        {
            "location": "/files-FileMode/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileMode/#group",
            "text": "[Source]  Clear all of the any-user flags.  fun ref group()\n: None val",
            "title": "group"
        },
        {
            "location": "/files-FileMode/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileMode/#private",
            "text": "[Source]  Clear all of the group and any-user flags.  fun ref private()\n: None val",
            "title": "private"
        },
        {
            "location": "/files-FileMode/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileInfo/",
            "text": "FileInfo\n\u00b6\n\n\n[Source]\n\n\nThis contains file system metadata for a path.\n\n\nA symlink will report information about itself, other than the size which\nwill be the size of the target. A broken symlink will report as much as it\ncan and will set the broken flag.\n\n\nclass val FileInfo\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nThis will raise an error if the FileStat capability isn't available or the\npath doesn't exist.\n\n\nnew val create(\n  from: FilePath val)\n: FileInfo val^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileInfo\n val^ ?\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet filepath: \nFilePath\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nlet mode: \nFileMode\n val\n\u00b6\n\n\n[Source]\n\n\nUNIX-style file mode.\n\n\n\n\nlet hard_links: \nU32\n val\n\u00b6\n\n\n[Source]\n\n\nNumber of hardlinks to this \nfilepath\n.\n\n\n\n\nlet device: \nU64\n val\n\u00b6\n\n\n[Source]\n\n\nOS id of the device containing this \nfilepath\n.\nDevice IDs consist of a major and minor device id,\ndenoting the type of device and the instance of this type on the system.\n\n\n\n\nlet inode: \nU64\n val\n\u00b6\n\n\n[Source]\n\n\nUNIX specific INODE number of \nfilepath\n. Is 0 on Windows.\n\n\n\n\nlet uid: \nU32\n val\n\u00b6\n\n\n[Source]\n\n\nUNIX-style user ID of the owner of \nfilepath\n.\n\n\n\n\nlet gid: \nU32\n val\n\u00b6\n\n\n[Source]\n\n\nUNIX-style user ID of the owning group of \nfilepath\n.\n\n\n\n\nlet size: \nUSize\n val\n\u00b6\n\n\n[Source]\n\n\nTotal size of \nfilepath\n in bytes.\n\n\nIn case of a symlink this is the size of the target, not the symlink itself.\n\n\n\n\nlet access_time: (\nI64\n val , \nI64\n val)\n\u00b6\n\n\n[Source]\n\n\nTime of last access as a tuple of seconds and nanoseconds since the epoch:\n\n\n(let a_secs: I64, let a_nanos: I64) = file_info.access_time\n\n\n\n\n\n\nlet modified_time: (\nI64\n val , \nI64\n val)\n\u00b6\n\n\n[Source]\n\n\nTime of last modification as tuple of seconds and nanoseconds since the epoch:\n\n\n(let m_secs: I64, let m_nanos: I64) = file_info.modified_time\n\n\n\n\n\n\nlet change_time: (\nI64\n val , \nI64\n val)\n\u00b6\n\n\n[Source]\n\n\nTime of the last change either the attributes (number of links, owner,\ngroup, file mode, ...) or the content of \nfilepath\n\nas a tuple of seconds and nanoseconds since the epoch:\n\n\n(let c_secs: I64, let c_nanos: I64) = file_info.change_time\n\n\n\n\nOn Windows this will be the file creation time.\n\n\n\n\nlet file: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if \nfilepath\n points to an a regular file.\n\n\n\n\nlet directory: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if \nfilepath\n points to a directory.\n\n\n\n\nlet pipe: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if \nfilepath\n points to a named pipe.\n\n\n\n\nlet symlink: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if \nfilepath\n points to a symbolic link.\n\n\n\n\nlet broken: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if \nfilepath\n points to a broken symlink.",
            "title": "class FileInfo"
        },
        {
            "location": "/files-FileInfo/#fileinfo",
            "text": "[Source]  This contains file system metadata for a path.  A symlink will report information about itself, other than the size which\nwill be the size of the target. A broken symlink will report as much as it\ncan and will set the broken flag.  class val FileInfo",
            "title": "FileInfo"
        },
        {
            "location": "/files-FileInfo/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileInfo/#create",
            "text": "[Source]  This will raise an error if the FileStat capability isn't available or the\npath doesn't exist.  new val create(\n  from: FilePath val)\n: FileInfo val^ ?",
            "title": "create"
        },
        {
            "location": "/files-FileInfo/#parameters",
            "text": "from:  FilePath  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileInfo/#returns",
            "text": "FileInfo  val^ ?",
            "title": "Returns"
        },
        {
            "location": "/files-FileInfo/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/files-FileInfo/#let-filepath-filepath-val",
            "text": "[Source]",
            "title": "let filepath: FilePath val"
        },
        {
            "location": "/files-FileInfo/#let-mode-filemode-val",
            "text": "[Source]  UNIX-style file mode.",
            "title": "let mode: FileMode val"
        },
        {
            "location": "/files-FileInfo/#let-hard_links-u32-val",
            "text": "[Source]  Number of hardlinks to this  filepath .",
            "title": "let hard_links: U32 val"
        },
        {
            "location": "/files-FileInfo/#let-device-u64-val",
            "text": "[Source]  OS id of the device containing this  filepath .\nDevice IDs consist of a major and minor device id,\ndenoting the type of device and the instance of this type on the system.",
            "title": "let device: U64 val"
        },
        {
            "location": "/files-FileInfo/#let-inode-u64-val",
            "text": "[Source]  UNIX specific INODE number of  filepath . Is 0 on Windows.",
            "title": "let inode: U64 val"
        },
        {
            "location": "/files-FileInfo/#let-uid-u32-val",
            "text": "[Source]  UNIX-style user ID of the owner of  filepath .",
            "title": "let uid: U32 val"
        },
        {
            "location": "/files-FileInfo/#let-gid-u32-val",
            "text": "[Source]  UNIX-style user ID of the owning group of  filepath .",
            "title": "let gid: U32 val"
        },
        {
            "location": "/files-FileInfo/#let-size-usize-val",
            "text": "[Source]  Total size of  filepath  in bytes.  In case of a symlink this is the size of the target, not the symlink itself.",
            "title": "let size: USize val"
        },
        {
            "location": "/files-FileInfo/#let-access_time-i64-val-i64-val",
            "text": "[Source]  Time of last access as a tuple of seconds and nanoseconds since the epoch:  (let a_secs: I64, let a_nanos: I64) = file_info.access_time",
            "title": "let access_time: (I64 val , I64 val)"
        },
        {
            "location": "/files-FileInfo/#let-modified_time-i64-val-i64-val",
            "text": "[Source]  Time of last modification as tuple of seconds and nanoseconds since the epoch:  (let m_secs: I64, let m_nanos: I64) = file_info.modified_time",
            "title": "let modified_time: (I64 val , I64 val)"
        },
        {
            "location": "/files-FileInfo/#let-change_time-i64-val-i64-val",
            "text": "[Source]  Time of the last change either the attributes (number of links, owner,\ngroup, file mode, ...) or the content of  filepath \nas a tuple of seconds and nanoseconds since the epoch:  (let c_secs: I64, let c_nanos: I64) = file_info.change_time  On Windows this will be the file creation time.",
            "title": "let change_time: (I64 val , I64 val)"
        },
        {
            "location": "/files-FileInfo/#let-file-bool-val",
            "text": "[Source]  true  if  filepath  points to an a regular file.",
            "title": "let file: Bool val"
        },
        {
            "location": "/files-FileInfo/#let-directory-bool-val",
            "text": "[Source]  true  if  filepath  points to a directory.",
            "title": "let directory: Bool val"
        },
        {
            "location": "/files-FileInfo/#let-pipe-bool-val",
            "text": "[Source]  true  if  filepath  points to a named pipe.",
            "title": "let pipe: Bool val"
        },
        {
            "location": "/files-FileInfo/#let-symlink-bool-val",
            "text": "[Source]  true  if  filepath  points to a symbolic link.",
            "title": "let symlink: Bool val"
        },
        {
            "location": "/files-FileInfo/#let-broken-bool-val",
            "text": "[Source]  true  if  filepath  points to a broken symlink.",
            "title": "let broken: Bool val"
        },
        {
            "location": "/files-FileCreate/",
            "text": "FileCreate\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileCreate\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileCreate val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileCreate\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileCreate val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileCreate\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileCreate val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileCreate\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileCreate"
        },
        {
            "location": "/files-FileCreate/#filecreate",
            "text": "[Source]  primitive val FileCreate",
            "title": "FileCreate"
        },
        {
            "location": "/files-FileCreate/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileCreate/#create",
            "text": "[Source]  new val create()\n: FileCreate val^",
            "title": "create"
        },
        {
            "location": "/files-FileCreate/#returns",
            "text": "FileCreate  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileCreate/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileCreate/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileCreate/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileCreate/#eq",
            "text": "[Source]  fun box eq(\n  that: FileCreate val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileCreate/#parameters",
            "text": "that:  FileCreate  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileCreate/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileCreate/#ne",
            "text": "[Source]  fun box ne(\n  that: FileCreate val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileCreate/#parameters_1",
            "text": "that:  FileCreate  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileCreate/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileChmod/",
            "text": "FileChmod\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileChmod\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileChmod val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileChmod\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileChmod val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileChmod\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileChmod val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileChmod\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileChmod"
        },
        {
            "location": "/files-FileChmod/#filechmod",
            "text": "[Source]  primitive val FileChmod",
            "title": "FileChmod"
        },
        {
            "location": "/files-FileChmod/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileChmod/#create",
            "text": "[Source]  new val create()\n: FileChmod val^",
            "title": "create"
        },
        {
            "location": "/files-FileChmod/#returns",
            "text": "FileChmod  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileChmod/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileChmod/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileChmod/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileChmod/#eq",
            "text": "[Source]  fun box eq(\n  that: FileChmod val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileChmod/#parameters",
            "text": "that:  FileChmod  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileChmod/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileChmod/#ne",
            "text": "[Source]  fun box ne(\n  that: FileChmod val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileChmod/#parameters_1",
            "text": "that:  FileChmod  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileChmod/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileChown/",
            "text": "FileChown\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileChown\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileChown val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileChown\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileChown val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileChown\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileChown val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileChown\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileChown"
        },
        {
            "location": "/files-FileChown/#filechown",
            "text": "[Source]  primitive val FileChown",
            "title": "FileChown"
        },
        {
            "location": "/files-FileChown/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileChown/#create",
            "text": "[Source]  new val create()\n: FileChown val^",
            "title": "create"
        },
        {
            "location": "/files-FileChown/#returns",
            "text": "FileChown  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileChown/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileChown/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileChown/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileChown/#eq",
            "text": "[Source]  fun box eq(\n  that: FileChown val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileChown/#parameters",
            "text": "that:  FileChown  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileChown/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileChown/#ne",
            "text": "[Source]  fun box ne(\n  that: FileChown val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileChown/#parameters_1",
            "text": "that:  FileChown  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileChown/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileLink/",
            "text": "FileLink\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileLink\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileLink val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileLink\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileLink val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileLink\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileLink val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileLink\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileLink"
        },
        {
            "location": "/files-FileLink/#filelink",
            "text": "[Source]  primitive val FileLink",
            "title": "FileLink"
        },
        {
            "location": "/files-FileLink/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileLink/#create",
            "text": "[Source]  new val create()\n: FileLink val^",
            "title": "create"
        },
        {
            "location": "/files-FileLink/#returns",
            "text": "FileLink  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileLink/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileLink/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileLink/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileLink/#eq",
            "text": "[Source]  fun box eq(\n  that: FileLink val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileLink/#parameters",
            "text": "that:  FileLink  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileLink/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileLink/#ne",
            "text": "[Source]  fun box ne(\n  that: FileLink val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileLink/#parameters_1",
            "text": "that:  FileLink  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileLink/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileLookup/",
            "text": "FileLookup\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileLookup\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileLookup val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileLookup\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileLookup val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileLookup\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileLookup val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileLookup\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileLookup"
        },
        {
            "location": "/files-FileLookup/#filelookup",
            "text": "[Source]  primitive val FileLookup",
            "title": "FileLookup"
        },
        {
            "location": "/files-FileLookup/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileLookup/#create",
            "text": "[Source]  new val create()\n: FileLookup val^",
            "title": "create"
        },
        {
            "location": "/files-FileLookup/#returns",
            "text": "FileLookup  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileLookup/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileLookup/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileLookup/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileLookup/#eq",
            "text": "[Source]  fun box eq(\n  that: FileLookup val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileLookup/#parameters",
            "text": "that:  FileLookup  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileLookup/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileLookup/#ne",
            "text": "[Source]  fun box ne(\n  that: FileLookup val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileLookup/#parameters_1",
            "text": "that:  FileLookup  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileLookup/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileMkdir/",
            "text": "FileMkdir\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileMkdir\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileMkdir val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileMkdir\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileMkdir val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileMkdir\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileMkdir val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileMkdir\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileMkdir"
        },
        {
            "location": "/files-FileMkdir/#filemkdir",
            "text": "[Source]  primitive val FileMkdir",
            "title": "FileMkdir"
        },
        {
            "location": "/files-FileMkdir/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileMkdir/#create",
            "text": "[Source]  new val create()\n: FileMkdir val^",
            "title": "create"
        },
        {
            "location": "/files-FileMkdir/#returns",
            "text": "FileMkdir  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileMkdir/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileMkdir/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileMkdir/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileMkdir/#eq",
            "text": "[Source]  fun box eq(\n  that: FileMkdir val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileMkdir/#parameters",
            "text": "that:  FileMkdir  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileMkdir/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileMkdir/#ne",
            "text": "[Source]  fun box ne(\n  that: FileMkdir val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileMkdir/#parameters_1",
            "text": "that:  FileMkdir  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileMkdir/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileRead/",
            "text": "FileRead\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileRead\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileRead val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileRead\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileRead val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileRead\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileRead val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileRead\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileRead"
        },
        {
            "location": "/files-FileRead/#fileread",
            "text": "[Source]  primitive val FileRead",
            "title": "FileRead"
        },
        {
            "location": "/files-FileRead/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileRead/#create",
            "text": "[Source]  new val create()\n: FileRead val^",
            "title": "create"
        },
        {
            "location": "/files-FileRead/#returns",
            "text": "FileRead  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileRead/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileRead/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileRead/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileRead/#eq",
            "text": "[Source]  fun box eq(\n  that: FileRead val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileRead/#parameters",
            "text": "that:  FileRead  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileRead/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileRead/#ne",
            "text": "[Source]  fun box ne(\n  that: FileRead val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileRead/#parameters_1",
            "text": "that:  FileRead  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileRead/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileRemove/",
            "text": "FileRemove\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileRemove\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileRemove val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileRemove\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileRemove val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileRemove\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileRemove val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileRemove\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileRemove"
        },
        {
            "location": "/files-FileRemove/#fileremove",
            "text": "[Source]  primitive val FileRemove",
            "title": "FileRemove"
        },
        {
            "location": "/files-FileRemove/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileRemove/#create",
            "text": "[Source]  new val create()\n: FileRemove val^",
            "title": "create"
        },
        {
            "location": "/files-FileRemove/#returns",
            "text": "FileRemove  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileRemove/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileRemove/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileRemove/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileRemove/#eq",
            "text": "[Source]  fun box eq(\n  that: FileRemove val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileRemove/#parameters",
            "text": "that:  FileRemove  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileRemove/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileRemove/#ne",
            "text": "[Source]  fun box ne(\n  that: FileRemove val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileRemove/#parameters_1",
            "text": "that:  FileRemove  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileRemove/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileRename/",
            "text": "FileRename\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileRename\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileRename val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileRename\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileRename val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileRename\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileRename val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileRename\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileRename"
        },
        {
            "location": "/files-FileRename/#filerename",
            "text": "[Source]  primitive val FileRename",
            "title": "FileRename"
        },
        {
            "location": "/files-FileRename/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileRename/#create",
            "text": "[Source]  new val create()\n: FileRename val^",
            "title": "create"
        },
        {
            "location": "/files-FileRename/#returns",
            "text": "FileRename  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileRename/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileRename/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileRename/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileRename/#eq",
            "text": "[Source]  fun box eq(\n  that: FileRename val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileRename/#parameters",
            "text": "that:  FileRename  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileRename/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileRename/#ne",
            "text": "[Source]  fun box ne(\n  that: FileRename val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileRename/#parameters_1",
            "text": "that:  FileRename  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileRename/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileSeek/",
            "text": "FileSeek\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileSeek\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileSeek val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileSeek\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileSeek val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileSeek\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileSeek val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileSeek\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileSeek"
        },
        {
            "location": "/files-FileSeek/#fileseek",
            "text": "[Source]  primitive val FileSeek",
            "title": "FileSeek"
        },
        {
            "location": "/files-FileSeek/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileSeek/#create",
            "text": "[Source]  new val create()\n: FileSeek val^",
            "title": "create"
        },
        {
            "location": "/files-FileSeek/#returns",
            "text": "FileSeek  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileSeek/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileSeek/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileSeek/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileSeek/#eq",
            "text": "[Source]  fun box eq(\n  that: FileSeek val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileSeek/#parameters",
            "text": "that:  FileSeek  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileSeek/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileSeek/#ne",
            "text": "[Source]  fun box ne(\n  that: FileSeek val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileSeek/#parameters_1",
            "text": "that:  FileSeek  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileSeek/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileStat/",
            "text": "FileStat\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileStat\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileStat val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileStat\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileStat val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileStat\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileStat val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileStat\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileStat"
        },
        {
            "location": "/files-FileStat/#filestat",
            "text": "[Source]  primitive val FileStat",
            "title": "FileStat"
        },
        {
            "location": "/files-FileStat/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileStat/#create",
            "text": "[Source]  new val create()\n: FileStat val^",
            "title": "create"
        },
        {
            "location": "/files-FileStat/#returns",
            "text": "FileStat  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileStat/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileStat/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileStat/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileStat/#eq",
            "text": "[Source]  fun box eq(\n  that: FileStat val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileStat/#parameters",
            "text": "that:  FileStat  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileStat/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileStat/#ne",
            "text": "[Source]  fun box ne(\n  that: FileStat val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileStat/#parameters_1",
            "text": "that:  FileStat  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileStat/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileSync/",
            "text": "FileSync\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileSync\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileSync val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileSync\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileSync val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileSync\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileSync val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileSync\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileSync"
        },
        {
            "location": "/files-FileSync/#filesync",
            "text": "[Source]  primitive val FileSync",
            "title": "FileSync"
        },
        {
            "location": "/files-FileSync/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileSync/#create",
            "text": "[Source]  new val create()\n: FileSync val^",
            "title": "create"
        },
        {
            "location": "/files-FileSync/#returns",
            "text": "FileSync  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileSync/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileSync/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileSync/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileSync/#eq",
            "text": "[Source]  fun box eq(\n  that: FileSync val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileSync/#parameters",
            "text": "that:  FileSync  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileSync/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileSync/#ne",
            "text": "[Source]  fun box ne(\n  that: FileSync val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileSync/#parameters_1",
            "text": "that:  FileSync  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileSync/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileTime/",
            "text": "FileTime\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileTime\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileTime val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileTime\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileTime val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileTime\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileTime val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileTime\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileTime"
        },
        {
            "location": "/files-FileTime/#filetime",
            "text": "[Source]  primitive val FileTime",
            "title": "FileTime"
        },
        {
            "location": "/files-FileTime/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileTime/#create",
            "text": "[Source]  new val create()\n: FileTime val^",
            "title": "create"
        },
        {
            "location": "/files-FileTime/#returns",
            "text": "FileTime  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileTime/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileTime/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileTime/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileTime/#eq",
            "text": "[Source]  fun box eq(\n  that: FileTime val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileTime/#parameters",
            "text": "that:  FileTime  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileTime/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileTime/#ne",
            "text": "[Source]  fun box ne(\n  that: FileTime val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileTime/#parameters_1",
            "text": "that:  FileTime  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileTime/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileTruncate/",
            "text": "FileTruncate\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileTruncate\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileTruncate val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileTruncate\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileTruncate val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileTruncate\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileTruncate val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileTruncate\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileTruncate"
        },
        {
            "location": "/files-FileTruncate/#filetruncate",
            "text": "[Source]  primitive val FileTruncate",
            "title": "FileTruncate"
        },
        {
            "location": "/files-FileTruncate/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileTruncate/#create",
            "text": "[Source]  new val create()\n: FileTruncate val^",
            "title": "create"
        },
        {
            "location": "/files-FileTruncate/#returns",
            "text": "FileTruncate  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileTruncate/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileTruncate/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileTruncate/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileTruncate/#eq",
            "text": "[Source]  fun box eq(\n  that: FileTruncate val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileTruncate/#parameters",
            "text": "that:  FileTruncate  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileTruncate/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileTruncate/#ne",
            "text": "[Source]  fun box ne(\n  that: FileTruncate val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileTruncate/#parameters_1",
            "text": "that:  FileTruncate  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileTruncate/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileWrite/",
            "text": "FileWrite\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileWrite\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileWrite val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileWrite\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileWrite val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileWrite\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileWrite val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileWrite\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileWrite"
        },
        {
            "location": "/files-FileWrite/#filewrite",
            "text": "[Source]  primitive val FileWrite",
            "title": "FileWrite"
        },
        {
            "location": "/files-FileWrite/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileWrite/#create",
            "text": "[Source]  new val create()\n: FileWrite val^",
            "title": "create"
        },
        {
            "location": "/files-FileWrite/#returns",
            "text": "FileWrite  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileWrite/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileWrite/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileWrite/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileWrite/#eq",
            "text": "[Source]  fun box eq(\n  that: FileWrite val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileWrite/#parameters",
            "text": "that:  FileWrite  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileWrite/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileWrite/#ne",
            "text": "[Source]  fun box ne(\n  that: FileWrite val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileWrite/#parameters_1",
            "text": "that:  FileWrite  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileWrite/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileExec/",
            "text": "FileExec\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileExec\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileExec val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileExec\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalue\n\u00b6\n\n\n[Source]\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileExec val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileExec\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileExec val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileExec\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileExec"
        },
        {
            "location": "/files-FileExec/#fileexec",
            "text": "[Source]  primitive val FileExec",
            "title": "FileExec"
        },
        {
            "location": "/files-FileExec/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileExec/#create",
            "text": "[Source]  new val create()\n: FileExec val^",
            "title": "create"
        },
        {
            "location": "/files-FileExec/#returns",
            "text": "FileExec  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileExec/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileExec/#value",
            "text": "[Source]  fun box value()\n: U32 val",
            "title": "value"
        },
        {
            "location": "/files-FileExec/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileExec/#eq",
            "text": "[Source]  fun box eq(\n  that: FileExec val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileExec/#parameters",
            "text": "that:  FileExec  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileExec/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileExec/#ne",
            "text": "[Source]  fun box ne(\n  that: FileExec val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileExec/#parameters_1",
            "text": "that:  FileExec  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileExec/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileCaps/",
            "text": "FileCaps\n\u00b6\n\n\n[Source]\n\n\ntype FileCaps is\n  Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] ref",
            "title": "type FileCaps"
        },
        {
            "location": "/files-FileCaps/#filecaps",
            "text": "[Source]  type FileCaps is\n  Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref",
            "title": "FileCaps"
        },
        {
            "location": "/files-FileCaps/#type-alias-for",
            "text": "Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] ref",
            "title": "Type Alias For"
        },
        {
            "location": "/files-FileOK/",
            "text": "FileOK\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileOK\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileOK val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileOK\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileOK val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileOK\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileOK val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileOK\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileOK"
        },
        {
            "location": "/files-FileOK/#fileok",
            "text": "[Source]  primitive val FileOK",
            "title": "FileOK"
        },
        {
            "location": "/files-FileOK/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileOK/#create",
            "text": "[Source]  new val create()\n: FileOK val^",
            "title": "create"
        },
        {
            "location": "/files-FileOK/#returns",
            "text": "FileOK  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileOK/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileOK/#eq",
            "text": "[Source]  fun box eq(\n  that: FileOK val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileOK/#parameters",
            "text": "that:  FileOK  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileOK/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileOK/#ne",
            "text": "[Source]  fun box ne(\n  that: FileOK val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileOK/#parameters_1",
            "text": "that:  FileOK  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileOK/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileError/",
            "text": "FileError\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileError\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileError val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileError\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileError val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileError\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileError val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileError\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileError"
        },
        {
            "location": "/files-FileError/#fileerror",
            "text": "[Source]  primitive val FileError",
            "title": "FileError"
        },
        {
            "location": "/files-FileError/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileError/#create",
            "text": "[Source]  new val create()\n: FileError val^",
            "title": "create"
        },
        {
            "location": "/files-FileError/#returns",
            "text": "FileError  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileError/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileError/#eq",
            "text": "[Source]  fun box eq(\n  that: FileError val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileError/#parameters",
            "text": "that:  FileError  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileError/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileError/#ne",
            "text": "[Source]  fun box ne(\n  that: FileError val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileError/#parameters_1",
            "text": "that:  FileError  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileError/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileEOF/",
            "text": "FileEOF\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileEOF\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileEOF val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileEOF\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileEOF val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileEOF\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileEOF val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileEOF\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileEOF"
        },
        {
            "location": "/files-FileEOF/#fileeof",
            "text": "[Source]  primitive val FileEOF",
            "title": "FileEOF"
        },
        {
            "location": "/files-FileEOF/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileEOF/#create",
            "text": "[Source]  new val create()\n: FileEOF val^",
            "title": "create"
        },
        {
            "location": "/files-FileEOF/#returns",
            "text": "FileEOF  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileEOF/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileEOF/#eq",
            "text": "[Source]  fun box eq(\n  that: FileEOF val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileEOF/#parameters",
            "text": "that:  FileEOF  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileEOF/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileEOF/#ne",
            "text": "[Source]  fun box ne(\n  that: FileEOF val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileEOF/#parameters_1",
            "text": "that:  FileEOF  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileEOF/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileBadFileNumber/",
            "text": "FileBadFileNumber\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileBadFileNumber\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileBadFileNumber val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileBadFileNumber\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileBadFileNumber val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileBadFileNumber\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileBadFileNumber val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileBadFileNumber\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileBadFileNumber"
        },
        {
            "location": "/files-FileBadFileNumber/#filebadfilenumber",
            "text": "[Source]  primitive val FileBadFileNumber",
            "title": "FileBadFileNumber"
        },
        {
            "location": "/files-FileBadFileNumber/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileBadFileNumber/#create",
            "text": "[Source]  new val create()\n: FileBadFileNumber val^",
            "title": "create"
        },
        {
            "location": "/files-FileBadFileNumber/#returns",
            "text": "FileBadFileNumber  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileBadFileNumber/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileBadFileNumber/#eq",
            "text": "[Source]  fun box eq(\n  that: FileBadFileNumber val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileBadFileNumber/#parameters",
            "text": "that:  FileBadFileNumber  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileBadFileNumber/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileBadFileNumber/#ne",
            "text": "[Source]  fun box ne(\n  that: FileBadFileNumber val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileBadFileNumber/#parameters_1",
            "text": "that:  FileBadFileNumber  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileBadFileNumber/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileExists/",
            "text": "FileExists\n\u00b6\n\n\n[Source]\n\n\nprimitive val FileExists\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FileExists val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileExists\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FileExists val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileExists\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FileExists val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFileExists\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FileExists"
        },
        {
            "location": "/files-FileExists/#fileexists",
            "text": "[Source]  primitive val FileExists",
            "title": "FileExists"
        },
        {
            "location": "/files-FileExists/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileExists/#create",
            "text": "[Source]  new val create()\n: FileExists val^",
            "title": "create"
        },
        {
            "location": "/files-FileExists/#returns",
            "text": "FileExists  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FileExists/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileExists/#eq",
            "text": "[Source]  fun box eq(\n  that: FileExists val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FileExists/#parameters",
            "text": "that:  FileExists  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileExists/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileExists/#ne",
            "text": "[Source]  fun box ne(\n  that: FileExists val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FileExists/#parameters_1",
            "text": "that:  FileExists  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FileExists/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePermissionDenied/",
            "text": "FilePermissionDenied\n\u00b6\n\n\n[Source]\n\n\nprimitive val FilePermissionDenied\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FilePermissionDenied val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFilePermissionDenied\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FilePermissionDenied val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFilePermissionDenied\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FilePermissionDenied val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFilePermissionDenied\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FilePermissionDenied"
        },
        {
            "location": "/files-FilePermissionDenied/#filepermissiondenied",
            "text": "[Source]  primitive val FilePermissionDenied",
            "title": "FilePermissionDenied"
        },
        {
            "location": "/files-FilePermissionDenied/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FilePermissionDenied/#create",
            "text": "[Source]  new val create()\n: FilePermissionDenied val^",
            "title": "create"
        },
        {
            "location": "/files-FilePermissionDenied/#returns",
            "text": "FilePermissionDenied  val^",
            "title": "Returns"
        },
        {
            "location": "/files-FilePermissionDenied/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FilePermissionDenied/#eq",
            "text": "[Source]  fun box eq(\n  that: FilePermissionDenied val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-FilePermissionDenied/#parameters",
            "text": "that:  FilePermissionDenied  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePermissionDenied/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FilePermissionDenied/#ne",
            "text": "[Source]  fun box ne(\n  that: FilePermissionDenied val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-FilePermissionDenied/#parameters_1",
            "text": "that:  FilePermissionDenied  val",
            "title": "Parameters"
        },
        {
            "location": "/files-FilePermissionDenied/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileErrNo/",
            "text": "FileErrNo\n\u00b6\n\n\n[Source]\n\n\ntype FileErrNo is\n  (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nFileOK\n val | \nFileError\n val | \nFileEOF\n val | \nFileBadFileNumber\n val | \nFileExists\n val | \nFilePermissionDenied\n val)",
            "title": "type FileErrNo"
        },
        {
            "location": "/files-FileErrNo/#fileerrno",
            "text": "[Source]  type FileErrNo is\n  (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)",
            "title": "FileErrNo"
        },
        {
            "location": "/files-FileErrNo/#type-alias-for",
            "text": "( FileOK  val |  FileError  val |  FileEOF  val |  FileBadFileNumber  val |  FileExists  val |  FilePermissionDenied  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/files-CreateFile/",
            "text": "CreateFile\n\u00b6\n\n\n[Source]\n\n\nOpen a File for read/write, creating if it doesn't exist, preserving the\ncontents if it does exist.\n\n\nprimitive val CreateFile\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: CreateFile val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nCreateFile\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply(\n  from: FilePath val)\n: (File ref | FileOK val | FileError val | \n    FileEOF val | FileBadFileNumber val | FileExists val | \n    FilePermissionDenied val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nFile\n ref | \nFileOK\n val | \nFileError\n val | \n    \nFileEOF\n val | \nFileBadFileNumber\n val | \nFileExists\n val | \n    \nFilePermissionDenied\n val)\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: CreateFile val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nCreateFile\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: CreateFile val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nCreateFile\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive CreateFile"
        },
        {
            "location": "/files-CreateFile/#createfile",
            "text": "[Source]  Open a File for read/write, creating if it doesn't exist, preserving the\ncontents if it does exist.  primitive val CreateFile",
            "title": "CreateFile"
        },
        {
            "location": "/files-CreateFile/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-CreateFile/#create",
            "text": "[Source]  new val create()\n: CreateFile val^",
            "title": "create"
        },
        {
            "location": "/files-CreateFile/#returns",
            "text": "CreateFile  val^",
            "title": "Returns"
        },
        {
            "location": "/files-CreateFile/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-CreateFile/#apply",
            "text": "[Source]  fun box apply(\n  from: FilePath val)\n: (File ref | FileOK val | FileError val | \n    FileEOF val | FileBadFileNumber val | FileExists val | \n    FilePermissionDenied val)",
            "title": "apply"
        },
        {
            "location": "/files-CreateFile/#parameters",
            "text": "from:  FilePath  val",
            "title": "Parameters"
        },
        {
            "location": "/files-CreateFile/#returns_1",
            "text": "( File  ref |  FileOK  val |  FileError  val | \n     FileEOF  val |  FileBadFileNumber  val |  FileExists  val | \n     FilePermissionDenied  val)",
            "title": "Returns"
        },
        {
            "location": "/files-CreateFile/#eq",
            "text": "[Source]  fun box eq(\n  that: CreateFile val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-CreateFile/#parameters_1",
            "text": "that:  CreateFile  val",
            "title": "Parameters"
        },
        {
            "location": "/files-CreateFile/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-CreateFile/#ne",
            "text": "[Source]  fun box ne(\n  that: CreateFile val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-CreateFile/#parameters_2",
            "text": "that:  CreateFile  val",
            "title": "Parameters"
        },
        {
            "location": "/files-CreateFile/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-OpenFile/",
            "text": "OpenFile\n\u00b6\n\n\n[Source]\n\n\nOpen a File for read only.\n\n\nprimitive val OpenFile\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: OpenFile val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nOpenFile\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply(\n  from: FilePath val)\n: (File ref | FileOK val | FileError val | \n    FileEOF val | FileBadFileNumber val | FileExists val | \n    FilePermissionDenied val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nFile\n ref | \nFileOK\n val | \nFileError\n val | \n    \nFileEOF\n val | \nFileBadFileNumber\n val | \nFileExists\n val | \n    \nFilePermissionDenied\n val)\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: OpenFile val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nOpenFile\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: OpenFile val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nOpenFile\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive OpenFile"
        },
        {
            "location": "/files-OpenFile/#openfile",
            "text": "[Source]  Open a File for read only.  primitive val OpenFile",
            "title": "OpenFile"
        },
        {
            "location": "/files-OpenFile/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-OpenFile/#create",
            "text": "[Source]  new val create()\n: OpenFile val^",
            "title": "create"
        },
        {
            "location": "/files-OpenFile/#returns",
            "text": "OpenFile  val^",
            "title": "Returns"
        },
        {
            "location": "/files-OpenFile/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-OpenFile/#apply",
            "text": "[Source]  fun box apply(\n  from: FilePath val)\n: (File ref | FileOK val | FileError val | \n    FileEOF val | FileBadFileNumber val | FileExists val | \n    FilePermissionDenied val)",
            "title": "apply"
        },
        {
            "location": "/files-OpenFile/#parameters",
            "text": "from:  FilePath  val",
            "title": "Parameters"
        },
        {
            "location": "/files-OpenFile/#returns_1",
            "text": "( File  ref |  FileOK  val |  FileError  val | \n     FileEOF  val |  FileBadFileNumber  val |  FileExists  val | \n     FilePermissionDenied  val)",
            "title": "Returns"
        },
        {
            "location": "/files-OpenFile/#eq",
            "text": "[Source]  fun box eq(\n  that: OpenFile val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/files-OpenFile/#parameters_1",
            "text": "that:  OpenFile  val",
            "title": "Parameters"
        },
        {
            "location": "/files-OpenFile/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-OpenFile/#ne",
            "text": "[Source]  fun box ne(\n  that: OpenFile val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/files-OpenFile/#parameters_2",
            "text": "that:  OpenFile  val",
            "title": "Parameters"
        },
        {
            "location": "/files-OpenFile/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/",
            "text": "File\n\u00b6\n\n\n[Source]\n\n\nOperations on a file.\n\n\nclass ref File\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nAttempt to open for read/write, creating if it doesn't exist, preserving\nthe contents if it does exist.\nSet errno according to result.\n\n\nnew ref create(\n  from: FilePath val)\n: File ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFile\n ref^\n\n\n\n\n\n\nopen\n\u00b6\n\n\n[Source]\n\n\nOpen for read only.\nSet _errno according to result.\n\n\nnew ref open(\n  from: FilePath val)\n: File ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFile\n ref^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet path: \nFilePath\n val\n\u00b6\n\n\n[Source]\n\n\nThis is the filesystem path locating this file on the file system\nand an object capability granting access to operate on this file.\n\n\n\n\nlet writeable: \nBool\n val\n\u00b6\n\n\n[Source]\n\n\ntrue\n if the underlying file descriptor has been opened as writeable.\n\n\n\n\nPublic Functions\n\u00b6\n\n\nerrno\n\u00b6\n\n\n[Source]\n\n\nReturns the last error code set for this File\n\n\nfun box errno()\n: (FileOK val | FileError val | FileEOF val | \n    FileBadFileNumber val | FileExists val | FilePermissionDenied val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nFileOK\n val | \nFileError\n val | \nFileEOF\n val | \n    \nFileBadFileNumber\n val | \nFileExists\n val | \nFilePermissionDenied\n val)\n\n\n\n\n\n\nclear_errno\n\u00b6\n\n\n[Source]\n\n\nClears the last error code set for this File.\nClears the error indicator for the stream.\n\n\nfun ref clear_errno()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nvalid\n\u00b6\n\n\n[Source]\n\n\nReturns true if the file is currently open.\n\n\nfun box valid()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nline\n\u00b6\n\n\n[Source]\n\n\nReturns a line as a String. The newline is not included in the string. If\nthere is no more data, this raises an error. If there is a file error,\nthis raises an error.\n\n\nfun ref line()\n: String iso^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^ ?\n\n\n\n\n\n\nread\n\u00b6\n\n\n[Source]\n\n\nReturns up to len bytes.\n\n\nfun ref read(\n  len: USize val)\n: Array[U8 val] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nU8\n val] iso^\n\n\n\n\n\n\nread_string\n\u00b6\n\n\n[Source]\n\n\nReturns up to len bytes. The resulting string may have internal null\ncharacters.\n\n\nfun ref read_string(\n  len: USize val)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nprint\n\u00b6\n\n\n[Source]\n\n\nSame as write, buts adds a newline.\n\n\nfun ref print(\n  data: (String box | Array[U8 val] box))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nprintv\n\u00b6\n\n\n[Source]\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nfun ref printv(\n  data: ByteSeqIter box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nReturns false if the file wasn't opened with write permission.\nReturns false and closes the file if not all the bytes were written.\n\n\nfun ref write(\n  data: (String box | Array[U8 val] box))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwritev\n\u00b6\n\n\n[Source]\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nfun ref writev(\n  data: ByteSeqIter box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nqueue\n\u00b6\n\n\n[Source]\n\n\nQueue data to be written\nNOTE: Queue'd data will always be written before normal print/write\nrequested data\n\n\nfun ref queue(\n  data: (String box | Array[U8 val] box))\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nqueuev\n\u00b6\n\n\n[Source]\n\n\nQueue an iterable collection of ByteSeqs to be written\nNOTE: Queue'd data will always be written before normal print/write\nrequested data\n\n\nfun ref queuev(\n  data: ByteSeqIter box)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nflush\n\u00b6\n\n\n[Source]\n\n\nFlush any queued data\n\n\nfun ref flush()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nposition\n\u00b6\n\n\n[Source]\n\n\nReturn the current cursor position in the file.\n\n\nfun ref position()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nReturn the total length of the file.\n\n\nfun ref size()\n: USize val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nseek_start\n\u00b6\n\n\n[Source]\n\n\nSet the cursor position relative to the start of the file.\n\n\nfun ref seek_start(\n  offset: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nseek_end\n\u00b6\n\n\n[Source]\n\n\nSet the cursor position relative to the end of the file.\n\n\nfun ref seek_end(\n  offset: USize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nseek\n\u00b6\n\n\n[Source]\n\n\nMove the cursor position.\n\n\nfun ref seek(\n  offset: ISize val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\noffset: \nISize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsync\n\u00b6\n\n\n[Source]\n\n\nSync the file contents to physical storage.\n\n\nfun ref sync()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndatasync\n\u00b6\n\n\n[Source]\n\n\nSync the file contents to physical storage.\n\n\nfun ref datasync()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset_length\n\u00b6\n\n\n[Source]\n\n\nChange the file size. If it is made larger, the new contents are undefined.\n\n\nfun ref set_length(\n  len: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfo\n\u00b6\n\n\n[Source]\n\n\nReturn a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.\n\n\nfun box info()\n: FileInfo val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileInfo\n val ?\n\n\n\n\n\n\nchmod\n\u00b6\n\n\n[Source]\n\n\nSet the FileMode for this directory.\n\n\nfun box chmod(\n  mode: FileMode box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmode: \nFileMode\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nchown\n\u00b6\n\n\n[Source]\n\n\nSet the owner and group for this directory. Does nothing on Windows.\n\n\nfun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nuid: \nU32\n val\n\n\ngid: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ntouch\n\u00b6\n\n\n[Source]\n\n\nSet the last access and modification times of the directory to now.\n\n\nfun box touch()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nset_time\n\u00b6\n\n\n[Source]\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\natime: (\nI64\n val , \nI64\n val)\n\n\nmtime: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlines\n\u00b6\n\n\n[Source]\n\n\nReturns an iterator for reading lines from the file.\n\n\nfun ref lines()\n: FileLines ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileLines\n ref\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nClose the file. Future operations will do nothing.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class File"
        },
        {
            "location": "/files-File/#file",
            "text": "[Source]  Operations on a file.  class ref File",
            "title": "File"
        },
        {
            "location": "/files-File/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-File/#create",
            "text": "[Source]  Attempt to open for read/write, creating if it doesn't exist, preserving\nthe contents if it does exist.\nSet errno according to result.  new ref create(\n  from: FilePath val)\n: File ref^",
            "title": "create"
        },
        {
            "location": "/files-File/#parameters",
            "text": "from:  FilePath  val",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns",
            "text": "File  ref^",
            "title": "Returns"
        },
        {
            "location": "/files-File/#open",
            "text": "[Source]  Open for read only.\nSet _errno according to result.  new ref open(\n  from: FilePath val)\n: File ref^",
            "title": "open"
        },
        {
            "location": "/files-File/#parameters_1",
            "text": "from:  FilePath  val",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_1",
            "text": "File  ref^",
            "title": "Returns"
        },
        {
            "location": "/files-File/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/files-File/#let-path-filepath-val",
            "text": "[Source]  This is the filesystem path locating this file on the file system\nand an object capability granting access to operate on this file.",
            "title": "let path: FilePath val"
        },
        {
            "location": "/files-File/#let-writeable-bool-val",
            "text": "[Source]  true  if the underlying file descriptor has been opened as writeable.",
            "title": "let writeable: Bool val"
        },
        {
            "location": "/files-File/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-File/#errno",
            "text": "[Source]  Returns the last error code set for this File  fun box errno()\n: (FileOK val | FileError val | FileEOF val | \n    FileBadFileNumber val | FileExists val | FilePermissionDenied val)",
            "title": "errno"
        },
        {
            "location": "/files-File/#returns_2",
            "text": "( FileOK  val |  FileError  val |  FileEOF  val | \n     FileBadFileNumber  val |  FileExists  val |  FilePermissionDenied  val)",
            "title": "Returns"
        },
        {
            "location": "/files-File/#clear_errno",
            "text": "[Source]  Clears the last error code set for this File.\nClears the error indicator for the stream.  fun ref clear_errno()\n: None val",
            "title": "clear_errno"
        },
        {
            "location": "/files-File/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#valid",
            "text": "[Source]  Returns true if the file is currently open.  fun box valid()\n: Bool val",
            "title": "valid"
        },
        {
            "location": "/files-File/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#line",
            "text": "[Source]  Returns a line as a String. The newline is not included in the string. If\nthere is no more data, this raises an error. If there is a file error,\nthis raises an error.  fun ref line()\n: String iso^ ?",
            "title": "line"
        },
        {
            "location": "/files-File/#returns_5",
            "text": "String  iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/files-File/#read",
            "text": "[Source]  Returns up to len bytes.  fun ref read(\n  len: USize val)\n: Array[U8 val] iso^",
            "title": "read"
        },
        {
            "location": "/files-File/#parameters_2",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_6",
            "text": "Array [ U8  val] iso^",
            "title": "Returns"
        },
        {
            "location": "/files-File/#read_string",
            "text": "[Source]  Returns up to len bytes. The resulting string may have internal null\ncharacters.  fun ref read_string(\n  len: USize val)\n: String iso^",
            "title": "read_string"
        },
        {
            "location": "/files-File/#parameters_3",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_7",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/files-File/#print",
            "text": "[Source]  Same as write, buts adds a newline.  fun ref print(\n  data: (String box | Array[U8 val] box))\n: Bool val",
            "title": "print"
        },
        {
            "location": "/files-File/#parameters_4",
            "text": "data: ( String  box |  Array [ U8  val] box)",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#printv",
            "text": "[Source]  Print an iterable collection of ByteSeqs.  fun ref printv(\n  data: ByteSeqIter box)\n: Bool val",
            "title": "printv"
        },
        {
            "location": "/files-File/#parameters_5",
            "text": "data:  ByteSeqIter  box",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#write",
            "text": "[Source]  Returns false if the file wasn't opened with write permission.\nReturns false and closes the file if not all the bytes were written.  fun ref write(\n  data: (String box | Array[U8 val] box))\n: Bool val",
            "title": "write"
        },
        {
            "location": "/files-File/#parameters_6",
            "text": "data: ( String  box |  Array [ U8  val] box)",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#writev",
            "text": "[Source]  Write an iterable collection of ByteSeqs.  fun ref writev(\n  data: ByteSeqIter box)\n: Bool val",
            "title": "writev"
        },
        {
            "location": "/files-File/#parameters_7",
            "text": "data:  ByteSeqIter  box",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_11",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#queue",
            "text": "[Source]  Queue data to be written\nNOTE: Queue'd data will always be written before normal print/write\nrequested data  fun ref queue(\n  data: (String box | Array[U8 val] box))\n: None val",
            "title": "queue"
        },
        {
            "location": "/files-File/#parameters_8",
            "text": "data: ( String  box |  Array [ U8  val] box)",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#queuev",
            "text": "[Source]  Queue an iterable collection of ByteSeqs to be written\nNOTE: Queue'd data will always be written before normal print/write\nrequested data  fun ref queuev(\n  data: ByteSeqIter box)\n: None val",
            "title": "queuev"
        },
        {
            "location": "/files-File/#parameters_9",
            "text": "data:  ByteSeqIter  box",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#flush",
            "text": "[Source]  Flush any queued data  fun ref flush()\n: Bool val",
            "title": "flush"
        },
        {
            "location": "/files-File/#returns_14",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#position",
            "text": "[Source]  Return the current cursor position in the file.  fun ref position()\n: USize val",
            "title": "position"
        },
        {
            "location": "/files-File/#returns_15",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#size",
            "text": "[Source]  Return the total length of the file.  fun ref size()\n: USize val",
            "title": "size"
        },
        {
            "location": "/files-File/#returns_16",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#seek_start",
            "text": "[Source]  Set the cursor position relative to the start of the file.  fun ref seek_start(\n  offset: USize val)\n: None val",
            "title": "seek_start"
        },
        {
            "location": "/files-File/#parameters_10",
            "text": "offset:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_17",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#seek_end",
            "text": "[Source]  Set the cursor position relative to the end of the file.  fun ref seek_end(\n  offset: USize val)\n: None val",
            "title": "seek_end"
        },
        {
            "location": "/files-File/#parameters_11",
            "text": "offset:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_18",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#seek",
            "text": "[Source]  Move the cursor position.  fun ref seek(\n  offset: ISize val)\n: None val",
            "title": "seek"
        },
        {
            "location": "/files-File/#parameters_12",
            "text": "offset:  ISize  val",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_19",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#sync",
            "text": "[Source]  Sync the file contents to physical storage.  fun ref sync()\n: None val",
            "title": "sync"
        },
        {
            "location": "/files-File/#returns_20",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#datasync",
            "text": "[Source]  Sync the file contents to physical storage.  fun ref datasync()\n: None val",
            "title": "datasync"
        },
        {
            "location": "/files-File/#returns_21",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#set_length",
            "text": "[Source]  Change the file size. If it is made larger, the new contents are undefined.  fun ref set_length(\n  len: USize val)\n: Bool val",
            "title": "set_length"
        },
        {
            "location": "/files-File/#parameters_13",
            "text": "len:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_22",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#info",
            "text": "[Source]  Return a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.  fun box info()\n: FileInfo val ?",
            "title": "info"
        },
        {
            "location": "/files-File/#returns_23",
            "text": "FileInfo  val ?",
            "title": "Returns"
        },
        {
            "location": "/files-File/#chmod",
            "text": "[Source]  Set the FileMode for this directory.  fun box chmod(\n  mode: FileMode box)\n: Bool val",
            "title": "chmod"
        },
        {
            "location": "/files-File/#parameters_14",
            "text": "mode:  FileMode  box",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_24",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#chown",
            "text": "[Source]  Set the owner and group for this directory. Does nothing on Windows.  fun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val",
            "title": "chown"
        },
        {
            "location": "/files-File/#parameters_15",
            "text": "uid:  U32  val  gid:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_25",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#touch",
            "text": "[Source]  Set the last access and modification times of the directory to now.  fun box touch()\n: Bool val",
            "title": "touch"
        },
        {
            "location": "/files-File/#returns_26",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#set_time",
            "text": "[Source]  Set the last access and modification times of the directory to the given\nvalues.  fun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val",
            "title": "set_time"
        },
        {
            "location": "/files-File/#parameters_16",
            "text": "atime: ( I64  val ,  I64  val)  mtime: ( I64  val ,  I64  val)",
            "title": "Parameters"
        },
        {
            "location": "/files-File/#returns_27",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-File/#lines",
            "text": "[Source]  Returns an iterator for reading lines from the file.  fun ref lines()\n: FileLines ref",
            "title": "lines"
        },
        {
            "location": "/files-File/#returns_28",
            "text": "FileLines  ref",
            "title": "Returns"
        },
        {
            "location": "/files-File/#dispose",
            "text": "[Source]  Close the file. Future operations will do nothing.  fun ref dispose()\n: None val",
            "title": "dispose"
        },
        {
            "location": "/files-File/#returns_29",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileLines/",
            "text": "FileLines\n\u00b6\n\n\n[Source]\n\n\nIterate over the lines in a file.\n\n\nclass ref FileLines is\n  Iterator[String val] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nIterator\n[\nString\n val] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew ref create(\n  file: File ref)\n: FileLines ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfile: \nFile\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileLines\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhas_next\n\u00b6\n\n\n[Source]\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\u00b6\n\n\n[Source]\n\n\nfun ref next()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val",
            "title": "class FileLines"
        },
        {
            "location": "/files-FileLines/#filelines",
            "text": "[Source]  Iterate over the lines in a file.  class ref FileLines is\n  Iterator[String val] ref",
            "title": "FileLines"
        },
        {
            "location": "/files-FileLines/#implements",
            "text": "Iterator [ String  val] ref",
            "title": "Implements"
        },
        {
            "location": "/files-FileLines/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileLines/#create",
            "text": "[Source]  new ref create(\n  file: File ref)\n: FileLines ref^",
            "title": "create"
        },
        {
            "location": "/files-FileLines/#parameters",
            "text": "file:  File  ref",
            "title": "Parameters"
        },
        {
            "location": "/files-FileLines/#returns",
            "text": "FileLines  ref^",
            "title": "Returns"
        },
        {
            "location": "/files-FileLines/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-FileLines/#has_next",
            "text": "[Source]  fun ref has_next()\n: Bool val",
            "title": "has_next"
        },
        {
            "location": "/files-FileLines/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-FileLines/#next",
            "text": "[Source]  fun ref next()\n: String val",
            "title": "next"
        },
        {
            "location": "/files-FileLines/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/",
            "text": "Directory\n\u00b6\n\n\n[Source]\n\n\nOperations on a directory.\n\n\nThe directory-relative functions (open, etc) use the *at interface on FreeBSD\nand Linux. This isn't available on OS X prior to 10.10, so it is not used. On\nFreeBSD, this allows the directory-relative functions to take advantage of\nCapsicum.\n\n\nclass ref Directory\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nThis will raise an error if the path doesn't exist or it is not a\ndirectory, or if FileRead or FileStat permission isn't available.\n\n\nnew ref create(\n  from: FilePath val)\n: Directory ref^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDirectory\n ref^ ?\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet path: \nFilePath\n val\n\u00b6\n\n\n[Source]\n\n\nThis is the filesystem path locating this directory on the file system\nand an object capability granting access to operate on this directory.\n\n\n\n\nPublic Functions\n\u00b6\n\n\nentries\n\u00b6\n\n\n[Source]\n\n\nThe entries will include everything in the directory, but it is not\nrecursive. The path for the entry will be relative to the directory, so it\nwill contain no directory separators. The entries will not include \".\" or\n\"..\".\n\n\nfun box entries()\n: Array[String val] iso^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nString\n val] iso^ ?\n\n\n\n\n\n\nopen\n\u00b6\n\n\n[Source]\n\n\nOpen a directory relative to this one. Raises an error if the path is not\nwithin this directory hierarchy.\n\n\nfun box open(\n  target: String val)\n: Directory iso^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDirectory\n iso^ ?\n\n\n\n\n\n\nmkdir\n\u00b6\n\n\n[Source]\n\n\nCreates a directory relative to this one. Returns false if the path is\nnot within this directory hierarchy or if FileMkdir permission is missing.\n\n\nfun box mkdir(\n  target: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncreate_file\n\u00b6\n\n\n[Source]\n\n\nOpen for read/write, creating if it doesn't exist, preserving the contents\nif it does exist.\n\n\nfun box create_file(\n  target: String val)\n: File iso^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFile\n iso^ ?\n\n\n\n\n\n\nopen_file\n\u00b6\n\n\n[Source]\n\n\nOpen for read only, failing if it doesn't exist.\n\n\nfun box open_file(\n  target: String val)\n: File iso^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFile\n iso^ ?\n\n\n\n\n\n\ninfo\n\u00b6\n\n\n[Source]\n\n\nReturn a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.\n\n\nfun box info()\n: FileInfo val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileInfo\n val ?\n\n\n\n\n\n\nchmod\n\u00b6\n\n\n[Source]\n\n\nSet the FileMode for this directory.\n\n\nfun box chmod(\n  mode: FileMode box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmode: \nFileMode\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nchown\n\u00b6\n\n\n[Source]\n\n\nSet the owner and group for this directory. Does nothing on Windows.\n\n\nfun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nuid: \nU32\n val\n\n\ngid: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ntouch\n\u00b6\n\n\n[Source]\n\n\nSet the last access and modification times of the directory to now.\n\n\nfun box touch()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nset_time\n\u00b6\n\n\n[Source]\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\natime: (\nI64\n val , \nI64\n val)\n\n\nmtime: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfoat\n\u00b6\n\n\n[Source]\n\n\nReturn a FileInfo for some path relative to this directory.\n\n\nfun box infoat(\n  target: String val)\n: FileInfo val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFileInfo\n val ?\n\n\n\n\n\n\nchmodat\n\u00b6\n\n\n[Source]\n\n\nSet the FileMode for some path relative to this directory.\n\n\nfun box chmodat(\n  target: String val,\n  mode: FileMode box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntarget: \nString\n val\n\n\nmode: \nFileMode\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nchownat\n\u00b6\n\n\n[Source]\n\n\nSet the FileMode for some path relative to this directory.\n\n\nfun box chownat(\n  target: String val,\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntarget: \nString\n val\n\n\nuid: \nU32\n val\n\n\ngid: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ntouchat\n\u00b6\n\n\n[Source]\n\n\nSet the last access and modification times of the directory to now.\n\n\nfun box touchat(\n  target: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nset_time_at\n\u00b6\n\n\n[Source]\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun box set_time_at(\n  target: String val,\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntarget: \nString\n val\n\n\natime: (\nI64\n val , \nI64\n val)\n\n\nmtime: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nsymlink\n\u00b6\n\n\n[Source]\n\n\nLink the source path to the link_name, where the link_name is relative to\nthis directory.\n\n\nfun box symlink(\n  source: FilePath val,\n  link_name: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsource: \nFilePath\n val\n\n\nlink_name: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nremove\n\u00b6\n\n\n[Source]\n\n\nRemove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.\n\n\nfun box remove(\n  target: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nrename\n\u00b6\n\n\n[Source]\n\n\nRename source (which is relative to this directory) to target (which is\nrelative to the \nto\n directory).\n\n\nfun box rename(\n  source: String val,\n  to: Directory box,\n  target: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsource: \nString\n val\n\n\nto: \nDirectory\n box\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nClose the directory.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class Directory"
        },
        {
            "location": "/files-Directory/#directory",
            "text": "[Source]  Operations on a directory.  The directory-relative functions (open, etc) use the *at interface on FreeBSD\nand Linux. This isn't available on OS X prior to 10.10, so it is not used. On\nFreeBSD, this allows the directory-relative functions to take advantage of\nCapsicum.  class ref Directory",
            "title": "Directory"
        },
        {
            "location": "/files-Directory/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-Directory/#create",
            "text": "[Source]  This will raise an error if the path doesn't exist or it is not a\ndirectory, or if FileRead or FileStat permission isn't available.  new ref create(\n  from: FilePath val)\n: Directory ref^ ?",
            "title": "create"
        },
        {
            "location": "/files-Directory/#parameters",
            "text": "from:  FilePath  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns",
            "text": "Directory  ref^ ?",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/files-Directory/#let-path-filepath-val",
            "text": "[Source]  This is the filesystem path locating this directory on the file system\nand an object capability granting access to operate on this directory.",
            "title": "let path: FilePath val"
        },
        {
            "location": "/files-Directory/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/files-Directory/#entries",
            "text": "[Source]  The entries will include everything in the directory, but it is not\nrecursive. The path for the entry will be relative to the directory, so it\nwill contain no directory separators. The entries will not include \".\" or\n\"..\".  fun box entries()\n: Array[String val] iso^ ?",
            "title": "entries"
        },
        {
            "location": "/files-Directory/#returns_1",
            "text": "Array [ String  val] iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#open",
            "text": "[Source]  Open a directory relative to this one. Raises an error if the path is not\nwithin this directory hierarchy.  fun box open(\n  target: String val)\n: Directory iso^ ?",
            "title": "open"
        },
        {
            "location": "/files-Directory/#parameters_1",
            "text": "target:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_2",
            "text": "Directory  iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#mkdir",
            "text": "[Source]  Creates a directory relative to this one. Returns false if the path is\nnot within this directory hierarchy or if FileMkdir permission is missing.  fun box mkdir(\n  target: String val)\n: Bool val",
            "title": "mkdir"
        },
        {
            "location": "/files-Directory/#parameters_2",
            "text": "target:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#create_file",
            "text": "[Source]  Open for read/write, creating if it doesn't exist, preserving the contents\nif it does exist.  fun box create_file(\n  target: String val)\n: File iso^ ?",
            "title": "create_file"
        },
        {
            "location": "/files-Directory/#parameters_3",
            "text": "target:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_4",
            "text": "File  iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#open_file",
            "text": "[Source]  Open for read only, failing if it doesn't exist.  fun box open_file(\n  target: String val)\n: File iso^ ?",
            "title": "open_file"
        },
        {
            "location": "/files-Directory/#parameters_4",
            "text": "target:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_5",
            "text": "File  iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#info",
            "text": "[Source]  Return a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.  fun box info()\n: FileInfo val ?",
            "title": "info"
        },
        {
            "location": "/files-Directory/#returns_6",
            "text": "FileInfo  val ?",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#chmod",
            "text": "[Source]  Set the FileMode for this directory.  fun box chmod(\n  mode: FileMode box)\n: Bool val",
            "title": "chmod"
        },
        {
            "location": "/files-Directory/#parameters_5",
            "text": "mode:  FileMode  box",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#chown",
            "text": "[Source]  Set the owner and group for this directory. Does nothing on Windows.  fun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val",
            "title": "chown"
        },
        {
            "location": "/files-Directory/#parameters_6",
            "text": "uid:  U32  val  gid:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#touch",
            "text": "[Source]  Set the last access and modification times of the directory to now.  fun box touch()\n: Bool val",
            "title": "touch"
        },
        {
            "location": "/files-Directory/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#set_time",
            "text": "[Source]  Set the last access and modification times of the directory to the given\nvalues.  fun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val",
            "title": "set_time"
        },
        {
            "location": "/files-Directory/#parameters_7",
            "text": "atime: ( I64  val ,  I64  val)  mtime: ( I64  val ,  I64  val)",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#infoat",
            "text": "[Source]  Return a FileInfo for some path relative to this directory.  fun box infoat(\n  target: String val)\n: FileInfo val ?",
            "title": "infoat"
        },
        {
            "location": "/files-Directory/#parameters_8",
            "text": "target:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_11",
            "text": "FileInfo  val ?",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#chmodat",
            "text": "[Source]  Set the FileMode for some path relative to this directory.  fun box chmodat(\n  target: String val,\n  mode: FileMode box)\n: Bool val",
            "title": "chmodat"
        },
        {
            "location": "/files-Directory/#parameters_9",
            "text": "target:  String  val  mode:  FileMode  box",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_12",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#chownat",
            "text": "[Source]  Set the FileMode for some path relative to this directory.  fun box chownat(\n  target: String val,\n  uid: U32 val,\n  gid: U32 val)\n: Bool val",
            "title": "chownat"
        },
        {
            "location": "/files-Directory/#parameters_10",
            "text": "target:  String  val  uid:  U32  val  gid:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_13",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#touchat",
            "text": "[Source]  Set the last access and modification times of the directory to now.  fun box touchat(\n  target: String val)\n: Bool val",
            "title": "touchat"
        },
        {
            "location": "/files-Directory/#parameters_11",
            "text": "target:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_14",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#set_time_at",
            "text": "[Source]  Set the last access and modification times of the directory to the given\nvalues.  fun box set_time_at(\n  target: String val,\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val",
            "title": "set_time_at"
        },
        {
            "location": "/files-Directory/#parameters_12",
            "text": "target:  String  val  atime: ( I64  val ,  I64  val)  mtime: ( I64  val ,  I64  val)",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_15",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#symlink",
            "text": "[Source]  Link the source path to the link_name, where the link_name is relative to\nthis directory.  fun box symlink(\n  source: FilePath val,\n  link_name: String val)\n: Bool val",
            "title": "symlink"
        },
        {
            "location": "/files-Directory/#parameters_13",
            "text": "source:  FilePath  val  link_name:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_16",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#remove",
            "text": "[Source]  Remove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.  fun box remove(\n  target: String val)\n: Bool val",
            "title": "remove"
        },
        {
            "location": "/files-Directory/#parameters_14",
            "text": "target:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_17",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#rename",
            "text": "[Source]  Rename source (which is relative to this directory) to target (which is\nrelative to the  to  directory).  fun box rename(\n  source: String val,\n  to: Directory box,\n  target: String val)\n: Bool val",
            "title": "rename"
        },
        {
            "location": "/files-Directory/#parameters_15",
            "text": "source:  String  val  to:  Directory  box  target:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/files-Directory/#returns_18",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/files-Directory/#dispose",
            "text": "[Source]  Close the directory.  fun ref dispose()\n: None val",
            "title": "dispose"
        },
        {
            "location": "/files-Directory/#returns_19",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/format--index/",
            "text": "Format package\n\u00b6\n\n\nThe Format package provides support for formatting strings. It can be\nused to set things like width, padding and alignment, as well as\ncontrolling the way numbers are displayed (decimal, octal,\nhexadecimal).\n\n\nExample program\n\u00b6\n\n\nuse \"format\"\n\nactor Main\n  fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String =>\n    Format(desc where width = 10)\n      + \":\"\n      + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt)\n\n  new create(env: Env) =>\n    try\n      (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?)\n      env.out.print(disp(\"x\", x))\n      env.out.print(disp(\"y\", y))\n      env.out.print(disp(\"hex(x)\", x, FormatHex))\n      env.out.print(disp(\"hex(y)\", y, FormatHex))\n      env.out.print(disp(\"x * y\", x * y))\n    else\n      let exe = try env.args(0)? else \"fmt_example\" end\n      env.err.print(\"Usage: \" + exe + \" NUMBER1 NUMBER2\")\n    end\n\n\n\n\nPublic Types\n\u00b6\n\n\n\n\ntrait PrefixSpec\n\n\nprimitive PrefixDefault\n\n\nprimitive PrefixSpace\n\n\nprimitive PrefixSign\n\n\ntype PrefixNumber\n\n\ntrait FormatSpec\n\n\nprimitive FormatDefault\n\n\nprimitive FormatUTF32\n\n\nprimitive FormatBinary\n\n\nprimitive FormatBinaryBare\n\n\nprimitive FormatOctal\n\n\nprimitive FormatOctalBare\n\n\nprimitive FormatHex\n\n\nprimitive FormatHexBare\n\n\nprimitive FormatHexSmall\n\n\nprimitive FormatHexSmallBare\n\n\ntype FormatInt\n\n\nprimitive FormatExp\n\n\nprimitive FormatExpLarge\n\n\nprimitive FormatFix\n\n\nprimitive FormatFixLarge\n\n\nprimitive FormatGeneral\n\n\nprimitive FormatGeneralLarge\n\n\ntype FormatFloat\n\n\nprimitive Format\n\n\nprimitive AlignLeft\n\n\nprimitive AlignRight\n\n\nprimitive AlignCenter\n\n\ntype Align",
            "title": "Package"
        },
        {
            "location": "/format--index/#format-package",
            "text": "The Format package provides support for formatting strings. It can be\nused to set things like width, padding and alignment, as well as\ncontrolling the way numbers are displayed (decimal, octal,\nhexadecimal).",
            "title": "Format package"
        },
        {
            "location": "/format--index/#example-program",
            "text": "use \"format\"\n\nactor Main\n  fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String =>\n    Format(desc where width = 10)\n      + \":\"\n      + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt)\n\n  new create(env: Env) =>\n    try\n      (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?)\n      env.out.print(disp(\"x\", x))\n      env.out.print(disp(\"y\", y))\n      env.out.print(disp(\"hex(x)\", x, FormatHex))\n      env.out.print(disp(\"hex(y)\", y, FormatHex))\n      env.out.print(disp(\"x * y\", x * y))\n    else\n      let exe = try env.args(0)? else \"fmt_example\" end\n      env.err.print(\"Usage: \" + exe + \" NUMBER1 NUMBER2\")\n    end",
            "title": "Example program"
        },
        {
            "location": "/format--index/#public-types",
            "text": "trait PrefixSpec  primitive PrefixDefault  primitive PrefixSpace  primitive PrefixSign  type PrefixNumber  trait FormatSpec  primitive FormatDefault  primitive FormatUTF32  primitive FormatBinary  primitive FormatBinaryBare  primitive FormatOctal  primitive FormatOctalBare  primitive FormatHex  primitive FormatHexBare  primitive FormatHexSmall  primitive FormatHexSmallBare  type FormatInt  primitive FormatExp  primitive FormatExpLarge  primitive FormatFix  primitive FormatFixLarge  primitive FormatGeneral  primitive FormatGeneralLarge  type FormatFloat  primitive Format  primitive AlignLeft  primitive AlignRight  primitive AlignCenter  type Align",
            "title": "Public Types"
        },
        {
            "location": "/format-PrefixSpec/",
            "text": "PrefixSpec\n\u00b6\n\n\n[Source]\n\n\ntrait val PrefixSpec",
            "title": "trait PrefixSpec"
        },
        {
            "location": "/format-PrefixSpec/#prefixspec",
            "text": "[Source]  trait val PrefixSpec",
            "title": "PrefixSpec"
        },
        {
            "location": "/format-PrefixDefault/",
            "text": "PrefixDefault\n\u00b6\n\n\n[Source]\n\n\nprimitive val PrefixDefault is\n  PrefixSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nPrefixSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: PrefixDefault val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPrefixDefault\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: PrefixDefault val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPrefixDefault\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: PrefixDefault val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPrefixDefault\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive PrefixDefault"
        },
        {
            "location": "/format-PrefixDefault/#prefixdefault",
            "text": "[Source]  primitive val PrefixDefault is\n  PrefixSpec val",
            "title": "PrefixDefault"
        },
        {
            "location": "/format-PrefixDefault/#implements",
            "text": "PrefixSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-PrefixDefault/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-PrefixDefault/#create",
            "text": "[Source]  new val create()\n: PrefixDefault val^",
            "title": "create"
        },
        {
            "location": "/format-PrefixDefault/#returns",
            "text": "PrefixDefault  val^",
            "title": "Returns"
        },
        {
            "location": "/format-PrefixDefault/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-PrefixDefault/#eq",
            "text": "[Source]  fun box eq(\n  that: PrefixDefault val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-PrefixDefault/#parameters",
            "text": "that:  PrefixDefault  val",
            "title": "Parameters"
        },
        {
            "location": "/format-PrefixDefault/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-PrefixDefault/#ne",
            "text": "[Source]  fun box ne(\n  that: PrefixDefault val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-PrefixDefault/#parameters_1",
            "text": "that:  PrefixDefault  val",
            "title": "Parameters"
        },
        {
            "location": "/format-PrefixDefault/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-PrefixSpace/",
            "text": "PrefixSpace\n\u00b6\n\n\n[Source]\n\n\nprimitive val PrefixSpace is\n  PrefixSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nPrefixSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: PrefixSpace val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPrefixSpace\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: PrefixSpace val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPrefixSpace\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: PrefixSpace val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPrefixSpace\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive PrefixSpace"
        },
        {
            "location": "/format-PrefixSpace/#prefixspace",
            "text": "[Source]  primitive val PrefixSpace is\n  PrefixSpec val",
            "title": "PrefixSpace"
        },
        {
            "location": "/format-PrefixSpace/#implements",
            "text": "PrefixSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-PrefixSpace/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-PrefixSpace/#create",
            "text": "[Source]  new val create()\n: PrefixSpace val^",
            "title": "create"
        },
        {
            "location": "/format-PrefixSpace/#returns",
            "text": "PrefixSpace  val^",
            "title": "Returns"
        },
        {
            "location": "/format-PrefixSpace/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-PrefixSpace/#eq",
            "text": "[Source]  fun box eq(\n  that: PrefixSpace val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-PrefixSpace/#parameters",
            "text": "that:  PrefixSpace  val",
            "title": "Parameters"
        },
        {
            "location": "/format-PrefixSpace/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-PrefixSpace/#ne",
            "text": "[Source]  fun box ne(\n  that: PrefixSpace val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-PrefixSpace/#parameters_1",
            "text": "that:  PrefixSpace  val",
            "title": "Parameters"
        },
        {
            "location": "/format-PrefixSpace/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-PrefixSign/",
            "text": "PrefixSign\n\u00b6\n\n\n[Source]\n\n\nprimitive val PrefixSign is\n  PrefixSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nPrefixSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: PrefixSign val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPrefixSign\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: PrefixSign val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPrefixSign\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: PrefixSign val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPrefixSign\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive PrefixSign"
        },
        {
            "location": "/format-PrefixSign/#prefixsign",
            "text": "[Source]  primitive val PrefixSign is\n  PrefixSpec val",
            "title": "PrefixSign"
        },
        {
            "location": "/format-PrefixSign/#implements",
            "text": "PrefixSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-PrefixSign/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-PrefixSign/#create",
            "text": "[Source]  new val create()\n: PrefixSign val^",
            "title": "create"
        },
        {
            "location": "/format-PrefixSign/#returns",
            "text": "PrefixSign  val^",
            "title": "Returns"
        },
        {
            "location": "/format-PrefixSign/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-PrefixSign/#eq",
            "text": "[Source]  fun box eq(\n  that: PrefixSign val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-PrefixSign/#parameters",
            "text": "that:  PrefixSign  val",
            "title": "Parameters"
        },
        {
            "location": "/format-PrefixSign/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-PrefixSign/#ne",
            "text": "[Source]  fun box ne(\n  that: PrefixSign val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-PrefixSign/#parameters_1",
            "text": "that:  PrefixSign  val",
            "title": "Parameters"
        },
        {
            "location": "/format-PrefixSign/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-PrefixNumber/",
            "text": "PrefixNumber\n\u00b6\n\n\n[Source]\n\n\ntype PrefixNumber is\n  (PrefixDefault val | PrefixSpace val | PrefixSign val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val)",
            "title": "type PrefixNumber"
        },
        {
            "location": "/format-PrefixNumber/#prefixnumber",
            "text": "[Source]  type PrefixNumber is\n  (PrefixDefault val | PrefixSpace val | PrefixSign val)",
            "title": "PrefixNumber"
        },
        {
            "location": "/format-PrefixNumber/#type-alias-for",
            "text": "( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/format-FormatSpec/",
            "text": "FormatSpec\n\u00b6\n\n\n[Source]\n\n\ntrait val FormatSpec",
            "title": "trait FormatSpec"
        },
        {
            "location": "/format-FormatSpec/#formatspec",
            "text": "[Source]  trait val FormatSpec",
            "title": "FormatSpec"
        },
        {
            "location": "/format-FormatDefault/",
            "text": "FormatDefault\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatDefault is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatDefault val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatDefault\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatDefault val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatDefault\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatDefault val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatDefault\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatDefault"
        },
        {
            "location": "/format-FormatDefault/#formatdefault",
            "text": "[Source]  primitive val FormatDefault is\n  FormatSpec val",
            "title": "FormatDefault"
        },
        {
            "location": "/format-FormatDefault/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatDefault/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatDefault/#create",
            "text": "[Source]  new val create()\n: FormatDefault val^",
            "title": "create"
        },
        {
            "location": "/format-FormatDefault/#returns",
            "text": "FormatDefault  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatDefault/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatDefault/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatDefault val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatDefault/#parameters",
            "text": "that:  FormatDefault  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatDefault/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatDefault/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatDefault val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatDefault/#parameters_1",
            "text": "that:  FormatDefault  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatDefault/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatUTF32/",
            "text": "FormatUTF32\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatUTF32 is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatUTF32 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatUTF32\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatUTF32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatUTF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatUTF32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatUTF32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatUTF32"
        },
        {
            "location": "/format-FormatUTF32/#formatutf32",
            "text": "[Source]  primitive val FormatUTF32 is\n  FormatSpec val",
            "title": "FormatUTF32"
        },
        {
            "location": "/format-FormatUTF32/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatUTF32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatUTF32/#create",
            "text": "[Source]  new val create()\n: FormatUTF32 val^",
            "title": "create"
        },
        {
            "location": "/format-FormatUTF32/#returns",
            "text": "FormatUTF32  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatUTF32/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatUTF32/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatUTF32 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatUTF32/#parameters",
            "text": "that:  FormatUTF32  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatUTF32/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatUTF32/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatUTF32 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatUTF32/#parameters_1",
            "text": "that:  FormatUTF32  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatUTF32/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatBinary/",
            "text": "FormatBinary\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatBinary is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatBinary val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatBinary\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatBinary val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatBinary\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatBinary val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatBinary\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatBinary"
        },
        {
            "location": "/format-FormatBinary/#formatbinary",
            "text": "[Source]  primitive val FormatBinary is\n  FormatSpec val",
            "title": "FormatBinary"
        },
        {
            "location": "/format-FormatBinary/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatBinary/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatBinary/#create",
            "text": "[Source]  new val create()\n: FormatBinary val^",
            "title": "create"
        },
        {
            "location": "/format-FormatBinary/#returns",
            "text": "FormatBinary  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatBinary/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatBinary/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatBinary val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatBinary/#parameters",
            "text": "that:  FormatBinary  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatBinary/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatBinary/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatBinary val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatBinary/#parameters_1",
            "text": "that:  FormatBinary  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatBinary/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatBinaryBare/",
            "text": "FormatBinaryBare\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatBinaryBare is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatBinaryBare val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatBinaryBare\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatBinaryBare val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatBinaryBare\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatBinaryBare val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatBinaryBare\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatBinaryBare"
        },
        {
            "location": "/format-FormatBinaryBare/#formatbinarybare",
            "text": "[Source]  primitive val FormatBinaryBare is\n  FormatSpec val",
            "title": "FormatBinaryBare"
        },
        {
            "location": "/format-FormatBinaryBare/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatBinaryBare/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatBinaryBare/#create",
            "text": "[Source]  new val create()\n: FormatBinaryBare val^",
            "title": "create"
        },
        {
            "location": "/format-FormatBinaryBare/#returns",
            "text": "FormatBinaryBare  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatBinaryBare/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatBinaryBare/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatBinaryBare val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatBinaryBare/#parameters",
            "text": "that:  FormatBinaryBare  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatBinaryBare/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatBinaryBare/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatBinaryBare val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatBinaryBare/#parameters_1",
            "text": "that:  FormatBinaryBare  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatBinaryBare/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatOctal/",
            "text": "FormatOctal\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatOctal is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatOctal val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatOctal\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatOctal val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatOctal\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatOctal val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatOctal\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatOctal"
        },
        {
            "location": "/format-FormatOctal/#formatoctal",
            "text": "[Source]  primitive val FormatOctal is\n  FormatSpec val",
            "title": "FormatOctal"
        },
        {
            "location": "/format-FormatOctal/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatOctal/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatOctal/#create",
            "text": "[Source]  new val create()\n: FormatOctal val^",
            "title": "create"
        },
        {
            "location": "/format-FormatOctal/#returns",
            "text": "FormatOctal  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatOctal/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatOctal/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatOctal val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatOctal/#parameters",
            "text": "that:  FormatOctal  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatOctal/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatOctal/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatOctal val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatOctal/#parameters_1",
            "text": "that:  FormatOctal  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatOctal/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatOctalBare/",
            "text": "FormatOctalBare\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatOctalBare is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatOctalBare val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatOctalBare\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatOctalBare val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatOctalBare\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatOctalBare val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatOctalBare\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatOctalBare"
        },
        {
            "location": "/format-FormatOctalBare/#formatoctalbare",
            "text": "[Source]  primitive val FormatOctalBare is\n  FormatSpec val",
            "title": "FormatOctalBare"
        },
        {
            "location": "/format-FormatOctalBare/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatOctalBare/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatOctalBare/#create",
            "text": "[Source]  new val create()\n: FormatOctalBare val^",
            "title": "create"
        },
        {
            "location": "/format-FormatOctalBare/#returns",
            "text": "FormatOctalBare  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatOctalBare/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatOctalBare/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatOctalBare val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatOctalBare/#parameters",
            "text": "that:  FormatOctalBare  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatOctalBare/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatOctalBare/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatOctalBare val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatOctalBare/#parameters_1",
            "text": "that:  FormatOctalBare  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatOctalBare/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHex/",
            "text": "FormatHex\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatHex is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatHex val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatHex\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatHex val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatHex\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatHex val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatHex\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatHex"
        },
        {
            "location": "/format-FormatHex/#formathex",
            "text": "[Source]  primitive val FormatHex is\n  FormatSpec val",
            "title": "FormatHex"
        },
        {
            "location": "/format-FormatHex/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatHex/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatHex/#create",
            "text": "[Source]  new val create()\n: FormatHex val^",
            "title": "create"
        },
        {
            "location": "/format-FormatHex/#returns",
            "text": "FormatHex  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHex/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatHex/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatHex val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatHex/#parameters",
            "text": "that:  FormatHex  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatHex/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHex/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatHex val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatHex/#parameters_1",
            "text": "that:  FormatHex  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatHex/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHexBare/",
            "text": "FormatHexBare\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatHexBare is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatHexBare val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatHexBare\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatHexBare val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatHexBare\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatHexBare val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatHexBare\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatHexBare"
        },
        {
            "location": "/format-FormatHexBare/#formathexbare",
            "text": "[Source]  primitive val FormatHexBare is\n  FormatSpec val",
            "title": "FormatHexBare"
        },
        {
            "location": "/format-FormatHexBare/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatHexBare/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatHexBare/#create",
            "text": "[Source]  new val create()\n: FormatHexBare val^",
            "title": "create"
        },
        {
            "location": "/format-FormatHexBare/#returns",
            "text": "FormatHexBare  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHexBare/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatHexBare/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatHexBare val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatHexBare/#parameters",
            "text": "that:  FormatHexBare  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatHexBare/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHexBare/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatHexBare val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatHexBare/#parameters_1",
            "text": "that:  FormatHexBare  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatHexBare/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHexSmall/",
            "text": "FormatHexSmall\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatHexSmall is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatHexSmall val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatHexSmall\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatHexSmall val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatHexSmall\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatHexSmall val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatHexSmall\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatHexSmall"
        },
        {
            "location": "/format-FormatHexSmall/#formathexsmall",
            "text": "[Source]  primitive val FormatHexSmall is\n  FormatSpec val",
            "title": "FormatHexSmall"
        },
        {
            "location": "/format-FormatHexSmall/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatHexSmall/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatHexSmall/#create",
            "text": "[Source]  new val create()\n: FormatHexSmall val^",
            "title": "create"
        },
        {
            "location": "/format-FormatHexSmall/#returns",
            "text": "FormatHexSmall  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHexSmall/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatHexSmall/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatHexSmall val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatHexSmall/#parameters",
            "text": "that:  FormatHexSmall  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatHexSmall/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHexSmall/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatHexSmall val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatHexSmall/#parameters_1",
            "text": "that:  FormatHexSmall  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatHexSmall/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHexSmallBare/",
            "text": "FormatHexSmallBare\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatHexSmallBare is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatHexSmallBare val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatHexSmallBare\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatHexSmallBare val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatHexSmallBare\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatHexSmallBare val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatHexSmallBare\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatHexSmallBare"
        },
        {
            "location": "/format-FormatHexSmallBare/#formathexsmallbare",
            "text": "[Source]  primitive val FormatHexSmallBare is\n  FormatSpec val",
            "title": "FormatHexSmallBare"
        },
        {
            "location": "/format-FormatHexSmallBare/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatHexSmallBare/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatHexSmallBare/#create",
            "text": "[Source]  new val create()\n: FormatHexSmallBare val^",
            "title": "create"
        },
        {
            "location": "/format-FormatHexSmallBare/#returns",
            "text": "FormatHexSmallBare  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHexSmallBare/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatHexSmallBare/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatHexSmallBare val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatHexSmallBare/#parameters",
            "text": "that:  FormatHexSmallBare  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatHexSmallBare/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatHexSmallBare/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatHexSmallBare val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatHexSmallBare/#parameters_1",
            "text": "that:  FormatHexSmallBare  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatHexSmallBare/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatInt/",
            "text": "FormatInt\n\u00b6\n\n\n[Source]\n\n\ntype FormatInt is\n  (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nFormatDefault\n val | \nFormatUTF32\n val | \nFormatBinary\n val | \nFormatBinaryBare\n val | \nFormatOctal\n val | \nFormatOctalBare\n val | \nFormatHex\n val | \nFormatHexBare\n val | \nFormatHexSmall\n val | \nFormatHexSmallBare\n val)",
            "title": "type FormatInt"
        },
        {
            "location": "/format-FormatInt/#formatint",
            "text": "[Source]  type FormatInt is\n  (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)",
            "title": "FormatInt"
        },
        {
            "location": "/format-FormatInt/#type-alias-for",
            "text": "( FormatDefault  val |  FormatUTF32  val |  FormatBinary  val |  FormatBinaryBare  val |  FormatOctal  val |  FormatOctalBare  val |  FormatHex  val |  FormatHexBare  val |  FormatHexSmall  val |  FormatHexSmallBare  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/format-FormatExp/",
            "text": "FormatExp\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatExp is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatExp val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatExp\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatExp val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatExp\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatExp val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatExp\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatExp"
        },
        {
            "location": "/format-FormatExp/#formatexp",
            "text": "[Source]  primitive val FormatExp is\n  FormatSpec val",
            "title": "FormatExp"
        },
        {
            "location": "/format-FormatExp/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatExp/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatExp/#create",
            "text": "[Source]  new val create()\n: FormatExp val^",
            "title": "create"
        },
        {
            "location": "/format-FormatExp/#returns",
            "text": "FormatExp  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatExp/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatExp/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatExp val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatExp/#parameters",
            "text": "that:  FormatExp  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatExp/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatExp/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatExp val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatExp/#parameters_1",
            "text": "that:  FormatExp  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatExp/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatExpLarge/",
            "text": "FormatExpLarge\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatExpLarge is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatExpLarge val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatExpLarge\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatExpLarge val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatExpLarge\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatExpLarge val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatExpLarge\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatExpLarge"
        },
        {
            "location": "/format-FormatExpLarge/#formatexplarge",
            "text": "[Source]  primitive val FormatExpLarge is\n  FormatSpec val",
            "title": "FormatExpLarge"
        },
        {
            "location": "/format-FormatExpLarge/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatExpLarge/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatExpLarge/#create",
            "text": "[Source]  new val create()\n: FormatExpLarge val^",
            "title": "create"
        },
        {
            "location": "/format-FormatExpLarge/#returns",
            "text": "FormatExpLarge  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatExpLarge/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatExpLarge/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatExpLarge val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatExpLarge/#parameters",
            "text": "that:  FormatExpLarge  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatExpLarge/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatExpLarge/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatExpLarge val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatExpLarge/#parameters_1",
            "text": "that:  FormatExpLarge  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatExpLarge/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatFix/",
            "text": "FormatFix\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatFix is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatFix val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatFix\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatFix val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatFix\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatFix val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatFix\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatFix"
        },
        {
            "location": "/format-FormatFix/#formatfix",
            "text": "[Source]  primitive val FormatFix is\n  FormatSpec val",
            "title": "FormatFix"
        },
        {
            "location": "/format-FormatFix/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatFix/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatFix/#create",
            "text": "[Source]  new val create()\n: FormatFix val^",
            "title": "create"
        },
        {
            "location": "/format-FormatFix/#returns",
            "text": "FormatFix  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatFix/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatFix/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatFix val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatFix/#parameters",
            "text": "that:  FormatFix  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatFix/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatFix/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatFix val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatFix/#parameters_1",
            "text": "that:  FormatFix  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatFix/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatFixLarge/",
            "text": "FormatFixLarge\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatFixLarge is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatFixLarge val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatFixLarge\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatFixLarge val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatFixLarge\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatFixLarge val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatFixLarge\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatFixLarge"
        },
        {
            "location": "/format-FormatFixLarge/#formatfixlarge",
            "text": "[Source]  primitive val FormatFixLarge is\n  FormatSpec val",
            "title": "FormatFixLarge"
        },
        {
            "location": "/format-FormatFixLarge/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatFixLarge/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatFixLarge/#create",
            "text": "[Source]  new val create()\n: FormatFixLarge val^",
            "title": "create"
        },
        {
            "location": "/format-FormatFixLarge/#returns",
            "text": "FormatFixLarge  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatFixLarge/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatFixLarge/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatFixLarge val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatFixLarge/#parameters",
            "text": "that:  FormatFixLarge  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatFixLarge/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatFixLarge/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatFixLarge val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatFixLarge/#parameters_1",
            "text": "that:  FormatFixLarge  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatFixLarge/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatGeneral/",
            "text": "FormatGeneral\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatGeneral is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatGeneral val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatGeneral\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatGeneral val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatGeneral\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatGeneral val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatGeneral\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatGeneral"
        },
        {
            "location": "/format-FormatGeneral/#formatgeneral",
            "text": "[Source]  primitive val FormatGeneral is\n  FormatSpec val",
            "title": "FormatGeneral"
        },
        {
            "location": "/format-FormatGeneral/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatGeneral/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatGeneral/#create",
            "text": "[Source]  new val create()\n: FormatGeneral val^",
            "title": "create"
        },
        {
            "location": "/format-FormatGeneral/#returns",
            "text": "FormatGeneral  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatGeneral/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatGeneral/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatGeneral val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatGeneral/#parameters",
            "text": "that:  FormatGeneral  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatGeneral/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatGeneral/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatGeneral val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatGeneral/#parameters_1",
            "text": "that:  FormatGeneral  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatGeneral/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatGeneralLarge/",
            "text": "FormatGeneralLarge\n\u00b6\n\n\n[Source]\n\n\nprimitive val FormatGeneralLarge is\n  FormatSpec val\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: FormatGeneralLarge val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormatGeneralLarge\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: FormatGeneralLarge val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatGeneralLarge\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: FormatGeneralLarge val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormatGeneralLarge\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive FormatGeneralLarge"
        },
        {
            "location": "/format-FormatGeneralLarge/#formatgenerallarge",
            "text": "[Source]  primitive val FormatGeneralLarge is\n  FormatSpec val",
            "title": "FormatGeneralLarge"
        },
        {
            "location": "/format-FormatGeneralLarge/#implements",
            "text": "FormatSpec  val",
            "title": "Implements"
        },
        {
            "location": "/format-FormatGeneralLarge/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-FormatGeneralLarge/#create",
            "text": "[Source]  new val create()\n: FormatGeneralLarge val^",
            "title": "create"
        },
        {
            "location": "/format-FormatGeneralLarge/#returns",
            "text": "FormatGeneralLarge  val^",
            "title": "Returns"
        },
        {
            "location": "/format-FormatGeneralLarge/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-FormatGeneralLarge/#eq",
            "text": "[Source]  fun box eq(\n  that: FormatGeneralLarge val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-FormatGeneralLarge/#parameters",
            "text": "that:  FormatGeneralLarge  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatGeneralLarge/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatGeneralLarge/#ne",
            "text": "[Source]  fun box ne(\n  that: FormatGeneralLarge val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-FormatGeneralLarge/#parameters_1",
            "text": "that:  FormatGeneralLarge  val",
            "title": "Parameters"
        },
        {
            "location": "/format-FormatGeneralLarge/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-FormatFloat/",
            "text": "FormatFloat\n\u00b6\n\n\n[Source]\n\n\ntype FormatFloat is\n  (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nFormatDefault\n val | \nFormatExp\n val | \nFormatExpLarge\n val | \nFormatFix\n val | \nFormatFixLarge\n val | \nFormatGeneral\n val | \nFormatGeneralLarge\n val)",
            "title": "type FormatFloat"
        },
        {
            "location": "/format-FormatFloat/#formatfloat",
            "text": "[Source]  type FormatFloat is\n  (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)",
            "title": "FormatFloat"
        },
        {
            "location": "/format-FormatFloat/#type-alias-for",
            "text": "( FormatDefault  val |  FormatExp  val |  FormatExpLarge  val |  FormatFix  val |  FormatFixLarge  val |  FormatGeneral  val |  FormatGeneralLarge  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/format-Format/",
            "text": "Format\n\u00b6\n\n\n[Source]\n\n\nProvides functions for generating formatted strings.\n\n\n\n\nfmt. Format to use.\n\n\nprefix. Prefix to use.\n\n\nprec. Precision to use. The exact meaning of this depends on the type,\nbut is generally the number of characters used for all, or part, of the\nstring. A value of -1 indicates that the default for the type should be\nused.\n\n\nwidth. The minimum number of characters that will be in the produced\nstring. If necessary the string will be padded with the fill character to\nmake it long enough.\n\nalign. Specify whether fill characters should be added at the beginning or\nend of the generated string, or both.\n\nfill: The character to pad a string with if is is shorter than width.\n\n\n\n\nprimitive val Format\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Format val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFormat\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply(\n  str: String val,\n  fmt: FormatDefault val = seq,\n  prefix: PrefixDefault val = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstr: \nString\n val\n\n\nfmt: \nFormatDefault\n val = seq\n\n\nprefix: \nPrefixDefault\n val = seq\n\n\nprec: \nUSize\n val = seq\n\n\nwidth: \nUSize\n val = seq\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val) = seq\n\n\nfill: \nU32\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nint[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) & \nInteger\n[A])]\n\u00b6\n\n\n[Source]\n\n\nfun box int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A])](\n  x: A,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: A\n\n\nfmt: (\nFormatDefault\n val | \nFormatUTF32\n val | \nFormatBinary\n val | \n    \nFormatBinaryBare\n val | \nFormatOctal\n val | \nFormatOctalBare\n val | \n    \nFormatHex\n val | \nFormatHexBare\n val | \nFormatHexSmall\n val | \n    \nFormatHexSmallBare\n val) = seq\n\n\nprefix: (\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val) = seq\n\n\nprec: \nUSize\n val = seq\n\n\nwidth: \nUSize\n val = seq\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val) = seq\n\n\nfill: \nU32\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nfloat[A: ((\nF32\n val | \nF64\n val) & \nFloatingPoint\n[A])]\n\u00b6\n\n\n[Source]\n\n\nfun box float[A: ((F32 val | F64 val) & FloatingPoint[A])](\n  x: A,\n  fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | \n    FormatFix val | FormatFixLarge val | FormatGeneral val | \n    FormatGeneralLarge val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: A\n\n\nfmt: (\nFormatDefault\n val | \nFormatExp\n val | \nFormatExpLarge\n val | \n    \nFormatFix\n val | \nFormatFixLarge\n val | \nFormatGeneral\n val | \n    \nFormatGeneralLarge\n val) = seq\n\n\nprefix: (\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val) = seq\n\n\nprec: \nUSize\n val = seq\n\n\nwidth: \nUSize\n val = seq\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val) = seq\n\n\nfill: \nU32\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Format val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormat\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Format val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nFormat\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Format"
        },
        {
            "location": "/format-Format/#format",
            "text": "[Source]  Provides functions for generating formatted strings.   fmt. Format to use.  prefix. Prefix to use.  prec. Precision to use. The exact meaning of this depends on the type,\nbut is generally the number of characters used for all, or part, of the\nstring. A value of -1 indicates that the default for the type should be\nused.  width. The minimum number of characters that will be in the produced\nstring. If necessary the string will be padded with the fill character to\nmake it long enough. align. Specify whether fill characters should be added at the beginning or\nend of the generated string, or both. fill: The character to pad a string with if is is shorter than width.   primitive val Format",
            "title": "Format"
        },
        {
            "location": "/format-Format/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-Format/#create",
            "text": "[Source]  new val create()\n: Format val^",
            "title": "create"
        },
        {
            "location": "/format-Format/#returns",
            "text": "Format  val^",
            "title": "Returns"
        },
        {
            "location": "/format-Format/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-Format/#apply",
            "text": "[Source]  fun box apply(\n  str: String val,\n  fmt: FormatDefault val = seq,\n  prefix: PrefixDefault val = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^",
            "title": "apply"
        },
        {
            "location": "/format-Format/#parameters",
            "text": "str:  String  val  fmt:  FormatDefault  val = seq  prefix:  PrefixDefault  val = seq  prec:  USize  val = seq  width:  USize  val = seq  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val) = seq  fill:  U32  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/format-Format/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/format-Format/#int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a9393",
            "text": "[Source]  fun box int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) & Integer[A])](\n  x: A,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^",
            "title": "int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A])]"
        },
        {
            "location": "/format-Format/#parameters_1",
            "text": "x: A  fmt: ( FormatDefault  val |  FormatUTF32  val |  FormatBinary  val | \n     FormatBinaryBare  val |  FormatOctal  val |  FormatOctalBare  val | \n     FormatHex  val |  FormatHexBare  val |  FormatHexSmall  val | \n     FormatHexSmallBare  val) = seq  prefix: ( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val) = seq  prec:  USize  val = seq  width:  USize  val = seq  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val) = seq  fill:  U32  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/format-Format/#returns_2",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/format-Format/#float91a-f32-val-f64-val-floatingpoint91a9393",
            "text": "[Source]  fun box float[A: ((F32 val | F64 val) & FloatingPoint[A])](\n  x: A,\n  fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | \n    FormatFix val | FormatFixLarge val | FormatGeneral val | \n    FormatGeneralLarge val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^",
            "title": "float[A: ((F32 val | F64 val) &amp; FloatingPoint[A])]"
        },
        {
            "location": "/format-Format/#parameters_2",
            "text": "x: A  fmt: ( FormatDefault  val |  FormatExp  val |  FormatExpLarge  val | \n     FormatFix  val |  FormatFixLarge  val |  FormatGeneral  val | \n     FormatGeneralLarge  val) = seq  prefix: ( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val) = seq  prec:  USize  val = seq  width:  USize  val = seq  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val) = seq  fill:  U32  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/format-Format/#returns_3",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/format-Format/#eq",
            "text": "[Source]  fun box eq(\n  that: Format val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-Format/#parameters_3",
            "text": "that:  Format  val",
            "title": "Parameters"
        },
        {
            "location": "/format-Format/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-Format/#ne",
            "text": "[Source]  fun box ne(\n  that: Format val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-Format/#parameters_4",
            "text": "that:  Format  val",
            "title": "Parameters"
        },
        {
            "location": "/format-Format/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-AlignLeft/",
            "text": "AlignLeft\n\u00b6\n\n\n[Source]\n\n\nprimitive val AlignLeft\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: AlignLeft val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nAlignLeft\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: AlignLeft val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAlignLeft\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: AlignLeft val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAlignLeft\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive AlignLeft"
        },
        {
            "location": "/format-AlignLeft/#alignleft",
            "text": "[Source]  primitive val AlignLeft",
            "title": "AlignLeft"
        },
        {
            "location": "/format-AlignLeft/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-AlignLeft/#create",
            "text": "[Source]  new val create()\n: AlignLeft val^",
            "title": "create"
        },
        {
            "location": "/format-AlignLeft/#returns",
            "text": "AlignLeft  val^",
            "title": "Returns"
        },
        {
            "location": "/format-AlignLeft/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-AlignLeft/#eq",
            "text": "[Source]  fun box eq(\n  that: AlignLeft val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-AlignLeft/#parameters",
            "text": "that:  AlignLeft  val",
            "title": "Parameters"
        },
        {
            "location": "/format-AlignLeft/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-AlignLeft/#ne",
            "text": "[Source]  fun box ne(\n  that: AlignLeft val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-AlignLeft/#parameters_1",
            "text": "that:  AlignLeft  val",
            "title": "Parameters"
        },
        {
            "location": "/format-AlignLeft/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-AlignRight/",
            "text": "AlignRight\n\u00b6\n\n\n[Source]\n\n\nprimitive val AlignRight\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: AlignRight val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nAlignRight\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: AlignRight val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAlignRight\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: AlignRight val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAlignRight\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive AlignRight"
        },
        {
            "location": "/format-AlignRight/#alignright",
            "text": "[Source]  primitive val AlignRight",
            "title": "AlignRight"
        },
        {
            "location": "/format-AlignRight/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-AlignRight/#create",
            "text": "[Source]  new val create()\n: AlignRight val^",
            "title": "create"
        },
        {
            "location": "/format-AlignRight/#returns",
            "text": "AlignRight  val^",
            "title": "Returns"
        },
        {
            "location": "/format-AlignRight/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-AlignRight/#eq",
            "text": "[Source]  fun box eq(\n  that: AlignRight val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-AlignRight/#parameters",
            "text": "that:  AlignRight  val",
            "title": "Parameters"
        },
        {
            "location": "/format-AlignRight/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-AlignRight/#ne",
            "text": "[Source]  fun box ne(\n  that: AlignRight val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-AlignRight/#parameters_1",
            "text": "that:  AlignRight  val",
            "title": "Parameters"
        },
        {
            "location": "/format-AlignRight/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-AlignCenter/",
            "text": "AlignCenter\n\u00b6\n\n\n[Source]\n\n\nprimitive val AlignCenter\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: AlignCenter val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nAlignCenter\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: AlignCenter val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAlignCenter\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: AlignCenter val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nAlignCenter\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive AlignCenter"
        },
        {
            "location": "/format-AlignCenter/#aligncenter",
            "text": "[Source]  primitive val AlignCenter",
            "title": "AlignCenter"
        },
        {
            "location": "/format-AlignCenter/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/format-AlignCenter/#create",
            "text": "[Source]  new val create()\n: AlignCenter val^",
            "title": "create"
        },
        {
            "location": "/format-AlignCenter/#returns",
            "text": "AlignCenter  val^",
            "title": "Returns"
        },
        {
            "location": "/format-AlignCenter/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/format-AlignCenter/#eq",
            "text": "[Source]  fun box eq(\n  that: AlignCenter val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/format-AlignCenter/#parameters",
            "text": "that:  AlignCenter  val",
            "title": "Parameters"
        },
        {
            "location": "/format-AlignCenter/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-AlignCenter/#ne",
            "text": "[Source]  fun box ne(\n  that: AlignCenter val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/format-AlignCenter/#parameters_1",
            "text": "that:  AlignCenter  val",
            "title": "Parameters"
        },
        {
            "location": "/format-AlignCenter/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/format-Align/",
            "text": "Align\n\u00b6\n\n\n[Source]\n\n\ntype Align is\n  (AlignLeft val | AlignRight val | AlignCenter val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val)",
            "title": "type Align"
        },
        {
            "location": "/format-Align/#align",
            "text": "[Source]  type Align is\n  (AlignLeft val | AlignRight val | AlignCenter val)",
            "title": "Align"
        },
        {
            "location": "/format-Align/#type-alias-for",
            "text": "( AlignLeft  val |  AlignRight  val |  AlignCenter  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/net--index/",
            "text": "Net package\n\u00b6\n\n\nThe Net package provides support for creating UDP and TCP clients and\nservers, reading and writing network data, and establishing UDP and\nTCP connections.\n\n\nPublic Types\n\u00b6\n\n\n\n\ntype UDPSocketAuth\n\n\nactor UDPSocket\n\n\ninterface UDPNotify\n\n\ntype TCPListenerAuth\n\n\nactor TCPListener\n\n\ninterface TCPListenNotify\n\n\ninterface TCPConnectionNotify\n\n\ntype TCPConnectionAuth\n\n\nactor TCPConnection\n\n\nprimitive OSSockOpt\n\n\nclass NetAddress\n\n\ntype DNSLookupAuth\n\n\nprimitive DNS\n\n\nprimitive NetAuth\n\n\nprimitive DNSAuth\n\n\nprimitive UDPAuth\n\n\nprimitive TCPAuth\n\n\nprimitive TCPListenAuth\n\n\nprimitive TCPConnectAuth",
            "title": "Package"
        },
        {
            "location": "/net--index/#net-package",
            "text": "The Net package provides support for creating UDP and TCP clients and\nservers, reading and writing network data, and establishing UDP and\nTCP connections.",
            "title": "Net package"
        },
        {
            "location": "/net--index/#public-types",
            "text": "type UDPSocketAuth  actor UDPSocket  interface UDPNotify  type TCPListenerAuth  actor TCPListener  interface TCPListenNotify  interface TCPConnectionNotify  type TCPConnectionAuth  actor TCPConnection  primitive OSSockOpt  class NetAddress  type DNSLookupAuth  primitive DNS  primitive NetAuth  primitive DNSAuth  primitive UDPAuth  primitive TCPAuth  primitive TCPListenAuth  primitive TCPConnectAuth",
            "title": "Public Types"
        },
        {
            "location": "/net-UDPSocketAuth/",
            "text": "UDPSocketAuth\n\u00b6\n\n\n[Source]\n\n\ntype UDPSocketAuth is\n  (AmbientAuth val | NetAuth val | UDPAuth val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nAmbientAuth\n val | \nNetAuth\n val | \nUDPAuth\n val)",
            "title": "type UDPSocketAuth"
        },
        {
            "location": "/net-UDPSocketAuth/#udpsocketauth",
            "text": "[Source]  type UDPSocketAuth is\n  (AmbientAuth val | NetAuth val | UDPAuth val)",
            "title": "UDPSocketAuth"
        },
        {
            "location": "/net-UDPSocketAuth/#type-alias-for",
            "text": "( AmbientAuth  val |  NetAuth  val |  UDPAuth  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/net-UDPSocket/",
            "text": "UDPSocket\n\u00b6\n\n\n[Source]\n\n\nCreates a UDP socket that can be used for sending and receiving UDP messages.\n\n\nThe following examples create:\n\n an echo server that listens for connections and returns whatever message it\n  receives\n\n a client that connects to the server, sends a message, and prints the\n  message it receives in response\n\n\nThe server is implemented like this:\n\n\nuse \"net\"\n\nclass MyUDPNotify is UDPNotify\n  fun ref received(\n    sock: UDPSocket ref,\n    data: Array[U8] iso,\n    from: NetAddress)\n  =>\n    sock.write(consume data, from)\n\n  fun ref not_listening(sock: UDPSocket ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      UDPSocket(env.root as AmbientAuth,\n        MyUDPNotify, \"\", \"8989\")\n    end\n\n\n\n\nThe client is implemented like this:\n\n\nuse \"net\"\n\nclass MyUDPNotify is UDPNotify\n  let _out: OutStream\n  let _destination: NetAddress\n\n  new create(\n    out: OutStream,\n    destination: NetAddress)\n  =>\n    _out = out\n    _destination = destination\n\n  fun ref listening(sock: UDPSocket ref) =>\n    sock.write(\"hello world\", _destination)\n\n  fun ref received(\n    sock: UDPSocket ref,\n    data: Array[U8] iso,\n    from: NetAddress)\n  =>\n    _out.print(\"GOT:\" + String.from_array(consume data))\n    sock.dispose()\n\n  fun ref not_listening(sock: UDPSocket ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      let destination =\n        DNS.ip4(env.root as AmbientAuth, \"localhost\", \"8989\")(0)?\n      UDPSocket(env.root as AmbientAuth,\n        recover MyUDPNotify(env.out, consume destination) end)\n    end\n\n\n\n\nactor tag UDPSocket\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nListens for both IPv4 and IPv6 datagrams.\n\n\nnew tag create(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nUDPAuth\n val)\n\n\nnotify: \nUDPNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nsize: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUDPSocket\n tag^\n\n\n\n\n\n\nip4\n\u00b6\n\n\n[Source]\n\n\nListens for IPv4 datagrams.\n\n\nnew tag ip4(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nUDPAuth\n val)\n\n\nnotify: \nUDPNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nsize: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUDPSocket\n tag^\n\n\n\n\n\n\nip6\n\u00b6\n\n\n[Source]\n\n\nListens for IPv6 datagrams.\n\n\nnew tag ip6(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nUDPAuth\n val)\n\n\nnotify: \nUDPNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nsize: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUDPSocket\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nWrite a single sequence of bytes.\n\n\nbe write(\n  data: (String val | Array[U8 val] val),\n  to: NetAddress val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\nto: \nNetAddress\n val\n\n\n\n\n\n\nwritev\n\u00b6\n\n\n[Source]\n\n\nWrite a sequence of sequences of bytes.\n\n\nbe writev(\n  data: ByteSeqIter val,\n  to: NetAddress val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\nto: \nNetAddress\n val\n\n\n\n\n\n\nset_notify\n\u00b6\n\n\n[Source]\n\n\nChange the notifier.\n\n\nbe set_notify(\n  notify: UDPNotify iso)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: \nUDPNotify\n iso\n\n\n\n\n\n\nset_broadcast\n\u00b6\n\n\n[Source]\n\n\nEnable or disable broadcasting from this socket.\n\n\nbe set_broadcast(\n  state: Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val\n\n\n\n\n\n\nset_multicast_interface\n\u00b6\n\n\n[Source]\n\n\nBy default, the OS will choose which address is used to send packets bound\nfor multicast addresses. This can be used to force a specific interface. To\nrevert to allowing the OS to choose, call with an empty string.\n\n\nbe set_multicast_interface(\n  from: String val = seq)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nString\n val = seq\n\n\n\n\n\n\nset_multicast_loopback\n\u00b6\n\n\n[Source]\n\n\nBy default, packets sent to a multicast address will be received by the\nsending system if it has subscribed to that address. Disabling loopback\nprevents this.\n\n\nbe set_multicast_loopback(\n  loopback: Bool val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nloopback: \nBool\n val\n\n\n\n\n\n\nset_multicast_ttl\n\u00b6\n\n\n[Source]\n\n\nSet the TTL for multicast sends. Defaults to 1.\n\n\nbe set_multicast_ttl(\n  ttl: U8 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nttl: \nU8\n val\n\n\n\n\n\n\nmulticast_join\n\u00b6\n\n\n[Source]\n\n\nAdd a multicast group. This can be limited to packets arriving on a\nspecific interface.\n\n\nbe multicast_join(\n  group: String val,\n  to: String val = seq)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ngroup: \nString\n val\n\n\nto: \nString\n val = seq\n\n\n\n\n\n\nmulticast_leave\n\u00b6\n\n\n[Source]\n\n\nDrop a multicast group. This can be limited to packets arriving on a\nspecific interface. No attempt is made to check that this socket has\npreviously added this group.\n\n\nbe multicast_leave(\n  group: String val,\n  to: String val = seq)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ngroup: \nString\n val\n\n\nto: \nString\n val = seq\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nStop listening.\n\n\nbe dispose()\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlocal_address\n\u00b6\n\n\n[Source]\n\n\nReturn the bound IP address.\n\n\nfun box local_address()\n: NetAddress val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNetAddress\n val\n\n\n\n\n\n\ngetsockopt\n\u00b6\n\n\n[Source]\n\n\nGeneral wrapper for UDP sockets to the \ngetsockopt(2)\n system call.\n\n\nThe caller must provide an array that is pre-allocated to be\nat least as large as the largest data structure that the kernel\nmay return for the requested option.\n\n\nIn case of system call success, this function returns the 2-tuple:\n1. The integer \n0\n.\n2. An \nArray[U8]\n of data returned by the system call's \nvoid *\n\n   4th argument.  Its size is specified by the kernel via the\n   system call's \nsockopt_len_t *\n 5th argument.\n\n\nIn case of system call failure, this function returns the 2-tuple:\n1. The value of \nerrno\n.\n2. An undefined value that must be ignored.\n\n\nUsage example:\n\n\n// listening() is a callback function for class UDPNotify\nfun ref listening(sock: UDPSocket ref) =>\n  match sock.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4)\n    | (0, let gbytes: Array[U8] iso) =>\n      try\n        let br = Reader.create().>append(consume gbytes)\n        ifdef littleendian then\n          let buffer_size = br.u32_le()?\n        else\n          let buffer_size = br.u32_be()?\n        end\n      end\n    | (let errno: U32, _) =>\n      // System call failed\n  end\n\n\n\n\nfun ref getsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option_max_size: USize val = seq)\n: (U32 val , Array[U8 val] iso^)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlevel: \nI32\n val\n\n\noption_name: \nI32\n val\n\n\noption_max_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nArray\n[\nU8\n val] iso^)\n\n\n\n\n\n\ngetsockopt_u32\n\u00b6\n\n\n[Source]\n\n\nWrapper for UDP sockets to the \ngetsockopt(2)\n system call where\nthe kernel's returned option value is a C \nuint32_t\n type / Pony\ntype \nU32\n.\n\n\nIn case of system call success, this function returns the 2-tuple:\n1. The integer \n0\n.\n2. The \n*option_value\n returned by the kernel converted to a Pony \nU32\n.\n\n\nIn case of system call failure, this function returns the 2-tuple:\n1. The value of \nerrno\n.\n2. An undefined value that must be ignored.\n\n\nfun ref getsockopt_u32(\n  level: I32 val,\n  option_name: I32 val)\n: (U32 val , U32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlevel: \nI32\n val\n\n\noption_name: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nsetsockopt\n\u00b6\n\n\n[Source]\n\n\nGeneral wrapper for UDP sockets to the \nsetsockopt(2)\n system call.\n\n\nThe caller is responsible for the correct size and byte contents of\nthe \noption\n array for the requested \nlevel\n and \noption_name\n,\nincluding using the appropriate CPU endian byte order.\n\n\nThis function returns \n0\n on success, else the value of \nerrno\n on\nfailure.\n\n\nUsage example:\n\n\n// listening() is a callback function for class UDPNotify\nfun ref listening(sock: UDPSocket ref) =>\n  let sb = Writer\n\n  sb.u32_le(7744)             // Our desired socket buffer size\n  let sbytes = Array[U8]\n  for bs in sb.done().values() do\n    sbytes.append(bs)\n  end\n  match sock.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes)\n    | 0 =>\n      // System call was successful\n    | let errno: U32 =>\n      // System call failed\n  end\n\n\n\n\nfun ref setsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option: Array[U8 val] ref)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlevel: \nI32\n val\n\n\noption_name: \nI32\n val\n\n\noption: \nArray\n[\nU8\n val] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsetsockopt_u32\n\u00b6\n\n\n[Source]\n\n\nWrapper for UDP sockets to the \nsetsockopt(2)\n system call where\nthe kernel expects an option value of a C \nuint32_t\n type / Pony\ntype \nU32\n.\n\n\nThis function returns \n0\n on success, else the value of \nerrno\n on\nfailure.\n\n\nfun ref setsockopt_u32(\n  level: I32 val,\n  option_name: I32 val,\n  option: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlevel: \nI32\n val\n\n\noption_name: \nI32\n val\n\n\noption: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nget_so_error\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \ngetsockopt(fd, SOL_SOCKET, SO_ERROR, ...)\n\n\nfun ref get_so_error()\n: (U32 val , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nget_so_rcvbuf\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \ngetsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)\n\n\nfun ref get_so_rcvbuf()\n: (U32 val , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nget_so_sndbuf\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \ngetsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)\n\n\nfun ref get_so_sndbuf()\n: (U32 val , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nset_ip_multicast_loop\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \nsetsockopt(fd, SOL_SOCKET, IP_MULTICAST_LOOP, ...)\n\n\nfun ref set_ip_multicast_loop(\n  loopback: Bool val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nloopback: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nset_ip_multicast_ttl\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \nsetsockopt(fd, SOL_SOCKET, IP_MULTICAST_TTL, ...)\n\n\nfun ref set_ip_multicast_ttl(\n  ttl: U8 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nttl: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nset_so_broadcast\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \nsetsockopt(fd, SOL_SOCKET, SO_BROADCAST, ...)\n\n\nfun ref set_so_broadcast(\n  state: Bool val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nset_so_rcvbuf\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \nsetsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)\n\n\nfun ref set_so_rcvbuf(\n  bufsize: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbufsize: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nset_so_sndbuf\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \nsetsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)\n\n\nfun ref set_so_sndbuf(\n  bufsize: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbufsize: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val",
            "title": "actor UDPSocket"
        },
        {
            "location": "/net-UDPSocket/#udpsocket",
            "text": "[Source]  Creates a UDP socket that can be used for sending and receiving UDP messages.  The following examples create:  an echo server that listens for connections and returns whatever message it\n  receives  a client that connects to the server, sends a message, and prints the\n  message it receives in response  The server is implemented like this:  use \"net\"\n\nclass MyUDPNotify is UDPNotify\n  fun ref received(\n    sock: UDPSocket ref,\n    data: Array[U8] iso,\n    from: NetAddress)\n  =>\n    sock.write(consume data, from)\n\n  fun ref not_listening(sock: UDPSocket ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      UDPSocket(env.root as AmbientAuth,\n        MyUDPNotify, \"\", \"8989\")\n    end  The client is implemented like this:  use \"net\"\n\nclass MyUDPNotify is UDPNotify\n  let _out: OutStream\n  let _destination: NetAddress\n\n  new create(\n    out: OutStream,\n    destination: NetAddress)\n  =>\n    _out = out\n    _destination = destination\n\n  fun ref listening(sock: UDPSocket ref) =>\n    sock.write(\"hello world\", _destination)\n\n  fun ref received(\n    sock: UDPSocket ref,\n    data: Array[U8] iso,\n    from: NetAddress)\n  =>\n    _out.print(\"GOT:\" + String.from_array(consume data))\n    sock.dispose()\n\n  fun ref not_listening(sock: UDPSocket ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      let destination =\n        DNS.ip4(env.root as AmbientAuth, \"localhost\", \"8989\")(0)?\n      UDPSocket(env.root as AmbientAuth,\n        recover MyUDPNotify(env.out, consume destination) end)\n    end  actor tag UDPSocket",
            "title": "UDPSocket"
        },
        {
            "location": "/net-UDPSocket/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-UDPSocket/#create",
            "text": "[Source]  Listens for both IPv4 and IPv6 datagrams.  new tag create(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^",
            "title": "create"
        },
        {
            "location": "/net-UDPSocket/#parameters",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  UDPAuth  val)  notify:  UDPNotify  iso  host:  String  val = seq  service:  String  val = seq  size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns",
            "text": "UDPSocket  tag^",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#ip4",
            "text": "[Source]  Listens for IPv4 datagrams.  new tag ip4(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^",
            "title": "ip4"
        },
        {
            "location": "/net-UDPSocket/#parameters_1",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  UDPAuth  val)  notify:  UDPNotify  iso  host:  String  val = seq  service:  String  val = seq  size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns_1",
            "text": "UDPSocket  tag^",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#ip6",
            "text": "[Source]  Listens for IPv6 datagrams.  new tag ip6(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^",
            "title": "ip6"
        },
        {
            "location": "/net-UDPSocket/#parameters_2",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  UDPAuth  val)  notify:  UDPNotify  iso  host:  String  val = seq  service:  String  val = seq  size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns_2",
            "text": "UDPSocket  tag^",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/net-UDPSocket/#write",
            "text": "[Source]  Write a single sequence of bytes.  be write(\n  data: (String val | Array[U8 val] val),\n  to: NetAddress val)",
            "title": "write"
        },
        {
            "location": "/net-UDPSocket/#parameters_3",
            "text": "data: ( String  val |  Array [ U8  val] val)  to:  NetAddress  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#writev",
            "text": "[Source]  Write a sequence of sequences of bytes.  be writev(\n  data: ByteSeqIter val,\n  to: NetAddress val)",
            "title": "writev"
        },
        {
            "location": "/net-UDPSocket/#parameters_4",
            "text": "data:  ByteSeqIter  val  to:  NetAddress  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#set_notify",
            "text": "[Source]  Change the notifier.  be set_notify(\n  notify: UDPNotify iso)",
            "title": "set_notify"
        },
        {
            "location": "/net-UDPSocket/#parameters_5",
            "text": "notify:  UDPNotify  iso",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#set_broadcast",
            "text": "[Source]  Enable or disable broadcasting from this socket.  be set_broadcast(\n  state: Bool val)",
            "title": "set_broadcast"
        },
        {
            "location": "/net-UDPSocket/#parameters_6",
            "text": "state:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#set_multicast_interface",
            "text": "[Source]  By default, the OS will choose which address is used to send packets bound\nfor multicast addresses. This can be used to force a specific interface. To\nrevert to allowing the OS to choose, call with an empty string.  be set_multicast_interface(\n  from: String val = seq)",
            "title": "set_multicast_interface"
        },
        {
            "location": "/net-UDPSocket/#parameters_7",
            "text": "from:  String  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#set_multicast_loopback",
            "text": "[Source]  By default, packets sent to a multicast address will be received by the\nsending system if it has subscribed to that address. Disabling loopback\nprevents this.  be set_multicast_loopback(\n  loopback: Bool val)",
            "title": "set_multicast_loopback"
        },
        {
            "location": "/net-UDPSocket/#parameters_8",
            "text": "loopback:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#set_multicast_ttl",
            "text": "[Source]  Set the TTL for multicast sends. Defaults to 1.  be set_multicast_ttl(\n  ttl: U8 val)",
            "title": "set_multicast_ttl"
        },
        {
            "location": "/net-UDPSocket/#parameters_9",
            "text": "ttl:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#multicast_join",
            "text": "[Source]  Add a multicast group. This can be limited to packets arriving on a\nspecific interface.  be multicast_join(\n  group: String val,\n  to: String val = seq)",
            "title": "multicast_join"
        },
        {
            "location": "/net-UDPSocket/#parameters_10",
            "text": "group:  String  val  to:  String  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#multicast_leave",
            "text": "[Source]  Drop a multicast group. This can be limited to packets arriving on a\nspecific interface. No attempt is made to check that this socket has\npreviously added this group.  be multicast_leave(\n  group: String val,\n  to: String val = seq)",
            "title": "multicast_leave"
        },
        {
            "location": "/net-UDPSocket/#parameters_11",
            "text": "group:  String  val  to:  String  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#dispose",
            "text": "[Source]  Stop listening.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/net-UDPSocket/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-UDPSocket/#local_address",
            "text": "[Source]  Return the bound IP address.  fun box local_address()\n: NetAddress val",
            "title": "local_address"
        },
        {
            "location": "/net-UDPSocket/#returns_3",
            "text": "NetAddress  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#getsockopt",
            "text": "[Source]  General wrapper for UDP sockets to the  getsockopt(2)  system call.  The caller must provide an array that is pre-allocated to be\nat least as large as the largest data structure that the kernel\nmay return for the requested option.  In case of system call success, this function returns the 2-tuple:\n1. The integer  0 .\n2. An  Array[U8]  of data returned by the system call's  void * \n   4th argument.  Its size is specified by the kernel via the\n   system call's  sockopt_len_t *  5th argument.  In case of system call failure, this function returns the 2-tuple:\n1. The value of  errno .\n2. An undefined value that must be ignored.  Usage example:  // listening() is a callback function for class UDPNotify\nfun ref listening(sock: UDPSocket ref) =>\n  match sock.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4)\n    | (0, let gbytes: Array[U8] iso) =>\n      try\n        let br = Reader.create().>append(consume gbytes)\n        ifdef littleendian then\n          let buffer_size = br.u32_le()?\n        else\n          let buffer_size = br.u32_be()?\n        end\n      end\n    | (let errno: U32, _) =>\n      // System call failed\n  end  fun ref getsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option_max_size: USize val = seq)\n: (U32 val , Array[U8 val] iso^)",
            "title": "getsockopt"
        },
        {
            "location": "/net-UDPSocket/#parameters_12",
            "text": "level:  I32  val  option_name:  I32  val  option_max_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns_4",
            "text": "( U32  val ,  Array [ U8  val] iso^)",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#getsockopt_u32",
            "text": "[Source]  Wrapper for UDP sockets to the  getsockopt(2)  system call where\nthe kernel's returned option value is a C  uint32_t  type / Pony\ntype  U32 .  In case of system call success, this function returns the 2-tuple:\n1. The integer  0 .\n2. The  *option_value  returned by the kernel converted to a Pony  U32 .  In case of system call failure, this function returns the 2-tuple:\n1. The value of  errno .\n2. An undefined value that must be ignored.  fun ref getsockopt_u32(\n  level: I32 val,\n  option_name: I32 val)\n: (U32 val , U32 val)",
            "title": "getsockopt_u32"
        },
        {
            "location": "/net-UDPSocket/#parameters_13",
            "text": "level:  I32  val  option_name:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns_5",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#setsockopt",
            "text": "[Source]  General wrapper for UDP sockets to the  setsockopt(2)  system call.  The caller is responsible for the correct size and byte contents of\nthe  option  array for the requested  level  and  option_name ,\nincluding using the appropriate CPU endian byte order.  This function returns  0  on success, else the value of  errno  on\nfailure.  Usage example:  // listening() is a callback function for class UDPNotify\nfun ref listening(sock: UDPSocket ref) =>\n  let sb = Writer\n\n  sb.u32_le(7744)             // Our desired socket buffer size\n  let sbytes = Array[U8]\n  for bs in sb.done().values() do\n    sbytes.append(bs)\n  end\n  match sock.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes)\n    | 0 =>\n      // System call was successful\n    | let errno: U32 =>\n      // System call failed\n  end  fun ref setsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option: Array[U8 val] ref)\n: U32 val",
            "title": "setsockopt"
        },
        {
            "location": "/net-UDPSocket/#parameters_14",
            "text": "level:  I32  val  option_name:  I32  val  option:  Array [ U8  val] ref",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns_6",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#setsockopt_u32",
            "text": "[Source]  Wrapper for UDP sockets to the  setsockopt(2)  system call where\nthe kernel expects an option value of a C  uint32_t  type / Pony\ntype  U32 .  This function returns  0  on success, else the value of  errno  on\nfailure.  fun ref setsockopt_u32(\n  level: I32 val,\n  option_name: I32 val,\n  option: U32 val)\n: U32 val",
            "title": "setsockopt_u32"
        },
        {
            "location": "/net-UDPSocket/#parameters_15",
            "text": "level:  I32  val  option_name:  I32  val  option:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns_7",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#get_so_error",
            "text": "[Source]  Wrapper for the FFI call  getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)  fun ref get_so_error()\n: (U32 val , U32 val)",
            "title": "get_so_error"
        },
        {
            "location": "/net-UDPSocket/#returns_8",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#get_so_rcvbuf",
            "text": "[Source]  Wrapper for the FFI call  getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)  fun ref get_so_rcvbuf()\n: (U32 val , U32 val)",
            "title": "get_so_rcvbuf"
        },
        {
            "location": "/net-UDPSocket/#returns_9",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#get_so_sndbuf",
            "text": "[Source]  Wrapper for the FFI call  getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)  fun ref get_so_sndbuf()\n: (U32 val , U32 val)",
            "title": "get_so_sndbuf"
        },
        {
            "location": "/net-UDPSocket/#returns_10",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#set_ip_multicast_loop",
            "text": "[Source]  Wrapper for the FFI call  setsockopt(fd, SOL_SOCKET, IP_MULTICAST_LOOP, ...)  fun ref set_ip_multicast_loop(\n  loopback: Bool val)\n: U32 val",
            "title": "set_ip_multicast_loop"
        },
        {
            "location": "/net-UDPSocket/#parameters_16",
            "text": "loopback:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns_11",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#set_ip_multicast_ttl",
            "text": "[Source]  Wrapper for the FFI call  setsockopt(fd, SOL_SOCKET, IP_MULTICAST_TTL, ...)  fun ref set_ip_multicast_ttl(\n  ttl: U8 val)\n: U32 val",
            "title": "set_ip_multicast_ttl"
        },
        {
            "location": "/net-UDPSocket/#parameters_17",
            "text": "ttl:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns_12",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#set_so_broadcast",
            "text": "[Source]  Wrapper for the FFI call  setsockopt(fd, SOL_SOCKET, SO_BROADCAST, ...)  fun ref set_so_broadcast(\n  state: Bool val)\n: U32 val",
            "title": "set_so_broadcast"
        },
        {
            "location": "/net-UDPSocket/#parameters_18",
            "text": "state:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns_13",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#set_so_rcvbuf",
            "text": "[Source]  Wrapper for the FFI call  setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)  fun ref set_so_rcvbuf(\n  bufsize: U32 val)\n: U32 val",
            "title": "set_so_rcvbuf"
        },
        {
            "location": "/net-UDPSocket/#parameters_19",
            "text": "bufsize:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns_14",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPSocket/#set_so_sndbuf",
            "text": "[Source]  Wrapper for the FFI call  setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)  fun ref set_so_sndbuf(\n  bufsize: U32 val)\n: U32 val",
            "title": "set_so_sndbuf"
        },
        {
            "location": "/net-UDPSocket/#parameters_20",
            "text": "bufsize:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPSocket/#returns_15",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPNotify/",
            "text": "UDPNotify\n\u00b6\n\n\n[Source]\n\n\nNotifications for UDP connections.\n\n\nFor an example of using this class please see the documentatoin for the\n\nUDPSocket\n actor.\n\n\ninterface ref UDPNotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlistening\n\u00b6\n\n\n[Source]\n\n\nCalled when the socket has been bound to an address.\n\n\nfun ref listening(\n  sock: UDPSocket ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsock: \nUDPSocket\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nnot_listening\n\u00b6\n\n\n[Source]\n\n\nCalled if it wasn't possible to bind the socket to an address.\n\n\nIt is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:\n\n\nfun ref not_listening(sock: UDPSocket ref) =>\n  None\n\n\n\n\nfun ref not_listening(\n  sock: UDPSocket ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsock: \nUDPSocket\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreceived\n\u00b6\n\n\n[Source]\n\n\nCalled when new data is received on the socket.\n\n\nfun ref received(\n  sock: UDPSocket ref,\n  data: Array[U8 val] iso,\n  from: NetAddress val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsock: \nUDPSocket\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\nfrom: \nNetAddress\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\u00b6\n\n\n[Source]\n\n\nCalled when the socket is closed.\n\n\nfun ref closed(\n  sock: UDPSocket ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsock: \nUDPSocket\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface UDPNotify"
        },
        {
            "location": "/net-UDPNotify/#udpnotify",
            "text": "[Source]  Notifications for UDP connections.  For an example of using this class please see the documentatoin for the UDPSocket  actor.  interface ref UDPNotify",
            "title": "UDPNotify"
        },
        {
            "location": "/net-UDPNotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-UDPNotify/#listening",
            "text": "[Source]  Called when the socket has been bound to an address.  fun ref listening(\n  sock: UDPSocket ref)\n: None val",
            "title": "listening"
        },
        {
            "location": "/net-UDPNotify/#parameters",
            "text": "sock:  UDPSocket  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPNotify/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPNotify/#not_listening",
            "text": "[Source]  Called if it wasn't possible to bind the socket to an address.  It is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:  fun ref not_listening(sock: UDPSocket ref) =>\n  None  fun ref not_listening(\n  sock: UDPSocket ref)\n: None val",
            "title": "not_listening"
        },
        {
            "location": "/net-UDPNotify/#parameters_1",
            "text": "sock:  UDPSocket  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPNotify/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPNotify/#received",
            "text": "[Source]  Called when new data is received on the socket.  fun ref received(\n  sock: UDPSocket ref,\n  data: Array[U8 val] iso,\n  from: NetAddress val)\n: None val",
            "title": "received"
        },
        {
            "location": "/net-UDPNotify/#parameters_2",
            "text": "sock:  UDPSocket  ref  data:  Array [ U8  val] iso  from:  NetAddress  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPNotify/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPNotify/#closed",
            "text": "[Source]  Called when the socket is closed.  fun ref closed(\n  sock: UDPSocket ref)\n: None val",
            "title": "closed"
        },
        {
            "location": "/net-UDPNotify/#parameters_3",
            "text": "sock:  UDPSocket  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPNotify/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListenerAuth/",
            "text": "TCPListenerAuth\n\u00b6\n\n\n[Source]\n\n\ntype TCPListenerAuth is\n  (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \nTCPListenAuth\n val)",
            "title": "type TCPListenerAuth"
        },
        {
            "location": "/net-TCPListenerAuth/#tcplistenerauth",
            "text": "[Source]  type TCPListenerAuth is\n  (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val)",
            "title": "TCPListenerAuth"
        },
        {
            "location": "/net-TCPListenerAuth/#type-alias-for",
            "text": "( AmbientAuth  val |  NetAuth  val |  TCPAuth  val |  TCPListenAuth  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/net-TCPListener/",
            "text": "TCPListener\n\u00b6\n\n\n[Source]\n\n\nListens for new network connections.\n\n\nThe following program creates an echo server that listens for\nconnections on port 8989 and echoes back any data it receives.\n\n\nuse \"net\"\n\nclass MyTCPConnectionNotify is TCPConnectionNotify\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  =>\n    conn.write(String.from_array(consume data))\n    true\n\n  fun ref connect_failed(conn: TCPConnection ref) =>\n    None\n\nclass MyTCPListenNotify is TCPListenNotify\n  fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ =>\n    MyTCPConnectionNotify\n\n  fun ref not_listening(listen: TCPListener ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      TCPListener(env.root as AmbientAuth,\n        recover MyTCPListenNotify end, \"\", \"8989\")\n    end\n\n\n\n\nactor tag TCPListener\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nListens for both IPv4 and IPv6 connections.\n\n\nnew tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPListenAuth\n val)\n\n\nnotify: \nTCPListenNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nlimit: \nUSize\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTCPListener\n tag^\n\n\n\n\n\n\nip4\n\u00b6\n\n\n[Source]\n\n\nListens for IPv4 connections.\n\n\nnew tag ip4(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPListenAuth\n val)\n\n\nnotify: \nTCPListenNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nlimit: \nUSize\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTCPListener\n tag^\n\n\n\n\n\n\nip6\n\u00b6\n\n\n[Source]\n\n\nListens for IPv6 connections.\n\n\nnew tag ip6(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPListenAuth\n val)\n\n\nnotify: \nTCPListenNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nlimit: \nUSize\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTCPListener\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\nset_notify\n\u00b6\n\n\n[Source]\n\n\nChange the notifier.\n\n\nbe set_notify(\n  notify: TCPListenNotify iso)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: \nTCPListenNotify\n iso\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nStop listening.\n\n\nbe dispose()\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlocal_address\n\u00b6\n\n\n[Source]\n\n\nReturn the bound IP address.\n\n\nfun box local_address()\n: NetAddress val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNetAddress\n val\n\n\n\n\n\n\nclose\n\u00b6\n\n\n[Source]\n\n\nDispose of resources.\n\n\nfun ref close()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "actor TCPListener"
        },
        {
            "location": "/net-TCPListener/#tcplistener",
            "text": "[Source]  Listens for new network connections.  The following program creates an echo server that listens for\nconnections on port 8989 and echoes back any data it receives.  use \"net\"\n\nclass MyTCPConnectionNotify is TCPConnectionNotify\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  =>\n    conn.write(String.from_array(consume data))\n    true\n\n  fun ref connect_failed(conn: TCPConnection ref) =>\n    None\n\nclass MyTCPListenNotify is TCPListenNotify\n  fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ =>\n    MyTCPConnectionNotify\n\n  fun ref not_listening(listen: TCPListener ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      TCPListener(env.root as AmbientAuth,\n        recover MyTCPListenNotify end, \"\", \"8989\")\n    end  actor tag TCPListener",
            "title": "TCPListener"
        },
        {
            "location": "/net-TCPListener/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-TCPListener/#create",
            "text": "[Source]  Listens for both IPv4 and IPv6 connections.  new tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^",
            "title": "create"
        },
        {
            "location": "/net-TCPListener/#parameters",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPListenAuth  val)  notify:  TCPListenNotify  iso  host:  String  val = seq  service:  String  val = seq  limit:  USize  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPListener/#returns",
            "text": "TCPListener  tag^",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListener/#ip4",
            "text": "[Source]  Listens for IPv4 connections.  new tag ip4(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^",
            "title": "ip4"
        },
        {
            "location": "/net-TCPListener/#parameters_1",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPListenAuth  val)  notify:  TCPListenNotify  iso  host:  String  val = seq  service:  String  val = seq  limit:  USize  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPListener/#returns_1",
            "text": "TCPListener  tag^",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListener/#ip6",
            "text": "[Source]  Listens for IPv6 connections.  new tag ip6(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^",
            "title": "ip6"
        },
        {
            "location": "/net-TCPListener/#parameters_2",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPListenAuth  val)  notify:  TCPListenNotify  iso  host:  String  val = seq  service:  String  val = seq  limit:  USize  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPListener/#returns_2",
            "text": "TCPListener  tag^",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListener/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/net-TCPListener/#set_notify",
            "text": "[Source]  Change the notifier.  be set_notify(\n  notify: TCPListenNotify iso)",
            "title": "set_notify"
        },
        {
            "location": "/net-TCPListener/#parameters_3",
            "text": "notify:  TCPListenNotify  iso",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPListener/#dispose",
            "text": "[Source]  Stop listening.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/net-TCPListener/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-TCPListener/#local_address",
            "text": "[Source]  Return the bound IP address.  fun box local_address()\n: NetAddress val",
            "title": "local_address"
        },
        {
            "location": "/net-TCPListener/#returns_3",
            "text": "NetAddress  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListener/#close",
            "text": "[Source]  Dispose of resources.  fun ref close()\n: None val",
            "title": "close"
        },
        {
            "location": "/net-TCPListener/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListenNotify/",
            "text": "TCPListenNotify\n\u00b6\n\n\n[Source]\n\n\nNotifications for TCP listeners.\n\n\nFor an example of using this class, please see the documentation for the\n\nTCPListener\n actor.\n\n\ninterface ref TCPListenNotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlistening\n\u00b6\n\n\n[Source]\n\n\nCalled when the listener has been bound to an address.\n\n\nfun ref listening(\n  listen: TCPListener ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nnot_listening\n\u00b6\n\n\n[Source]\n\n\nCalled if it wasn't possible to bind the listener to an address.\n\n\nIt is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:\n\n\nfun ref not_listening(listen: TCPListener ref) =>\n  None\n\n\n\n\nfun ref not_listening(\n  listen: TCPListener ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\u00b6\n\n\n[Source]\n\n\nCalled when the listener is closed.\n\n\nfun ref closed(\n  listen: TCPListener ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnected\n\u00b6\n\n\n[Source]\n\n\nCreate a new TCPConnectionNotify to attach to a new TCPConnection for a\nnewly established connection to the server.\n\n\nfun ref connected(\n  listen: TCPListener ref)\n: TCPConnectionNotify iso^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTCPConnectionNotify\n iso^ ?",
            "title": "interface TCPListenNotify"
        },
        {
            "location": "/net-TCPListenNotify/#tcplistennotify",
            "text": "[Source]  Notifications for TCP listeners.  For an example of using this class, please see the documentation for the TCPListener  actor.  interface ref TCPListenNotify",
            "title": "TCPListenNotify"
        },
        {
            "location": "/net-TCPListenNotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-TCPListenNotify/#listening",
            "text": "[Source]  Called when the listener has been bound to an address.  fun ref listening(\n  listen: TCPListener ref)\n: None val",
            "title": "listening"
        },
        {
            "location": "/net-TCPListenNotify/#parameters",
            "text": "listen:  TCPListener  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPListenNotify/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListenNotify/#not_listening",
            "text": "[Source]  Called if it wasn't possible to bind the listener to an address.  It is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:  fun ref not_listening(listen: TCPListener ref) =>\n  None  fun ref not_listening(\n  listen: TCPListener ref)\n: None val",
            "title": "not_listening"
        },
        {
            "location": "/net-TCPListenNotify/#parameters_1",
            "text": "listen:  TCPListener  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPListenNotify/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListenNotify/#closed",
            "text": "[Source]  Called when the listener is closed.  fun ref closed(\n  listen: TCPListener ref)\n: None val",
            "title": "closed"
        },
        {
            "location": "/net-TCPListenNotify/#parameters_2",
            "text": "listen:  TCPListener  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPListenNotify/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListenNotify/#connected",
            "text": "[Source]  Create a new TCPConnectionNotify to attach to a new TCPConnection for a\nnewly established connection to the server.  fun ref connected(\n  listen: TCPListener ref)\n: TCPConnectionNotify iso^ ?",
            "title": "connected"
        },
        {
            "location": "/net-TCPListenNotify/#parameters_3",
            "text": "listen:  TCPListener  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPListenNotify/#returns_3",
            "text": "TCPConnectionNotify  iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/",
            "text": "TCPConnectionNotify\n\u00b6\n\n\n[Source]\n\n\nNotifications for TCP connections.\n\n\nFor an example of using this class please see the documentation for the\n\nTCPConnection\n and \nTCPListener\n actors.\n\n\ninterface ref TCPConnectionNotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\naccepted\n\u00b6\n\n\n[Source]\n\n\nCalled when a TCPConnection is accepted by a TCPListener.\n\n\nfun ref accepted(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnecting\n\u00b6\n\n\n[Source]\n\n\nCalled if name resolution succeeded for a TCPConnection and we are now\nwaiting for a connection to the server to succeed. The count is the number\nof connections we're trying. The notifier will be informed each time the\ncount changes, until a connection is made or connect_failed() is called.\n\n\nfun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ncount: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnected\n\u00b6\n\n\n[Source]\n\n\nCalled when we have successfully connected to the server.\n\n\nfun ref connected(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnect_failed\n\u00b6\n\n\n[Source]\n\n\nCalled when we have failed to connect to all possible addresses for the\nserver. At this point, the connection will never be established.\n\n\nIt is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:\n\n\nfun ref connect_failed(conn: TCPConnection ref) =>\n  None\n\n\n\n\nfun ref connect_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nauth_failed\n\u00b6\n\n\n[Source]\n\n\nA raw TCPConnection has no authentication mechanism. However, when\nprotocols are wrapped in other protocols, this can be used to report an\nauthentication failure in a lower level protocol (e.g. SSL).\n\n\nfun ref auth_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsent\n\u00b6\n\n\n[Source]\n\n\nCalled when data is sent on the connection. This gives the notifier an\nopportunity to modify sent data before it is written. To swallow data,\nreturn an empty string.\n\n\nfun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nsentv\n\u00b6\n\n\n[Source]\n\n\nCalled when multiple chunks of data are sent to the connection in a single\ncall. This gives the notifier an opportunity to modify the sent data chunks\nbefore they are written. To swallow the send, return an empty\nArray[String].\n\n\nfun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nByteSeqIter\n val\n\n\n\n\n\n\nreceived\n\u00b6\n\n\n[Source]\n\n\nCalled when new data is received on the connection. Return true if you\nwant to continue receiving messages without yielding until you read\nmax_size on the TCPConnection. Return false to cause the TCPConnection\nto yield now.\n\n\nIncludes the number of times during the current behavior, that received has\nbeen called. This allows the notifier to end reads on a regular basis.\n\n\nfun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\ntimes: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexpect\n\u00b6\n\n\n[Source]\n\n\nCalled when the connection has been told to expect a certain quantity of\nbytes. This allows nested notifiers to change the expected quantity, which\nallows a lower level protocol to handle any framing (e.g. SSL).\n\n\nfun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\nqty: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclosed\n\u00b6\n\n\n[Source]\n\n\nCalled when the connection is closed.\n\n\nfun ref closed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nthrottled\n\u00b6\n\n\n[Source]\n\n\nCalled when the connection starts experiencing TCP backpressure. You should\nrespond to this by pausing additional calls to \nwrite\n and \nwritev\n until\nyou are informed that pressure has been released. Failure to respond to\nthe \nthrottled\n notification will result in outgoing data queuing in the\nconnection and increasing memory usage.\n\n\nfun ref throttled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunthrottled\n\u00b6\n\n\n[Source]\n\n\nCalled when the connection stops experiencing TCP backpressure. Upon\nreceiving this notification, you should feel free to start making calls to\n\nwrite\n and \nwritev\n again.\n\n\nfun ref unthrottled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface TCPConnectionNotify"
        },
        {
            "location": "/net-TCPConnectionNotify/#tcpconnectionnotify",
            "text": "[Source]  Notifications for TCP connections.  For an example of using this class please see the documentation for the TCPConnection  and  TCPListener  actors.  interface ref TCPConnectionNotify",
            "title": "TCPConnectionNotify"
        },
        {
            "location": "/net-TCPConnectionNotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-TCPConnectionNotify/#accepted",
            "text": "[Source]  Called when a TCPConnection is accepted by a TCPListener.  fun ref accepted(\n  conn: TCPConnection ref)\n: None val",
            "title": "accepted"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/#connecting",
            "text": "[Source]  Called if name resolution succeeded for a TCPConnection and we are now\nwaiting for a connection to the server to succeed. The count is the number\nof connections we're trying. The notifier will be informed each time the\ncount changes, until a connection is made or connect_failed() is called.  fun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val",
            "title": "connecting"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters_1",
            "text": "conn:  TCPConnection  ref  count:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/#connected",
            "text": "[Source]  Called when we have successfully connected to the server.  fun ref connected(\n  conn: TCPConnection ref)\n: None val",
            "title": "connected"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters_2",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/#connect_failed",
            "text": "[Source]  Called when we have failed to connect to all possible addresses for the\nserver. At this point, the connection will never be established.  It is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:  fun ref connect_failed(conn: TCPConnection ref) =>\n  None  fun ref connect_failed(\n  conn: TCPConnection ref)\n: None val",
            "title": "connect_failed"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters_3",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/#auth_failed",
            "text": "[Source]  A raw TCPConnection has no authentication mechanism. However, when\nprotocols are wrapped in other protocols, this can be used to report an\nauthentication failure in a lower level protocol (e.g. SSL).  fun ref auth_failed(\n  conn: TCPConnection ref)\n: None val",
            "title": "auth_failed"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters_4",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/#sent",
            "text": "[Source]  Called when data is sent on the connection. This gives the notifier an\nopportunity to modify sent data before it is written. To swallow data,\nreturn an empty string.  fun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)",
            "title": "sent"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters_5",
            "text": "conn:  TCPConnection  ref  data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns_5",
            "text": "( String  val |  Array [ U8  val] val)",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/#sentv",
            "text": "[Source]  Called when multiple chunks of data are sent to the connection in a single\ncall. This gives the notifier an opportunity to modify the sent data chunks\nbefore they are written. To swallow the send, return an empty\nArray[String].  fun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val",
            "title": "sentv"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters_6",
            "text": "conn:  TCPConnection  ref  data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns_6",
            "text": "ByteSeqIter  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/#received",
            "text": "[Source]  Called when new data is received on the connection. Return true if you\nwant to continue receiving messages without yielding until you read\nmax_size on the TCPConnection. Return false to cause the TCPConnection\nto yield now.  Includes the number of times during the current behavior, that received has\nbeen called. This allows the notifier to end reads on a regular basis.  fun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val",
            "title": "received"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters_7",
            "text": "conn:  TCPConnection  ref  data:  Array [ U8  val] iso  times:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/#expect",
            "text": "[Source]  Called when the connection has been told to expect a certain quantity of\nbytes. This allows nested notifiers to change the expected quantity, which\nallows a lower level protocol to handle any framing (e.g. SSL).  fun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val",
            "title": "expect"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters_8",
            "text": "conn:  TCPConnection  ref  qty:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns_8",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/#closed",
            "text": "[Source]  Called when the connection is closed.  fun ref closed(\n  conn: TCPConnection ref)\n: None val",
            "title": "closed"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters_9",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/#throttled",
            "text": "[Source]  Called when the connection starts experiencing TCP backpressure. You should\nrespond to this by pausing additional calls to  write  and  writev  until\nyou are informed that pressure has been released. Failure to respond to\nthe  throttled  notification will result in outgoing data queuing in the\nconnection and increasing memory usage.  fun ref throttled(\n  conn: TCPConnection ref)\n: None val",
            "title": "throttled"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters_10",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionNotify/#unthrottled",
            "text": "[Source]  Called when the connection stops experiencing TCP backpressure. Upon\nreceiving this notification, you should feel free to start making calls to write  and  writev  again.  fun ref unthrottled(\n  conn: TCPConnection ref)\n: None val",
            "title": "unthrottled"
        },
        {
            "location": "/net-TCPConnectionNotify/#parameters_11",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectionNotify/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectionAuth/",
            "text": "TCPConnectionAuth\n\u00b6\n\n\n[Source]\n\n\ntype TCPConnectionAuth is\n  (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \nTCPConnectAuth\n val)",
            "title": "type TCPConnectionAuth"
        },
        {
            "location": "/net-TCPConnectionAuth/#tcpconnectionauth",
            "text": "[Source]  type TCPConnectionAuth is\n  (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val)",
            "title": "TCPConnectionAuth"
        },
        {
            "location": "/net-TCPConnectionAuth/#type-alias-for",
            "text": "( AmbientAuth  val |  NetAuth  val |  TCPAuth  val |  TCPConnectAuth  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/net-TCPConnection/",
            "text": "TCPConnection\n\u00b6\n\n\n[Source]\n\n\nA TCP connection. When connecting, the Happy Eyeballs algorithm is used.\n\n\nThe following code creates a client that connects to port 8989 of\nthe local host, writes \"hello world\", and listens for a response,\nwhich it then prints.\n\n\nuse \"net\"\n\nclass MyTCPConnectionNotify is TCPConnectionNotify\n  let _out: OutStream\n\n  new create(out: OutStream) =>\n    _out = out\n\n  fun ref connected(conn: TCPConnection ref) =>\n    conn.write(\"hello world\")\n\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  =>\n    _out.print(\"GOT:\" + String.from_array(consume data))\n    conn.close()\n    true\n\n  fun ref connect_failed(conn: TCPConnection ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      TCPConnection(env.root as AmbientAuth,\n        recover MyTCPConnectionNotify(env.out) end, \"\", \"8989\")\n    end\n\n\n\n\nNote: when writing to the connection data will be silently discarded if the\nconnection has not yet been established.\n\n\nBackpressure support\n\u00b6\n\n\nWrite\n\u00b6\n\n\nThe TCP protocol has built-in backpressure support. This is generally\nexperienced as the outgoing write buffer becoming full and being unable\nto write all requested data to the socket. In \nTCPConnection\n, this is\nhidden from the programmer. When this occurs, \nTCPConnection\n will buffer\nthe extra data until such time as it is able to be sent. Left unchecked,\nthis could result in uncontrolled queuing. To address this,\n\nTCPConnectionNotify\n implements two methods \nthrottled\n and \nunthrottled\n\nthat are called when backpressure is applied and released.\n\n\nUpon receiving a \nthrottled\n notification, your application has two choices\non how to handle it. One is to inform the Pony runtime that it can no\nlonger make progress and that runtime backpressure should be applied to\nany actors sending this one messages. For example, you might construct your\napplication like:\n\n\n// Here we have a TCPConnectionNotify that upon construction\n// is given a BackpressureAuth token. This allows the notifier\n// to inform the Pony runtime when to apply and release backpressure\n// as the connection experiences it.\n// Note the calls to\n//\n// Backpressure.apply(_auth)\n// Backpressure.release(_auth)\n//\n// that apply and release backpressure as needed\n\nuse \"backpressure\"\nuse \"collections\"\nuse \"net\"\n\nclass SlowDown is TCPConnectionNotify\n  let _auth: BackpressureAuth\n  let _out: StdStream\n\n  new iso create(auth: BackpressureAuth, out: StdStream) =>\n    _auth = auth\n    _out = out\n\n  fun ref throttled(connection: TCPConnection ref) =>\n    _out.print(\"Experiencing backpressure!\")\n    Backpressure.apply(_auth)\n\n  fun ref unthrottled(connection: TCPConnection ref) =>\n    _out.print(\"Releasing backpressure!\")\n    Backpressure.release(_auth)\n\n  fun ref closed(connection: TCPConnection ref) =>\n    // if backpressure has been applied, make sure we release\n    // when shutting down\n    _out.print(\"Releasing backpressure if applied!\")\n    Backpressure.release(_auth)\n\n  fun ref connect_failed(conn: TCPConnection ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      let auth = env.root as AmbientAuth\n      let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end,\n        \"\", \"7669\")\n    end\n\n\n\n\n\nOr if you want, you could handle backpressure by shedding load, that is,\ndropping the extra data rather than carrying out the send. This might look\nlike:\n\n\nuse \"net\"\n\nclass ThrowItAway is TCPConnectionNotify\n  var _throttled: Bool = false\n\n  fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq =>\n    if not _throttled then\n      data\n    else\n      \"\"\n    end\n\n  fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter =>\n    if not _throttled then\n      data\n    else\n      recover Array[String] end\n    end\n\n  fun ref throttled(connection: TCPConnection ref) =>\n    _throttled = true\n\n  fun ref unthrottled(connection: TCPConnection ref) =>\n    _throttled = false\n\n  fun ref connect_failed(conn: TCPConnection ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      TCPConnection(env.root as AmbientAuth,\n        recover ThrowItAway end, \"\", \"7669\")\n    end\n\n\n\n\nIn general, unless you have a very specific use case, we strongly advise that\nyou don't implement a load shedding scheme where you drop data.\n\n\nRead\n\u00b6\n\n\nIf your application is unable to keep up with data being sent to it over\na \nTCPConnection\n you can use the builtin read backpressure support to\npause reading the socket which will in turn start to exert backpressure on\nthe corresponding writer on the other end of that socket.\n\n\nThe \nmute\n behavior allow any other actors in your application to request\nthe cessation of additional reads until such time as \nunmute\n is called.\nPlease note that this cessation is not guaranteed to happen immediately as\nit is the result of an asynchronous behavior call and as such will have to\nwait for existing messages in the \nTCPConnection\n's mailbox to be handled.\n\n\nOn non-windows platforms, your \nTCPConnection\n will not notice if the\nother end of the connection closes until you unmute it. Unix type systems\nlike FreeBSD, Linux and OSX learn about a closed connection upon read. On\nthese platforms, you \nmust\n call \nunmute\n on a muted connection to have\nit close. Without calling \nunmute\n the \nTCPConnection\n actor will never\nexit.\n\n\nactor tag TCPConnection\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nConnect via IPv4 or IPv6. If \nfrom\n is a non-empty string, the connection\nwill be made from the specified interface.\n\n\nnew tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPConnectAuth\n val)\n\n\nnotify: \nTCPConnectionNotify\n iso\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\nfrom: \nString\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTCPConnection\n tag^\n\n\n\n\n\n\nip4\n\u00b6\n\n\n[Source]\n\n\nConnect via IPv4.\n\n\nnew tag ip4(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPConnectAuth\n val)\n\n\nnotify: \nTCPConnectionNotify\n iso\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\nfrom: \nString\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTCPConnection\n tag^\n\n\n\n\n\n\nip6\n\u00b6\n\n\n[Source]\n\n\nConnect via IPv6.\n\n\nnew tag ip6(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPConnectAuth\n val)\n\n\nnotify: \nTCPConnectionNotify\n iso\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\nfrom: \nString\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTCPConnection\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nWrite a single sequence of bytes. Data will be silently discarded if the\nconnection has not yet been established though.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwritev\n\u00b6\n\n\n[Source]\n\n\nWrite a sequence of sequences of bytes. Data will be silently discarded if\nthe connection has not yet been established though.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nmute\n\u00b6\n\n\n[Source]\n\n\nTemporarily suspend reading off this TCPConnection until such time as\n\nunmute\n is called.\n\n\nbe mute()\n\n\n\n\n\n\nunmute\n\u00b6\n\n\n[Source]\n\n\nStart reading off this TCPConnection again after having been muted.\n\n\nbe unmute()\n\n\n\n\n\n\nset_notify\n\u00b6\n\n\n[Source]\n\n\nChange the notifier.\n\n\nbe set_notify(\n  notify: TCPConnectionNotify iso)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: \nTCPConnectionNotify\n iso\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nClose the connection gracefully once all writes are sent.\n\n\nbe dispose()\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlocal_address\n\u00b6\n\n\n[Source]\n\n\nReturn the local IP address.\n\n\nfun box local_address()\n: NetAddress val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNetAddress\n val\n\n\n\n\n\n\nremote_address\n\u00b6\n\n\n[Source]\n\n\nReturn the remote IP address.\n\n\nfun box remote_address()\n: NetAddress val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNetAddress\n val\n\n\n\n\n\n\nexpect\n\u00b6\n\n\n[Source]\n\n\nA \nreceived\n call on the notifier must contain exactly \nqty\n bytes. If\n\nqty\n is zero, the call can contain any amount of data. This has no effect\nif called in the \nsent\n notifier callback.\n\n\nfun ref expect(\n  qty: USize val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nqty: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset_nodelay\n\u00b6\n\n\n[Source]\n\n\nTurn Nagle on/off. Defaults to on. This can only be set on a connected\nsocket.\n\n\nfun ref set_nodelay(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset_keepalive\n\u00b6\n\n\n[Source]\n\n\nSets the TCP keepalive timeout to approximately \nsecs\n seconds. Exact\ntiming is OS dependent. If \nsecs\n is zero, TCP keepalive is disabled. TCP\nkeepalive is disabled by default. This can only be set on a connected\nsocket.\n\n\nfun ref set_keepalive(\n  secs: U32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsecs: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nwrite_final\n\u00b6\n\n\n[Source]\n\n\nWrite as much as possible to the socket. Set \n_writeable\n to \nfalse\n if not\neverything was written. On an error, close the connection. This is for data\nthat has already been transformed by the notifier. Data will be silently\ndiscarded if the connection has not yet been established though.\n\n\nfun ref write_final(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclose\n\u00b6\n\n\n[Source]\n\n\nAttempt to perform a graceful shutdown. Don't accept new writes. If the\nconnection isn't muted then we won't finish closing until we get a zero\nlength read. If the connection is muted, perform a hard close and shut\ndown immediately.\n\n\nfun ref close()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ngetsockopt\n\u00b6\n\n\n[Source]\n\n\nGeneral wrapper for TCP sockets to the \ngetsockopt(2)\n system call.\n\n\nThe caller must provide an array that is pre-allocated to be\nat least as large as the largest data structure that the kernel\nmay return for the requested option.\n\n\nIn case of system call success, this function returns the 2-tuple:\n1. The integer \n0\n.\n2. An \nArray[U8]\n of data returned by the system call's \nvoid *\n\n   4th argument.  Its size is specified by the kernel via the\n   system call's \nsockopt_len_t *\n 5th argument.\n\n\nIn case of system call failure, this function returns the 2-tuple:\n1. The value of \nerrno\n.\n2. An undefined value that must be ignored.\n\n\nUsage example:\n\n\n// connected() is a callback function for class TCPConnectionNotify\nfun ref connected(conn: TCPConnection ref) =>\n  match conn.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4)\n    | (0, let gbytes: Array[U8] iso) =>\n      try\n        let br = Reader.create().>append(consume gbytes)\n        ifdef littleendian then\n          let buffer_size = br.u32_le()?\n        else\n          let buffer_size = br.u32_be()?\n        end\n      end\n    | (let errno: U32, _) =>\n      // System call failed\n  end\n\n\n\n\nfun ref getsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option_max_size: USize val = seq)\n: (U32 val , Array[U8 val] iso^)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlevel: \nI32\n val\n\n\noption_name: \nI32\n val\n\n\noption_max_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nArray\n[\nU8\n val] iso^)\n\n\n\n\n\n\ngetsockopt_u32\n\u00b6\n\n\n[Source]\n\n\nWrapper for TCP sockets to the \ngetsockopt(2)\n system call where\nthe kernel's returned option value is a C \nuint32_t\n type / Pony\ntype \nU32\n.\n\n\nIn case of system call success, this function returns the 2-tuple:\n1. The integer \n0\n.\n2. The \n*option_value\n returned by the kernel converted to a Pony \nU32\n.\n\n\nIn case of system call failure, this function returns the 2-tuple:\n1. The value of \nerrno\n.\n2. An undefined value that must be ignored.\n\n\nfun ref getsockopt_u32(\n  level: I32 val,\n  option_name: I32 val)\n: (U32 val , U32 val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlevel: \nI32\n val\n\n\noption_name: \nI32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nsetsockopt\n\u00b6\n\n\n[Source]\n\n\nGeneral wrapper for TCP sockets to the \nsetsockopt(2)\n system call.\n\n\nThe caller is responsible for the correct size and byte contents of\nthe \noption\n array for the requested \nlevel\n and \noption_name\n,\nincluding using the appropriate machine endian byte order.\n\n\nThis function returns \n0\n on success, else the value of \nerrno\n on\nfailure.\n\n\nUsage example:\n\n\n// connected() is a callback function for class TCPConnectionNotify\nfun ref connected(conn: TCPConnection ref) =>\n  let sb = Writer\n\n  sb.u32_le(7744)             // Our desired socket buffer size\n  let sbytes = Array[U8]\n  for bs in sb.done().values() do\n    sbytes.append(bs)\n  end\n  match conn.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes)\n    | 0 =>\n      // System call was successful\n    | let errno: U32 =>\n      // System call failed\n  end\n\n\n\n\nfun ref setsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option: Array[U8 val] ref)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlevel: \nI32\n val\n\n\noption_name: \nI32\n val\n\n\noption: \nArray\n[\nU8\n val] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsetsockopt_u32\n\u00b6\n\n\n[Source]\n\n\nGeneral wrapper for TCP sockets to the \nsetsockopt(2)\n system call where\nthe kernel expects an option value of a C \nuint32_t\n type / Pony\ntype \nU32\n.\n\n\nThis function returns \n0\n on success, else the value of \nerrno\n on\nfailure.\n\n\nfun ref setsockopt_u32(\n  level: I32 val,\n  option_name: I32 val,\n  option: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nlevel: \nI32\n val\n\n\noption_name: \nI32\n val\n\n\noption: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nget_so_error\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \ngetsockopt(fd, SOL_SOCKET, SO_ERROR, ...)\n\n\nfun ref get_so_error()\n: (U32 val , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nget_so_rcvbuf\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \ngetsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)\n\n\nfun ref get_so_rcvbuf()\n: (U32 val , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nget_so_sndbuf\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \ngetsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)\n\n\nfun ref get_so_sndbuf()\n: (U32 val , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nget_tcp_nodelay\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \ngetsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)\n\n\nfun ref get_tcp_nodelay()\n: (U32 val , U32 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nset_so_rcvbuf\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \nsetsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)\n\n\nfun ref set_so_rcvbuf(\n  bufsize: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbufsize: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nset_so_sndbuf\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \nsetsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)\n\n\nfun ref set_so_sndbuf(\n  bufsize: U32 val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nbufsize: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nset_tcp_nodelay\n\u00b6\n\n\n[Source]\n\n\nWrapper for the FFI call \nsetsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)\n\n\nfun ref set_tcp_nodelay(\n  state: Bool val)\n: U32 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val",
            "title": "actor TCPConnection"
        },
        {
            "location": "/net-TCPConnection/#tcpconnection",
            "text": "[Source]  A TCP connection. When connecting, the Happy Eyeballs algorithm is used.  The following code creates a client that connects to port 8989 of\nthe local host, writes \"hello world\", and listens for a response,\nwhich it then prints.  use \"net\"\n\nclass MyTCPConnectionNotify is TCPConnectionNotify\n  let _out: OutStream\n\n  new create(out: OutStream) =>\n    _out = out\n\n  fun ref connected(conn: TCPConnection ref) =>\n    conn.write(\"hello world\")\n\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  =>\n    _out.print(\"GOT:\" + String.from_array(consume data))\n    conn.close()\n    true\n\n  fun ref connect_failed(conn: TCPConnection ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      TCPConnection(env.root as AmbientAuth,\n        recover MyTCPConnectionNotify(env.out) end, \"\", \"8989\")\n    end  Note: when writing to the connection data will be silently discarded if the\nconnection has not yet been established.",
            "title": "TCPConnection"
        },
        {
            "location": "/net-TCPConnection/#backpressure-support",
            "text": "",
            "title": "Backpressure support"
        },
        {
            "location": "/net-TCPConnection/#write",
            "text": "The TCP protocol has built-in backpressure support. This is generally\nexperienced as the outgoing write buffer becoming full and being unable\nto write all requested data to the socket. In  TCPConnection , this is\nhidden from the programmer. When this occurs,  TCPConnection  will buffer\nthe extra data until such time as it is able to be sent. Left unchecked,\nthis could result in uncontrolled queuing. To address this, TCPConnectionNotify  implements two methods  throttled  and  unthrottled \nthat are called when backpressure is applied and released.  Upon receiving a  throttled  notification, your application has two choices\non how to handle it. One is to inform the Pony runtime that it can no\nlonger make progress and that runtime backpressure should be applied to\nany actors sending this one messages. For example, you might construct your\napplication like:  // Here we have a TCPConnectionNotify that upon construction\n// is given a BackpressureAuth token. This allows the notifier\n// to inform the Pony runtime when to apply and release backpressure\n// as the connection experiences it.\n// Note the calls to\n//\n// Backpressure.apply(_auth)\n// Backpressure.release(_auth)\n//\n// that apply and release backpressure as needed\n\nuse \"backpressure\"\nuse \"collections\"\nuse \"net\"\n\nclass SlowDown is TCPConnectionNotify\n  let _auth: BackpressureAuth\n  let _out: StdStream\n\n  new iso create(auth: BackpressureAuth, out: StdStream) =>\n    _auth = auth\n    _out = out\n\n  fun ref throttled(connection: TCPConnection ref) =>\n    _out.print(\"Experiencing backpressure!\")\n    Backpressure.apply(_auth)\n\n  fun ref unthrottled(connection: TCPConnection ref) =>\n    _out.print(\"Releasing backpressure!\")\n    Backpressure.release(_auth)\n\n  fun ref closed(connection: TCPConnection ref) =>\n    // if backpressure has been applied, make sure we release\n    // when shutting down\n    _out.print(\"Releasing backpressure if applied!\")\n    Backpressure.release(_auth)\n\n  fun ref connect_failed(conn: TCPConnection ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      let auth = env.root as AmbientAuth\n      let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end,\n        \"\", \"7669\")\n    end  Or if you want, you could handle backpressure by shedding load, that is,\ndropping the extra data rather than carrying out the send. This might look\nlike:  use \"net\"\n\nclass ThrowItAway is TCPConnectionNotify\n  var _throttled: Bool = false\n\n  fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq =>\n    if not _throttled then\n      data\n    else\n      \"\"\n    end\n\n  fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter =>\n    if not _throttled then\n      data\n    else\n      recover Array[String] end\n    end\n\n  fun ref throttled(connection: TCPConnection ref) =>\n    _throttled = true\n\n  fun ref unthrottled(connection: TCPConnection ref) =>\n    _throttled = false\n\n  fun ref connect_failed(conn: TCPConnection ref) =>\n    None\n\nactor Main\n  new create(env: Env) =>\n    try\n      TCPConnection(env.root as AmbientAuth,\n        recover ThrowItAway end, \"\", \"7669\")\n    end  In general, unless you have a very specific use case, we strongly advise that\nyou don't implement a load shedding scheme where you drop data.",
            "title": "Write"
        },
        {
            "location": "/net-TCPConnection/#read",
            "text": "If your application is unable to keep up with data being sent to it over\na  TCPConnection  you can use the builtin read backpressure support to\npause reading the socket which will in turn start to exert backpressure on\nthe corresponding writer on the other end of that socket.  The  mute  behavior allow any other actors in your application to request\nthe cessation of additional reads until such time as  unmute  is called.\nPlease note that this cessation is not guaranteed to happen immediately as\nit is the result of an asynchronous behavior call and as such will have to\nwait for existing messages in the  TCPConnection 's mailbox to be handled.  On non-windows platforms, your  TCPConnection  will not notice if the\nother end of the connection closes until you unmute it. Unix type systems\nlike FreeBSD, Linux and OSX learn about a closed connection upon read. On\nthese platforms, you  must  call  unmute  on a muted connection to have\nit close. Without calling  unmute  the  TCPConnection  actor will never\nexit.  actor tag TCPConnection",
            "title": "Read"
        },
        {
            "location": "/net-TCPConnection/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-TCPConnection/#create",
            "text": "[Source]  Connect via IPv4 or IPv6. If  from  is a non-empty string, the connection\nwill be made from the specified interface.  new tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^",
            "title": "create"
        },
        {
            "location": "/net-TCPConnection/#parameters",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPConnectAuth  val)  notify:  TCPConnectionNotify  iso  host:  String  val  service:  String  val  from:  String  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns",
            "text": "TCPConnection  tag^",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#ip4",
            "text": "[Source]  Connect via IPv4.  new tag ip4(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^",
            "title": "ip4"
        },
        {
            "location": "/net-TCPConnection/#parameters_1",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPConnectAuth  val)  notify:  TCPConnectionNotify  iso  host:  String  val  service:  String  val  from:  String  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_1",
            "text": "TCPConnection  tag^",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#ip6",
            "text": "[Source]  Connect via IPv6.  new tag ip6(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^",
            "title": "ip6"
        },
        {
            "location": "/net-TCPConnection/#parameters_2",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPConnectAuth  val)  notify:  TCPConnectionNotify  iso  host:  String  val  service:  String  val  from:  String  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_2",
            "text": "TCPConnection  tag^",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/net-TCPConnection/#write_1",
            "text": "[Source]  Write a single sequence of bytes. Data will be silently discarded if the\nconnection has not yet been established though.  be write(\n  data: (String val | Array[U8 val] val))",
            "title": "write"
        },
        {
            "location": "/net-TCPConnection/#parameters_3",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#writev",
            "text": "[Source]  Write a sequence of sequences of bytes. Data will be silently discarded if\nthe connection has not yet been established though.  be writev(\n  data: ByteSeqIter val)",
            "title": "writev"
        },
        {
            "location": "/net-TCPConnection/#parameters_4",
            "text": "data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#mute",
            "text": "[Source]  Temporarily suspend reading off this TCPConnection until such time as unmute  is called.  be mute()",
            "title": "mute"
        },
        {
            "location": "/net-TCPConnection/#unmute",
            "text": "[Source]  Start reading off this TCPConnection again after having been muted.  be unmute()",
            "title": "unmute"
        },
        {
            "location": "/net-TCPConnection/#set_notify",
            "text": "[Source]  Change the notifier.  be set_notify(\n  notify: TCPConnectionNotify iso)",
            "title": "set_notify"
        },
        {
            "location": "/net-TCPConnection/#parameters_5",
            "text": "notify:  TCPConnectionNotify  iso",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#dispose",
            "text": "[Source]  Close the connection gracefully once all writes are sent.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/net-TCPConnection/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-TCPConnection/#local_address",
            "text": "[Source]  Return the local IP address.  fun box local_address()\n: NetAddress val",
            "title": "local_address"
        },
        {
            "location": "/net-TCPConnection/#returns_3",
            "text": "NetAddress  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#remote_address",
            "text": "[Source]  Return the remote IP address.  fun box remote_address()\n: NetAddress val",
            "title": "remote_address"
        },
        {
            "location": "/net-TCPConnection/#returns_4",
            "text": "NetAddress  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#expect",
            "text": "[Source]  A  received  call on the notifier must contain exactly  qty  bytes. If qty  is zero, the call can contain any amount of data. This has no effect\nif called in the  sent  notifier callback.  fun ref expect(\n  qty: USize val = seq)\n: None val",
            "title": "expect"
        },
        {
            "location": "/net-TCPConnection/#parameters_6",
            "text": "qty:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#set_nodelay",
            "text": "[Source]  Turn Nagle on/off. Defaults to on. This can only be set on a connected\nsocket.  fun ref set_nodelay(\n  state: Bool val)\n: None val",
            "title": "set_nodelay"
        },
        {
            "location": "/net-TCPConnection/#parameters_7",
            "text": "state:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#set_keepalive",
            "text": "[Source]  Sets the TCP keepalive timeout to approximately  secs  seconds. Exact\ntiming is OS dependent. If  secs  is zero, TCP keepalive is disabled. TCP\nkeepalive is disabled by default. This can only be set on a connected\nsocket.  fun ref set_keepalive(\n  secs: U32 val)\n: None val",
            "title": "set_keepalive"
        },
        {
            "location": "/net-TCPConnection/#parameters_8",
            "text": "secs:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#write_final",
            "text": "[Source]  Write as much as possible to the socket. Set  _writeable  to  false  if not\neverything was written. On an error, close the connection. This is for data\nthat has already been transformed by the notifier. Data will be silently\ndiscarded if the connection has not yet been established though.  fun ref write_final(\n  data: (String val | Array[U8 val] val))\n: None val",
            "title": "write_final"
        },
        {
            "location": "/net-TCPConnection/#parameters_9",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#close",
            "text": "[Source]  Attempt to perform a graceful shutdown. Don't accept new writes. If the\nconnection isn't muted then we won't finish closing until we get a zero\nlength read. If the connection is muted, perform a hard close and shut\ndown immediately.  fun ref close()\n: None val",
            "title": "close"
        },
        {
            "location": "/net-TCPConnection/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#getsockopt",
            "text": "[Source]  General wrapper for TCP sockets to the  getsockopt(2)  system call.  The caller must provide an array that is pre-allocated to be\nat least as large as the largest data structure that the kernel\nmay return for the requested option.  In case of system call success, this function returns the 2-tuple:\n1. The integer  0 .\n2. An  Array[U8]  of data returned by the system call's  void * \n   4th argument.  Its size is specified by the kernel via the\n   system call's  sockopt_len_t *  5th argument.  In case of system call failure, this function returns the 2-tuple:\n1. The value of  errno .\n2. An undefined value that must be ignored.  Usage example:  // connected() is a callback function for class TCPConnectionNotify\nfun ref connected(conn: TCPConnection ref) =>\n  match conn.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4)\n    | (0, let gbytes: Array[U8] iso) =>\n      try\n        let br = Reader.create().>append(consume gbytes)\n        ifdef littleendian then\n          let buffer_size = br.u32_le()?\n        else\n          let buffer_size = br.u32_be()?\n        end\n      end\n    | (let errno: U32, _) =>\n      // System call failed\n  end  fun ref getsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option_max_size: USize val = seq)\n: (U32 val , Array[U8 val] iso^)",
            "title": "getsockopt"
        },
        {
            "location": "/net-TCPConnection/#parameters_10",
            "text": "level:  I32  val  option_name:  I32  val  option_max_size:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_10",
            "text": "( U32  val ,  Array [ U8  val] iso^)",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#getsockopt_u32",
            "text": "[Source]  Wrapper for TCP sockets to the  getsockopt(2)  system call where\nthe kernel's returned option value is a C  uint32_t  type / Pony\ntype  U32 .  In case of system call success, this function returns the 2-tuple:\n1. The integer  0 .\n2. The  *option_value  returned by the kernel converted to a Pony  U32 .  In case of system call failure, this function returns the 2-tuple:\n1. The value of  errno .\n2. An undefined value that must be ignored.  fun ref getsockopt_u32(\n  level: I32 val,\n  option_name: I32 val)\n: (U32 val , U32 val)",
            "title": "getsockopt_u32"
        },
        {
            "location": "/net-TCPConnection/#parameters_11",
            "text": "level:  I32  val  option_name:  I32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_11",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#setsockopt",
            "text": "[Source]  General wrapper for TCP sockets to the  setsockopt(2)  system call.  The caller is responsible for the correct size and byte contents of\nthe  option  array for the requested  level  and  option_name ,\nincluding using the appropriate machine endian byte order.  This function returns  0  on success, else the value of  errno  on\nfailure.  Usage example:  // connected() is a callback function for class TCPConnectionNotify\nfun ref connected(conn: TCPConnection ref) =>\n  let sb = Writer\n\n  sb.u32_le(7744)             // Our desired socket buffer size\n  let sbytes = Array[U8]\n  for bs in sb.done().values() do\n    sbytes.append(bs)\n  end\n  match conn.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes)\n    | 0 =>\n      // System call was successful\n    | let errno: U32 =>\n      // System call failed\n  end  fun ref setsockopt(\n  level: I32 val,\n  option_name: I32 val,\n  option: Array[U8 val] ref)\n: U32 val",
            "title": "setsockopt"
        },
        {
            "location": "/net-TCPConnection/#parameters_12",
            "text": "level:  I32  val  option_name:  I32  val  option:  Array [ U8  val] ref",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_12",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#setsockopt_u32",
            "text": "[Source]  General wrapper for TCP sockets to the  setsockopt(2)  system call where\nthe kernel expects an option value of a C  uint32_t  type / Pony\ntype  U32 .  This function returns  0  on success, else the value of  errno  on\nfailure.  fun ref setsockopt_u32(\n  level: I32 val,\n  option_name: I32 val,\n  option: U32 val)\n: U32 val",
            "title": "setsockopt_u32"
        },
        {
            "location": "/net-TCPConnection/#parameters_13",
            "text": "level:  I32  val  option_name:  I32  val  option:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_13",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#get_so_error",
            "text": "[Source]  Wrapper for the FFI call  getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)  fun ref get_so_error()\n: (U32 val , U32 val)",
            "title": "get_so_error"
        },
        {
            "location": "/net-TCPConnection/#returns_14",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#get_so_rcvbuf",
            "text": "[Source]  Wrapper for the FFI call  getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)  fun ref get_so_rcvbuf()\n: (U32 val , U32 val)",
            "title": "get_so_rcvbuf"
        },
        {
            "location": "/net-TCPConnection/#returns_15",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#get_so_sndbuf",
            "text": "[Source]  Wrapper for the FFI call  getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)  fun ref get_so_sndbuf()\n: (U32 val , U32 val)",
            "title": "get_so_sndbuf"
        },
        {
            "location": "/net-TCPConnection/#returns_16",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#get_tcp_nodelay",
            "text": "[Source]  Wrapper for the FFI call  getsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)  fun ref get_tcp_nodelay()\n: (U32 val , U32 val)",
            "title": "get_tcp_nodelay"
        },
        {
            "location": "/net-TCPConnection/#returns_17",
            "text": "( U32  val ,  U32  val)",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#set_so_rcvbuf",
            "text": "[Source]  Wrapper for the FFI call  setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)  fun ref set_so_rcvbuf(\n  bufsize: U32 val)\n: U32 val",
            "title": "set_so_rcvbuf"
        },
        {
            "location": "/net-TCPConnection/#parameters_14",
            "text": "bufsize:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_18",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#set_so_sndbuf",
            "text": "[Source]  Wrapper for the FFI call  setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)  fun ref set_so_sndbuf(\n  bufsize: U32 val)\n: U32 val",
            "title": "set_so_sndbuf"
        },
        {
            "location": "/net-TCPConnection/#parameters_15",
            "text": "bufsize:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_19",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnection/#set_tcp_nodelay",
            "text": "[Source]  Wrapper for the FFI call  setsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)  fun ref set_tcp_nodelay(\n  state: Bool val)\n: U32 val",
            "title": "set_tcp_nodelay"
        },
        {
            "location": "/net-TCPConnection/#parameters_16",
            "text": "state:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnection/#returns_20",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/",
            "text": "OSSockOpt\n\u00b6\n\n\n[Source]\n\n\nConvenience functions to fetch the option level and option\nname constants (arguments #2 and #3) for the\n\ngetsockopt(2)\n and \nsetsockopt(2)\n operating system calls.\n\n\nThe values of the option level and option name constants are\ntypically C preprocessor macros, e.g., \n#define SOMETHING 42\n.\nThese macro names are upper case and may contain multiple\nconsecutive underscore characters (though this is rare, for\nexample, \nIP_NAT__XXX\n).  The function names in this primitive\nare derived by the C macro name and then:\n\n\n\n\nconverted to lower case\n\n\nany double underscore (\n__\n) is converted to a\n    single underscore (\n_\n).\n\n\n\n\nThese constants are \nnot\n stable between Pony releases.\nValues returned by this function may be held by long-lived variables\nby the calling process: values cannot change while the process runs.\nProgrammers must not cache any of these values for purposes of\nsharing them for use by any other Pony program (for example,\nsharing via serialization & deserialization or via direct\nshared memory).\n\n\nMany functions may return \n-1\n, which means that the constant's\nvalue could not be determined at the Pony runtime library compile\ntime.  One cause may be that the option truly isn't available,\nfor example, the option level constant \nIPPROTO_3PC\n is available\non MacOS 10.x but not on Linux 4.4.  Another cause may be the\nPony runtime library's compilation did not include the correct\nheader file(s) for the target OS platform.\n\n\nA third cause of error is due to the regular expression-based\napproach used to harvest desirable constants.  It is not fool-proof.\nThe regexp used is too broad and finds some macros that are not\nsupposed to be used with \ngetsockopt(2)\n and \nsetsockopt(2)\n.\nPlease consult your platform's documentation to verify the names\nof the option level and option name macros.\n\n\nThe following code fragments are equivalent: set the socket\nreceive buffer size for the file descriptor \nfd\n to \n4455\n.\n\n\n/* In C */\nint option_value = 4455;\nsetsockopt(fd, SOL_SOCKET, SO_RCVBUF, &option_value, 4);\n\n/* In Pony */\nvar option: I32 = 4455;\n@pony_os_setsockopt[I32](fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(),\n  addressof option, I32(4))\n\n\n\n\nprimitive val OSSockOpt\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: OSSockOpt val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nOSSockOpt\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nipproto_3pc\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_3pc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_adfs\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_adfs()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ah\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ah()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ahip\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ahip()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_apes\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_apes()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_argus\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_argus()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ax25\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ax25()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_beetph\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_beetph()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_bha\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_bha()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_blt\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_blt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_brsatmon\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_brsatmon()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_carp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_carp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_cftp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_cftp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_chaos\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_chaos()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_cmtp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_cmtp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_comp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_comp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_cphb\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_cphb()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_cpnx\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_cpnx()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_dccp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_dccp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ddp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ddp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_dgp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_dgp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_divert\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_divert()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_done\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_done()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_dstopts\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_dstopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_egp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_egp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_emcon\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_emcon()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_encap\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_encap()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_eon\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_eon()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_esp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_esp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_etherip\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_etherip()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_fragment\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_fragment()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ggp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ggp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_gmtp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_gmtp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_gre\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_gre()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_hello\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_hello()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_hip\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_hip()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_hmp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_hmp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_hopopts\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_hopopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_icmp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_icmp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_icmpv6\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_icmpv6()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_idp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_idp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_idpr\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_idpr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_idrp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_idrp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_igmp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_igmp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_igp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_igp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_igrp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_igrp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_il\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_il()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_inlsp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_inlsp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_inp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_inp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ip\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ip()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ipcomp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ipcomp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ipcv\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ipcv()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ipeip\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ipeip()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ipip\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ipip()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ippc\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ippc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ipv4\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ipv4()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ipv6\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ipv6()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_irtp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_irtp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_kryptolan\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_kryptolan()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_larp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_larp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_leaf1\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_leaf1()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_leaf2\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_leaf2()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_max\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_max()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_maxid\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_maxid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_meas\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_meas()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_mh\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_mh()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_mhrp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_mhrp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_micp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_micp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_mobile\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_mobile()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_mpls\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_mpls()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_mtp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_mtp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_mux\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_mux()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_nd\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_nd()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_nhrp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_nhrp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_none\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_none()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_nsp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_nsp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_nvpii\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_nvpii()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_old_divert\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_old_divert()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ospfigp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ospfigp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_pfsync\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_pfsync()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_pgm\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_pgm()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_pigp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_pigp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_pim\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_pim()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_prm\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_prm()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_pup\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_pup()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_pvp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_pvp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_raw\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_raw()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_rccmon\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_rccmon()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_rdp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_rdp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_reserved_253\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_reserved_253()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_reserved_254\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_reserved_254()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_routing\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_routing()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_rsvp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_rsvp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_rvd\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_rvd()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_satexpak\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_satexpak()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_satmon\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_satmon()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_sccsp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_sccsp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_sctp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_sctp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_sdrp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_sdrp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_send\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_send()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_sep\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_sep()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_shim6\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_shim6()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_skip\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_skip()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_spacer\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_spacer()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_srpc\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_srpc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_st\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_st()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_svmtp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_svmtp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_swipe\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_swipe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_tcf\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_tcf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_tcp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_tcp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_tlsp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_tlsp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_tp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_tp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_tpxx\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_tpxx()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_trunk1\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_trunk1()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_trunk2\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_trunk2()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_ttp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_ttp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_udp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_udp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_udplite\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_udplite()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_vines\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_vines()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_visa\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_visa()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_vmtp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_vmtp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_wbexpak\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_wbexpak()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_wbmon\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_wbmon()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_wsn\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_wsn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_xnet\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_xnet()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipproto_xtp\n\u00b6\n\n\n[Source]\n\n\nfun box ipproto_xtp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_atalk\n\u00b6\n\n\n[Source]\n\n\nfun box sol_atalk()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_ax25\n\u00b6\n\n\n[Source]\n\n\nfun box sol_ax25()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_hci_raw\n\u00b6\n\n\n[Source]\n\n\nfun box sol_hci_raw()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_ipx\n\u00b6\n\n\n[Source]\n\n\nfun box sol_ipx()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_l2cap\n\u00b6\n\n\n[Source]\n\n\nfun box sol_l2cap()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_local\n\u00b6\n\n\n[Source]\n\n\nfun box sol_local()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_ndrvproto\n\u00b6\n\n\n[Source]\n\n\nfun box sol_ndrvproto()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_netrom\n\u00b6\n\n\n[Source]\n\n\nfun box sol_netrom()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_rds\n\u00b6\n\n\n[Source]\n\n\nfun box sol_rds()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_rfcomm\n\u00b6\n\n\n[Source]\n\n\nfun box sol_rfcomm()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_rose\n\u00b6\n\n\n[Source]\n\n\nfun box sol_rose()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_sco\n\u00b6\n\n\n[Source]\n\n\nfun box sol_sco()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_socket\n\u00b6\n\n\n[Source]\n\n\nfun box sol_socket()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_tipc\n\u00b6\n\n\n[Source]\n\n\nfun box sol_tipc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsol_udp\n\u00b6\n\n\n[Source]\n\n\nfun box sol_udp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\naf_coip\n\u00b6\n\n\n[Source]\n\n\nfun box af_coip()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\naf_inet\n\u00b6\n\n\n[Source]\n\n\nfun box af_inet()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\naf_inet6\n\u00b6\n\n\n[Source]\n\n\nfun box af_inet6()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nbluetooth_proto_sco\n\u00b6\n\n\n[Source]\n\n\nfun box bluetooth_proto_sco()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_nr_pkt_types\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_nr_pkt_types()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_service_list_max_len\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_service_list_max_len()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_single_opt_maxlen\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_single_opt_maxlen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_available_ccids\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_available_ccids()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_ccid\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_ccid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_ccid_rx_info\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_ccid_rx_info()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_ccid_tx_info\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_ccid_tx_info()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_change_l\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_change_l()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_change_r\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_change_r()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_get_cur_mps\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_get_cur_mps()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_packet_size\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_packet_size()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_qpolicy_id\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_qpolicy_id()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_qpolicy_txqlen\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_qpolicy_txqlen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_recv_cscov\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_recv_cscov()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_rx_ccid\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_rx_ccid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_send_cscov\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_send_cscov()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_server_timewait\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_server_timewait()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_service\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_service()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndccp_sockopt_tx_ccid\n\u00b6\n\n\n[Source]\n\n\nfun box dccp_sockopt_tx_ccid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_acceptmode\n\u00b6\n\n\n[Source]\n\n\nfun box dso_acceptmode()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_conaccept\n\u00b6\n\n\n[Source]\n\n\nfun box dso_conaccept()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_conaccess\n\u00b6\n\n\n[Source]\n\n\nfun box dso_conaccess()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_condata\n\u00b6\n\n\n[Source]\n\n\nfun box dso_condata()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_conreject\n\u00b6\n\n\n[Source]\n\n\nfun box dso_conreject()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_cork\n\u00b6\n\n\n[Source]\n\n\nfun box dso_cork()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_disdata\n\u00b6\n\n\n[Source]\n\n\nfun box dso_disdata()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_info\n\u00b6\n\n\n[Source]\n\n\nfun box dso_info()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_linkinfo\n\u00b6\n\n\n[Source]\n\n\nfun box dso_linkinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_max\n\u00b6\n\n\n[Source]\n\n\nfun box dso_max()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_maxwindow\n\u00b6\n\n\n[Source]\n\n\nfun box dso_maxwindow()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_nodelay\n\u00b6\n\n\n[Source]\n\n\nfun box dso_nodelay()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_seqpacket\n\u00b6\n\n\n[Source]\n\n\nfun box dso_seqpacket()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_services\n\u00b6\n\n\n[Source]\n\n\nfun box dso_services()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndso_stream\n\u00b6\n\n\n[Source]\n\n\nfun box dso_stream()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_address\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_address()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_addressreply\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_addressreply()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_dest_unreach\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_dest_unreach()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_echo\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_echo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_echoreply\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_echoreply()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_exc_fragtime\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_exc_fragtime()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_exc_ttl\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_exc_ttl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_filter\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_filter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_frag_needed\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_frag_needed()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_host_ano\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_host_ano()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_host_isolated\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_host_isolated()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_host_unknown\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_host_unknown()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_host_unreach\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_host_unreach()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_host_unr_tos\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_host_unr_tos()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_info_reply\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_info_reply()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_info_request\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_info_request()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_net_ano\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_net_ano()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_net_unknown\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_net_unknown()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_net_unreach\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_net_unreach()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_net_unr_tos\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_net_unr_tos()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_parameterprob\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_parameterprob()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_pkt_filtered\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_pkt_filtered()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_port_unreach\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_port_unreach()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_prec_cutoff\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_prec_cutoff()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_prec_violation\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_prec_violation()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_prot_unreach\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_prot_unreach()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_redirect\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_redirect()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_redir_host\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_redir_host()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_redir_hosttos\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_redir_hosttos()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_redir_net\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_redir_net()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_redir_nettos\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_redir_nettos()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_source_quench\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_source_quench()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_sr_failed\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_sr_failed()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_timestamp\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_timestamp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_timestampreply\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_timestampreply()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nicmp_time_exceeded\n\u00b6\n\n\n[Source]\n\n\nfun box icmp_time_exceeded()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_acceptsourceroute\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_acceptsourceroute()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_defmtu\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_defmtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_defttl\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_defttl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_directedbroadcast\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_directedbroadcast()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_fastforwarding\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_fastforwarding()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_forwarding\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_forwarding()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_gif_ttl\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_gif_ttl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_intrdqdrops\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_intrdqdrops()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_intrdqmaxlen\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_intrdqmaxlen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_intrqdrops\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_intrqdrops()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_intrqmaxlen\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_intrqmaxlen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_keepfaith\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_keepfaith()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_maxid\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_maxid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_rtexpire\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_rtexpire()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_rtmaxcache\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_rtmaxcache()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_rtminexpire\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_rtminexpire()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_sendredirects\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_sendredirects()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_sourceroute\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_sourceroute()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipctl_stats\n\u00b6\n\n\n[Source]\n\n\nfun box ipctl_stats()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipport_ephemeralfirst\n\u00b6\n\n\n[Source]\n\n\nfun box ipport_ephemeralfirst()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipport_ephemerallast\n\u00b6\n\n\n[Source]\n\n\nfun box ipport_ephemerallast()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipport_hifirstauto\n\u00b6\n\n\n[Source]\n\n\nfun box ipport_hifirstauto()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipport_hilastauto\n\u00b6\n\n\n[Source]\n\n\nfun box ipport_hilastauto()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipport_max\n\u00b6\n\n\n[Source]\n\n\nfun box ipport_max()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipport_reserved\n\u00b6\n\n\n[Source]\n\n\nfun box ipport_reserved()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipport_reservedstart\n\u00b6\n\n\n[Source]\n\n\nfun box ipport_reservedstart()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipport_userreserved\n\u00b6\n\n\n[Source]\n\n\nfun box ipport_userreserved()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_2292dstopts\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_2292dstopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_2292hoplimit\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_2292hoplimit()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_2292hopopts\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_2292hopopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_2292pktinfo\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_2292pktinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_2292pktoptions\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_2292pktoptions()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_2292rthdr\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_2292rthdr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_addrform\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_addrform()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_addr_preferences\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_addr_preferences()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_add_membership\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_add_membership()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_authhdr\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_authhdr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_autoflowlabel\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_autoflowlabel()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_checksum\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_checksum()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_dontfrag\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_dontfrag()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_drop_membership\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_drop_membership()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_dstopts\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_dstopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_flowinfo\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_flowinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_flowinfo_flowlabel\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_flowinfo_flowlabel()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_flowinfo_priority\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_flowinfo_priority()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_flowinfo_send\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_flowinfo_send()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_flowlabel_mgr\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_flowlabel_mgr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_a_get\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_a_get()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_a_put\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_a_put()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_a_renew\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_a_renew()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_f_create\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_f_create()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_f_excl\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_f_excl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_f_reflect\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_f_reflect()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_f_remote\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_f_remote()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_s_any\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_s_any()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_s_excl\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_s_excl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_s_none\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_s_none()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_s_process\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_s_process()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_fl_s_user\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_fl_s_user()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_hoplimit\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_hoplimit()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_hopopts\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_hopopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_ipsec_policy\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_ipsec_policy()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_join_anycast\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_join_anycast()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_leave_anycast\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_leave_anycast()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_minhopcount\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_minhopcount()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_mtu\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_mtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_mtu_discover\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_mtu_discover()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_multicast_hops\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_multicast_hops()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_multicast_if\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_multicast_if()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_multicast_loop\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_multicast_loop()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_nexthop\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_nexthop()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_origdstaddr\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_origdstaddr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_pathmtu\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_pathmtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_pktinfo\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_pktinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_pmtudisc_do\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_pmtudisc_do()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_pmtudisc_dont\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_pmtudisc_dont()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_pmtudisc_interface\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_pmtudisc_interface()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_pmtudisc_omit\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_pmtudisc_omit()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_pmtudisc_probe\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_pmtudisc_probe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_pmtudisc_want\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_pmtudisc_want()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_prefer_src_cga\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_prefer_src_cga()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_prefer_src_coa\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_prefer_src_coa()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_prefer_src_home\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_prefer_src_home()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_prefer_src_noncga\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_prefer_src_noncga()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_prefer_src_public\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_prefer_src_public()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_prefer_src_pubtmp_default\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_prefer_src_pubtmp_default()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_prefer_src_tmp\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_prefer_src_tmp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_10\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_10()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_11\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_11()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_12\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_12()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_13\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_13()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_14\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_14()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_15\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_15()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_8\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_8()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_9\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_9()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_bulk\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_bulk()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_control\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_control()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_filler\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_filler()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_interactive\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_interactive()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_reserved1\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_reserved1()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_reserved2\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_reserved2()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_unattended\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_unattended()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_priority_uncharacterized\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_priority_uncharacterized()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_recvdstopts\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_recvdstopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_recverr\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_recverr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_recvhoplimit\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_recvhoplimit()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_recvhopopts\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_recvhopopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_recvorigdstaddr\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_recvorigdstaddr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_recvpathmtu\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_recvpathmtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_recvpktinfo\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_recvpktinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_recvrthdr\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_recvrthdr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_recvtclass\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_recvtclass()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_router_alert\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_router_alert()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_rthdr\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_rthdr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_rthdrdstopts\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_rthdrdstopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_tclass\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_tclass()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_tlv_hao\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_tlv_hao()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_tlv_jumbo\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_tlv_jumbo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_tlv_pad1\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_tlv_pad1()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_tlv_padn\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_tlv_padn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_tlv_routeralert\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_tlv_routeralert()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_transparent\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_transparent()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_unicast_hops\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_unicast_hops()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_unicast_if\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_unicast_if()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_use_min_mtu\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_use_min_mtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_v6only\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_v6only()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipv6_xfrm_policy\n\u00b6\n\n\n[Source]\n\n\nfun box ipv6_xfrm_policy()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_address\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_address()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_address_notify\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_address_notify()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_crtitf\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_crtitf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_dltitf\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_dltitf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_dstype\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_dstype()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_extended_address\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_extended_address()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_filterptype\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_filterptype()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_frame_8022\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_frame_8022()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_frame_8023\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_frame_8023()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_frame_etherii\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_frame_etherii()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_frame_none\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_frame_none()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_frame_snap\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_frame_snap()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_frame_tr_8022\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_frame_tr_8022()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_getnetinfo\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_getnetinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_getnetinfo_norip\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_getnetinfo_norip()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_immediatespxack\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_immediatespxack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_internal\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_internal()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_maxsize\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_maxsize()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_max_adapter_num\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_max_adapter_num()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_mtu\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_mtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_node_len\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_node_len()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_primary\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_primary()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_ptype\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_ptype()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_receive_broadcast\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_receive_broadcast()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_recvhdr\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_recvhdr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_reripnetnumber\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_reripnetnumber()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_route_no_router\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_route_no_router()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_rt_8022\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_rt_8022()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_rt_bluebook\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_rt_bluebook()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_rt_routed\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_rt_routed()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_rt_snap\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_rt_snap()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_special_none\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_special_none()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_spxgetconnectionstatus\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_spxgetconnectionstatus()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_stopfilterptype\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_stopfilterptype()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nipx_type\n\u00b6\n\n\n[Source]\n\n\nfun box ipx_type()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_add_membership\n\u00b6\n\n\n[Source]\n\n\nfun box ip_add_membership()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_add_source_membership\n\u00b6\n\n\n[Source]\n\n\nfun box ip_add_source_membership()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_bindany\n\u00b6\n\n\n[Source]\n\n\nfun box ip_bindany()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_bindmulti\n\u00b6\n\n\n[Source]\n\n\nfun box ip_bindmulti()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_bind_address_no_port\n\u00b6\n\n\n[Source]\n\n\nfun box ip_bind_address_no_port()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_block_source\n\u00b6\n\n\n[Source]\n\n\nfun box ip_block_source()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_bound_if\n\u00b6\n\n\n[Source]\n\n\nfun box ip_bound_if()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_checksum\n\u00b6\n\n\n[Source]\n\n\nfun box ip_checksum()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_default_multicast_loop\n\u00b6\n\n\n[Source]\n\n\nfun box ip_default_multicast_loop()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_default_multicast_ttl\n\u00b6\n\n\n[Source]\n\n\nfun box ip_default_multicast_ttl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_dontfrag\n\u00b6\n\n\n[Source]\n\n\nfun box ip_dontfrag()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_drop_membership\n\u00b6\n\n\n[Source]\n\n\nfun box ip_drop_membership()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_drop_source_membership\n\u00b6\n\n\n[Source]\n\n\nfun box ip_drop_source_membership()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_dummynet3\n\u00b6\n\n\n[Source]\n\n\nfun box ip_dummynet3()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_dummynet_configure\n\u00b6\n\n\n[Source]\n\n\nfun box ip_dummynet_configure()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_dummynet_del\n\u00b6\n\n\n[Source]\n\n\nfun box ip_dummynet_del()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_dummynet_flush\n\u00b6\n\n\n[Source]\n\n\nfun box ip_dummynet_flush()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_dummynet_get\n\u00b6\n\n\n[Source]\n\n\nfun box ip_dummynet_get()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_faith\n\u00b6\n\n\n[Source]\n\n\nfun box ip_faith()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_flowid\n\u00b6\n\n\n[Source]\n\n\nfun box ip_flowid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_flowtype\n\u00b6\n\n\n[Source]\n\n\nfun box ip_flowtype()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_freebind\n\u00b6\n\n\n[Source]\n\n\nfun box ip_freebind()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw3\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw3()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_add\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_add()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_del\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_del()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_flush\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_flush()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_get\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_get()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_nat_cfg\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_nat_cfg()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_nat_del\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_nat_del()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_nat_get_config\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_nat_get_config()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_nat_get_log\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_nat_get_log()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_resetlog\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_resetlog()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_table_add\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_table_add()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_table_del\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_table_del()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_table_flush\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_table_flush()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_table_getsize\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_table_getsize()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_table_list\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_table_list()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_fw_zero\n\u00b6\n\n\n[Source]\n\n\nfun box ip_fw_zero()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_hdrincl\n\u00b6\n\n\n[Source]\n\n\nfun box ip_hdrincl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_ipsec_policy\n\u00b6\n\n\n[Source]\n\n\nfun box ip_ipsec_policy()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_max_group_src_filter\n\u00b6\n\n\n[Source]\n\n\nfun box ip_max_group_src_filter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_max_memberships\n\u00b6\n\n\n[Source]\n\n\nfun box ip_max_memberships()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_max_sock_mute_filter\n\u00b6\n\n\n[Source]\n\n\nfun box ip_max_sock_mute_filter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_max_sock_src_filter\n\u00b6\n\n\n[Source]\n\n\nfun box ip_max_sock_src_filter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_max_source_filter\n\u00b6\n\n\n[Source]\n\n\nfun box ip_max_source_filter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_minttl\n\u00b6\n\n\n[Source]\n\n\nfun box ip_minttl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_min_memberships\n\u00b6\n\n\n[Source]\n\n\nfun box ip_min_memberships()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_msfilter\n\u00b6\n\n\n[Source]\n\n\nfun box ip_msfilter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_mtu\n\u00b6\n\n\n[Source]\n\n\nfun box ip_mtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_mtu_discover\n\u00b6\n\n\n[Source]\n\n\nfun box ip_mtu_discover()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_multicast_all\n\u00b6\n\n\n[Source]\n\n\nfun box ip_multicast_all()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_multicast_if\n\u00b6\n\n\n[Source]\n\n\nfun box ip_multicast_if()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_multicast_ifindex\n\u00b6\n\n\n[Source]\n\n\nfun box ip_multicast_ifindex()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_multicast_loop\n\u00b6\n\n\n[Source]\n\n\nfun box ip_multicast_loop()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_multicast_ttl\n\u00b6\n\n\n[Source]\n\n\nfun box ip_multicast_ttl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_multicast_vif\n\u00b6\n\n\n[Source]\n\n\nfun box ip_multicast_vif()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_nat_xxx\n\u00b6\n\n\n[Source]\n\n\nfun box ip_nat_xxx()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_nodefrag\n\u00b6\n\n\n[Source]\n\n\nfun box ip_nodefrag()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_old_fw_add\n\u00b6\n\n\n[Source]\n\n\nfun box ip_old_fw_add()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_old_fw_del\n\u00b6\n\n\n[Source]\n\n\nfun box ip_old_fw_del()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_old_fw_flush\n\u00b6\n\n\n[Source]\n\n\nfun box ip_old_fw_flush()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_old_fw_get\n\u00b6\n\n\n[Source]\n\n\nfun box ip_old_fw_get()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_old_fw_resetlog\n\u00b6\n\n\n[Source]\n\n\nfun box ip_old_fw_resetlog()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_old_fw_zero\n\u00b6\n\n\n[Source]\n\n\nfun box ip_old_fw_zero()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_onesbcast\n\u00b6\n\n\n[Source]\n\n\nfun box ip_onesbcast()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_options\n\u00b6\n\n\n[Source]\n\n\nfun box ip_options()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_origdstaddr\n\u00b6\n\n\n[Source]\n\n\nfun box ip_origdstaddr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_passsec\n\u00b6\n\n\n[Source]\n\n\nfun box ip_passsec()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_pktinfo\n\u00b6\n\n\n[Source]\n\n\nfun box ip_pktinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_pktoptions\n\u00b6\n\n\n[Source]\n\n\nfun box ip_pktoptions()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_pmtudisc_do\n\u00b6\n\n\n[Source]\n\n\nfun box ip_pmtudisc_do()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_pmtudisc_dont\n\u00b6\n\n\n[Source]\n\n\nfun box ip_pmtudisc_dont()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_pmtudisc_interface\n\u00b6\n\n\n[Source]\n\n\nfun box ip_pmtudisc_interface()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_pmtudisc_omit\n\u00b6\n\n\n[Source]\n\n\nfun box ip_pmtudisc_omit()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_pmtudisc_probe\n\u00b6\n\n\n[Source]\n\n\nfun box ip_pmtudisc_probe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_pmtudisc_want\n\u00b6\n\n\n[Source]\n\n\nfun box ip_pmtudisc_want()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_portrange\n\u00b6\n\n\n[Source]\n\n\nfun box ip_portrange()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_portrange_default\n\u00b6\n\n\n[Source]\n\n\nfun box ip_portrange_default()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_portrange_high\n\u00b6\n\n\n[Source]\n\n\nfun box ip_portrange_high()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_portrange_low\n\u00b6\n\n\n[Source]\n\n\nfun box ip_portrange_low()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_recvdstaddr\n\u00b6\n\n\n[Source]\n\n\nfun box ip_recvdstaddr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_recverr\n\u00b6\n\n\n[Source]\n\n\nfun box ip_recverr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_recvflowid\n\u00b6\n\n\n[Source]\n\n\nfun box ip_recvflowid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_recvif\n\u00b6\n\n\n[Source]\n\n\nfun box ip_recvif()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_recvopts\n\u00b6\n\n\n[Source]\n\n\nfun box ip_recvopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_recvorigdstaddr\n\u00b6\n\n\n[Source]\n\n\nfun box ip_recvorigdstaddr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_recvpktinfo\n\u00b6\n\n\n[Source]\n\n\nfun box ip_recvpktinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_recvretopts\n\u00b6\n\n\n[Source]\n\n\nfun box ip_recvretopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_recvrssbucketid\n\u00b6\n\n\n[Source]\n\n\nfun box ip_recvrssbucketid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_recvtos\n\u00b6\n\n\n[Source]\n\n\nfun box ip_recvtos()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_recvttl\n\u00b6\n\n\n[Source]\n\n\nfun box ip_recvttl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_retopts\n\u00b6\n\n\n[Source]\n\n\nfun box ip_retopts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_router_alert\n\u00b6\n\n\n[Source]\n\n\nfun box ip_router_alert()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_rssbucketid\n\u00b6\n\n\n[Source]\n\n\nfun box ip_rssbucketid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_rss_listen_bucket\n\u00b6\n\n\n[Source]\n\n\nfun box ip_rss_listen_bucket()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_rsvp_off\n\u00b6\n\n\n[Source]\n\n\nfun box ip_rsvp_off()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_rsvp_on\n\u00b6\n\n\n[Source]\n\n\nfun box ip_rsvp_on()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_rsvp_vif_off\n\u00b6\n\n\n[Source]\n\n\nfun box ip_rsvp_vif_off()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_rsvp_vif_on\n\u00b6\n\n\n[Source]\n\n\nfun box ip_rsvp_vif_on()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_sendsrcaddr\n\u00b6\n\n\n[Source]\n\n\nfun box ip_sendsrcaddr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_striphdr\n\u00b6\n\n\n[Source]\n\n\nfun box ip_striphdr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_tos\n\u00b6\n\n\n[Source]\n\n\nfun box ip_tos()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_traffic_mgt_background\n\u00b6\n\n\n[Source]\n\n\nfun box ip_traffic_mgt_background()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_transparent\n\u00b6\n\n\n[Source]\n\n\nfun box ip_transparent()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_ttl\n\u00b6\n\n\n[Source]\n\n\nfun box ip_ttl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_unblock_source\n\u00b6\n\n\n[Source]\n\n\nfun box ip_unblock_source()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_unicast_if\n\u00b6\n\n\n[Source]\n\n\nfun box ip_unicast_if()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nip_xfrm_policy\n\u00b6\n\n\n[Source]\n\n\nfun box ip_xfrm_policy()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nlocal_connwait\n\u00b6\n\n\n[Source]\n\n\nfun box local_connwait()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nlocal_creds\n\u00b6\n\n\n[Source]\n\n\nfun box local_creds()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nlocal_peercred\n\u00b6\n\n\n[Source]\n\n\nfun box local_peercred()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nlocal_peerepid\n\u00b6\n\n\n[Source]\n\n\nfun box local_peerepid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nlocal_peereuuid\n\u00b6\n\n\n[Source]\n\n\nfun box local_peereuuid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nlocal_peerpid\n\u00b6\n\n\n[Source]\n\n\nfun box local_peerpid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nlocal_peeruuid\n\u00b6\n\n\n[Source]\n\n\nfun box local_peeruuid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nlocal_vendor\n\u00b6\n\n\n[Source]\n\n\nfun box local_vendor()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmax_tcpoptlen\n\u00b6\n\n\n[Source]\n\n\nfun box max_tcpoptlen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmcast_block_source\n\u00b6\n\n\n[Source]\n\n\nfun box mcast_block_source()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmcast_exclude\n\u00b6\n\n\n[Source]\n\n\nfun box mcast_exclude()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmcast_include\n\u00b6\n\n\n[Source]\n\n\nfun box mcast_include()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmcast_join_group\n\u00b6\n\n\n[Source]\n\n\nfun box mcast_join_group()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmcast_join_source_group\n\u00b6\n\n\n[Source]\n\n\nfun box mcast_join_source_group()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmcast_leave_group\n\u00b6\n\n\n[Source]\n\n\nfun box mcast_leave_group()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmcast_leave_source_group\n\u00b6\n\n\n[Source]\n\n\nfun box mcast_leave_source_group()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmcast_msfilter\n\u00b6\n\n\n[Source]\n\n\nfun box mcast_msfilter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmcast_unblock_source\n\u00b6\n\n\n[Source]\n\n\nfun box mcast_unblock_source()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmcast_undefined\n\u00b6\n\n\n[Source]\n\n\nfun box mcast_undefined()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_add_bw_upcall\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_add_bw_upcall()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_add_mfc\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_add_mfc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_add_vif\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_add_vif()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_api_config\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_api_config()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_api_flags_all\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_api_flags_all()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_api_support\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_api_support()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_assert\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_assert()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_del_bw_upcall\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_del_bw_upcall()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_del_mfc\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_del_mfc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_del_vif\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_del_vif()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_done\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_done()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_init\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_init()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_mfc_bw_upcall\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_mfc_bw_upcall()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_mfc_flags_all\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_mfc_flags_all()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_mfc_flags_border_vif\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_mfc_flags_border_vif()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_mfc_flags_disable_wrongvif\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_mfc_flags_disable_wrongvif()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_mfc_rp\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_mfc_rp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_pim\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_pim()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmrt_version\n\u00b6\n\n\n[Source]\n\n\nfun box mrt_version()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmsg_notification\n\u00b6\n\n\n[Source]\n\n\nfun box msg_notification()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmsg_socallbck\n\u00b6\n\n\n[Source]\n\n\nfun box msg_socallbck()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nndrvproto_ndrv\n\u00b6\n\n\n[Source]\n\n\nfun box ndrvproto_ndrv()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nndrv_addmulticast\n\u00b6\n\n\n[Source]\n\n\nfun box ndrv_addmulticast()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nndrv_deldmxspec\n\u00b6\n\n\n[Source]\n\n\nfun box ndrv_deldmxspec()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nndrv_delmulticast\n\u00b6\n\n\n[Source]\n\n\nfun box ndrv_delmulticast()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nndrv_demuxtype_ethertype\n\u00b6\n\n\n[Source]\n\n\nfun box ndrv_demuxtype_ethertype()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nndrv_demuxtype_sap\n\u00b6\n\n\n[Source]\n\n\nfun box ndrv_demuxtype_sap()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nndrv_demuxtype_snap\n\u00b6\n\n\n[Source]\n\n\nfun box ndrv_demuxtype_snap()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nndrv_dmux_max_descr\n\u00b6\n\n\n[Source]\n\n\nfun box ndrv_dmux_max_descr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nndrv_protocol_desc_vers\n\u00b6\n\n\n[Source]\n\n\nfun box ndrv_protocol_desc_vers()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nndrv_setdmxspec\n\u00b6\n\n\n[Source]\n\n\nfun box ndrv_setdmxspec()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_add_membership\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_add_membership()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_audit\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_audit()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_broadcast_error\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_broadcast_error()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_cap_ack\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_cap_ack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_connector\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_connector()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_crypto\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_crypto()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_dnrtmsg\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_dnrtmsg()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_drop_membership\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_drop_membership()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_ecryptfs\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_ecryptfs()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_fib_lookup\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_fib_lookup()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_firewall\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_firewall()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_generic\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_generic()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_inet_diag\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_inet_diag()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_ip6_fw\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_ip6_fw()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_iscsi\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_iscsi()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_kobject_uevent\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_kobject_uevent()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_listen_all_nsid\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_listen_all_nsid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_list_memberships\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_list_memberships()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_netfilter\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_netfilter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_nflog\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_nflog()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_no_enobufs\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_no_enobufs()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_pktinfo\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_pktinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_rdma\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_rdma()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_route\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_route()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_rx_ring\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_rx_ring()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_scsitransport\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_scsitransport()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_selinux\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_selinux()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_sock_diag\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_sock_diag()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_tx_ring\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_tx_ring()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_unused\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_unused()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_usersock\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_usersock()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetlink_xfrm\n\u00b6\n\n\n[Source]\n\n\nfun box netlink_xfrm()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetrom_idle\n\u00b6\n\n\n[Source]\n\n\nfun box netrom_idle()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetrom_kill\n\u00b6\n\n\n[Source]\n\n\nfun box netrom_kill()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetrom_n2\n\u00b6\n\n\n[Source]\n\n\nfun box netrom_n2()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetrom_neigh\n\u00b6\n\n\n[Source]\n\n\nfun box netrom_neigh()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetrom_node\n\u00b6\n\n\n[Source]\n\n\nfun box netrom_node()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetrom_paclen\n\u00b6\n\n\n[Source]\n\n\nfun box netrom_paclen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetrom_t1\n\u00b6\n\n\n[Source]\n\n\nfun box netrom_t1()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetrom_t2\n\u00b6\n\n\n[Source]\n\n\nfun box netrom_t2()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnetrom_t4\n\u00b6\n\n\n[Source]\n\n\nfun box netrom_t4()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nnrdv_multicast_addrs_per_sock\n\u00b6\n\n\n[Source]\n\n\nfun box nrdv_multicast_addrs_per_sock()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\npvd_config\n\u00b6\n\n\n[Source]\n\n\nfun box pvd_config()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cancel_sent_to\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cancel_sent_to()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cmsg_atomic_cswp\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cmsg_atomic_cswp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cmsg_atomic_fadd\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cmsg_atomic_fadd()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cmsg_cong_update\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cmsg_cong_update()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cmsg_masked_atomic_cswp\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cmsg_masked_atomic_cswp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cmsg_masked_atomic_fadd\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cmsg_masked_atomic_fadd()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cmsg_rdma_args\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cmsg_rdma_args()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cmsg_rdma_dest\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cmsg_rdma_dest()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cmsg_rdma_map\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cmsg_rdma_map()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cmsg_rdma_status\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cmsg_rdma_status()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cong_monitor\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cong_monitor()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_cong_monitor_size\n\u00b6\n\n\n[Source]\n\n\nfun box rds_cong_monitor_size()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_free_mr\n\u00b6\n\n\n[Source]\n\n\nfun box rds_free_mr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_get_mr\n\u00b6\n\n\n[Source]\n\n\nfun box rds_get_mr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_get_mr_for_dest\n\u00b6\n\n\n[Source]\n\n\nfun box rds_get_mr_for_dest()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_ib_abi_version\n\u00b6\n\n\n[Source]\n\n\nfun box rds_ib_abi_version()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_ib_gid_len\n\u00b6\n\n\n[Source]\n\n\nfun box rds_ib_gid_len()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_connections\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_connections()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_connection_flag_connected\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_connection_flag_connected()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_connection_flag_connecting\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_connection_flag_connecting()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_connection_flag_sending\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_connection_flag_sending()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_connection_stats\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_connection_stats()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_counters\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_counters()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_first\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_first()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_ib_connections\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_ib_connections()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_iwarp_connections\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_iwarp_connections()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_last\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_last()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_message_flag_ack\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_message_flag_ack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_message_flag_fast_ack\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_message_flag_fast_ack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_recv_messages\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_recv_messages()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_retrans_messages\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_retrans_messages()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_send_messages\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_send_messages()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_sockets\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_sockets()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_info_tcp_sockets\n\u00b6\n\n\n[Source]\n\n\nfun box rds_info_tcp_sockets()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_canceled\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_canceled()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_dontwait\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_dontwait()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_dropped\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_dropped()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_fence\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_fence()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_invalidate\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_invalidate()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_notify_me\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_notify_me()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_other_error\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_other_error()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_readwrite\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_readwrite()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_remote_error\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_remote_error()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_silent\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_silent()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_success\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_success()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_rdma_use_once\n\u00b6\n\n\n[Source]\n\n\nfun box rds_rdma_use_once()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_recverr\n\u00b6\n\n\n[Source]\n\n\nfun box rds_recverr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_trans_count\n\u00b6\n\n\n[Source]\n\n\nfun box rds_trans_count()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_trans_ib\n\u00b6\n\n\n[Source]\n\n\nfun box rds_trans_ib()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_trans_iwarp\n\u00b6\n\n\n[Source]\n\n\nfun box rds_trans_iwarp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_trans_none\n\u00b6\n\n\n[Source]\n\n\nfun box rds_trans_none()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrds_trans_tcp\n\u00b6\n\n\n[Source]\n\n\nfun box rds_trans_tcp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_access_barred\n\u00b6\n\n\n[Source]\n\n\nfun box rose_access_barred()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_defer\n\u00b6\n\n\n[Source]\n\n\nfun box rose_defer()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_dte_originated\n\u00b6\n\n\n[Source]\n\n\nfun box rose_dte_originated()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_holdback\n\u00b6\n\n\n[Source]\n\n\nfun box rose_holdback()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_idle\n\u00b6\n\n\n[Source]\n\n\nfun box rose_idle()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_invalid_facility\n\u00b6\n\n\n[Source]\n\n\nfun box rose_invalid_facility()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_local_procedure\n\u00b6\n\n\n[Source]\n\n\nfun box rose_local_procedure()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_max_digis\n\u00b6\n\n\n[Source]\n\n\nfun box rose_max_digis()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_mtu\n\u00b6\n\n\n[Source]\n\n\nfun box rose_mtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_network_congestion\n\u00b6\n\n\n[Source]\n\n\nfun box rose_network_congestion()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_not_obtainable\n\u00b6\n\n\n[Source]\n\n\nfun box rose_not_obtainable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_number_busy\n\u00b6\n\n\n[Source]\n\n\nfun box rose_number_busy()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_out_of_order\n\u00b6\n\n\n[Source]\n\n\nfun box rose_out_of_order()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_qbitincl\n\u00b6\n\n\n[Source]\n\n\nfun box rose_qbitincl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_remote_procedure\n\u00b6\n\n\n[Source]\n\n\nfun box rose_remote_procedure()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_ship_absent\n\u00b6\n\n\n[Source]\n\n\nfun box rose_ship_absent()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_t1\n\u00b6\n\n\n[Source]\n\n\nfun box rose_t1()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_t2\n\u00b6\n\n\n[Source]\n\n\nfun box rose_t2()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nrose_t3\n\u00b6\n\n\n[Source]\n\n\nfun box rose_t3()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nscm_hci_raw_direction\n\u00b6\n\n\n[Source]\n\n\nfun box scm_hci_raw_direction()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nscm_timestamp\n\u00b6\n\n\n[Source]\n\n\nfun box scm_timestamp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nscm_timestamping\n\u00b6\n\n\n[Source]\n\n\nfun box scm_timestamping()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nscm_timestampns\n\u00b6\n\n\n[Source]\n\n\nfun box scm_timestampns()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nscm_wifi_status\n\u00b6\n\n\n[Source]\n\n\nfun box scm_wifi_status()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_abort_association\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_abort_association()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_adaptation_layer\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_adaptation_layer()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_adaption_layer\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_adaption_layer()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_add_streams\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_add_streams()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_add_vrf_id\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_add_vrf_id()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_asconf\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_asconf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_asconf_ack\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_asconf_ack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_asconf_supported\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_asconf_supported()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_associnfo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_associnfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_authentication\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_authentication()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_auth_active_key\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_auth_active_key()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_auth_chunk\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_auth_chunk()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_auth_deactivate_key\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_auth_deactivate_key()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_auth_delete_key\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_auth_delete_key()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_auth_key\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_auth_key()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_auth_supported\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_auth_supported()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_autoclose\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_autoclose()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_auto_asconf\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_auto_asconf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_badcrc\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_badcrc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_bindx_add_addr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_bindx_add_addr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_bindx_rem_addr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_bindx_rem_addr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_blk_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_blk_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_bound\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_bound()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_cookie_in_shutdown\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_cookie_in_shutdown()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_deleting_last_addr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_deleting_last_addr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_deleting_src_addr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_deleting_src_addr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_illegal_asconf_ack\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_illegal_asconf_ack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_invalid_param\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_invalid_param()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_invalid_stream\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_invalid_stream()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_missing_param\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_missing_param()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_nat_colliding_state\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_nat_colliding_state()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_nat_missing_state\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_nat_missing_state()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_no_error\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_no_error()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_no_user_data\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_no_user_data()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_out_of_resc\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_out_of_resc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_protocol_violation\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_protocol_violation()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_request_refused\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_request_refused()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_resource_shortage\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_resource_shortage()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_restart_w_newaddr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_restart_w_newaddr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_stale_cookie\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_stale_cookie()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_unrecog_chunk\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_unrecog_chunk()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_unrecog_param\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_unrecog_param()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_unresolvable_addr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_unresolvable_addr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_unsupported_hmacid\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_unsupported_hmacid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cause_user_initiated_abt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cause_user_initiated_abt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cc_hstcp\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cc_hstcp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cc_htcp\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cc_htcp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cc_option\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cc_option()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cc_opt_rtcc_setmode\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cc_opt_rtcc_setmode()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cc_opt_steady_step\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cc_opt_steady_step()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cc_opt_use_dccc_ecn\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cc_opt_use_dccc_ecn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cc_rfc2581\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cc_rfc2581()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cc_rtcc\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cc_rtcc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_closed\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_closed()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_clr_stat_log\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_clr_stat_log()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cmt_base\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cmt_base()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cmt_max\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cmt_max()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cmt_mptcp\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cmt_mptcp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cmt_off\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cmt_off()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cmt_on_off\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cmt_on_off()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cmt_rpv1\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cmt_rpv1()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cmt_rpv2\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cmt_rpv2()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cmt_use_dac\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cmt_use_dac()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_connect_x\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_connect_x()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_connect_x_complete\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_connect_x_complete()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_connect_x_delayed\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_connect_x_delayed()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_context\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_context()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cookie_ack\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cookie_ack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cookie_echo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cookie_echo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cookie_echoed\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cookie_echoed()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cookie_wait\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cookie_wait()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cwnd_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cwnd_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cwnd_monitor_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cwnd_monitor_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cwr_in_same_window\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cwr_in_same_window()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_cwr_reduce_override\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_cwr_reduce_override()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_data\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_data()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_data_first_frag\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_data_first_frag()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_data_frag_mask\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_data_frag_mask()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_data_last_frag\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_data_last_frag()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_data_middle_frag\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_data_middle_frag()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_data_not_frag\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_data_not_frag()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_data_sack_immediately\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_data_sack_immediately()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_data_unordered\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_data_unordered()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_default_prinfo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_default_prinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_default_send_param\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_default_send_param()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_default_sndinfo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_default_sndinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_delayed_sack\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_delayed_sack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_del_vrf_id\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_del_vrf_id()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_disable_fragments\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_disable_fragments()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ecn_cwr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ecn_cwr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ecn_echo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ecn_echo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ecn_supported\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ecn_supported()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_enable_change_assoc_req\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_enable_change_assoc_req()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_enable_reset_assoc_req\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_enable_reset_assoc_req()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_enable_reset_stream_req\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_enable_reset_stream_req()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_enable_stream_reset\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_enable_stream_reset()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_enable_value_mask\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_enable_value_mask()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_established\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_established()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_event\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_event()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_events\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_events()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_explicit_eor\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_explicit_eor()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_flight_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_flight_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_forward_cum_tsn\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_forward_cum_tsn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_fragment_interleave\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_fragment_interleave()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_frag_level_0\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_frag_level_0()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_frag_level_1\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_frag_level_1()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_frag_level_2\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_frag_level_2()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_from_middle_box\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_from_middle_box()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_fr_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_fr_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_addr_len\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_addr_len()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_asoc_vrf\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_asoc_vrf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_assoc_id_list\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_assoc_id_list()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_assoc_number\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_assoc_number()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_local_addresses\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_local_addresses()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_local_addr_size\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_local_addr_size()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_nonce_values\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_nonce_values()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_packet_log\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_packet_log()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_peer_addresses\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_peer_addresses()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_peer_addr_info\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_peer_addr_info()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_remote_addr_size\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_remote_addr_size()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_sndbuf_use\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_sndbuf_use()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_stat_log\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_stat_log()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_get_vrf_ids\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_get_vrf_ids()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_had_no_tcb\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_had_no_tcb()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_heartbeat_ack\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_heartbeat_ack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_heartbeat_request\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_heartbeat_request()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_hmac_ident\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_hmac_ident()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_idata\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_idata()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_iforward_cum_tsn\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_iforward_cum_tsn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_initiation\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_initiation()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_initiation_ack\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_initiation_ack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_initmsg\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_initmsg()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_interleaving_supported\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_interleaving_supported()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_i_want_mapped_v4_addr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_i_want_mapped_v4_addr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_last_packet_tracing\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_last_packet_tracing()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_listen\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_listen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_local_auth_chunks\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_local_auth_chunks()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_lock_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_lock_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_log_at_send_2_outq\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_log_at_send_2_outq()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_log_at_send_2_sctp\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_log_at_send_2_sctp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_log_maxburst_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_log_maxburst_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_log_rwnd_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_log_rwnd_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_log_sack_arrivals_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_log_sack_arrivals_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_log_try_advance\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_log_try_advance()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ltrace_chunk_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ltrace_chunk_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ltrace_error_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ltrace_error_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_map_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_map_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_maxburst\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_maxburst()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_maxseg\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_maxseg()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_max_burst\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_max_burst()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_max_cookie_life\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_max_cookie_life()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_max_cwnd\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_max_cwnd()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_max_hb_interval\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_max_hb_interval()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_max_sack_delay\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_max_sack_delay()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_mbcnt_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_mbcnt_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_mbuf_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_mbuf_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_mobility_base\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_mobility_base()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_mobility_fasthandoff\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_mobility_fasthandoff()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_mobility_prim_deleted\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_mobility_prim_deleted()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_nagle_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_nagle_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_nodelay\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_nodelay()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_nrsack_supported\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_nrsack_supported()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_nr_selective_ack\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_nr_selective_ack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_operation_error\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_operation_error()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_packed\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_packed()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_packet_dropped\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_packet_dropped()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_packet_log_size\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_packet_log_size()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_packet_truncated\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_packet_truncated()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pad_chunk\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pad_chunk()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_partial_delivery_point\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_partial_delivery_point()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_copy_flags\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_copy_flags()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_accepting\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_accepting()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_adaptationevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_adaptationevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_assoc_resetevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_assoc_resetevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_authevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_authevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_autoclose\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_autoclose()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_auto_asconf\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_auto_asconf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_blocking_io\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_blocking_io()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_boundall\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_boundall()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_bound_v6\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_bound_v6()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_close_ip\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_close_ip()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_connected\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_connected()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_donot_heartbeat\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_donot_heartbeat()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_dont_wake\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_dont_wake()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_do_asconf\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_do_asconf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_do_not_pmtud\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_do_not_pmtud()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_dryevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_dryevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_explicit_eor\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_explicit_eor()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_ext_rcvinfo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_ext_rcvinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_frag_interleave\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_frag_interleave()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_interleave_strms\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_interleave_strms()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_in_tcppool\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_in_tcppool()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_multiple_asconfs\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_multiple_asconfs()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_needs_mapped_v4\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_needs_mapped_v4()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_nodelay\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_nodelay()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_no_fragment\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_no_fragment()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_pdapievnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_pdapievnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_portreuse\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_portreuse()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_recvassocevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_recvassocevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_recvdataioevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_recvdataioevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_recvnsendfailevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_recvnsendfailevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_recvnxtinfo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_recvnxtinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_recvpaddrevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_recvpaddrevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_recvpeererr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_recvpeererr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_recvrcvinfo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_recvrcvinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_recvsendfailevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_recvsendfailevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_recvshutdownevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_recvshutdownevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_socket_allgone\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_socket_allgone()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_socket_cant_read\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_socket_cant_read()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_socket_gone\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_socket_gone()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_stream_changeevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_stream_changeevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_stream_resetevnt\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_stream_resetevnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_tcptype\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_tcptype()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_udptype\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_udptype()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_unbound\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_unbound()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_wakeinput\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_wakeinput()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_wakeoutput\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_wakeoutput()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_was_aborted\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_was_aborted()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_was_connected\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_was_connected()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_flags_zero_copy_active\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_flags_zero_copy_active()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pcb_status\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pcb_status()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_peeloff\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_peeloff()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_peer_addr_params\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_peer_addr_params()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_peer_addr_thlds\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_peer_addr_thlds()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_peer_auth_chunks\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_peer_auth_chunks()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pktdrop_supported\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pktdrop_supported()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pluggable_cc\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pluggable_cc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pluggable_ss\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pluggable_ss()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_primary_addr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_primary_addr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pr_assoc_status\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pr_assoc_status()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pr_stream_status\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pr_stream_status()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_pr_supported\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_pr_supported()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_reconfig_supported\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_reconfig_supported()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_recvnxtinfo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_recvnxtinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_recvrcvinfo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_recvrcvinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_recv_rwnd_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_recv_rwnd_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_remote_udp_encaps_port\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_remote_udp_encaps_port()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_reset_assoc\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_reset_assoc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_reset_streams\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_reset_streams()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_reuse_port\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_reuse_port()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_rtoinfo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_rtoinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_rttvar_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_rttvar_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_sack_cmt_dac\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_sack_cmt_dac()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_sack_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_sack_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_sack_nonce_sum\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_sack_nonce_sum()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_sack_rwnd_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_sack_rwnd_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_sat_network_burst_incr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_sat_network_burst_incr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_sat_network_min\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_sat_network_min()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_sb_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_sb_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_selective_ack\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_selective_ack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_set_debug_level\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_set_debug_level()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_set_dynamic_primary\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_set_dynamic_primary()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_set_initial_dbg_seq\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_set_initial_dbg_seq()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_set_peer_primary_addr\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_set_peer_primary_addr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_shutdown\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_shutdown()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_shutdown_ack\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_shutdown_ack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_shutdown_ack_sent\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_shutdown_ack_sent()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_shutdown_complete\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_shutdown_complete()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_shutdown_pending\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_shutdown_pending()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_shutdown_received\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_shutdown_received()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_shutdown_sent\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_shutdown_sent()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_smallest_pmtu\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_smallest_pmtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ss_default\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ss_default()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ss_fair_bandwith\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ss_fair_bandwith()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ss_first_come\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ss_first_come()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ss_priority\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ss_priority()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ss_round_robin\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ss_round_robin()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ss_round_robin_packet\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ss_round_robin_packet()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_ss_value\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_ss_value()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_status\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_status()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_stream_reset\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_stream_reset()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_stream_reset_incoming\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_stream_reset_incoming()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_stream_reset_outgoing\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_stream_reset_outgoing()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_str_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_str_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_threshold_logging\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_threshold_logging()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_timeouts\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_timeouts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_use_ext_rcvinfo\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_use_ext_rcvinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_vrf_id\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_vrf_id()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsctp_wake_logging_enable\n\u00b6\n\n\n[Source]\n\n\nfun box sctp_wake_logging_enable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsock_cloexec\n\u00b6\n\n\n[Source]\n\n\nfun box sock_cloexec()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsock_dgram\n\u00b6\n\n\n[Source]\n\n\nfun box sock_dgram()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsock_maxaddrlen\n\u00b6\n\n\n[Source]\n\n\nfun box sock_maxaddrlen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsock_nonblock\n\u00b6\n\n\n[Source]\n\n\nfun box sock_nonblock()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsock_raw\n\u00b6\n\n\n[Source]\n\n\nfun box sock_raw()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsock_rdm\n\u00b6\n\n\n[Source]\n\n\nfun box sock_rdm()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsock_seqpacket\n\u00b6\n\n\n[Source]\n\n\nfun box sock_seqpacket()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsock_stream\n\u00b6\n\n\n[Source]\n\n\nfun box sock_stream()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsomaxconn\n\u00b6\n\n\n[Source]\n\n\nfun box somaxconn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsonpx_setoptshut\n\u00b6\n\n\n[Source]\n\n\nfun box sonpx_setoptshut()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_acceptconn\n\u00b6\n\n\n[Source]\n\n\nfun box so_acceptconn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_acceptfilter\n\u00b6\n\n\n[Source]\n\n\nfun box so_acceptfilter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_atmpvc\n\u00b6\n\n\n[Source]\n\n\nfun box so_atmpvc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_atmqos\n\u00b6\n\n\n[Source]\n\n\nfun box so_atmqos()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_atmsap\n\u00b6\n\n\n[Source]\n\n\nfun box so_atmsap()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_attach_bpf\n\u00b6\n\n\n[Source]\n\n\nfun box so_attach_bpf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_attach_filter\n\u00b6\n\n\n[Source]\n\n\nfun box so_attach_filter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_bindtodevice\n\u00b6\n\n\n[Source]\n\n\nfun box so_bindtodevice()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_bintime\n\u00b6\n\n\n[Source]\n\n\nfun box so_bintime()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_bpf_extensions\n\u00b6\n\n\n[Source]\n\n\nfun box so_bpf_extensions()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_broadcast\n\u00b6\n\n\n[Source]\n\n\nfun box so_broadcast()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_bsdcompat\n\u00b6\n\n\n[Source]\n\n\nfun box so_bsdcompat()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_bsp_state\n\u00b6\n\n\n[Source]\n\n\nfun box so_bsp_state()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_busy_poll\n\u00b6\n\n\n[Source]\n\n\nfun box so_busy_poll()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_conaccess\n\u00b6\n\n\n[Source]\n\n\nfun box so_conaccess()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_condata\n\u00b6\n\n\n[Source]\n\n\nfun box so_condata()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_conditional_accept\n\u00b6\n\n\n[Source]\n\n\nfun box so_conditional_accept()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_connect_time\n\u00b6\n\n\n[Source]\n\n\nfun box so_connect_time()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_debug\n\u00b6\n\n\n[Source]\n\n\nfun box so_debug()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_detach_bpf\n\u00b6\n\n\n[Source]\n\n\nfun box so_detach_bpf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_detach_filter\n\u00b6\n\n\n[Source]\n\n\nfun box so_detach_filter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_domain\n\u00b6\n\n\n[Source]\n\n\nfun box so_domain()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_dontlinger\n\u00b6\n\n\n[Source]\n\n\nfun box so_dontlinger()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_dontroute\n\u00b6\n\n\n[Source]\n\n\nfun box so_dontroute()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_donttrunc\n\u00b6\n\n\n[Source]\n\n\nfun box so_donttrunc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_error\n\u00b6\n\n\n[Source]\n\n\nfun box so_error()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_exclusiveaddruse\n\u00b6\n\n\n[Source]\n\n\nfun box so_exclusiveaddruse()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_get_filter\n\u00b6\n\n\n[Source]\n\n\nfun box so_get_filter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_group_id\n\u00b6\n\n\n[Source]\n\n\nfun box so_group_id()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_group_priority\n\u00b6\n\n\n[Source]\n\n\nfun box so_group_priority()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_hci_raw_direction\n\u00b6\n\n\n[Source]\n\n\nfun box so_hci_raw_direction()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_hci_raw_filter\n\u00b6\n\n\n[Source]\n\n\nfun box so_hci_raw_filter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_incoming_cpu\n\u00b6\n\n\n[Source]\n\n\nfun box so_incoming_cpu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_keepalive\n\u00b6\n\n\n[Source]\n\n\nfun box so_keepalive()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_l2cap_encrypted\n\u00b6\n\n\n[Source]\n\n\nfun box so_l2cap_encrypted()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_l2cap_flush\n\u00b6\n\n\n[Source]\n\n\nfun box so_l2cap_flush()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_l2cap_iflow\n\u00b6\n\n\n[Source]\n\n\nfun box so_l2cap_iflow()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_l2cap_imtu\n\u00b6\n\n\n[Source]\n\n\nfun box so_l2cap_imtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_l2cap_oflow\n\u00b6\n\n\n[Source]\n\n\nfun box so_l2cap_oflow()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_l2cap_omtu\n\u00b6\n\n\n[Source]\n\n\nfun box so_l2cap_omtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_label\n\u00b6\n\n\n[Source]\n\n\nfun box so_label()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_linger\n\u00b6\n\n\n[Source]\n\n\nfun box so_linger()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_linger_sec\n\u00b6\n\n\n[Source]\n\n\nfun box so_linger_sec()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_linkinfo\n\u00b6\n\n\n[Source]\n\n\nfun box so_linkinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_listenincqlen\n\u00b6\n\n\n[Source]\n\n\nfun box so_listenincqlen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_listenqlen\n\u00b6\n\n\n[Source]\n\n\nfun box so_listenqlen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_listenqlimit\n\u00b6\n\n\n[Source]\n\n\nfun box so_listenqlimit()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_lock_filter\n\u00b6\n\n\n[Source]\n\n\nfun box so_lock_filter()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_mark\n\u00b6\n\n\n[Source]\n\n\nfun box so_mark()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_max_msg_size\n\u00b6\n\n\n[Source]\n\n\nfun box so_max_msg_size()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_max_pacing_rate\n\u00b6\n\n\n[Source]\n\n\nfun box so_max_pacing_rate()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_multipoint\n\u00b6\n\n\n[Source]\n\n\nfun box so_multipoint()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_netsvc_marking_level\n\u00b6\n\n\n[Source]\n\n\nfun box so_netsvc_marking_level()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_net_service_type\n\u00b6\n\n\n[Source]\n\n\nfun box so_net_service_type()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_nke\n\u00b6\n\n\n[Source]\n\n\nfun box so_nke()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_noaddrerr\n\u00b6\n\n\n[Source]\n\n\nfun box so_noaddrerr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_nofcs\n\u00b6\n\n\n[Source]\n\n\nfun box so_nofcs()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_nosigpipe\n\u00b6\n\n\n[Source]\n\n\nfun box so_nosigpipe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_notifyconflict\n\u00b6\n\n\n[Source]\n\n\nfun box so_notifyconflict()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_no_check\n\u00b6\n\n\n[Source]\n\n\nfun box so_no_check()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_no_ddp\n\u00b6\n\n\n[Source]\n\n\nfun box so_no_ddp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_no_offload\n\u00b6\n\n\n[Source]\n\n\nfun box so_no_offload()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_np_extensions\n\u00b6\n\n\n[Source]\n\n\nfun box so_np_extensions()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_nread\n\u00b6\n\n\n[Source]\n\n\nfun box so_nread()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_numrcvpkt\n\u00b6\n\n\n[Source]\n\n\nfun box so_numrcvpkt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_nwrite\n\u00b6\n\n\n[Source]\n\n\nfun box so_nwrite()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_oobinline\n\u00b6\n\n\n[Source]\n\n\nfun box so_oobinline()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_original_dst\n\u00b6\n\n\n[Source]\n\n\nfun box so_original_dst()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_passcred\n\u00b6\n\n\n[Source]\n\n\nfun box so_passcred()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_passsec\n\u00b6\n\n\n[Source]\n\n\nfun box so_passsec()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_peek_off\n\u00b6\n\n\n[Source]\n\n\nfun box so_peek_off()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_peercred\n\u00b6\n\n\n[Source]\n\n\nfun box so_peercred()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_peerlabel\n\u00b6\n\n\n[Source]\n\n\nfun box so_peerlabel()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_peername\n\u00b6\n\n\n[Source]\n\n\nfun box so_peername()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_peersec\n\u00b6\n\n\n[Source]\n\n\nfun box so_peersec()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_port_scalability\n\u00b6\n\n\n[Source]\n\n\nfun box so_port_scalability()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_priority\n\u00b6\n\n\n[Source]\n\n\nfun box so_priority()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_protocol\n\u00b6\n\n\n[Source]\n\n\nfun box so_protocol()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_protocol_info\n\u00b6\n\n\n[Source]\n\n\nfun box so_protocol_info()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_prototype\n\u00b6\n\n\n[Source]\n\n\nfun box so_prototype()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_proxyusr\n\u00b6\n\n\n[Source]\n\n\nfun box so_proxyusr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_randomport\n\u00b6\n\n\n[Source]\n\n\nfun box so_randomport()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_rcvbuf\n\u00b6\n\n\n[Source]\n\n\nfun box so_rcvbuf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_rcvbufforce\n\u00b6\n\n\n[Source]\n\n\nfun box so_rcvbufforce()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_rcvlowat\n\u00b6\n\n\n[Source]\n\n\nfun box so_rcvlowat()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_rcvtimeo\n\u00b6\n\n\n[Source]\n\n\nfun box so_rcvtimeo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_rds_transport\n\u00b6\n\n\n[Source]\n\n\nfun box so_rds_transport()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_reuseaddr\n\u00b6\n\n\n[Source]\n\n\nfun box so_reuseaddr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_reuseport\n\u00b6\n\n\n[Source]\n\n\nfun box so_reuseport()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_reuseshareuid\n\u00b6\n\n\n[Source]\n\n\nfun box so_reuseshareuid()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_rfcomm_fc_info\n\u00b6\n\n\n[Source]\n\n\nfun box so_rfcomm_fc_info()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_rfcomm_mtu\n\u00b6\n\n\n[Source]\n\n\nfun box so_rfcomm_mtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_rxq_ovfl\n\u00b6\n\n\n[Source]\n\n\nfun box so_rxq_ovfl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_sco_conninfo\n\u00b6\n\n\n[Source]\n\n\nfun box so_sco_conninfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_sco_mtu\n\u00b6\n\n\n[Source]\n\n\nfun box so_sco_mtu()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_security_authentication\n\u00b6\n\n\n[Source]\n\n\nfun box so_security_authentication()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_security_encryption_network\n\u00b6\n\n\n[Source]\n\n\nfun box so_security_encryption_network()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_security_encryption_transport\n\u00b6\n\n\n[Source]\n\n\nfun box so_security_encryption_transport()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_select_err_queue\n\u00b6\n\n\n[Source]\n\n\nfun box so_select_err_queue()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_setclp\n\u00b6\n\n\n[Source]\n\n\nfun box so_setclp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_setfib\n\u00b6\n\n\n[Source]\n\n\nfun box so_setfib()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_sndbuf\n\u00b6\n\n\n[Source]\n\n\nfun box so_sndbuf()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_sndbufforce\n\u00b6\n\n\n[Source]\n\n\nfun box so_sndbufforce()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_sndlowat\n\u00b6\n\n\n[Source]\n\n\nfun box so_sndlowat()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_sndtimeo\n\u00b6\n\n\n[Source]\n\n\nfun box so_sndtimeo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_timestamp\n\u00b6\n\n\n[Source]\n\n\nfun box so_timestamp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_timestamping\n\u00b6\n\n\n[Source]\n\n\nfun box so_timestamping()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_timestampns\n\u00b6\n\n\n[Source]\n\n\nfun box so_timestampns()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_timestamp_monotonic\n\u00b6\n\n\n[Source]\n\n\nfun box so_timestamp_monotonic()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_type\n\u00b6\n\n\n[Source]\n\n\nfun box so_type()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_upcallclosewait\n\u00b6\n\n\n[Source]\n\n\nfun box so_upcallclosewait()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_update_accept_context\n\u00b6\n\n\n[Source]\n\n\nfun box so_update_accept_context()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_useloopback\n\u00b6\n\n\n[Source]\n\n\nfun box so_useloopback()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_user_cookie\n\u00b6\n\n\n[Source]\n\n\nfun box so_user_cookie()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_vendor\n\u00b6\n\n\n[Source]\n\n\nfun box so_vendor()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_vm_sockets_buffer_max_size\n\u00b6\n\n\n[Source]\n\n\nfun box so_vm_sockets_buffer_max_size()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_vm_sockets_buffer_min_size\n\u00b6\n\n\n[Source]\n\n\nfun box so_vm_sockets_buffer_min_size()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_vm_sockets_buffer_size\n\u00b6\n\n\n[Source]\n\n\nfun box so_vm_sockets_buffer_size()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_vm_sockets_connect_timeout\n\u00b6\n\n\n[Source]\n\n\nfun box so_vm_sockets_connect_timeout()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_vm_sockets_nonblock_txrx\n\u00b6\n\n\n[Source]\n\n\nfun box so_vm_sockets_nonblock_txrx()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_vm_sockets_peer_host_vm_id\n\u00b6\n\n\n[Source]\n\n\nfun box so_vm_sockets_peer_host_vm_id()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_vm_sockets_trusted\n\u00b6\n\n\n[Source]\n\n\nfun box so_vm_sockets_trusted()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_wantmore\n\u00b6\n\n\n[Source]\n\n\nfun box so_wantmore()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_wantoobflag\n\u00b6\n\n\n[Source]\n\n\nfun box so_wantoobflag()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nso_wifi_status\n\u00b6\n\n\n[Source]\n\n\nfun box so_wifi_status()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp6_mss\n\u00b6\n\n\n[Source]\n\n\nfun box tcp6_mss()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpci_flag_lossrecovery\n\u00b6\n\n\n[Source]\n\n\nfun box tcpci_flag_lossrecovery()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpci_flag_reordering_detected\n\u00b6\n\n\n[Source]\n\n\nfun box tcpci_flag_reordering_detected()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpci_opt_ecn\n\u00b6\n\n\n[Source]\n\n\nfun box tcpci_opt_ecn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpci_opt_sack\n\u00b6\n\n\n[Source]\n\n\nfun box tcpci_opt_sack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpci_opt_timestamps\n\u00b6\n\n\n[Source]\n\n\nfun box tcpci_opt_timestamps()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpci_opt_wscale\n\u00b6\n\n\n[Source]\n\n\nfun box tcpci_opt_wscale()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpf_ca_cwr\n\u00b6\n\n\n[Source]\n\n\nfun box tcpf_ca_cwr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpf_ca_disorder\n\u00b6\n\n\n[Source]\n\n\nfun box tcpf_ca_disorder()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpf_ca_loss\n\u00b6\n\n\n[Source]\n\n\nfun box tcpf_ca_loss()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpf_ca_open\n\u00b6\n\n\n[Source]\n\n\nfun box tcpf_ca_open()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpf_ca_recovery\n\u00b6\n\n\n[Source]\n\n\nfun box tcpf_ca_recovery()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpi_opt_ecn\n\u00b6\n\n\n[Source]\n\n\nfun box tcpi_opt_ecn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpi_opt_ecn_seen\n\u00b6\n\n\n[Source]\n\n\nfun box tcpi_opt_ecn_seen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpi_opt_sack\n\u00b6\n\n\n[Source]\n\n\nfun box tcpi_opt_sack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpi_opt_syn_data\n\u00b6\n\n\n[Source]\n\n\nfun box tcpi_opt_syn_data()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpi_opt_timestamps\n\u00b6\n\n\n[Source]\n\n\nfun box tcpi_opt_timestamps()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpi_opt_toe\n\u00b6\n\n\n[Source]\n\n\nfun box tcpi_opt_toe()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpi_opt_wscale\n\u00b6\n\n\n[Source]\n\n\nfun box tcpi_opt_wscale()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_cc\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_cc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_cc_appa\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_cc_appa()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_eol\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_eol()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_fastopen_req\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_fastopen_req()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_fast_open_empty\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_fast_open_empty()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_fast_open_max\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_fast_open_max()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_fast_open_min\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_fast_open_min()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_maxseg\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_maxseg()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_nop\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_nop()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_pad\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_pad()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_sack\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_sack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_sackhdr\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_sackhdr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_sack_permitted\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_sack_permitted()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_signature\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_signature()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_timestamp\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_timestamp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_tstamp_appa\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_tstamp_appa()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpolen_window\n\u00b6\n\n\n[Source]\n\n\nfun box tcpolen_window()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_cc\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_cc()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_ccecho\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_ccecho()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_ccnew\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_ccnew()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_eol\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_eol()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_fastopen\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_fastopen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_fast_open\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_fast_open()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_maxseg\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_maxseg()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_multipath\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_multipath()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_nop\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_nop()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_pad\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_pad()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_sack\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_sack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_sack_hdr\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_sack_hdr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_sack_permitted\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_sack_permitted()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_sack_permit_hdr\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_sack_permit_hdr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_signature\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_signature()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_timestamp\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_timestamp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_tstamp_hdr\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_tstamp_hdr()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcpopt_window\n\u00b6\n\n\n[Source]\n\n\nfun box tcpopt_window()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_ca_name_max\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_ca_name_max()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_ccalgoopt\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_ccalgoopt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_cc_info\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_cc_info()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_congestion\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_congestion()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_connectiontimeout\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_connectiontimeout()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_connection_info\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_connection_info()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_cookie_in_always\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_cookie_in_always()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_cookie_max\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_cookie_max()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_cookie_min\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_cookie_min()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_cookie_out_never\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_cookie_out_never()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_cookie_pair_size\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_cookie_pair_size()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_cookie_transactions\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_cookie_transactions()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_cork\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_cork()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_defer_accept\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_defer_accept()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_enable_ecn\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_enable_ecn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_fastopen\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_fastopen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_function_blk\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_function_blk()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_function_name_len_max\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_function_name_len_max()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_info\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_info()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_keepalive\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_keepalive()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_keepcnt\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_keepcnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_keepidle\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_keepidle()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_keepinit\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_keepinit()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_keepintvl\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_keepintvl()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_linger2\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_linger2()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_maxburst\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_maxburst()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_maxhlen\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_maxhlen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_maxolen\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_maxolen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_maxseg\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_maxseg()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_maxwin\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_maxwin()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_max_sack\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_max_sack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_max_winshift\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_max_winshift()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_md5sig\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_md5sig()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_md5sig_maxkeylen\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_md5sig_maxkeylen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_minmss\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_minmss()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_mss\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_mss()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_mss_default\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_mss_default()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_mss_desired\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_mss_desired()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_nodelay\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_nodelay()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_noopt\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_noopt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_nopush\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_nopush()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_notsent_lowat\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_notsent_lowat()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_pcap_in\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_pcap_in()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_pcap_out\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_pcap_out()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_queue_seq\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_queue_seq()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_quickack\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_quickack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_repair\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_repair()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_repair_options\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_repair_options()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_repair_queue\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_repair_queue()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_rxt_conndroptime\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_rxt_conndroptime()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_rxt_findrop\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_rxt_findrop()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_saved_syn\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_saved_syn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_save_syn\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_save_syn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_sendmoreacks\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_sendmoreacks()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_syncnt\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_syncnt()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_s_data_in\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_s_data_in()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_s_data_out\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_s_data_out()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_thin_dupack\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_thin_dupack()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_thin_linear_timeouts\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_thin_linear_timeouts()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_timestamp\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_timestamp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_user_timeout\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_user_timeout()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_vendor\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_vendor()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntcp_window_clamp\n\u00b6\n\n\n[Source]\n\n\nfun box tcp_window_clamp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_addr_id\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_addr_id()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_addr_mcast\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_addr_mcast()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_addr_name\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_addr_name()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_addr_nameseq\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_addr_nameseq()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_cfg_srv\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_cfg_srv()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_cluster_scope\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_cluster_scope()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_conn_shutdown\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_conn_shutdown()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_conn_timeout\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_conn_timeout()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_critical_importance\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_critical_importance()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_destname\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_destname()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_dest_droppable\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_dest_droppable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_errinfo\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_errinfo()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_err_no_name\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_err_no_name()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_err_no_node\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_err_no_node()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_err_no_port\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_err_no_port()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_err_overload\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_err_overload()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_high_importance\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_high_importance()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_importance\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_importance()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_link_state\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_link_state()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_low_importance\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_low_importance()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_max_bearer_name\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_max_bearer_name()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_max_if_name\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_max_if_name()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_max_link_name\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_max_link_name()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_max_media_name\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_max_media_name()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_max_user_msg_size\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_max_user_msg_size()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_medium_importance\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_medium_importance()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_node_recvq_depth\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_node_recvq_depth()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_node_scope\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_node_scope()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_ok\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_ok()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_published\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_published()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_reserved_types\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_reserved_types()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_retdata\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_retdata()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_sock_recvq_depth\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_sock_recvq_depth()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_src_droppable\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_src_droppable()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_subscr_timeout\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_subscr_timeout()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_sub_cancel\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_sub_cancel()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_sub_ports\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_sub_ports()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_sub_service\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_sub_service()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_top_srv\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_top_srv()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_wait_forever\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_wait_forever()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_withdrawn\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_withdrawn()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\ntipc_zone_scope\n\u00b6\n\n\n[Source]\n\n\nfun box tipc_zone_scope()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nttcp_client_snd_wnd\n\u00b6\n\n\n[Source]\n\n\nfun box ttcp_client_snd_wnd()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nudp_cork\n\u00b6\n\n\n[Source]\n\n\nfun box udp_cork()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nudp_encap\n\u00b6\n\n\n[Source]\n\n\nfun box udp_encap()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nudp_encap_espinudp\n\u00b6\n\n\n[Source]\n\n\nfun box udp_encap_espinudp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nudp_encap_espinudp_maxfraglen\n\u00b6\n\n\n[Source]\n\n\nfun box udp_encap_espinudp_maxfraglen()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nudp_encap_espinudp_non_ike\n\u00b6\n\n\n[Source]\n\n\nfun box udp_encap_espinudp_non_ike()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nudp_encap_espinudp_port\n\u00b6\n\n\n[Source]\n\n\nfun box udp_encap_espinudp_port()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nudp_encap_l2tpinudp\n\u00b6\n\n\n[Source]\n\n\nfun box udp_encap_l2tpinudp()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nudp_nocksum\n\u00b6\n\n\n[Source]\n\n\nfun box udp_nocksum()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nudp_no_check6_rx\n\u00b6\n\n\n[Source]\n\n\nfun box udp_no_check6_rx()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nudp_no_check6_tx\n\u00b6\n\n\n[Source]\n\n\nfun box udp_no_check6_tx()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\nudp_vendor\n\u00b6\n\n\n[Source]\n\n\nfun box udp_vendor()\n: I32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: OSSockOpt val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nOSSockOpt\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: OSSockOpt val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nOSSockOpt\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive OSSockOpt"
        },
        {
            "location": "/net-OSSockOpt/#ossockopt",
            "text": "[Source]  Convenience functions to fetch the option level and option\nname constants (arguments #2 and #3) for the getsockopt(2)  and  setsockopt(2)  operating system calls.  The values of the option level and option name constants are\ntypically C preprocessor macros, e.g.,  #define SOMETHING 42 .\nThese macro names are upper case and may contain multiple\nconsecutive underscore characters (though this is rare, for\nexample,  IP_NAT__XXX ).  The function names in this primitive\nare derived by the C macro name and then:   converted to lower case  any double underscore ( __ ) is converted to a\n    single underscore ( _ ).   These constants are  not  stable between Pony releases.\nValues returned by this function may be held by long-lived variables\nby the calling process: values cannot change while the process runs.\nProgrammers must not cache any of these values for purposes of\nsharing them for use by any other Pony program (for example,\nsharing via serialization & deserialization or via direct\nshared memory).  Many functions may return  -1 , which means that the constant's\nvalue could not be determined at the Pony runtime library compile\ntime.  One cause may be that the option truly isn't available,\nfor example, the option level constant  IPPROTO_3PC  is available\non MacOS 10.x but not on Linux 4.4.  Another cause may be the\nPony runtime library's compilation did not include the correct\nheader file(s) for the target OS platform.  A third cause of error is due to the regular expression-based\napproach used to harvest desirable constants.  It is not fool-proof.\nThe regexp used is too broad and finds some macros that are not\nsupposed to be used with  getsockopt(2)  and  setsockopt(2) .\nPlease consult your platform's documentation to verify the names\nof the option level and option name macros.  The following code fragments are equivalent: set the socket\nreceive buffer size for the file descriptor  fd  to  4455 .  /* In C */\nint option_value = 4455;\nsetsockopt(fd, SOL_SOCKET, SO_RCVBUF, &option_value, 4);\n\n/* In Pony */\nvar option: I32 = 4455;\n@pony_os_setsockopt[I32](fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(),\n  addressof option, I32(4))  primitive val OSSockOpt",
            "title": "OSSockOpt"
        },
        {
            "location": "/net-OSSockOpt/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-OSSockOpt/#create",
            "text": "[Source]  new val create()\n: OSSockOpt val^",
            "title": "create"
        },
        {
            "location": "/net-OSSockOpt/#returns",
            "text": "OSSockOpt  val^",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_3pc",
            "text": "[Source]  fun box ipproto_3pc()\n: I32 val",
            "title": "ipproto_3pc"
        },
        {
            "location": "/net-OSSockOpt/#returns_1",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_adfs",
            "text": "[Source]  fun box ipproto_adfs()\n: I32 val",
            "title": "ipproto_adfs"
        },
        {
            "location": "/net-OSSockOpt/#returns_2",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ah",
            "text": "[Source]  fun box ipproto_ah()\n: I32 val",
            "title": "ipproto_ah"
        },
        {
            "location": "/net-OSSockOpt/#returns_3",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ahip",
            "text": "[Source]  fun box ipproto_ahip()\n: I32 val",
            "title": "ipproto_ahip"
        },
        {
            "location": "/net-OSSockOpt/#returns_4",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_apes",
            "text": "[Source]  fun box ipproto_apes()\n: I32 val",
            "title": "ipproto_apes"
        },
        {
            "location": "/net-OSSockOpt/#returns_5",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_argus",
            "text": "[Source]  fun box ipproto_argus()\n: I32 val",
            "title": "ipproto_argus"
        },
        {
            "location": "/net-OSSockOpt/#returns_6",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ax25",
            "text": "[Source]  fun box ipproto_ax25()\n: I32 val",
            "title": "ipproto_ax25"
        },
        {
            "location": "/net-OSSockOpt/#returns_7",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_beetph",
            "text": "[Source]  fun box ipproto_beetph()\n: I32 val",
            "title": "ipproto_beetph"
        },
        {
            "location": "/net-OSSockOpt/#returns_8",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_bha",
            "text": "[Source]  fun box ipproto_bha()\n: I32 val",
            "title": "ipproto_bha"
        },
        {
            "location": "/net-OSSockOpt/#returns_9",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_blt",
            "text": "[Source]  fun box ipproto_blt()\n: I32 val",
            "title": "ipproto_blt"
        },
        {
            "location": "/net-OSSockOpt/#returns_10",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_brsatmon",
            "text": "[Source]  fun box ipproto_brsatmon()\n: I32 val",
            "title": "ipproto_brsatmon"
        },
        {
            "location": "/net-OSSockOpt/#returns_11",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_carp",
            "text": "[Source]  fun box ipproto_carp()\n: I32 val",
            "title": "ipproto_carp"
        },
        {
            "location": "/net-OSSockOpt/#returns_12",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_cftp",
            "text": "[Source]  fun box ipproto_cftp()\n: I32 val",
            "title": "ipproto_cftp"
        },
        {
            "location": "/net-OSSockOpt/#returns_13",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_chaos",
            "text": "[Source]  fun box ipproto_chaos()\n: I32 val",
            "title": "ipproto_chaos"
        },
        {
            "location": "/net-OSSockOpt/#returns_14",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_cmtp",
            "text": "[Source]  fun box ipproto_cmtp()\n: I32 val",
            "title": "ipproto_cmtp"
        },
        {
            "location": "/net-OSSockOpt/#returns_15",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_comp",
            "text": "[Source]  fun box ipproto_comp()\n: I32 val",
            "title": "ipproto_comp"
        },
        {
            "location": "/net-OSSockOpt/#returns_16",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_cphb",
            "text": "[Source]  fun box ipproto_cphb()\n: I32 val",
            "title": "ipproto_cphb"
        },
        {
            "location": "/net-OSSockOpt/#returns_17",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_cpnx",
            "text": "[Source]  fun box ipproto_cpnx()\n: I32 val",
            "title": "ipproto_cpnx"
        },
        {
            "location": "/net-OSSockOpt/#returns_18",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_dccp",
            "text": "[Source]  fun box ipproto_dccp()\n: I32 val",
            "title": "ipproto_dccp"
        },
        {
            "location": "/net-OSSockOpt/#returns_19",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ddp",
            "text": "[Source]  fun box ipproto_ddp()\n: I32 val",
            "title": "ipproto_ddp"
        },
        {
            "location": "/net-OSSockOpt/#returns_20",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_dgp",
            "text": "[Source]  fun box ipproto_dgp()\n: I32 val",
            "title": "ipproto_dgp"
        },
        {
            "location": "/net-OSSockOpt/#returns_21",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_divert",
            "text": "[Source]  fun box ipproto_divert()\n: I32 val",
            "title": "ipproto_divert"
        },
        {
            "location": "/net-OSSockOpt/#returns_22",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_done",
            "text": "[Source]  fun box ipproto_done()\n: I32 val",
            "title": "ipproto_done"
        },
        {
            "location": "/net-OSSockOpt/#returns_23",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_dstopts",
            "text": "[Source]  fun box ipproto_dstopts()\n: I32 val",
            "title": "ipproto_dstopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_24",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_egp",
            "text": "[Source]  fun box ipproto_egp()\n: I32 val",
            "title": "ipproto_egp"
        },
        {
            "location": "/net-OSSockOpt/#returns_25",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_emcon",
            "text": "[Source]  fun box ipproto_emcon()\n: I32 val",
            "title": "ipproto_emcon"
        },
        {
            "location": "/net-OSSockOpt/#returns_26",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_encap",
            "text": "[Source]  fun box ipproto_encap()\n: I32 val",
            "title": "ipproto_encap"
        },
        {
            "location": "/net-OSSockOpt/#returns_27",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_eon",
            "text": "[Source]  fun box ipproto_eon()\n: I32 val",
            "title": "ipproto_eon"
        },
        {
            "location": "/net-OSSockOpt/#returns_28",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_esp",
            "text": "[Source]  fun box ipproto_esp()\n: I32 val",
            "title": "ipproto_esp"
        },
        {
            "location": "/net-OSSockOpt/#returns_29",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_etherip",
            "text": "[Source]  fun box ipproto_etherip()\n: I32 val",
            "title": "ipproto_etherip"
        },
        {
            "location": "/net-OSSockOpt/#returns_30",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_fragment",
            "text": "[Source]  fun box ipproto_fragment()\n: I32 val",
            "title": "ipproto_fragment"
        },
        {
            "location": "/net-OSSockOpt/#returns_31",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ggp",
            "text": "[Source]  fun box ipproto_ggp()\n: I32 val",
            "title": "ipproto_ggp"
        },
        {
            "location": "/net-OSSockOpt/#returns_32",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_gmtp",
            "text": "[Source]  fun box ipproto_gmtp()\n: I32 val",
            "title": "ipproto_gmtp"
        },
        {
            "location": "/net-OSSockOpt/#returns_33",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_gre",
            "text": "[Source]  fun box ipproto_gre()\n: I32 val",
            "title": "ipproto_gre"
        },
        {
            "location": "/net-OSSockOpt/#returns_34",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_hello",
            "text": "[Source]  fun box ipproto_hello()\n: I32 val",
            "title": "ipproto_hello"
        },
        {
            "location": "/net-OSSockOpt/#returns_35",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_hip",
            "text": "[Source]  fun box ipproto_hip()\n: I32 val",
            "title": "ipproto_hip"
        },
        {
            "location": "/net-OSSockOpt/#returns_36",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_hmp",
            "text": "[Source]  fun box ipproto_hmp()\n: I32 val",
            "title": "ipproto_hmp"
        },
        {
            "location": "/net-OSSockOpt/#returns_37",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_hopopts",
            "text": "[Source]  fun box ipproto_hopopts()\n: I32 val",
            "title": "ipproto_hopopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_38",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_icmp",
            "text": "[Source]  fun box ipproto_icmp()\n: I32 val",
            "title": "ipproto_icmp"
        },
        {
            "location": "/net-OSSockOpt/#returns_39",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_icmpv6",
            "text": "[Source]  fun box ipproto_icmpv6()\n: I32 val",
            "title": "ipproto_icmpv6"
        },
        {
            "location": "/net-OSSockOpt/#returns_40",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_idp",
            "text": "[Source]  fun box ipproto_idp()\n: I32 val",
            "title": "ipproto_idp"
        },
        {
            "location": "/net-OSSockOpt/#returns_41",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_idpr",
            "text": "[Source]  fun box ipproto_idpr()\n: I32 val",
            "title": "ipproto_idpr"
        },
        {
            "location": "/net-OSSockOpt/#returns_42",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_idrp",
            "text": "[Source]  fun box ipproto_idrp()\n: I32 val",
            "title": "ipproto_idrp"
        },
        {
            "location": "/net-OSSockOpt/#returns_43",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_igmp",
            "text": "[Source]  fun box ipproto_igmp()\n: I32 val",
            "title": "ipproto_igmp"
        },
        {
            "location": "/net-OSSockOpt/#returns_44",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_igp",
            "text": "[Source]  fun box ipproto_igp()\n: I32 val",
            "title": "ipproto_igp"
        },
        {
            "location": "/net-OSSockOpt/#returns_45",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_igrp",
            "text": "[Source]  fun box ipproto_igrp()\n: I32 val",
            "title": "ipproto_igrp"
        },
        {
            "location": "/net-OSSockOpt/#returns_46",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_il",
            "text": "[Source]  fun box ipproto_il()\n: I32 val",
            "title": "ipproto_il"
        },
        {
            "location": "/net-OSSockOpt/#returns_47",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_inlsp",
            "text": "[Source]  fun box ipproto_inlsp()\n: I32 val",
            "title": "ipproto_inlsp"
        },
        {
            "location": "/net-OSSockOpt/#returns_48",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_inp",
            "text": "[Source]  fun box ipproto_inp()\n: I32 val",
            "title": "ipproto_inp"
        },
        {
            "location": "/net-OSSockOpt/#returns_49",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ip",
            "text": "[Source]  fun box ipproto_ip()\n: I32 val",
            "title": "ipproto_ip"
        },
        {
            "location": "/net-OSSockOpt/#returns_50",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ipcomp",
            "text": "[Source]  fun box ipproto_ipcomp()\n: I32 val",
            "title": "ipproto_ipcomp"
        },
        {
            "location": "/net-OSSockOpt/#returns_51",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ipcv",
            "text": "[Source]  fun box ipproto_ipcv()\n: I32 val",
            "title": "ipproto_ipcv"
        },
        {
            "location": "/net-OSSockOpt/#returns_52",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ipeip",
            "text": "[Source]  fun box ipproto_ipeip()\n: I32 val",
            "title": "ipproto_ipeip"
        },
        {
            "location": "/net-OSSockOpt/#returns_53",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ipip",
            "text": "[Source]  fun box ipproto_ipip()\n: I32 val",
            "title": "ipproto_ipip"
        },
        {
            "location": "/net-OSSockOpt/#returns_54",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ippc",
            "text": "[Source]  fun box ipproto_ippc()\n: I32 val",
            "title": "ipproto_ippc"
        },
        {
            "location": "/net-OSSockOpt/#returns_55",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ipv4",
            "text": "[Source]  fun box ipproto_ipv4()\n: I32 val",
            "title": "ipproto_ipv4"
        },
        {
            "location": "/net-OSSockOpt/#returns_56",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ipv6",
            "text": "[Source]  fun box ipproto_ipv6()\n: I32 val",
            "title": "ipproto_ipv6"
        },
        {
            "location": "/net-OSSockOpt/#returns_57",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_irtp",
            "text": "[Source]  fun box ipproto_irtp()\n: I32 val",
            "title": "ipproto_irtp"
        },
        {
            "location": "/net-OSSockOpt/#returns_58",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_kryptolan",
            "text": "[Source]  fun box ipproto_kryptolan()\n: I32 val",
            "title": "ipproto_kryptolan"
        },
        {
            "location": "/net-OSSockOpt/#returns_59",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_larp",
            "text": "[Source]  fun box ipproto_larp()\n: I32 val",
            "title": "ipproto_larp"
        },
        {
            "location": "/net-OSSockOpt/#returns_60",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_leaf1",
            "text": "[Source]  fun box ipproto_leaf1()\n: I32 val",
            "title": "ipproto_leaf1"
        },
        {
            "location": "/net-OSSockOpt/#returns_61",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_leaf2",
            "text": "[Source]  fun box ipproto_leaf2()\n: I32 val",
            "title": "ipproto_leaf2"
        },
        {
            "location": "/net-OSSockOpt/#returns_62",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_max",
            "text": "[Source]  fun box ipproto_max()\n: I32 val",
            "title": "ipproto_max"
        },
        {
            "location": "/net-OSSockOpt/#returns_63",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_maxid",
            "text": "[Source]  fun box ipproto_maxid()\n: I32 val",
            "title": "ipproto_maxid"
        },
        {
            "location": "/net-OSSockOpt/#returns_64",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_meas",
            "text": "[Source]  fun box ipproto_meas()\n: I32 val",
            "title": "ipproto_meas"
        },
        {
            "location": "/net-OSSockOpt/#returns_65",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_mh",
            "text": "[Source]  fun box ipproto_mh()\n: I32 val",
            "title": "ipproto_mh"
        },
        {
            "location": "/net-OSSockOpt/#returns_66",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_mhrp",
            "text": "[Source]  fun box ipproto_mhrp()\n: I32 val",
            "title": "ipproto_mhrp"
        },
        {
            "location": "/net-OSSockOpt/#returns_67",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_micp",
            "text": "[Source]  fun box ipproto_micp()\n: I32 val",
            "title": "ipproto_micp"
        },
        {
            "location": "/net-OSSockOpt/#returns_68",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_mobile",
            "text": "[Source]  fun box ipproto_mobile()\n: I32 val",
            "title": "ipproto_mobile"
        },
        {
            "location": "/net-OSSockOpt/#returns_69",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_mpls",
            "text": "[Source]  fun box ipproto_mpls()\n: I32 val",
            "title": "ipproto_mpls"
        },
        {
            "location": "/net-OSSockOpt/#returns_70",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_mtp",
            "text": "[Source]  fun box ipproto_mtp()\n: I32 val",
            "title": "ipproto_mtp"
        },
        {
            "location": "/net-OSSockOpt/#returns_71",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_mux",
            "text": "[Source]  fun box ipproto_mux()\n: I32 val",
            "title": "ipproto_mux"
        },
        {
            "location": "/net-OSSockOpt/#returns_72",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_nd",
            "text": "[Source]  fun box ipproto_nd()\n: I32 val",
            "title": "ipproto_nd"
        },
        {
            "location": "/net-OSSockOpt/#returns_73",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_nhrp",
            "text": "[Source]  fun box ipproto_nhrp()\n: I32 val",
            "title": "ipproto_nhrp"
        },
        {
            "location": "/net-OSSockOpt/#returns_74",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_none",
            "text": "[Source]  fun box ipproto_none()\n: I32 val",
            "title": "ipproto_none"
        },
        {
            "location": "/net-OSSockOpt/#returns_75",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_nsp",
            "text": "[Source]  fun box ipproto_nsp()\n: I32 val",
            "title": "ipproto_nsp"
        },
        {
            "location": "/net-OSSockOpt/#returns_76",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_nvpii",
            "text": "[Source]  fun box ipproto_nvpii()\n: I32 val",
            "title": "ipproto_nvpii"
        },
        {
            "location": "/net-OSSockOpt/#returns_77",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_old_divert",
            "text": "[Source]  fun box ipproto_old_divert()\n: I32 val",
            "title": "ipproto_old_divert"
        },
        {
            "location": "/net-OSSockOpt/#returns_78",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ospfigp",
            "text": "[Source]  fun box ipproto_ospfigp()\n: I32 val",
            "title": "ipproto_ospfigp"
        },
        {
            "location": "/net-OSSockOpt/#returns_79",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_pfsync",
            "text": "[Source]  fun box ipproto_pfsync()\n: I32 val",
            "title": "ipproto_pfsync"
        },
        {
            "location": "/net-OSSockOpt/#returns_80",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_pgm",
            "text": "[Source]  fun box ipproto_pgm()\n: I32 val",
            "title": "ipproto_pgm"
        },
        {
            "location": "/net-OSSockOpt/#returns_81",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_pigp",
            "text": "[Source]  fun box ipproto_pigp()\n: I32 val",
            "title": "ipproto_pigp"
        },
        {
            "location": "/net-OSSockOpt/#returns_82",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_pim",
            "text": "[Source]  fun box ipproto_pim()\n: I32 val",
            "title": "ipproto_pim"
        },
        {
            "location": "/net-OSSockOpt/#returns_83",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_prm",
            "text": "[Source]  fun box ipproto_prm()\n: I32 val",
            "title": "ipproto_prm"
        },
        {
            "location": "/net-OSSockOpt/#returns_84",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_pup",
            "text": "[Source]  fun box ipproto_pup()\n: I32 val",
            "title": "ipproto_pup"
        },
        {
            "location": "/net-OSSockOpt/#returns_85",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_pvp",
            "text": "[Source]  fun box ipproto_pvp()\n: I32 val",
            "title": "ipproto_pvp"
        },
        {
            "location": "/net-OSSockOpt/#returns_86",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_raw",
            "text": "[Source]  fun box ipproto_raw()\n: I32 val",
            "title": "ipproto_raw"
        },
        {
            "location": "/net-OSSockOpt/#returns_87",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_rccmon",
            "text": "[Source]  fun box ipproto_rccmon()\n: I32 val",
            "title": "ipproto_rccmon"
        },
        {
            "location": "/net-OSSockOpt/#returns_88",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_rdp",
            "text": "[Source]  fun box ipproto_rdp()\n: I32 val",
            "title": "ipproto_rdp"
        },
        {
            "location": "/net-OSSockOpt/#returns_89",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_reserved_253",
            "text": "[Source]  fun box ipproto_reserved_253()\n: I32 val",
            "title": "ipproto_reserved_253"
        },
        {
            "location": "/net-OSSockOpt/#returns_90",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_reserved_254",
            "text": "[Source]  fun box ipproto_reserved_254()\n: I32 val",
            "title": "ipproto_reserved_254"
        },
        {
            "location": "/net-OSSockOpt/#returns_91",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_routing",
            "text": "[Source]  fun box ipproto_routing()\n: I32 val",
            "title": "ipproto_routing"
        },
        {
            "location": "/net-OSSockOpt/#returns_92",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_rsvp",
            "text": "[Source]  fun box ipproto_rsvp()\n: I32 val",
            "title": "ipproto_rsvp"
        },
        {
            "location": "/net-OSSockOpt/#returns_93",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_rvd",
            "text": "[Source]  fun box ipproto_rvd()\n: I32 val",
            "title": "ipproto_rvd"
        },
        {
            "location": "/net-OSSockOpt/#returns_94",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_satexpak",
            "text": "[Source]  fun box ipproto_satexpak()\n: I32 val",
            "title": "ipproto_satexpak"
        },
        {
            "location": "/net-OSSockOpt/#returns_95",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_satmon",
            "text": "[Source]  fun box ipproto_satmon()\n: I32 val",
            "title": "ipproto_satmon"
        },
        {
            "location": "/net-OSSockOpt/#returns_96",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_sccsp",
            "text": "[Source]  fun box ipproto_sccsp()\n: I32 val",
            "title": "ipproto_sccsp"
        },
        {
            "location": "/net-OSSockOpt/#returns_97",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_sctp",
            "text": "[Source]  fun box ipproto_sctp()\n: I32 val",
            "title": "ipproto_sctp"
        },
        {
            "location": "/net-OSSockOpt/#returns_98",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_sdrp",
            "text": "[Source]  fun box ipproto_sdrp()\n: I32 val",
            "title": "ipproto_sdrp"
        },
        {
            "location": "/net-OSSockOpt/#returns_99",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_send",
            "text": "[Source]  fun box ipproto_send()\n: I32 val",
            "title": "ipproto_send"
        },
        {
            "location": "/net-OSSockOpt/#returns_100",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_sep",
            "text": "[Source]  fun box ipproto_sep()\n: I32 val",
            "title": "ipproto_sep"
        },
        {
            "location": "/net-OSSockOpt/#returns_101",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_shim6",
            "text": "[Source]  fun box ipproto_shim6()\n: I32 val",
            "title": "ipproto_shim6"
        },
        {
            "location": "/net-OSSockOpt/#returns_102",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_skip",
            "text": "[Source]  fun box ipproto_skip()\n: I32 val",
            "title": "ipproto_skip"
        },
        {
            "location": "/net-OSSockOpt/#returns_103",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_spacer",
            "text": "[Source]  fun box ipproto_spacer()\n: I32 val",
            "title": "ipproto_spacer"
        },
        {
            "location": "/net-OSSockOpt/#returns_104",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_srpc",
            "text": "[Source]  fun box ipproto_srpc()\n: I32 val",
            "title": "ipproto_srpc"
        },
        {
            "location": "/net-OSSockOpt/#returns_105",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_st",
            "text": "[Source]  fun box ipproto_st()\n: I32 val",
            "title": "ipproto_st"
        },
        {
            "location": "/net-OSSockOpt/#returns_106",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_svmtp",
            "text": "[Source]  fun box ipproto_svmtp()\n: I32 val",
            "title": "ipproto_svmtp"
        },
        {
            "location": "/net-OSSockOpt/#returns_107",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_swipe",
            "text": "[Source]  fun box ipproto_swipe()\n: I32 val",
            "title": "ipproto_swipe"
        },
        {
            "location": "/net-OSSockOpt/#returns_108",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_tcf",
            "text": "[Source]  fun box ipproto_tcf()\n: I32 val",
            "title": "ipproto_tcf"
        },
        {
            "location": "/net-OSSockOpt/#returns_109",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_tcp",
            "text": "[Source]  fun box ipproto_tcp()\n: I32 val",
            "title": "ipproto_tcp"
        },
        {
            "location": "/net-OSSockOpt/#returns_110",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_tlsp",
            "text": "[Source]  fun box ipproto_tlsp()\n: I32 val",
            "title": "ipproto_tlsp"
        },
        {
            "location": "/net-OSSockOpt/#returns_111",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_tp",
            "text": "[Source]  fun box ipproto_tp()\n: I32 val",
            "title": "ipproto_tp"
        },
        {
            "location": "/net-OSSockOpt/#returns_112",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_tpxx",
            "text": "[Source]  fun box ipproto_tpxx()\n: I32 val",
            "title": "ipproto_tpxx"
        },
        {
            "location": "/net-OSSockOpt/#returns_113",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_trunk1",
            "text": "[Source]  fun box ipproto_trunk1()\n: I32 val",
            "title": "ipproto_trunk1"
        },
        {
            "location": "/net-OSSockOpt/#returns_114",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_trunk2",
            "text": "[Source]  fun box ipproto_trunk2()\n: I32 val",
            "title": "ipproto_trunk2"
        },
        {
            "location": "/net-OSSockOpt/#returns_115",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_ttp",
            "text": "[Source]  fun box ipproto_ttp()\n: I32 val",
            "title": "ipproto_ttp"
        },
        {
            "location": "/net-OSSockOpt/#returns_116",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_udp",
            "text": "[Source]  fun box ipproto_udp()\n: I32 val",
            "title": "ipproto_udp"
        },
        {
            "location": "/net-OSSockOpt/#returns_117",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_udplite",
            "text": "[Source]  fun box ipproto_udplite()\n: I32 val",
            "title": "ipproto_udplite"
        },
        {
            "location": "/net-OSSockOpt/#returns_118",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_vines",
            "text": "[Source]  fun box ipproto_vines()\n: I32 val",
            "title": "ipproto_vines"
        },
        {
            "location": "/net-OSSockOpt/#returns_119",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_visa",
            "text": "[Source]  fun box ipproto_visa()\n: I32 val",
            "title": "ipproto_visa"
        },
        {
            "location": "/net-OSSockOpt/#returns_120",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_vmtp",
            "text": "[Source]  fun box ipproto_vmtp()\n: I32 val",
            "title": "ipproto_vmtp"
        },
        {
            "location": "/net-OSSockOpt/#returns_121",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_wbexpak",
            "text": "[Source]  fun box ipproto_wbexpak()\n: I32 val",
            "title": "ipproto_wbexpak"
        },
        {
            "location": "/net-OSSockOpt/#returns_122",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_wbmon",
            "text": "[Source]  fun box ipproto_wbmon()\n: I32 val",
            "title": "ipproto_wbmon"
        },
        {
            "location": "/net-OSSockOpt/#returns_123",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_wsn",
            "text": "[Source]  fun box ipproto_wsn()\n: I32 val",
            "title": "ipproto_wsn"
        },
        {
            "location": "/net-OSSockOpt/#returns_124",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_xnet",
            "text": "[Source]  fun box ipproto_xnet()\n: I32 val",
            "title": "ipproto_xnet"
        },
        {
            "location": "/net-OSSockOpt/#returns_125",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipproto_xtp",
            "text": "[Source]  fun box ipproto_xtp()\n: I32 val",
            "title": "ipproto_xtp"
        },
        {
            "location": "/net-OSSockOpt/#returns_126",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_atalk",
            "text": "[Source]  fun box sol_atalk()\n: I32 val",
            "title": "sol_atalk"
        },
        {
            "location": "/net-OSSockOpt/#returns_127",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_ax25",
            "text": "[Source]  fun box sol_ax25()\n: I32 val",
            "title": "sol_ax25"
        },
        {
            "location": "/net-OSSockOpt/#returns_128",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_hci_raw",
            "text": "[Source]  fun box sol_hci_raw()\n: I32 val",
            "title": "sol_hci_raw"
        },
        {
            "location": "/net-OSSockOpt/#returns_129",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_ipx",
            "text": "[Source]  fun box sol_ipx()\n: I32 val",
            "title": "sol_ipx"
        },
        {
            "location": "/net-OSSockOpt/#returns_130",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_l2cap",
            "text": "[Source]  fun box sol_l2cap()\n: I32 val",
            "title": "sol_l2cap"
        },
        {
            "location": "/net-OSSockOpt/#returns_131",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_local",
            "text": "[Source]  fun box sol_local()\n: I32 val",
            "title": "sol_local"
        },
        {
            "location": "/net-OSSockOpt/#returns_132",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_ndrvproto",
            "text": "[Source]  fun box sol_ndrvproto()\n: I32 val",
            "title": "sol_ndrvproto"
        },
        {
            "location": "/net-OSSockOpt/#returns_133",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_netrom",
            "text": "[Source]  fun box sol_netrom()\n: I32 val",
            "title": "sol_netrom"
        },
        {
            "location": "/net-OSSockOpt/#returns_134",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_rds",
            "text": "[Source]  fun box sol_rds()\n: I32 val",
            "title": "sol_rds"
        },
        {
            "location": "/net-OSSockOpt/#returns_135",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_rfcomm",
            "text": "[Source]  fun box sol_rfcomm()\n: I32 val",
            "title": "sol_rfcomm"
        },
        {
            "location": "/net-OSSockOpt/#returns_136",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_rose",
            "text": "[Source]  fun box sol_rose()\n: I32 val",
            "title": "sol_rose"
        },
        {
            "location": "/net-OSSockOpt/#returns_137",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_sco",
            "text": "[Source]  fun box sol_sco()\n: I32 val",
            "title": "sol_sco"
        },
        {
            "location": "/net-OSSockOpt/#returns_138",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_socket",
            "text": "[Source]  fun box sol_socket()\n: I32 val",
            "title": "sol_socket"
        },
        {
            "location": "/net-OSSockOpt/#returns_139",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_tipc",
            "text": "[Source]  fun box sol_tipc()\n: I32 val",
            "title": "sol_tipc"
        },
        {
            "location": "/net-OSSockOpt/#returns_140",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sol_udp",
            "text": "[Source]  fun box sol_udp()\n: I32 val",
            "title": "sol_udp"
        },
        {
            "location": "/net-OSSockOpt/#returns_141",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#af_coip",
            "text": "[Source]  fun box af_coip()\n: I32 val",
            "title": "af_coip"
        },
        {
            "location": "/net-OSSockOpt/#returns_142",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#af_inet",
            "text": "[Source]  fun box af_inet()\n: I32 val",
            "title": "af_inet"
        },
        {
            "location": "/net-OSSockOpt/#returns_143",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#af_inet6",
            "text": "[Source]  fun box af_inet6()\n: I32 val",
            "title": "af_inet6"
        },
        {
            "location": "/net-OSSockOpt/#returns_144",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#bluetooth_proto_sco",
            "text": "[Source]  fun box bluetooth_proto_sco()\n: I32 val",
            "title": "bluetooth_proto_sco"
        },
        {
            "location": "/net-OSSockOpt/#returns_145",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_nr_pkt_types",
            "text": "[Source]  fun box dccp_nr_pkt_types()\n: I32 val",
            "title": "dccp_nr_pkt_types"
        },
        {
            "location": "/net-OSSockOpt/#returns_146",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_service_list_max_len",
            "text": "[Source]  fun box dccp_service_list_max_len()\n: I32 val",
            "title": "dccp_service_list_max_len"
        },
        {
            "location": "/net-OSSockOpt/#returns_147",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_single_opt_maxlen",
            "text": "[Source]  fun box dccp_single_opt_maxlen()\n: I32 val",
            "title": "dccp_single_opt_maxlen"
        },
        {
            "location": "/net-OSSockOpt/#returns_148",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_available_ccids",
            "text": "[Source]  fun box dccp_sockopt_available_ccids()\n: I32 val",
            "title": "dccp_sockopt_available_ccids"
        },
        {
            "location": "/net-OSSockOpt/#returns_149",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_ccid",
            "text": "[Source]  fun box dccp_sockopt_ccid()\n: I32 val",
            "title": "dccp_sockopt_ccid"
        },
        {
            "location": "/net-OSSockOpt/#returns_150",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_ccid_rx_info",
            "text": "[Source]  fun box dccp_sockopt_ccid_rx_info()\n: I32 val",
            "title": "dccp_sockopt_ccid_rx_info"
        },
        {
            "location": "/net-OSSockOpt/#returns_151",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_ccid_tx_info",
            "text": "[Source]  fun box dccp_sockopt_ccid_tx_info()\n: I32 val",
            "title": "dccp_sockopt_ccid_tx_info"
        },
        {
            "location": "/net-OSSockOpt/#returns_152",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_change_l",
            "text": "[Source]  fun box dccp_sockopt_change_l()\n: I32 val",
            "title": "dccp_sockopt_change_l"
        },
        {
            "location": "/net-OSSockOpt/#returns_153",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_change_r",
            "text": "[Source]  fun box dccp_sockopt_change_r()\n: I32 val",
            "title": "dccp_sockopt_change_r"
        },
        {
            "location": "/net-OSSockOpt/#returns_154",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_get_cur_mps",
            "text": "[Source]  fun box dccp_sockopt_get_cur_mps()\n: I32 val",
            "title": "dccp_sockopt_get_cur_mps"
        },
        {
            "location": "/net-OSSockOpt/#returns_155",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_packet_size",
            "text": "[Source]  fun box dccp_sockopt_packet_size()\n: I32 val",
            "title": "dccp_sockopt_packet_size"
        },
        {
            "location": "/net-OSSockOpt/#returns_156",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_qpolicy_id",
            "text": "[Source]  fun box dccp_sockopt_qpolicy_id()\n: I32 val",
            "title": "dccp_sockopt_qpolicy_id"
        },
        {
            "location": "/net-OSSockOpt/#returns_157",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_qpolicy_txqlen",
            "text": "[Source]  fun box dccp_sockopt_qpolicy_txqlen()\n: I32 val",
            "title": "dccp_sockopt_qpolicy_txqlen"
        },
        {
            "location": "/net-OSSockOpt/#returns_158",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_recv_cscov",
            "text": "[Source]  fun box dccp_sockopt_recv_cscov()\n: I32 val",
            "title": "dccp_sockopt_recv_cscov"
        },
        {
            "location": "/net-OSSockOpt/#returns_159",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_rx_ccid",
            "text": "[Source]  fun box dccp_sockopt_rx_ccid()\n: I32 val",
            "title": "dccp_sockopt_rx_ccid"
        },
        {
            "location": "/net-OSSockOpt/#returns_160",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_send_cscov",
            "text": "[Source]  fun box dccp_sockopt_send_cscov()\n: I32 val",
            "title": "dccp_sockopt_send_cscov"
        },
        {
            "location": "/net-OSSockOpt/#returns_161",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_server_timewait",
            "text": "[Source]  fun box dccp_sockopt_server_timewait()\n: I32 val",
            "title": "dccp_sockopt_server_timewait"
        },
        {
            "location": "/net-OSSockOpt/#returns_162",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_service",
            "text": "[Source]  fun box dccp_sockopt_service()\n: I32 val",
            "title": "dccp_sockopt_service"
        },
        {
            "location": "/net-OSSockOpt/#returns_163",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dccp_sockopt_tx_ccid",
            "text": "[Source]  fun box dccp_sockopt_tx_ccid()\n: I32 val",
            "title": "dccp_sockopt_tx_ccid"
        },
        {
            "location": "/net-OSSockOpt/#returns_164",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_acceptmode",
            "text": "[Source]  fun box dso_acceptmode()\n: I32 val",
            "title": "dso_acceptmode"
        },
        {
            "location": "/net-OSSockOpt/#returns_165",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_conaccept",
            "text": "[Source]  fun box dso_conaccept()\n: I32 val",
            "title": "dso_conaccept"
        },
        {
            "location": "/net-OSSockOpt/#returns_166",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_conaccess",
            "text": "[Source]  fun box dso_conaccess()\n: I32 val",
            "title": "dso_conaccess"
        },
        {
            "location": "/net-OSSockOpt/#returns_167",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_condata",
            "text": "[Source]  fun box dso_condata()\n: I32 val",
            "title": "dso_condata"
        },
        {
            "location": "/net-OSSockOpt/#returns_168",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_conreject",
            "text": "[Source]  fun box dso_conreject()\n: I32 val",
            "title": "dso_conreject"
        },
        {
            "location": "/net-OSSockOpt/#returns_169",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_cork",
            "text": "[Source]  fun box dso_cork()\n: I32 val",
            "title": "dso_cork"
        },
        {
            "location": "/net-OSSockOpt/#returns_170",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_disdata",
            "text": "[Source]  fun box dso_disdata()\n: I32 val",
            "title": "dso_disdata"
        },
        {
            "location": "/net-OSSockOpt/#returns_171",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_info",
            "text": "[Source]  fun box dso_info()\n: I32 val",
            "title": "dso_info"
        },
        {
            "location": "/net-OSSockOpt/#returns_172",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_linkinfo",
            "text": "[Source]  fun box dso_linkinfo()\n: I32 val",
            "title": "dso_linkinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_173",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_max",
            "text": "[Source]  fun box dso_max()\n: I32 val",
            "title": "dso_max"
        },
        {
            "location": "/net-OSSockOpt/#returns_174",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_maxwindow",
            "text": "[Source]  fun box dso_maxwindow()\n: I32 val",
            "title": "dso_maxwindow"
        },
        {
            "location": "/net-OSSockOpt/#returns_175",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_nodelay",
            "text": "[Source]  fun box dso_nodelay()\n: I32 val",
            "title": "dso_nodelay"
        },
        {
            "location": "/net-OSSockOpt/#returns_176",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_seqpacket",
            "text": "[Source]  fun box dso_seqpacket()\n: I32 val",
            "title": "dso_seqpacket"
        },
        {
            "location": "/net-OSSockOpt/#returns_177",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_services",
            "text": "[Source]  fun box dso_services()\n: I32 val",
            "title": "dso_services"
        },
        {
            "location": "/net-OSSockOpt/#returns_178",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#dso_stream",
            "text": "[Source]  fun box dso_stream()\n: I32 val",
            "title": "dso_stream"
        },
        {
            "location": "/net-OSSockOpt/#returns_179",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_address",
            "text": "[Source]  fun box icmp_address()\n: I32 val",
            "title": "icmp_address"
        },
        {
            "location": "/net-OSSockOpt/#returns_180",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_addressreply",
            "text": "[Source]  fun box icmp_addressreply()\n: I32 val",
            "title": "icmp_addressreply"
        },
        {
            "location": "/net-OSSockOpt/#returns_181",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_dest_unreach",
            "text": "[Source]  fun box icmp_dest_unreach()\n: I32 val",
            "title": "icmp_dest_unreach"
        },
        {
            "location": "/net-OSSockOpt/#returns_182",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_echo",
            "text": "[Source]  fun box icmp_echo()\n: I32 val",
            "title": "icmp_echo"
        },
        {
            "location": "/net-OSSockOpt/#returns_183",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_echoreply",
            "text": "[Source]  fun box icmp_echoreply()\n: I32 val",
            "title": "icmp_echoreply"
        },
        {
            "location": "/net-OSSockOpt/#returns_184",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_exc_fragtime",
            "text": "[Source]  fun box icmp_exc_fragtime()\n: I32 val",
            "title": "icmp_exc_fragtime"
        },
        {
            "location": "/net-OSSockOpt/#returns_185",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_exc_ttl",
            "text": "[Source]  fun box icmp_exc_ttl()\n: I32 val",
            "title": "icmp_exc_ttl"
        },
        {
            "location": "/net-OSSockOpt/#returns_186",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_filter",
            "text": "[Source]  fun box icmp_filter()\n: I32 val",
            "title": "icmp_filter"
        },
        {
            "location": "/net-OSSockOpt/#returns_187",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_frag_needed",
            "text": "[Source]  fun box icmp_frag_needed()\n: I32 val",
            "title": "icmp_frag_needed"
        },
        {
            "location": "/net-OSSockOpt/#returns_188",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_host_ano",
            "text": "[Source]  fun box icmp_host_ano()\n: I32 val",
            "title": "icmp_host_ano"
        },
        {
            "location": "/net-OSSockOpt/#returns_189",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_host_isolated",
            "text": "[Source]  fun box icmp_host_isolated()\n: I32 val",
            "title": "icmp_host_isolated"
        },
        {
            "location": "/net-OSSockOpt/#returns_190",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_host_unknown",
            "text": "[Source]  fun box icmp_host_unknown()\n: I32 val",
            "title": "icmp_host_unknown"
        },
        {
            "location": "/net-OSSockOpt/#returns_191",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_host_unreach",
            "text": "[Source]  fun box icmp_host_unreach()\n: I32 val",
            "title": "icmp_host_unreach"
        },
        {
            "location": "/net-OSSockOpt/#returns_192",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_host_unr_tos",
            "text": "[Source]  fun box icmp_host_unr_tos()\n: I32 val",
            "title": "icmp_host_unr_tos"
        },
        {
            "location": "/net-OSSockOpt/#returns_193",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_info_reply",
            "text": "[Source]  fun box icmp_info_reply()\n: I32 val",
            "title": "icmp_info_reply"
        },
        {
            "location": "/net-OSSockOpt/#returns_194",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_info_request",
            "text": "[Source]  fun box icmp_info_request()\n: I32 val",
            "title": "icmp_info_request"
        },
        {
            "location": "/net-OSSockOpt/#returns_195",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_net_ano",
            "text": "[Source]  fun box icmp_net_ano()\n: I32 val",
            "title": "icmp_net_ano"
        },
        {
            "location": "/net-OSSockOpt/#returns_196",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_net_unknown",
            "text": "[Source]  fun box icmp_net_unknown()\n: I32 val",
            "title": "icmp_net_unknown"
        },
        {
            "location": "/net-OSSockOpt/#returns_197",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_net_unreach",
            "text": "[Source]  fun box icmp_net_unreach()\n: I32 val",
            "title": "icmp_net_unreach"
        },
        {
            "location": "/net-OSSockOpt/#returns_198",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_net_unr_tos",
            "text": "[Source]  fun box icmp_net_unr_tos()\n: I32 val",
            "title": "icmp_net_unr_tos"
        },
        {
            "location": "/net-OSSockOpt/#returns_199",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_parameterprob",
            "text": "[Source]  fun box icmp_parameterprob()\n: I32 val",
            "title": "icmp_parameterprob"
        },
        {
            "location": "/net-OSSockOpt/#returns_200",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_pkt_filtered",
            "text": "[Source]  fun box icmp_pkt_filtered()\n: I32 val",
            "title": "icmp_pkt_filtered"
        },
        {
            "location": "/net-OSSockOpt/#returns_201",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_port_unreach",
            "text": "[Source]  fun box icmp_port_unreach()\n: I32 val",
            "title": "icmp_port_unreach"
        },
        {
            "location": "/net-OSSockOpt/#returns_202",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_prec_cutoff",
            "text": "[Source]  fun box icmp_prec_cutoff()\n: I32 val",
            "title": "icmp_prec_cutoff"
        },
        {
            "location": "/net-OSSockOpt/#returns_203",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_prec_violation",
            "text": "[Source]  fun box icmp_prec_violation()\n: I32 val",
            "title": "icmp_prec_violation"
        },
        {
            "location": "/net-OSSockOpt/#returns_204",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_prot_unreach",
            "text": "[Source]  fun box icmp_prot_unreach()\n: I32 val",
            "title": "icmp_prot_unreach"
        },
        {
            "location": "/net-OSSockOpt/#returns_205",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_redirect",
            "text": "[Source]  fun box icmp_redirect()\n: I32 val",
            "title": "icmp_redirect"
        },
        {
            "location": "/net-OSSockOpt/#returns_206",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_redir_host",
            "text": "[Source]  fun box icmp_redir_host()\n: I32 val",
            "title": "icmp_redir_host"
        },
        {
            "location": "/net-OSSockOpt/#returns_207",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_redir_hosttos",
            "text": "[Source]  fun box icmp_redir_hosttos()\n: I32 val",
            "title": "icmp_redir_hosttos"
        },
        {
            "location": "/net-OSSockOpt/#returns_208",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_redir_net",
            "text": "[Source]  fun box icmp_redir_net()\n: I32 val",
            "title": "icmp_redir_net"
        },
        {
            "location": "/net-OSSockOpt/#returns_209",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_redir_nettos",
            "text": "[Source]  fun box icmp_redir_nettos()\n: I32 val",
            "title": "icmp_redir_nettos"
        },
        {
            "location": "/net-OSSockOpt/#returns_210",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_source_quench",
            "text": "[Source]  fun box icmp_source_quench()\n: I32 val",
            "title": "icmp_source_quench"
        },
        {
            "location": "/net-OSSockOpt/#returns_211",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_sr_failed",
            "text": "[Source]  fun box icmp_sr_failed()\n: I32 val",
            "title": "icmp_sr_failed"
        },
        {
            "location": "/net-OSSockOpt/#returns_212",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_timestamp",
            "text": "[Source]  fun box icmp_timestamp()\n: I32 val",
            "title": "icmp_timestamp"
        },
        {
            "location": "/net-OSSockOpt/#returns_213",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_timestampreply",
            "text": "[Source]  fun box icmp_timestampreply()\n: I32 val",
            "title": "icmp_timestampreply"
        },
        {
            "location": "/net-OSSockOpt/#returns_214",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#icmp_time_exceeded",
            "text": "[Source]  fun box icmp_time_exceeded()\n: I32 val",
            "title": "icmp_time_exceeded"
        },
        {
            "location": "/net-OSSockOpt/#returns_215",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_acceptsourceroute",
            "text": "[Source]  fun box ipctl_acceptsourceroute()\n: I32 val",
            "title": "ipctl_acceptsourceroute"
        },
        {
            "location": "/net-OSSockOpt/#returns_216",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_defmtu",
            "text": "[Source]  fun box ipctl_defmtu()\n: I32 val",
            "title": "ipctl_defmtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_217",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_defttl",
            "text": "[Source]  fun box ipctl_defttl()\n: I32 val",
            "title": "ipctl_defttl"
        },
        {
            "location": "/net-OSSockOpt/#returns_218",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_directedbroadcast",
            "text": "[Source]  fun box ipctl_directedbroadcast()\n: I32 val",
            "title": "ipctl_directedbroadcast"
        },
        {
            "location": "/net-OSSockOpt/#returns_219",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_fastforwarding",
            "text": "[Source]  fun box ipctl_fastforwarding()\n: I32 val",
            "title": "ipctl_fastforwarding"
        },
        {
            "location": "/net-OSSockOpt/#returns_220",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_forwarding",
            "text": "[Source]  fun box ipctl_forwarding()\n: I32 val",
            "title": "ipctl_forwarding"
        },
        {
            "location": "/net-OSSockOpt/#returns_221",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_gif_ttl",
            "text": "[Source]  fun box ipctl_gif_ttl()\n: I32 val",
            "title": "ipctl_gif_ttl"
        },
        {
            "location": "/net-OSSockOpt/#returns_222",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_intrdqdrops",
            "text": "[Source]  fun box ipctl_intrdqdrops()\n: I32 val",
            "title": "ipctl_intrdqdrops"
        },
        {
            "location": "/net-OSSockOpt/#returns_223",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_intrdqmaxlen",
            "text": "[Source]  fun box ipctl_intrdqmaxlen()\n: I32 val",
            "title": "ipctl_intrdqmaxlen"
        },
        {
            "location": "/net-OSSockOpt/#returns_224",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_intrqdrops",
            "text": "[Source]  fun box ipctl_intrqdrops()\n: I32 val",
            "title": "ipctl_intrqdrops"
        },
        {
            "location": "/net-OSSockOpt/#returns_225",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_intrqmaxlen",
            "text": "[Source]  fun box ipctl_intrqmaxlen()\n: I32 val",
            "title": "ipctl_intrqmaxlen"
        },
        {
            "location": "/net-OSSockOpt/#returns_226",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_keepfaith",
            "text": "[Source]  fun box ipctl_keepfaith()\n: I32 val",
            "title": "ipctl_keepfaith"
        },
        {
            "location": "/net-OSSockOpt/#returns_227",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_maxid",
            "text": "[Source]  fun box ipctl_maxid()\n: I32 val",
            "title": "ipctl_maxid"
        },
        {
            "location": "/net-OSSockOpt/#returns_228",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_rtexpire",
            "text": "[Source]  fun box ipctl_rtexpire()\n: I32 val",
            "title": "ipctl_rtexpire"
        },
        {
            "location": "/net-OSSockOpt/#returns_229",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_rtmaxcache",
            "text": "[Source]  fun box ipctl_rtmaxcache()\n: I32 val",
            "title": "ipctl_rtmaxcache"
        },
        {
            "location": "/net-OSSockOpt/#returns_230",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_rtminexpire",
            "text": "[Source]  fun box ipctl_rtminexpire()\n: I32 val",
            "title": "ipctl_rtminexpire"
        },
        {
            "location": "/net-OSSockOpt/#returns_231",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_sendredirects",
            "text": "[Source]  fun box ipctl_sendredirects()\n: I32 val",
            "title": "ipctl_sendredirects"
        },
        {
            "location": "/net-OSSockOpt/#returns_232",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_sourceroute",
            "text": "[Source]  fun box ipctl_sourceroute()\n: I32 val",
            "title": "ipctl_sourceroute"
        },
        {
            "location": "/net-OSSockOpt/#returns_233",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipctl_stats",
            "text": "[Source]  fun box ipctl_stats()\n: I32 val",
            "title": "ipctl_stats"
        },
        {
            "location": "/net-OSSockOpt/#returns_234",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipport_ephemeralfirst",
            "text": "[Source]  fun box ipport_ephemeralfirst()\n: I32 val",
            "title": "ipport_ephemeralfirst"
        },
        {
            "location": "/net-OSSockOpt/#returns_235",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipport_ephemerallast",
            "text": "[Source]  fun box ipport_ephemerallast()\n: I32 val",
            "title": "ipport_ephemerallast"
        },
        {
            "location": "/net-OSSockOpt/#returns_236",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipport_hifirstauto",
            "text": "[Source]  fun box ipport_hifirstauto()\n: I32 val",
            "title": "ipport_hifirstauto"
        },
        {
            "location": "/net-OSSockOpt/#returns_237",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipport_hilastauto",
            "text": "[Source]  fun box ipport_hilastauto()\n: I32 val",
            "title": "ipport_hilastauto"
        },
        {
            "location": "/net-OSSockOpt/#returns_238",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipport_max",
            "text": "[Source]  fun box ipport_max()\n: I32 val",
            "title": "ipport_max"
        },
        {
            "location": "/net-OSSockOpt/#returns_239",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipport_reserved",
            "text": "[Source]  fun box ipport_reserved()\n: I32 val",
            "title": "ipport_reserved"
        },
        {
            "location": "/net-OSSockOpt/#returns_240",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipport_reservedstart",
            "text": "[Source]  fun box ipport_reservedstart()\n: I32 val",
            "title": "ipport_reservedstart"
        },
        {
            "location": "/net-OSSockOpt/#returns_241",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipport_userreserved",
            "text": "[Source]  fun box ipport_userreserved()\n: I32 val",
            "title": "ipport_userreserved"
        },
        {
            "location": "/net-OSSockOpt/#returns_242",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_2292dstopts",
            "text": "[Source]  fun box ipv6_2292dstopts()\n: I32 val",
            "title": "ipv6_2292dstopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_243",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_2292hoplimit",
            "text": "[Source]  fun box ipv6_2292hoplimit()\n: I32 val",
            "title": "ipv6_2292hoplimit"
        },
        {
            "location": "/net-OSSockOpt/#returns_244",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_2292hopopts",
            "text": "[Source]  fun box ipv6_2292hopopts()\n: I32 val",
            "title": "ipv6_2292hopopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_245",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_2292pktinfo",
            "text": "[Source]  fun box ipv6_2292pktinfo()\n: I32 val",
            "title": "ipv6_2292pktinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_246",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_2292pktoptions",
            "text": "[Source]  fun box ipv6_2292pktoptions()\n: I32 val",
            "title": "ipv6_2292pktoptions"
        },
        {
            "location": "/net-OSSockOpt/#returns_247",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_2292rthdr",
            "text": "[Source]  fun box ipv6_2292rthdr()\n: I32 val",
            "title": "ipv6_2292rthdr"
        },
        {
            "location": "/net-OSSockOpt/#returns_248",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_addrform",
            "text": "[Source]  fun box ipv6_addrform()\n: I32 val",
            "title": "ipv6_addrform"
        },
        {
            "location": "/net-OSSockOpt/#returns_249",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_addr_preferences",
            "text": "[Source]  fun box ipv6_addr_preferences()\n: I32 val",
            "title": "ipv6_addr_preferences"
        },
        {
            "location": "/net-OSSockOpt/#returns_250",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_add_membership",
            "text": "[Source]  fun box ipv6_add_membership()\n: I32 val",
            "title": "ipv6_add_membership"
        },
        {
            "location": "/net-OSSockOpt/#returns_251",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_authhdr",
            "text": "[Source]  fun box ipv6_authhdr()\n: I32 val",
            "title": "ipv6_authhdr"
        },
        {
            "location": "/net-OSSockOpt/#returns_252",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_autoflowlabel",
            "text": "[Source]  fun box ipv6_autoflowlabel()\n: I32 val",
            "title": "ipv6_autoflowlabel"
        },
        {
            "location": "/net-OSSockOpt/#returns_253",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_checksum",
            "text": "[Source]  fun box ipv6_checksum()\n: I32 val",
            "title": "ipv6_checksum"
        },
        {
            "location": "/net-OSSockOpt/#returns_254",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_dontfrag",
            "text": "[Source]  fun box ipv6_dontfrag()\n: I32 val",
            "title": "ipv6_dontfrag"
        },
        {
            "location": "/net-OSSockOpt/#returns_255",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_drop_membership",
            "text": "[Source]  fun box ipv6_drop_membership()\n: I32 val",
            "title": "ipv6_drop_membership"
        },
        {
            "location": "/net-OSSockOpt/#returns_256",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_dstopts",
            "text": "[Source]  fun box ipv6_dstopts()\n: I32 val",
            "title": "ipv6_dstopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_257",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_flowinfo",
            "text": "[Source]  fun box ipv6_flowinfo()\n: I32 val",
            "title": "ipv6_flowinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_258",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_flowinfo_flowlabel",
            "text": "[Source]  fun box ipv6_flowinfo_flowlabel()\n: I32 val",
            "title": "ipv6_flowinfo_flowlabel"
        },
        {
            "location": "/net-OSSockOpt/#returns_259",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_flowinfo_priority",
            "text": "[Source]  fun box ipv6_flowinfo_priority()\n: I32 val",
            "title": "ipv6_flowinfo_priority"
        },
        {
            "location": "/net-OSSockOpt/#returns_260",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_flowinfo_send",
            "text": "[Source]  fun box ipv6_flowinfo_send()\n: I32 val",
            "title": "ipv6_flowinfo_send"
        },
        {
            "location": "/net-OSSockOpt/#returns_261",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_flowlabel_mgr",
            "text": "[Source]  fun box ipv6_flowlabel_mgr()\n: I32 val",
            "title": "ipv6_flowlabel_mgr"
        },
        {
            "location": "/net-OSSockOpt/#returns_262",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_a_get",
            "text": "[Source]  fun box ipv6_fl_a_get()\n: I32 val",
            "title": "ipv6_fl_a_get"
        },
        {
            "location": "/net-OSSockOpt/#returns_263",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_a_put",
            "text": "[Source]  fun box ipv6_fl_a_put()\n: I32 val",
            "title": "ipv6_fl_a_put"
        },
        {
            "location": "/net-OSSockOpt/#returns_264",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_a_renew",
            "text": "[Source]  fun box ipv6_fl_a_renew()\n: I32 val",
            "title": "ipv6_fl_a_renew"
        },
        {
            "location": "/net-OSSockOpt/#returns_265",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_f_create",
            "text": "[Source]  fun box ipv6_fl_f_create()\n: I32 val",
            "title": "ipv6_fl_f_create"
        },
        {
            "location": "/net-OSSockOpt/#returns_266",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_f_excl",
            "text": "[Source]  fun box ipv6_fl_f_excl()\n: I32 val",
            "title": "ipv6_fl_f_excl"
        },
        {
            "location": "/net-OSSockOpt/#returns_267",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_f_reflect",
            "text": "[Source]  fun box ipv6_fl_f_reflect()\n: I32 val",
            "title": "ipv6_fl_f_reflect"
        },
        {
            "location": "/net-OSSockOpt/#returns_268",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_f_remote",
            "text": "[Source]  fun box ipv6_fl_f_remote()\n: I32 val",
            "title": "ipv6_fl_f_remote"
        },
        {
            "location": "/net-OSSockOpt/#returns_269",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_s_any",
            "text": "[Source]  fun box ipv6_fl_s_any()\n: I32 val",
            "title": "ipv6_fl_s_any"
        },
        {
            "location": "/net-OSSockOpt/#returns_270",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_s_excl",
            "text": "[Source]  fun box ipv6_fl_s_excl()\n: I32 val",
            "title": "ipv6_fl_s_excl"
        },
        {
            "location": "/net-OSSockOpt/#returns_271",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_s_none",
            "text": "[Source]  fun box ipv6_fl_s_none()\n: I32 val",
            "title": "ipv6_fl_s_none"
        },
        {
            "location": "/net-OSSockOpt/#returns_272",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_s_process",
            "text": "[Source]  fun box ipv6_fl_s_process()\n: I32 val",
            "title": "ipv6_fl_s_process"
        },
        {
            "location": "/net-OSSockOpt/#returns_273",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_fl_s_user",
            "text": "[Source]  fun box ipv6_fl_s_user()\n: I32 val",
            "title": "ipv6_fl_s_user"
        },
        {
            "location": "/net-OSSockOpt/#returns_274",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_hoplimit",
            "text": "[Source]  fun box ipv6_hoplimit()\n: I32 val",
            "title": "ipv6_hoplimit"
        },
        {
            "location": "/net-OSSockOpt/#returns_275",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_hopopts",
            "text": "[Source]  fun box ipv6_hopopts()\n: I32 val",
            "title": "ipv6_hopopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_276",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_ipsec_policy",
            "text": "[Source]  fun box ipv6_ipsec_policy()\n: I32 val",
            "title": "ipv6_ipsec_policy"
        },
        {
            "location": "/net-OSSockOpt/#returns_277",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_join_anycast",
            "text": "[Source]  fun box ipv6_join_anycast()\n: I32 val",
            "title": "ipv6_join_anycast"
        },
        {
            "location": "/net-OSSockOpt/#returns_278",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_leave_anycast",
            "text": "[Source]  fun box ipv6_leave_anycast()\n: I32 val",
            "title": "ipv6_leave_anycast"
        },
        {
            "location": "/net-OSSockOpt/#returns_279",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_minhopcount",
            "text": "[Source]  fun box ipv6_minhopcount()\n: I32 val",
            "title": "ipv6_minhopcount"
        },
        {
            "location": "/net-OSSockOpt/#returns_280",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_mtu",
            "text": "[Source]  fun box ipv6_mtu()\n: I32 val",
            "title": "ipv6_mtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_281",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_mtu_discover",
            "text": "[Source]  fun box ipv6_mtu_discover()\n: I32 val",
            "title": "ipv6_mtu_discover"
        },
        {
            "location": "/net-OSSockOpt/#returns_282",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_multicast_hops",
            "text": "[Source]  fun box ipv6_multicast_hops()\n: I32 val",
            "title": "ipv6_multicast_hops"
        },
        {
            "location": "/net-OSSockOpt/#returns_283",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_multicast_if",
            "text": "[Source]  fun box ipv6_multicast_if()\n: I32 val",
            "title": "ipv6_multicast_if"
        },
        {
            "location": "/net-OSSockOpt/#returns_284",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_multicast_loop",
            "text": "[Source]  fun box ipv6_multicast_loop()\n: I32 val",
            "title": "ipv6_multicast_loop"
        },
        {
            "location": "/net-OSSockOpt/#returns_285",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_nexthop",
            "text": "[Source]  fun box ipv6_nexthop()\n: I32 val",
            "title": "ipv6_nexthop"
        },
        {
            "location": "/net-OSSockOpt/#returns_286",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_origdstaddr",
            "text": "[Source]  fun box ipv6_origdstaddr()\n: I32 val",
            "title": "ipv6_origdstaddr"
        },
        {
            "location": "/net-OSSockOpt/#returns_287",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_pathmtu",
            "text": "[Source]  fun box ipv6_pathmtu()\n: I32 val",
            "title": "ipv6_pathmtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_288",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_pktinfo",
            "text": "[Source]  fun box ipv6_pktinfo()\n: I32 val",
            "title": "ipv6_pktinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_289",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_pmtudisc_do",
            "text": "[Source]  fun box ipv6_pmtudisc_do()\n: I32 val",
            "title": "ipv6_pmtudisc_do"
        },
        {
            "location": "/net-OSSockOpt/#returns_290",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_pmtudisc_dont",
            "text": "[Source]  fun box ipv6_pmtudisc_dont()\n: I32 val",
            "title": "ipv6_pmtudisc_dont"
        },
        {
            "location": "/net-OSSockOpt/#returns_291",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_pmtudisc_interface",
            "text": "[Source]  fun box ipv6_pmtudisc_interface()\n: I32 val",
            "title": "ipv6_pmtudisc_interface"
        },
        {
            "location": "/net-OSSockOpt/#returns_292",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_pmtudisc_omit",
            "text": "[Source]  fun box ipv6_pmtudisc_omit()\n: I32 val",
            "title": "ipv6_pmtudisc_omit"
        },
        {
            "location": "/net-OSSockOpt/#returns_293",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_pmtudisc_probe",
            "text": "[Source]  fun box ipv6_pmtudisc_probe()\n: I32 val",
            "title": "ipv6_pmtudisc_probe"
        },
        {
            "location": "/net-OSSockOpt/#returns_294",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_pmtudisc_want",
            "text": "[Source]  fun box ipv6_pmtudisc_want()\n: I32 val",
            "title": "ipv6_pmtudisc_want"
        },
        {
            "location": "/net-OSSockOpt/#returns_295",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_prefer_src_cga",
            "text": "[Source]  fun box ipv6_prefer_src_cga()\n: I32 val",
            "title": "ipv6_prefer_src_cga"
        },
        {
            "location": "/net-OSSockOpt/#returns_296",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_prefer_src_coa",
            "text": "[Source]  fun box ipv6_prefer_src_coa()\n: I32 val",
            "title": "ipv6_prefer_src_coa"
        },
        {
            "location": "/net-OSSockOpt/#returns_297",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_prefer_src_home",
            "text": "[Source]  fun box ipv6_prefer_src_home()\n: I32 val",
            "title": "ipv6_prefer_src_home"
        },
        {
            "location": "/net-OSSockOpt/#returns_298",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_prefer_src_noncga",
            "text": "[Source]  fun box ipv6_prefer_src_noncga()\n: I32 val",
            "title": "ipv6_prefer_src_noncga"
        },
        {
            "location": "/net-OSSockOpt/#returns_299",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_prefer_src_public",
            "text": "[Source]  fun box ipv6_prefer_src_public()\n: I32 val",
            "title": "ipv6_prefer_src_public"
        },
        {
            "location": "/net-OSSockOpt/#returns_300",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_prefer_src_pubtmp_default",
            "text": "[Source]  fun box ipv6_prefer_src_pubtmp_default()\n: I32 val",
            "title": "ipv6_prefer_src_pubtmp_default"
        },
        {
            "location": "/net-OSSockOpt/#returns_301",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_prefer_src_tmp",
            "text": "[Source]  fun box ipv6_prefer_src_tmp()\n: I32 val",
            "title": "ipv6_prefer_src_tmp"
        },
        {
            "location": "/net-OSSockOpt/#returns_302",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_10",
            "text": "[Source]  fun box ipv6_priority_10()\n: I32 val",
            "title": "ipv6_priority_10"
        },
        {
            "location": "/net-OSSockOpt/#returns_303",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_11",
            "text": "[Source]  fun box ipv6_priority_11()\n: I32 val",
            "title": "ipv6_priority_11"
        },
        {
            "location": "/net-OSSockOpt/#returns_304",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_12",
            "text": "[Source]  fun box ipv6_priority_12()\n: I32 val",
            "title": "ipv6_priority_12"
        },
        {
            "location": "/net-OSSockOpt/#returns_305",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_13",
            "text": "[Source]  fun box ipv6_priority_13()\n: I32 val",
            "title": "ipv6_priority_13"
        },
        {
            "location": "/net-OSSockOpt/#returns_306",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_14",
            "text": "[Source]  fun box ipv6_priority_14()\n: I32 val",
            "title": "ipv6_priority_14"
        },
        {
            "location": "/net-OSSockOpt/#returns_307",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_15",
            "text": "[Source]  fun box ipv6_priority_15()\n: I32 val",
            "title": "ipv6_priority_15"
        },
        {
            "location": "/net-OSSockOpt/#returns_308",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_8",
            "text": "[Source]  fun box ipv6_priority_8()\n: I32 val",
            "title": "ipv6_priority_8"
        },
        {
            "location": "/net-OSSockOpt/#returns_309",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_9",
            "text": "[Source]  fun box ipv6_priority_9()\n: I32 val",
            "title": "ipv6_priority_9"
        },
        {
            "location": "/net-OSSockOpt/#returns_310",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_bulk",
            "text": "[Source]  fun box ipv6_priority_bulk()\n: I32 val",
            "title": "ipv6_priority_bulk"
        },
        {
            "location": "/net-OSSockOpt/#returns_311",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_control",
            "text": "[Source]  fun box ipv6_priority_control()\n: I32 val",
            "title": "ipv6_priority_control"
        },
        {
            "location": "/net-OSSockOpt/#returns_312",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_filler",
            "text": "[Source]  fun box ipv6_priority_filler()\n: I32 val",
            "title": "ipv6_priority_filler"
        },
        {
            "location": "/net-OSSockOpt/#returns_313",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_interactive",
            "text": "[Source]  fun box ipv6_priority_interactive()\n: I32 val",
            "title": "ipv6_priority_interactive"
        },
        {
            "location": "/net-OSSockOpt/#returns_314",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_reserved1",
            "text": "[Source]  fun box ipv6_priority_reserved1()\n: I32 val",
            "title": "ipv6_priority_reserved1"
        },
        {
            "location": "/net-OSSockOpt/#returns_315",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_reserved2",
            "text": "[Source]  fun box ipv6_priority_reserved2()\n: I32 val",
            "title": "ipv6_priority_reserved2"
        },
        {
            "location": "/net-OSSockOpt/#returns_316",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_unattended",
            "text": "[Source]  fun box ipv6_priority_unattended()\n: I32 val",
            "title": "ipv6_priority_unattended"
        },
        {
            "location": "/net-OSSockOpt/#returns_317",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_priority_uncharacterized",
            "text": "[Source]  fun box ipv6_priority_uncharacterized()\n: I32 val",
            "title": "ipv6_priority_uncharacterized"
        },
        {
            "location": "/net-OSSockOpt/#returns_318",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_recvdstopts",
            "text": "[Source]  fun box ipv6_recvdstopts()\n: I32 val",
            "title": "ipv6_recvdstopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_319",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_recverr",
            "text": "[Source]  fun box ipv6_recverr()\n: I32 val",
            "title": "ipv6_recverr"
        },
        {
            "location": "/net-OSSockOpt/#returns_320",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_recvhoplimit",
            "text": "[Source]  fun box ipv6_recvhoplimit()\n: I32 val",
            "title": "ipv6_recvhoplimit"
        },
        {
            "location": "/net-OSSockOpt/#returns_321",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_recvhopopts",
            "text": "[Source]  fun box ipv6_recvhopopts()\n: I32 val",
            "title": "ipv6_recvhopopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_322",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_recvorigdstaddr",
            "text": "[Source]  fun box ipv6_recvorigdstaddr()\n: I32 val",
            "title": "ipv6_recvorigdstaddr"
        },
        {
            "location": "/net-OSSockOpt/#returns_323",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_recvpathmtu",
            "text": "[Source]  fun box ipv6_recvpathmtu()\n: I32 val",
            "title": "ipv6_recvpathmtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_324",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_recvpktinfo",
            "text": "[Source]  fun box ipv6_recvpktinfo()\n: I32 val",
            "title": "ipv6_recvpktinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_325",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_recvrthdr",
            "text": "[Source]  fun box ipv6_recvrthdr()\n: I32 val",
            "title": "ipv6_recvrthdr"
        },
        {
            "location": "/net-OSSockOpt/#returns_326",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_recvtclass",
            "text": "[Source]  fun box ipv6_recvtclass()\n: I32 val",
            "title": "ipv6_recvtclass"
        },
        {
            "location": "/net-OSSockOpt/#returns_327",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_router_alert",
            "text": "[Source]  fun box ipv6_router_alert()\n: I32 val",
            "title": "ipv6_router_alert"
        },
        {
            "location": "/net-OSSockOpt/#returns_328",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_rthdr",
            "text": "[Source]  fun box ipv6_rthdr()\n: I32 val",
            "title": "ipv6_rthdr"
        },
        {
            "location": "/net-OSSockOpt/#returns_329",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_rthdrdstopts",
            "text": "[Source]  fun box ipv6_rthdrdstopts()\n: I32 val",
            "title": "ipv6_rthdrdstopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_330",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_tclass",
            "text": "[Source]  fun box ipv6_tclass()\n: I32 val",
            "title": "ipv6_tclass"
        },
        {
            "location": "/net-OSSockOpt/#returns_331",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_tlv_hao",
            "text": "[Source]  fun box ipv6_tlv_hao()\n: I32 val",
            "title": "ipv6_tlv_hao"
        },
        {
            "location": "/net-OSSockOpt/#returns_332",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_tlv_jumbo",
            "text": "[Source]  fun box ipv6_tlv_jumbo()\n: I32 val",
            "title": "ipv6_tlv_jumbo"
        },
        {
            "location": "/net-OSSockOpt/#returns_333",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_tlv_pad1",
            "text": "[Source]  fun box ipv6_tlv_pad1()\n: I32 val",
            "title": "ipv6_tlv_pad1"
        },
        {
            "location": "/net-OSSockOpt/#returns_334",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_tlv_padn",
            "text": "[Source]  fun box ipv6_tlv_padn()\n: I32 val",
            "title": "ipv6_tlv_padn"
        },
        {
            "location": "/net-OSSockOpt/#returns_335",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_tlv_routeralert",
            "text": "[Source]  fun box ipv6_tlv_routeralert()\n: I32 val",
            "title": "ipv6_tlv_routeralert"
        },
        {
            "location": "/net-OSSockOpt/#returns_336",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_transparent",
            "text": "[Source]  fun box ipv6_transparent()\n: I32 val",
            "title": "ipv6_transparent"
        },
        {
            "location": "/net-OSSockOpt/#returns_337",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_unicast_hops",
            "text": "[Source]  fun box ipv6_unicast_hops()\n: I32 val",
            "title": "ipv6_unicast_hops"
        },
        {
            "location": "/net-OSSockOpt/#returns_338",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_unicast_if",
            "text": "[Source]  fun box ipv6_unicast_if()\n: I32 val",
            "title": "ipv6_unicast_if"
        },
        {
            "location": "/net-OSSockOpt/#returns_339",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_use_min_mtu",
            "text": "[Source]  fun box ipv6_use_min_mtu()\n: I32 val",
            "title": "ipv6_use_min_mtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_340",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_v6only",
            "text": "[Source]  fun box ipv6_v6only()\n: I32 val",
            "title": "ipv6_v6only"
        },
        {
            "location": "/net-OSSockOpt/#returns_341",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipv6_xfrm_policy",
            "text": "[Source]  fun box ipv6_xfrm_policy()\n: I32 val",
            "title": "ipv6_xfrm_policy"
        },
        {
            "location": "/net-OSSockOpt/#returns_342",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_address",
            "text": "[Source]  fun box ipx_address()\n: I32 val",
            "title": "ipx_address"
        },
        {
            "location": "/net-OSSockOpt/#returns_343",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_address_notify",
            "text": "[Source]  fun box ipx_address_notify()\n: I32 val",
            "title": "ipx_address_notify"
        },
        {
            "location": "/net-OSSockOpt/#returns_344",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_crtitf",
            "text": "[Source]  fun box ipx_crtitf()\n: I32 val",
            "title": "ipx_crtitf"
        },
        {
            "location": "/net-OSSockOpt/#returns_345",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_dltitf",
            "text": "[Source]  fun box ipx_dltitf()\n: I32 val",
            "title": "ipx_dltitf"
        },
        {
            "location": "/net-OSSockOpt/#returns_346",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_dstype",
            "text": "[Source]  fun box ipx_dstype()\n: I32 val",
            "title": "ipx_dstype"
        },
        {
            "location": "/net-OSSockOpt/#returns_347",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_extended_address",
            "text": "[Source]  fun box ipx_extended_address()\n: I32 val",
            "title": "ipx_extended_address"
        },
        {
            "location": "/net-OSSockOpt/#returns_348",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_filterptype",
            "text": "[Source]  fun box ipx_filterptype()\n: I32 val",
            "title": "ipx_filterptype"
        },
        {
            "location": "/net-OSSockOpt/#returns_349",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_frame_8022",
            "text": "[Source]  fun box ipx_frame_8022()\n: I32 val",
            "title": "ipx_frame_8022"
        },
        {
            "location": "/net-OSSockOpt/#returns_350",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_frame_8023",
            "text": "[Source]  fun box ipx_frame_8023()\n: I32 val",
            "title": "ipx_frame_8023"
        },
        {
            "location": "/net-OSSockOpt/#returns_351",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_frame_etherii",
            "text": "[Source]  fun box ipx_frame_etherii()\n: I32 val",
            "title": "ipx_frame_etherii"
        },
        {
            "location": "/net-OSSockOpt/#returns_352",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_frame_none",
            "text": "[Source]  fun box ipx_frame_none()\n: I32 val",
            "title": "ipx_frame_none"
        },
        {
            "location": "/net-OSSockOpt/#returns_353",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_frame_snap",
            "text": "[Source]  fun box ipx_frame_snap()\n: I32 val",
            "title": "ipx_frame_snap"
        },
        {
            "location": "/net-OSSockOpt/#returns_354",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_frame_tr_8022",
            "text": "[Source]  fun box ipx_frame_tr_8022()\n: I32 val",
            "title": "ipx_frame_tr_8022"
        },
        {
            "location": "/net-OSSockOpt/#returns_355",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_getnetinfo",
            "text": "[Source]  fun box ipx_getnetinfo()\n: I32 val",
            "title": "ipx_getnetinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_356",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_getnetinfo_norip",
            "text": "[Source]  fun box ipx_getnetinfo_norip()\n: I32 val",
            "title": "ipx_getnetinfo_norip"
        },
        {
            "location": "/net-OSSockOpt/#returns_357",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_immediatespxack",
            "text": "[Source]  fun box ipx_immediatespxack()\n: I32 val",
            "title": "ipx_immediatespxack"
        },
        {
            "location": "/net-OSSockOpt/#returns_358",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_internal",
            "text": "[Source]  fun box ipx_internal()\n: I32 val",
            "title": "ipx_internal"
        },
        {
            "location": "/net-OSSockOpt/#returns_359",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_maxsize",
            "text": "[Source]  fun box ipx_maxsize()\n: I32 val",
            "title": "ipx_maxsize"
        },
        {
            "location": "/net-OSSockOpt/#returns_360",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_max_adapter_num",
            "text": "[Source]  fun box ipx_max_adapter_num()\n: I32 val",
            "title": "ipx_max_adapter_num"
        },
        {
            "location": "/net-OSSockOpt/#returns_361",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_mtu",
            "text": "[Source]  fun box ipx_mtu()\n: I32 val",
            "title": "ipx_mtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_362",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_node_len",
            "text": "[Source]  fun box ipx_node_len()\n: I32 val",
            "title": "ipx_node_len"
        },
        {
            "location": "/net-OSSockOpt/#returns_363",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_primary",
            "text": "[Source]  fun box ipx_primary()\n: I32 val",
            "title": "ipx_primary"
        },
        {
            "location": "/net-OSSockOpt/#returns_364",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_ptype",
            "text": "[Source]  fun box ipx_ptype()\n: I32 val",
            "title": "ipx_ptype"
        },
        {
            "location": "/net-OSSockOpt/#returns_365",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_receive_broadcast",
            "text": "[Source]  fun box ipx_receive_broadcast()\n: I32 val",
            "title": "ipx_receive_broadcast"
        },
        {
            "location": "/net-OSSockOpt/#returns_366",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_recvhdr",
            "text": "[Source]  fun box ipx_recvhdr()\n: I32 val",
            "title": "ipx_recvhdr"
        },
        {
            "location": "/net-OSSockOpt/#returns_367",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_reripnetnumber",
            "text": "[Source]  fun box ipx_reripnetnumber()\n: I32 val",
            "title": "ipx_reripnetnumber"
        },
        {
            "location": "/net-OSSockOpt/#returns_368",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_route_no_router",
            "text": "[Source]  fun box ipx_route_no_router()\n: I32 val",
            "title": "ipx_route_no_router"
        },
        {
            "location": "/net-OSSockOpt/#returns_369",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_rt_8022",
            "text": "[Source]  fun box ipx_rt_8022()\n: I32 val",
            "title": "ipx_rt_8022"
        },
        {
            "location": "/net-OSSockOpt/#returns_370",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_rt_bluebook",
            "text": "[Source]  fun box ipx_rt_bluebook()\n: I32 val",
            "title": "ipx_rt_bluebook"
        },
        {
            "location": "/net-OSSockOpt/#returns_371",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_rt_routed",
            "text": "[Source]  fun box ipx_rt_routed()\n: I32 val",
            "title": "ipx_rt_routed"
        },
        {
            "location": "/net-OSSockOpt/#returns_372",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_rt_snap",
            "text": "[Source]  fun box ipx_rt_snap()\n: I32 val",
            "title": "ipx_rt_snap"
        },
        {
            "location": "/net-OSSockOpt/#returns_373",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_special_none",
            "text": "[Source]  fun box ipx_special_none()\n: I32 val",
            "title": "ipx_special_none"
        },
        {
            "location": "/net-OSSockOpt/#returns_374",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_spxgetconnectionstatus",
            "text": "[Source]  fun box ipx_spxgetconnectionstatus()\n: I32 val",
            "title": "ipx_spxgetconnectionstatus"
        },
        {
            "location": "/net-OSSockOpt/#returns_375",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_stopfilterptype",
            "text": "[Source]  fun box ipx_stopfilterptype()\n: I32 val",
            "title": "ipx_stopfilterptype"
        },
        {
            "location": "/net-OSSockOpt/#returns_376",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ipx_type",
            "text": "[Source]  fun box ipx_type()\n: I32 val",
            "title": "ipx_type"
        },
        {
            "location": "/net-OSSockOpt/#returns_377",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_add_membership",
            "text": "[Source]  fun box ip_add_membership()\n: I32 val",
            "title": "ip_add_membership"
        },
        {
            "location": "/net-OSSockOpt/#returns_378",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_add_source_membership",
            "text": "[Source]  fun box ip_add_source_membership()\n: I32 val",
            "title": "ip_add_source_membership"
        },
        {
            "location": "/net-OSSockOpt/#returns_379",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_bindany",
            "text": "[Source]  fun box ip_bindany()\n: I32 val",
            "title": "ip_bindany"
        },
        {
            "location": "/net-OSSockOpt/#returns_380",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_bindmulti",
            "text": "[Source]  fun box ip_bindmulti()\n: I32 val",
            "title": "ip_bindmulti"
        },
        {
            "location": "/net-OSSockOpt/#returns_381",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_bind_address_no_port",
            "text": "[Source]  fun box ip_bind_address_no_port()\n: I32 val",
            "title": "ip_bind_address_no_port"
        },
        {
            "location": "/net-OSSockOpt/#returns_382",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_block_source",
            "text": "[Source]  fun box ip_block_source()\n: I32 val",
            "title": "ip_block_source"
        },
        {
            "location": "/net-OSSockOpt/#returns_383",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_bound_if",
            "text": "[Source]  fun box ip_bound_if()\n: I32 val",
            "title": "ip_bound_if"
        },
        {
            "location": "/net-OSSockOpt/#returns_384",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_checksum",
            "text": "[Source]  fun box ip_checksum()\n: I32 val",
            "title": "ip_checksum"
        },
        {
            "location": "/net-OSSockOpt/#returns_385",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_default_multicast_loop",
            "text": "[Source]  fun box ip_default_multicast_loop()\n: I32 val",
            "title": "ip_default_multicast_loop"
        },
        {
            "location": "/net-OSSockOpt/#returns_386",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_default_multicast_ttl",
            "text": "[Source]  fun box ip_default_multicast_ttl()\n: I32 val",
            "title": "ip_default_multicast_ttl"
        },
        {
            "location": "/net-OSSockOpt/#returns_387",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_dontfrag",
            "text": "[Source]  fun box ip_dontfrag()\n: I32 val",
            "title": "ip_dontfrag"
        },
        {
            "location": "/net-OSSockOpt/#returns_388",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_drop_membership",
            "text": "[Source]  fun box ip_drop_membership()\n: I32 val",
            "title": "ip_drop_membership"
        },
        {
            "location": "/net-OSSockOpt/#returns_389",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_drop_source_membership",
            "text": "[Source]  fun box ip_drop_source_membership()\n: I32 val",
            "title": "ip_drop_source_membership"
        },
        {
            "location": "/net-OSSockOpt/#returns_390",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_dummynet3",
            "text": "[Source]  fun box ip_dummynet3()\n: I32 val",
            "title": "ip_dummynet3"
        },
        {
            "location": "/net-OSSockOpt/#returns_391",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_dummynet_configure",
            "text": "[Source]  fun box ip_dummynet_configure()\n: I32 val",
            "title": "ip_dummynet_configure"
        },
        {
            "location": "/net-OSSockOpt/#returns_392",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_dummynet_del",
            "text": "[Source]  fun box ip_dummynet_del()\n: I32 val",
            "title": "ip_dummynet_del"
        },
        {
            "location": "/net-OSSockOpt/#returns_393",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_dummynet_flush",
            "text": "[Source]  fun box ip_dummynet_flush()\n: I32 val",
            "title": "ip_dummynet_flush"
        },
        {
            "location": "/net-OSSockOpt/#returns_394",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_dummynet_get",
            "text": "[Source]  fun box ip_dummynet_get()\n: I32 val",
            "title": "ip_dummynet_get"
        },
        {
            "location": "/net-OSSockOpt/#returns_395",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_faith",
            "text": "[Source]  fun box ip_faith()\n: I32 val",
            "title": "ip_faith"
        },
        {
            "location": "/net-OSSockOpt/#returns_396",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_flowid",
            "text": "[Source]  fun box ip_flowid()\n: I32 val",
            "title": "ip_flowid"
        },
        {
            "location": "/net-OSSockOpt/#returns_397",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_flowtype",
            "text": "[Source]  fun box ip_flowtype()\n: I32 val",
            "title": "ip_flowtype"
        },
        {
            "location": "/net-OSSockOpt/#returns_398",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_freebind",
            "text": "[Source]  fun box ip_freebind()\n: I32 val",
            "title": "ip_freebind"
        },
        {
            "location": "/net-OSSockOpt/#returns_399",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw3",
            "text": "[Source]  fun box ip_fw3()\n: I32 val",
            "title": "ip_fw3"
        },
        {
            "location": "/net-OSSockOpt/#returns_400",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_add",
            "text": "[Source]  fun box ip_fw_add()\n: I32 val",
            "title": "ip_fw_add"
        },
        {
            "location": "/net-OSSockOpt/#returns_401",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_del",
            "text": "[Source]  fun box ip_fw_del()\n: I32 val",
            "title": "ip_fw_del"
        },
        {
            "location": "/net-OSSockOpt/#returns_402",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_flush",
            "text": "[Source]  fun box ip_fw_flush()\n: I32 val",
            "title": "ip_fw_flush"
        },
        {
            "location": "/net-OSSockOpt/#returns_403",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_get",
            "text": "[Source]  fun box ip_fw_get()\n: I32 val",
            "title": "ip_fw_get"
        },
        {
            "location": "/net-OSSockOpt/#returns_404",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_nat_cfg",
            "text": "[Source]  fun box ip_fw_nat_cfg()\n: I32 val",
            "title": "ip_fw_nat_cfg"
        },
        {
            "location": "/net-OSSockOpt/#returns_405",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_nat_del",
            "text": "[Source]  fun box ip_fw_nat_del()\n: I32 val",
            "title": "ip_fw_nat_del"
        },
        {
            "location": "/net-OSSockOpt/#returns_406",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_nat_get_config",
            "text": "[Source]  fun box ip_fw_nat_get_config()\n: I32 val",
            "title": "ip_fw_nat_get_config"
        },
        {
            "location": "/net-OSSockOpt/#returns_407",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_nat_get_log",
            "text": "[Source]  fun box ip_fw_nat_get_log()\n: I32 val",
            "title": "ip_fw_nat_get_log"
        },
        {
            "location": "/net-OSSockOpt/#returns_408",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_resetlog",
            "text": "[Source]  fun box ip_fw_resetlog()\n: I32 val",
            "title": "ip_fw_resetlog"
        },
        {
            "location": "/net-OSSockOpt/#returns_409",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_table_add",
            "text": "[Source]  fun box ip_fw_table_add()\n: I32 val",
            "title": "ip_fw_table_add"
        },
        {
            "location": "/net-OSSockOpt/#returns_410",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_table_del",
            "text": "[Source]  fun box ip_fw_table_del()\n: I32 val",
            "title": "ip_fw_table_del"
        },
        {
            "location": "/net-OSSockOpt/#returns_411",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_table_flush",
            "text": "[Source]  fun box ip_fw_table_flush()\n: I32 val",
            "title": "ip_fw_table_flush"
        },
        {
            "location": "/net-OSSockOpt/#returns_412",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_table_getsize",
            "text": "[Source]  fun box ip_fw_table_getsize()\n: I32 val",
            "title": "ip_fw_table_getsize"
        },
        {
            "location": "/net-OSSockOpt/#returns_413",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_table_list",
            "text": "[Source]  fun box ip_fw_table_list()\n: I32 val",
            "title": "ip_fw_table_list"
        },
        {
            "location": "/net-OSSockOpt/#returns_414",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_fw_zero",
            "text": "[Source]  fun box ip_fw_zero()\n: I32 val",
            "title": "ip_fw_zero"
        },
        {
            "location": "/net-OSSockOpt/#returns_415",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_hdrincl",
            "text": "[Source]  fun box ip_hdrincl()\n: I32 val",
            "title": "ip_hdrincl"
        },
        {
            "location": "/net-OSSockOpt/#returns_416",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_ipsec_policy",
            "text": "[Source]  fun box ip_ipsec_policy()\n: I32 val",
            "title": "ip_ipsec_policy"
        },
        {
            "location": "/net-OSSockOpt/#returns_417",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_max_group_src_filter",
            "text": "[Source]  fun box ip_max_group_src_filter()\n: I32 val",
            "title": "ip_max_group_src_filter"
        },
        {
            "location": "/net-OSSockOpt/#returns_418",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_max_memberships",
            "text": "[Source]  fun box ip_max_memberships()\n: I32 val",
            "title": "ip_max_memberships"
        },
        {
            "location": "/net-OSSockOpt/#returns_419",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_max_sock_mute_filter",
            "text": "[Source]  fun box ip_max_sock_mute_filter()\n: I32 val",
            "title": "ip_max_sock_mute_filter"
        },
        {
            "location": "/net-OSSockOpt/#returns_420",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_max_sock_src_filter",
            "text": "[Source]  fun box ip_max_sock_src_filter()\n: I32 val",
            "title": "ip_max_sock_src_filter"
        },
        {
            "location": "/net-OSSockOpt/#returns_421",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_max_source_filter",
            "text": "[Source]  fun box ip_max_source_filter()\n: I32 val",
            "title": "ip_max_source_filter"
        },
        {
            "location": "/net-OSSockOpt/#returns_422",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_minttl",
            "text": "[Source]  fun box ip_minttl()\n: I32 val",
            "title": "ip_minttl"
        },
        {
            "location": "/net-OSSockOpt/#returns_423",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_min_memberships",
            "text": "[Source]  fun box ip_min_memberships()\n: I32 val",
            "title": "ip_min_memberships"
        },
        {
            "location": "/net-OSSockOpt/#returns_424",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_msfilter",
            "text": "[Source]  fun box ip_msfilter()\n: I32 val",
            "title": "ip_msfilter"
        },
        {
            "location": "/net-OSSockOpt/#returns_425",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_mtu",
            "text": "[Source]  fun box ip_mtu()\n: I32 val",
            "title": "ip_mtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_426",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_mtu_discover",
            "text": "[Source]  fun box ip_mtu_discover()\n: I32 val",
            "title": "ip_mtu_discover"
        },
        {
            "location": "/net-OSSockOpt/#returns_427",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_multicast_all",
            "text": "[Source]  fun box ip_multicast_all()\n: I32 val",
            "title": "ip_multicast_all"
        },
        {
            "location": "/net-OSSockOpt/#returns_428",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_multicast_if",
            "text": "[Source]  fun box ip_multicast_if()\n: I32 val",
            "title": "ip_multicast_if"
        },
        {
            "location": "/net-OSSockOpt/#returns_429",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_multicast_ifindex",
            "text": "[Source]  fun box ip_multicast_ifindex()\n: I32 val",
            "title": "ip_multicast_ifindex"
        },
        {
            "location": "/net-OSSockOpt/#returns_430",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_multicast_loop",
            "text": "[Source]  fun box ip_multicast_loop()\n: I32 val",
            "title": "ip_multicast_loop"
        },
        {
            "location": "/net-OSSockOpt/#returns_431",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_multicast_ttl",
            "text": "[Source]  fun box ip_multicast_ttl()\n: I32 val",
            "title": "ip_multicast_ttl"
        },
        {
            "location": "/net-OSSockOpt/#returns_432",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_multicast_vif",
            "text": "[Source]  fun box ip_multicast_vif()\n: I32 val",
            "title": "ip_multicast_vif"
        },
        {
            "location": "/net-OSSockOpt/#returns_433",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_nat_xxx",
            "text": "[Source]  fun box ip_nat_xxx()\n: I32 val",
            "title": "ip_nat_xxx"
        },
        {
            "location": "/net-OSSockOpt/#returns_434",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_nodefrag",
            "text": "[Source]  fun box ip_nodefrag()\n: I32 val",
            "title": "ip_nodefrag"
        },
        {
            "location": "/net-OSSockOpt/#returns_435",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_old_fw_add",
            "text": "[Source]  fun box ip_old_fw_add()\n: I32 val",
            "title": "ip_old_fw_add"
        },
        {
            "location": "/net-OSSockOpt/#returns_436",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_old_fw_del",
            "text": "[Source]  fun box ip_old_fw_del()\n: I32 val",
            "title": "ip_old_fw_del"
        },
        {
            "location": "/net-OSSockOpt/#returns_437",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_old_fw_flush",
            "text": "[Source]  fun box ip_old_fw_flush()\n: I32 val",
            "title": "ip_old_fw_flush"
        },
        {
            "location": "/net-OSSockOpt/#returns_438",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_old_fw_get",
            "text": "[Source]  fun box ip_old_fw_get()\n: I32 val",
            "title": "ip_old_fw_get"
        },
        {
            "location": "/net-OSSockOpt/#returns_439",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_old_fw_resetlog",
            "text": "[Source]  fun box ip_old_fw_resetlog()\n: I32 val",
            "title": "ip_old_fw_resetlog"
        },
        {
            "location": "/net-OSSockOpt/#returns_440",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_old_fw_zero",
            "text": "[Source]  fun box ip_old_fw_zero()\n: I32 val",
            "title": "ip_old_fw_zero"
        },
        {
            "location": "/net-OSSockOpt/#returns_441",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_onesbcast",
            "text": "[Source]  fun box ip_onesbcast()\n: I32 val",
            "title": "ip_onesbcast"
        },
        {
            "location": "/net-OSSockOpt/#returns_442",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_options",
            "text": "[Source]  fun box ip_options()\n: I32 val",
            "title": "ip_options"
        },
        {
            "location": "/net-OSSockOpt/#returns_443",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_origdstaddr",
            "text": "[Source]  fun box ip_origdstaddr()\n: I32 val",
            "title": "ip_origdstaddr"
        },
        {
            "location": "/net-OSSockOpt/#returns_444",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_passsec",
            "text": "[Source]  fun box ip_passsec()\n: I32 val",
            "title": "ip_passsec"
        },
        {
            "location": "/net-OSSockOpt/#returns_445",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_pktinfo",
            "text": "[Source]  fun box ip_pktinfo()\n: I32 val",
            "title": "ip_pktinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_446",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_pktoptions",
            "text": "[Source]  fun box ip_pktoptions()\n: I32 val",
            "title": "ip_pktoptions"
        },
        {
            "location": "/net-OSSockOpt/#returns_447",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_pmtudisc_do",
            "text": "[Source]  fun box ip_pmtudisc_do()\n: I32 val",
            "title": "ip_pmtudisc_do"
        },
        {
            "location": "/net-OSSockOpt/#returns_448",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_pmtudisc_dont",
            "text": "[Source]  fun box ip_pmtudisc_dont()\n: I32 val",
            "title": "ip_pmtudisc_dont"
        },
        {
            "location": "/net-OSSockOpt/#returns_449",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_pmtudisc_interface",
            "text": "[Source]  fun box ip_pmtudisc_interface()\n: I32 val",
            "title": "ip_pmtudisc_interface"
        },
        {
            "location": "/net-OSSockOpt/#returns_450",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_pmtudisc_omit",
            "text": "[Source]  fun box ip_pmtudisc_omit()\n: I32 val",
            "title": "ip_pmtudisc_omit"
        },
        {
            "location": "/net-OSSockOpt/#returns_451",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_pmtudisc_probe",
            "text": "[Source]  fun box ip_pmtudisc_probe()\n: I32 val",
            "title": "ip_pmtudisc_probe"
        },
        {
            "location": "/net-OSSockOpt/#returns_452",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_pmtudisc_want",
            "text": "[Source]  fun box ip_pmtudisc_want()\n: I32 val",
            "title": "ip_pmtudisc_want"
        },
        {
            "location": "/net-OSSockOpt/#returns_453",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_portrange",
            "text": "[Source]  fun box ip_portrange()\n: I32 val",
            "title": "ip_portrange"
        },
        {
            "location": "/net-OSSockOpt/#returns_454",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_portrange_default",
            "text": "[Source]  fun box ip_portrange_default()\n: I32 val",
            "title": "ip_portrange_default"
        },
        {
            "location": "/net-OSSockOpt/#returns_455",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_portrange_high",
            "text": "[Source]  fun box ip_portrange_high()\n: I32 val",
            "title": "ip_portrange_high"
        },
        {
            "location": "/net-OSSockOpt/#returns_456",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_portrange_low",
            "text": "[Source]  fun box ip_portrange_low()\n: I32 val",
            "title": "ip_portrange_low"
        },
        {
            "location": "/net-OSSockOpt/#returns_457",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_recvdstaddr",
            "text": "[Source]  fun box ip_recvdstaddr()\n: I32 val",
            "title": "ip_recvdstaddr"
        },
        {
            "location": "/net-OSSockOpt/#returns_458",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_recverr",
            "text": "[Source]  fun box ip_recverr()\n: I32 val",
            "title": "ip_recverr"
        },
        {
            "location": "/net-OSSockOpt/#returns_459",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_recvflowid",
            "text": "[Source]  fun box ip_recvflowid()\n: I32 val",
            "title": "ip_recvflowid"
        },
        {
            "location": "/net-OSSockOpt/#returns_460",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_recvif",
            "text": "[Source]  fun box ip_recvif()\n: I32 val",
            "title": "ip_recvif"
        },
        {
            "location": "/net-OSSockOpt/#returns_461",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_recvopts",
            "text": "[Source]  fun box ip_recvopts()\n: I32 val",
            "title": "ip_recvopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_462",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_recvorigdstaddr",
            "text": "[Source]  fun box ip_recvorigdstaddr()\n: I32 val",
            "title": "ip_recvorigdstaddr"
        },
        {
            "location": "/net-OSSockOpt/#returns_463",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_recvpktinfo",
            "text": "[Source]  fun box ip_recvpktinfo()\n: I32 val",
            "title": "ip_recvpktinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_464",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_recvretopts",
            "text": "[Source]  fun box ip_recvretopts()\n: I32 val",
            "title": "ip_recvretopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_465",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_recvrssbucketid",
            "text": "[Source]  fun box ip_recvrssbucketid()\n: I32 val",
            "title": "ip_recvrssbucketid"
        },
        {
            "location": "/net-OSSockOpt/#returns_466",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_recvtos",
            "text": "[Source]  fun box ip_recvtos()\n: I32 val",
            "title": "ip_recvtos"
        },
        {
            "location": "/net-OSSockOpt/#returns_467",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_recvttl",
            "text": "[Source]  fun box ip_recvttl()\n: I32 val",
            "title": "ip_recvttl"
        },
        {
            "location": "/net-OSSockOpt/#returns_468",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_retopts",
            "text": "[Source]  fun box ip_retopts()\n: I32 val",
            "title": "ip_retopts"
        },
        {
            "location": "/net-OSSockOpt/#returns_469",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_router_alert",
            "text": "[Source]  fun box ip_router_alert()\n: I32 val",
            "title": "ip_router_alert"
        },
        {
            "location": "/net-OSSockOpt/#returns_470",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_rssbucketid",
            "text": "[Source]  fun box ip_rssbucketid()\n: I32 val",
            "title": "ip_rssbucketid"
        },
        {
            "location": "/net-OSSockOpt/#returns_471",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_rss_listen_bucket",
            "text": "[Source]  fun box ip_rss_listen_bucket()\n: I32 val",
            "title": "ip_rss_listen_bucket"
        },
        {
            "location": "/net-OSSockOpt/#returns_472",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_rsvp_off",
            "text": "[Source]  fun box ip_rsvp_off()\n: I32 val",
            "title": "ip_rsvp_off"
        },
        {
            "location": "/net-OSSockOpt/#returns_473",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_rsvp_on",
            "text": "[Source]  fun box ip_rsvp_on()\n: I32 val",
            "title": "ip_rsvp_on"
        },
        {
            "location": "/net-OSSockOpt/#returns_474",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_rsvp_vif_off",
            "text": "[Source]  fun box ip_rsvp_vif_off()\n: I32 val",
            "title": "ip_rsvp_vif_off"
        },
        {
            "location": "/net-OSSockOpt/#returns_475",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_rsvp_vif_on",
            "text": "[Source]  fun box ip_rsvp_vif_on()\n: I32 val",
            "title": "ip_rsvp_vif_on"
        },
        {
            "location": "/net-OSSockOpt/#returns_476",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_sendsrcaddr",
            "text": "[Source]  fun box ip_sendsrcaddr()\n: I32 val",
            "title": "ip_sendsrcaddr"
        },
        {
            "location": "/net-OSSockOpt/#returns_477",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_striphdr",
            "text": "[Source]  fun box ip_striphdr()\n: I32 val",
            "title": "ip_striphdr"
        },
        {
            "location": "/net-OSSockOpt/#returns_478",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_tos",
            "text": "[Source]  fun box ip_tos()\n: I32 val",
            "title": "ip_tos"
        },
        {
            "location": "/net-OSSockOpt/#returns_479",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_traffic_mgt_background",
            "text": "[Source]  fun box ip_traffic_mgt_background()\n: I32 val",
            "title": "ip_traffic_mgt_background"
        },
        {
            "location": "/net-OSSockOpt/#returns_480",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_transparent",
            "text": "[Source]  fun box ip_transparent()\n: I32 val",
            "title": "ip_transparent"
        },
        {
            "location": "/net-OSSockOpt/#returns_481",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_ttl",
            "text": "[Source]  fun box ip_ttl()\n: I32 val",
            "title": "ip_ttl"
        },
        {
            "location": "/net-OSSockOpt/#returns_482",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_unblock_source",
            "text": "[Source]  fun box ip_unblock_source()\n: I32 val",
            "title": "ip_unblock_source"
        },
        {
            "location": "/net-OSSockOpt/#returns_483",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_unicast_if",
            "text": "[Source]  fun box ip_unicast_if()\n: I32 val",
            "title": "ip_unicast_if"
        },
        {
            "location": "/net-OSSockOpt/#returns_484",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ip_xfrm_policy",
            "text": "[Source]  fun box ip_xfrm_policy()\n: I32 val",
            "title": "ip_xfrm_policy"
        },
        {
            "location": "/net-OSSockOpt/#returns_485",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#local_connwait",
            "text": "[Source]  fun box local_connwait()\n: I32 val",
            "title": "local_connwait"
        },
        {
            "location": "/net-OSSockOpt/#returns_486",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#local_creds",
            "text": "[Source]  fun box local_creds()\n: I32 val",
            "title": "local_creds"
        },
        {
            "location": "/net-OSSockOpt/#returns_487",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#local_peercred",
            "text": "[Source]  fun box local_peercred()\n: I32 val",
            "title": "local_peercred"
        },
        {
            "location": "/net-OSSockOpt/#returns_488",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#local_peerepid",
            "text": "[Source]  fun box local_peerepid()\n: I32 val",
            "title": "local_peerepid"
        },
        {
            "location": "/net-OSSockOpt/#returns_489",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#local_peereuuid",
            "text": "[Source]  fun box local_peereuuid()\n: I32 val",
            "title": "local_peereuuid"
        },
        {
            "location": "/net-OSSockOpt/#returns_490",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#local_peerpid",
            "text": "[Source]  fun box local_peerpid()\n: I32 val",
            "title": "local_peerpid"
        },
        {
            "location": "/net-OSSockOpt/#returns_491",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#local_peeruuid",
            "text": "[Source]  fun box local_peeruuid()\n: I32 val",
            "title": "local_peeruuid"
        },
        {
            "location": "/net-OSSockOpt/#returns_492",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#local_vendor",
            "text": "[Source]  fun box local_vendor()\n: I32 val",
            "title": "local_vendor"
        },
        {
            "location": "/net-OSSockOpt/#returns_493",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#max_tcpoptlen",
            "text": "[Source]  fun box max_tcpoptlen()\n: I32 val",
            "title": "max_tcpoptlen"
        },
        {
            "location": "/net-OSSockOpt/#returns_494",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mcast_block_source",
            "text": "[Source]  fun box mcast_block_source()\n: I32 val",
            "title": "mcast_block_source"
        },
        {
            "location": "/net-OSSockOpt/#returns_495",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mcast_exclude",
            "text": "[Source]  fun box mcast_exclude()\n: I32 val",
            "title": "mcast_exclude"
        },
        {
            "location": "/net-OSSockOpt/#returns_496",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mcast_include",
            "text": "[Source]  fun box mcast_include()\n: I32 val",
            "title": "mcast_include"
        },
        {
            "location": "/net-OSSockOpt/#returns_497",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mcast_join_group",
            "text": "[Source]  fun box mcast_join_group()\n: I32 val",
            "title": "mcast_join_group"
        },
        {
            "location": "/net-OSSockOpt/#returns_498",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mcast_join_source_group",
            "text": "[Source]  fun box mcast_join_source_group()\n: I32 val",
            "title": "mcast_join_source_group"
        },
        {
            "location": "/net-OSSockOpt/#returns_499",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mcast_leave_group",
            "text": "[Source]  fun box mcast_leave_group()\n: I32 val",
            "title": "mcast_leave_group"
        },
        {
            "location": "/net-OSSockOpt/#returns_500",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mcast_leave_source_group",
            "text": "[Source]  fun box mcast_leave_source_group()\n: I32 val",
            "title": "mcast_leave_source_group"
        },
        {
            "location": "/net-OSSockOpt/#returns_501",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mcast_msfilter",
            "text": "[Source]  fun box mcast_msfilter()\n: I32 val",
            "title": "mcast_msfilter"
        },
        {
            "location": "/net-OSSockOpt/#returns_502",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mcast_unblock_source",
            "text": "[Source]  fun box mcast_unblock_source()\n: I32 val",
            "title": "mcast_unblock_source"
        },
        {
            "location": "/net-OSSockOpt/#returns_503",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mcast_undefined",
            "text": "[Source]  fun box mcast_undefined()\n: I32 val",
            "title": "mcast_undefined"
        },
        {
            "location": "/net-OSSockOpt/#returns_504",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_add_bw_upcall",
            "text": "[Source]  fun box mrt_add_bw_upcall()\n: I32 val",
            "title": "mrt_add_bw_upcall"
        },
        {
            "location": "/net-OSSockOpt/#returns_505",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_add_mfc",
            "text": "[Source]  fun box mrt_add_mfc()\n: I32 val",
            "title": "mrt_add_mfc"
        },
        {
            "location": "/net-OSSockOpt/#returns_506",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_add_vif",
            "text": "[Source]  fun box mrt_add_vif()\n: I32 val",
            "title": "mrt_add_vif"
        },
        {
            "location": "/net-OSSockOpt/#returns_507",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_api_config",
            "text": "[Source]  fun box mrt_api_config()\n: I32 val",
            "title": "mrt_api_config"
        },
        {
            "location": "/net-OSSockOpt/#returns_508",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_api_flags_all",
            "text": "[Source]  fun box mrt_api_flags_all()\n: I32 val",
            "title": "mrt_api_flags_all"
        },
        {
            "location": "/net-OSSockOpt/#returns_509",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_api_support",
            "text": "[Source]  fun box mrt_api_support()\n: I32 val",
            "title": "mrt_api_support"
        },
        {
            "location": "/net-OSSockOpt/#returns_510",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_assert",
            "text": "[Source]  fun box mrt_assert()\n: I32 val",
            "title": "mrt_assert"
        },
        {
            "location": "/net-OSSockOpt/#returns_511",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_del_bw_upcall",
            "text": "[Source]  fun box mrt_del_bw_upcall()\n: I32 val",
            "title": "mrt_del_bw_upcall"
        },
        {
            "location": "/net-OSSockOpt/#returns_512",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_del_mfc",
            "text": "[Source]  fun box mrt_del_mfc()\n: I32 val",
            "title": "mrt_del_mfc"
        },
        {
            "location": "/net-OSSockOpt/#returns_513",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_del_vif",
            "text": "[Source]  fun box mrt_del_vif()\n: I32 val",
            "title": "mrt_del_vif"
        },
        {
            "location": "/net-OSSockOpt/#returns_514",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_done",
            "text": "[Source]  fun box mrt_done()\n: I32 val",
            "title": "mrt_done"
        },
        {
            "location": "/net-OSSockOpt/#returns_515",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_init",
            "text": "[Source]  fun box mrt_init()\n: I32 val",
            "title": "mrt_init"
        },
        {
            "location": "/net-OSSockOpt/#returns_516",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_mfc_bw_upcall",
            "text": "[Source]  fun box mrt_mfc_bw_upcall()\n: I32 val",
            "title": "mrt_mfc_bw_upcall"
        },
        {
            "location": "/net-OSSockOpt/#returns_517",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_mfc_flags_all",
            "text": "[Source]  fun box mrt_mfc_flags_all()\n: I32 val",
            "title": "mrt_mfc_flags_all"
        },
        {
            "location": "/net-OSSockOpt/#returns_518",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_mfc_flags_border_vif",
            "text": "[Source]  fun box mrt_mfc_flags_border_vif()\n: I32 val",
            "title": "mrt_mfc_flags_border_vif"
        },
        {
            "location": "/net-OSSockOpt/#returns_519",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_mfc_flags_disable_wrongvif",
            "text": "[Source]  fun box mrt_mfc_flags_disable_wrongvif()\n: I32 val",
            "title": "mrt_mfc_flags_disable_wrongvif"
        },
        {
            "location": "/net-OSSockOpt/#returns_520",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_mfc_rp",
            "text": "[Source]  fun box mrt_mfc_rp()\n: I32 val",
            "title": "mrt_mfc_rp"
        },
        {
            "location": "/net-OSSockOpt/#returns_521",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_pim",
            "text": "[Source]  fun box mrt_pim()\n: I32 val",
            "title": "mrt_pim"
        },
        {
            "location": "/net-OSSockOpt/#returns_522",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#mrt_version",
            "text": "[Source]  fun box mrt_version()\n: I32 val",
            "title": "mrt_version"
        },
        {
            "location": "/net-OSSockOpt/#returns_523",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#msg_notification",
            "text": "[Source]  fun box msg_notification()\n: I32 val",
            "title": "msg_notification"
        },
        {
            "location": "/net-OSSockOpt/#returns_524",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#msg_socallbck",
            "text": "[Source]  fun box msg_socallbck()\n: I32 val",
            "title": "msg_socallbck"
        },
        {
            "location": "/net-OSSockOpt/#returns_525",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ndrvproto_ndrv",
            "text": "[Source]  fun box ndrvproto_ndrv()\n: I32 val",
            "title": "ndrvproto_ndrv"
        },
        {
            "location": "/net-OSSockOpt/#returns_526",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ndrv_addmulticast",
            "text": "[Source]  fun box ndrv_addmulticast()\n: I32 val",
            "title": "ndrv_addmulticast"
        },
        {
            "location": "/net-OSSockOpt/#returns_527",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ndrv_deldmxspec",
            "text": "[Source]  fun box ndrv_deldmxspec()\n: I32 val",
            "title": "ndrv_deldmxspec"
        },
        {
            "location": "/net-OSSockOpt/#returns_528",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ndrv_delmulticast",
            "text": "[Source]  fun box ndrv_delmulticast()\n: I32 val",
            "title": "ndrv_delmulticast"
        },
        {
            "location": "/net-OSSockOpt/#returns_529",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ndrv_demuxtype_ethertype",
            "text": "[Source]  fun box ndrv_demuxtype_ethertype()\n: I32 val",
            "title": "ndrv_demuxtype_ethertype"
        },
        {
            "location": "/net-OSSockOpt/#returns_530",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ndrv_demuxtype_sap",
            "text": "[Source]  fun box ndrv_demuxtype_sap()\n: I32 val",
            "title": "ndrv_demuxtype_sap"
        },
        {
            "location": "/net-OSSockOpt/#returns_531",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ndrv_demuxtype_snap",
            "text": "[Source]  fun box ndrv_demuxtype_snap()\n: I32 val",
            "title": "ndrv_demuxtype_snap"
        },
        {
            "location": "/net-OSSockOpt/#returns_532",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ndrv_dmux_max_descr",
            "text": "[Source]  fun box ndrv_dmux_max_descr()\n: I32 val",
            "title": "ndrv_dmux_max_descr"
        },
        {
            "location": "/net-OSSockOpt/#returns_533",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ndrv_protocol_desc_vers",
            "text": "[Source]  fun box ndrv_protocol_desc_vers()\n: I32 val",
            "title": "ndrv_protocol_desc_vers"
        },
        {
            "location": "/net-OSSockOpt/#returns_534",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ndrv_setdmxspec",
            "text": "[Source]  fun box ndrv_setdmxspec()\n: I32 val",
            "title": "ndrv_setdmxspec"
        },
        {
            "location": "/net-OSSockOpt/#returns_535",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_add_membership",
            "text": "[Source]  fun box netlink_add_membership()\n: I32 val",
            "title": "netlink_add_membership"
        },
        {
            "location": "/net-OSSockOpt/#returns_536",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_audit",
            "text": "[Source]  fun box netlink_audit()\n: I32 val",
            "title": "netlink_audit"
        },
        {
            "location": "/net-OSSockOpt/#returns_537",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_broadcast_error",
            "text": "[Source]  fun box netlink_broadcast_error()\n: I32 val",
            "title": "netlink_broadcast_error"
        },
        {
            "location": "/net-OSSockOpt/#returns_538",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_cap_ack",
            "text": "[Source]  fun box netlink_cap_ack()\n: I32 val",
            "title": "netlink_cap_ack"
        },
        {
            "location": "/net-OSSockOpt/#returns_539",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_connector",
            "text": "[Source]  fun box netlink_connector()\n: I32 val",
            "title": "netlink_connector"
        },
        {
            "location": "/net-OSSockOpt/#returns_540",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_crypto",
            "text": "[Source]  fun box netlink_crypto()\n: I32 val",
            "title": "netlink_crypto"
        },
        {
            "location": "/net-OSSockOpt/#returns_541",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_dnrtmsg",
            "text": "[Source]  fun box netlink_dnrtmsg()\n: I32 val",
            "title": "netlink_dnrtmsg"
        },
        {
            "location": "/net-OSSockOpt/#returns_542",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_drop_membership",
            "text": "[Source]  fun box netlink_drop_membership()\n: I32 val",
            "title": "netlink_drop_membership"
        },
        {
            "location": "/net-OSSockOpt/#returns_543",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_ecryptfs",
            "text": "[Source]  fun box netlink_ecryptfs()\n: I32 val",
            "title": "netlink_ecryptfs"
        },
        {
            "location": "/net-OSSockOpt/#returns_544",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_fib_lookup",
            "text": "[Source]  fun box netlink_fib_lookup()\n: I32 val",
            "title": "netlink_fib_lookup"
        },
        {
            "location": "/net-OSSockOpt/#returns_545",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_firewall",
            "text": "[Source]  fun box netlink_firewall()\n: I32 val",
            "title": "netlink_firewall"
        },
        {
            "location": "/net-OSSockOpt/#returns_546",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_generic",
            "text": "[Source]  fun box netlink_generic()\n: I32 val",
            "title": "netlink_generic"
        },
        {
            "location": "/net-OSSockOpt/#returns_547",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_inet_diag",
            "text": "[Source]  fun box netlink_inet_diag()\n: I32 val",
            "title": "netlink_inet_diag"
        },
        {
            "location": "/net-OSSockOpt/#returns_548",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_ip6_fw",
            "text": "[Source]  fun box netlink_ip6_fw()\n: I32 val",
            "title": "netlink_ip6_fw"
        },
        {
            "location": "/net-OSSockOpt/#returns_549",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_iscsi",
            "text": "[Source]  fun box netlink_iscsi()\n: I32 val",
            "title": "netlink_iscsi"
        },
        {
            "location": "/net-OSSockOpt/#returns_550",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_kobject_uevent",
            "text": "[Source]  fun box netlink_kobject_uevent()\n: I32 val",
            "title": "netlink_kobject_uevent"
        },
        {
            "location": "/net-OSSockOpt/#returns_551",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_listen_all_nsid",
            "text": "[Source]  fun box netlink_listen_all_nsid()\n: I32 val",
            "title": "netlink_listen_all_nsid"
        },
        {
            "location": "/net-OSSockOpt/#returns_552",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_list_memberships",
            "text": "[Source]  fun box netlink_list_memberships()\n: I32 val",
            "title": "netlink_list_memberships"
        },
        {
            "location": "/net-OSSockOpt/#returns_553",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_netfilter",
            "text": "[Source]  fun box netlink_netfilter()\n: I32 val",
            "title": "netlink_netfilter"
        },
        {
            "location": "/net-OSSockOpt/#returns_554",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_nflog",
            "text": "[Source]  fun box netlink_nflog()\n: I32 val",
            "title": "netlink_nflog"
        },
        {
            "location": "/net-OSSockOpt/#returns_555",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_no_enobufs",
            "text": "[Source]  fun box netlink_no_enobufs()\n: I32 val",
            "title": "netlink_no_enobufs"
        },
        {
            "location": "/net-OSSockOpt/#returns_556",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_pktinfo",
            "text": "[Source]  fun box netlink_pktinfo()\n: I32 val",
            "title": "netlink_pktinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_557",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_rdma",
            "text": "[Source]  fun box netlink_rdma()\n: I32 val",
            "title": "netlink_rdma"
        },
        {
            "location": "/net-OSSockOpt/#returns_558",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_route",
            "text": "[Source]  fun box netlink_route()\n: I32 val",
            "title": "netlink_route"
        },
        {
            "location": "/net-OSSockOpt/#returns_559",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_rx_ring",
            "text": "[Source]  fun box netlink_rx_ring()\n: I32 val",
            "title": "netlink_rx_ring"
        },
        {
            "location": "/net-OSSockOpt/#returns_560",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_scsitransport",
            "text": "[Source]  fun box netlink_scsitransport()\n: I32 val",
            "title": "netlink_scsitransport"
        },
        {
            "location": "/net-OSSockOpt/#returns_561",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_selinux",
            "text": "[Source]  fun box netlink_selinux()\n: I32 val",
            "title": "netlink_selinux"
        },
        {
            "location": "/net-OSSockOpt/#returns_562",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_sock_diag",
            "text": "[Source]  fun box netlink_sock_diag()\n: I32 val",
            "title": "netlink_sock_diag"
        },
        {
            "location": "/net-OSSockOpt/#returns_563",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_tx_ring",
            "text": "[Source]  fun box netlink_tx_ring()\n: I32 val",
            "title": "netlink_tx_ring"
        },
        {
            "location": "/net-OSSockOpt/#returns_564",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_unused",
            "text": "[Source]  fun box netlink_unused()\n: I32 val",
            "title": "netlink_unused"
        },
        {
            "location": "/net-OSSockOpt/#returns_565",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_usersock",
            "text": "[Source]  fun box netlink_usersock()\n: I32 val",
            "title": "netlink_usersock"
        },
        {
            "location": "/net-OSSockOpt/#returns_566",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netlink_xfrm",
            "text": "[Source]  fun box netlink_xfrm()\n: I32 val",
            "title": "netlink_xfrm"
        },
        {
            "location": "/net-OSSockOpt/#returns_567",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netrom_idle",
            "text": "[Source]  fun box netrom_idle()\n: I32 val",
            "title": "netrom_idle"
        },
        {
            "location": "/net-OSSockOpt/#returns_568",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netrom_kill",
            "text": "[Source]  fun box netrom_kill()\n: I32 val",
            "title": "netrom_kill"
        },
        {
            "location": "/net-OSSockOpt/#returns_569",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netrom_n2",
            "text": "[Source]  fun box netrom_n2()\n: I32 val",
            "title": "netrom_n2"
        },
        {
            "location": "/net-OSSockOpt/#returns_570",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netrom_neigh",
            "text": "[Source]  fun box netrom_neigh()\n: I32 val",
            "title": "netrom_neigh"
        },
        {
            "location": "/net-OSSockOpt/#returns_571",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netrom_node",
            "text": "[Source]  fun box netrom_node()\n: I32 val",
            "title": "netrom_node"
        },
        {
            "location": "/net-OSSockOpt/#returns_572",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netrom_paclen",
            "text": "[Source]  fun box netrom_paclen()\n: I32 val",
            "title": "netrom_paclen"
        },
        {
            "location": "/net-OSSockOpt/#returns_573",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netrom_t1",
            "text": "[Source]  fun box netrom_t1()\n: I32 val",
            "title": "netrom_t1"
        },
        {
            "location": "/net-OSSockOpt/#returns_574",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netrom_t2",
            "text": "[Source]  fun box netrom_t2()\n: I32 val",
            "title": "netrom_t2"
        },
        {
            "location": "/net-OSSockOpt/#returns_575",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#netrom_t4",
            "text": "[Source]  fun box netrom_t4()\n: I32 val",
            "title": "netrom_t4"
        },
        {
            "location": "/net-OSSockOpt/#returns_576",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#nrdv_multicast_addrs_per_sock",
            "text": "[Source]  fun box nrdv_multicast_addrs_per_sock()\n: I32 val",
            "title": "nrdv_multicast_addrs_per_sock"
        },
        {
            "location": "/net-OSSockOpt/#returns_577",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#pvd_config",
            "text": "[Source]  fun box pvd_config()\n: I32 val",
            "title": "pvd_config"
        },
        {
            "location": "/net-OSSockOpt/#returns_578",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cancel_sent_to",
            "text": "[Source]  fun box rds_cancel_sent_to()\n: I32 val",
            "title": "rds_cancel_sent_to"
        },
        {
            "location": "/net-OSSockOpt/#returns_579",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cmsg_atomic_cswp",
            "text": "[Source]  fun box rds_cmsg_atomic_cswp()\n: I32 val",
            "title": "rds_cmsg_atomic_cswp"
        },
        {
            "location": "/net-OSSockOpt/#returns_580",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cmsg_atomic_fadd",
            "text": "[Source]  fun box rds_cmsg_atomic_fadd()\n: I32 val",
            "title": "rds_cmsg_atomic_fadd"
        },
        {
            "location": "/net-OSSockOpt/#returns_581",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cmsg_cong_update",
            "text": "[Source]  fun box rds_cmsg_cong_update()\n: I32 val",
            "title": "rds_cmsg_cong_update"
        },
        {
            "location": "/net-OSSockOpt/#returns_582",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cmsg_masked_atomic_cswp",
            "text": "[Source]  fun box rds_cmsg_masked_atomic_cswp()\n: I32 val",
            "title": "rds_cmsg_masked_atomic_cswp"
        },
        {
            "location": "/net-OSSockOpt/#returns_583",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cmsg_masked_atomic_fadd",
            "text": "[Source]  fun box rds_cmsg_masked_atomic_fadd()\n: I32 val",
            "title": "rds_cmsg_masked_atomic_fadd"
        },
        {
            "location": "/net-OSSockOpt/#returns_584",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cmsg_rdma_args",
            "text": "[Source]  fun box rds_cmsg_rdma_args()\n: I32 val",
            "title": "rds_cmsg_rdma_args"
        },
        {
            "location": "/net-OSSockOpt/#returns_585",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cmsg_rdma_dest",
            "text": "[Source]  fun box rds_cmsg_rdma_dest()\n: I32 val",
            "title": "rds_cmsg_rdma_dest"
        },
        {
            "location": "/net-OSSockOpt/#returns_586",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cmsg_rdma_map",
            "text": "[Source]  fun box rds_cmsg_rdma_map()\n: I32 val",
            "title": "rds_cmsg_rdma_map"
        },
        {
            "location": "/net-OSSockOpt/#returns_587",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cmsg_rdma_status",
            "text": "[Source]  fun box rds_cmsg_rdma_status()\n: I32 val",
            "title": "rds_cmsg_rdma_status"
        },
        {
            "location": "/net-OSSockOpt/#returns_588",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cong_monitor",
            "text": "[Source]  fun box rds_cong_monitor()\n: I32 val",
            "title": "rds_cong_monitor"
        },
        {
            "location": "/net-OSSockOpt/#returns_589",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_cong_monitor_size",
            "text": "[Source]  fun box rds_cong_monitor_size()\n: I32 val",
            "title": "rds_cong_monitor_size"
        },
        {
            "location": "/net-OSSockOpt/#returns_590",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_free_mr",
            "text": "[Source]  fun box rds_free_mr()\n: I32 val",
            "title": "rds_free_mr"
        },
        {
            "location": "/net-OSSockOpt/#returns_591",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_get_mr",
            "text": "[Source]  fun box rds_get_mr()\n: I32 val",
            "title": "rds_get_mr"
        },
        {
            "location": "/net-OSSockOpt/#returns_592",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_get_mr_for_dest",
            "text": "[Source]  fun box rds_get_mr_for_dest()\n: I32 val",
            "title": "rds_get_mr_for_dest"
        },
        {
            "location": "/net-OSSockOpt/#returns_593",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_ib_abi_version",
            "text": "[Source]  fun box rds_ib_abi_version()\n: I32 val",
            "title": "rds_ib_abi_version"
        },
        {
            "location": "/net-OSSockOpt/#returns_594",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_ib_gid_len",
            "text": "[Source]  fun box rds_ib_gid_len()\n: I32 val",
            "title": "rds_ib_gid_len"
        },
        {
            "location": "/net-OSSockOpt/#returns_595",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_connections",
            "text": "[Source]  fun box rds_info_connections()\n: I32 val",
            "title": "rds_info_connections"
        },
        {
            "location": "/net-OSSockOpt/#returns_596",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_connection_flag_connected",
            "text": "[Source]  fun box rds_info_connection_flag_connected()\n: I32 val",
            "title": "rds_info_connection_flag_connected"
        },
        {
            "location": "/net-OSSockOpt/#returns_597",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_connection_flag_connecting",
            "text": "[Source]  fun box rds_info_connection_flag_connecting()\n: I32 val",
            "title": "rds_info_connection_flag_connecting"
        },
        {
            "location": "/net-OSSockOpt/#returns_598",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_connection_flag_sending",
            "text": "[Source]  fun box rds_info_connection_flag_sending()\n: I32 val",
            "title": "rds_info_connection_flag_sending"
        },
        {
            "location": "/net-OSSockOpt/#returns_599",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_connection_stats",
            "text": "[Source]  fun box rds_info_connection_stats()\n: I32 val",
            "title": "rds_info_connection_stats"
        },
        {
            "location": "/net-OSSockOpt/#returns_600",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_counters",
            "text": "[Source]  fun box rds_info_counters()\n: I32 val",
            "title": "rds_info_counters"
        },
        {
            "location": "/net-OSSockOpt/#returns_601",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_first",
            "text": "[Source]  fun box rds_info_first()\n: I32 val",
            "title": "rds_info_first"
        },
        {
            "location": "/net-OSSockOpt/#returns_602",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_ib_connections",
            "text": "[Source]  fun box rds_info_ib_connections()\n: I32 val",
            "title": "rds_info_ib_connections"
        },
        {
            "location": "/net-OSSockOpt/#returns_603",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_iwarp_connections",
            "text": "[Source]  fun box rds_info_iwarp_connections()\n: I32 val",
            "title": "rds_info_iwarp_connections"
        },
        {
            "location": "/net-OSSockOpt/#returns_604",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_last",
            "text": "[Source]  fun box rds_info_last()\n: I32 val",
            "title": "rds_info_last"
        },
        {
            "location": "/net-OSSockOpt/#returns_605",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_message_flag_ack",
            "text": "[Source]  fun box rds_info_message_flag_ack()\n: I32 val",
            "title": "rds_info_message_flag_ack"
        },
        {
            "location": "/net-OSSockOpt/#returns_606",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_message_flag_fast_ack",
            "text": "[Source]  fun box rds_info_message_flag_fast_ack()\n: I32 val",
            "title": "rds_info_message_flag_fast_ack"
        },
        {
            "location": "/net-OSSockOpt/#returns_607",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_recv_messages",
            "text": "[Source]  fun box rds_info_recv_messages()\n: I32 val",
            "title": "rds_info_recv_messages"
        },
        {
            "location": "/net-OSSockOpt/#returns_608",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_retrans_messages",
            "text": "[Source]  fun box rds_info_retrans_messages()\n: I32 val",
            "title": "rds_info_retrans_messages"
        },
        {
            "location": "/net-OSSockOpt/#returns_609",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_send_messages",
            "text": "[Source]  fun box rds_info_send_messages()\n: I32 val",
            "title": "rds_info_send_messages"
        },
        {
            "location": "/net-OSSockOpt/#returns_610",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_sockets",
            "text": "[Source]  fun box rds_info_sockets()\n: I32 val",
            "title": "rds_info_sockets"
        },
        {
            "location": "/net-OSSockOpt/#returns_611",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_info_tcp_sockets",
            "text": "[Source]  fun box rds_info_tcp_sockets()\n: I32 val",
            "title": "rds_info_tcp_sockets"
        },
        {
            "location": "/net-OSSockOpt/#returns_612",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_canceled",
            "text": "[Source]  fun box rds_rdma_canceled()\n: I32 val",
            "title": "rds_rdma_canceled"
        },
        {
            "location": "/net-OSSockOpt/#returns_613",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_dontwait",
            "text": "[Source]  fun box rds_rdma_dontwait()\n: I32 val",
            "title": "rds_rdma_dontwait"
        },
        {
            "location": "/net-OSSockOpt/#returns_614",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_dropped",
            "text": "[Source]  fun box rds_rdma_dropped()\n: I32 val",
            "title": "rds_rdma_dropped"
        },
        {
            "location": "/net-OSSockOpt/#returns_615",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_fence",
            "text": "[Source]  fun box rds_rdma_fence()\n: I32 val",
            "title": "rds_rdma_fence"
        },
        {
            "location": "/net-OSSockOpt/#returns_616",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_invalidate",
            "text": "[Source]  fun box rds_rdma_invalidate()\n: I32 val",
            "title": "rds_rdma_invalidate"
        },
        {
            "location": "/net-OSSockOpt/#returns_617",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_notify_me",
            "text": "[Source]  fun box rds_rdma_notify_me()\n: I32 val",
            "title": "rds_rdma_notify_me"
        },
        {
            "location": "/net-OSSockOpt/#returns_618",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_other_error",
            "text": "[Source]  fun box rds_rdma_other_error()\n: I32 val",
            "title": "rds_rdma_other_error"
        },
        {
            "location": "/net-OSSockOpt/#returns_619",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_readwrite",
            "text": "[Source]  fun box rds_rdma_readwrite()\n: I32 val",
            "title": "rds_rdma_readwrite"
        },
        {
            "location": "/net-OSSockOpt/#returns_620",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_remote_error",
            "text": "[Source]  fun box rds_rdma_remote_error()\n: I32 val",
            "title": "rds_rdma_remote_error"
        },
        {
            "location": "/net-OSSockOpt/#returns_621",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_silent",
            "text": "[Source]  fun box rds_rdma_silent()\n: I32 val",
            "title": "rds_rdma_silent"
        },
        {
            "location": "/net-OSSockOpt/#returns_622",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_success",
            "text": "[Source]  fun box rds_rdma_success()\n: I32 val",
            "title": "rds_rdma_success"
        },
        {
            "location": "/net-OSSockOpt/#returns_623",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_rdma_use_once",
            "text": "[Source]  fun box rds_rdma_use_once()\n: I32 val",
            "title": "rds_rdma_use_once"
        },
        {
            "location": "/net-OSSockOpt/#returns_624",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_recverr",
            "text": "[Source]  fun box rds_recverr()\n: I32 val",
            "title": "rds_recverr"
        },
        {
            "location": "/net-OSSockOpt/#returns_625",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_trans_count",
            "text": "[Source]  fun box rds_trans_count()\n: I32 val",
            "title": "rds_trans_count"
        },
        {
            "location": "/net-OSSockOpt/#returns_626",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_trans_ib",
            "text": "[Source]  fun box rds_trans_ib()\n: I32 val",
            "title": "rds_trans_ib"
        },
        {
            "location": "/net-OSSockOpt/#returns_627",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_trans_iwarp",
            "text": "[Source]  fun box rds_trans_iwarp()\n: I32 val",
            "title": "rds_trans_iwarp"
        },
        {
            "location": "/net-OSSockOpt/#returns_628",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_trans_none",
            "text": "[Source]  fun box rds_trans_none()\n: I32 val",
            "title": "rds_trans_none"
        },
        {
            "location": "/net-OSSockOpt/#returns_629",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rds_trans_tcp",
            "text": "[Source]  fun box rds_trans_tcp()\n: I32 val",
            "title": "rds_trans_tcp"
        },
        {
            "location": "/net-OSSockOpt/#returns_630",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_access_barred",
            "text": "[Source]  fun box rose_access_barred()\n: I32 val",
            "title": "rose_access_barred"
        },
        {
            "location": "/net-OSSockOpt/#returns_631",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_defer",
            "text": "[Source]  fun box rose_defer()\n: I32 val",
            "title": "rose_defer"
        },
        {
            "location": "/net-OSSockOpt/#returns_632",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_dte_originated",
            "text": "[Source]  fun box rose_dte_originated()\n: I32 val",
            "title": "rose_dte_originated"
        },
        {
            "location": "/net-OSSockOpt/#returns_633",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_holdback",
            "text": "[Source]  fun box rose_holdback()\n: I32 val",
            "title": "rose_holdback"
        },
        {
            "location": "/net-OSSockOpt/#returns_634",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_idle",
            "text": "[Source]  fun box rose_idle()\n: I32 val",
            "title": "rose_idle"
        },
        {
            "location": "/net-OSSockOpt/#returns_635",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_invalid_facility",
            "text": "[Source]  fun box rose_invalid_facility()\n: I32 val",
            "title": "rose_invalid_facility"
        },
        {
            "location": "/net-OSSockOpt/#returns_636",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_local_procedure",
            "text": "[Source]  fun box rose_local_procedure()\n: I32 val",
            "title": "rose_local_procedure"
        },
        {
            "location": "/net-OSSockOpt/#returns_637",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_max_digis",
            "text": "[Source]  fun box rose_max_digis()\n: I32 val",
            "title": "rose_max_digis"
        },
        {
            "location": "/net-OSSockOpt/#returns_638",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_mtu",
            "text": "[Source]  fun box rose_mtu()\n: I32 val",
            "title": "rose_mtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_639",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_network_congestion",
            "text": "[Source]  fun box rose_network_congestion()\n: I32 val",
            "title": "rose_network_congestion"
        },
        {
            "location": "/net-OSSockOpt/#returns_640",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_not_obtainable",
            "text": "[Source]  fun box rose_not_obtainable()\n: I32 val",
            "title": "rose_not_obtainable"
        },
        {
            "location": "/net-OSSockOpt/#returns_641",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_number_busy",
            "text": "[Source]  fun box rose_number_busy()\n: I32 val",
            "title": "rose_number_busy"
        },
        {
            "location": "/net-OSSockOpt/#returns_642",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_out_of_order",
            "text": "[Source]  fun box rose_out_of_order()\n: I32 val",
            "title": "rose_out_of_order"
        },
        {
            "location": "/net-OSSockOpt/#returns_643",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_qbitincl",
            "text": "[Source]  fun box rose_qbitincl()\n: I32 val",
            "title": "rose_qbitincl"
        },
        {
            "location": "/net-OSSockOpt/#returns_644",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_remote_procedure",
            "text": "[Source]  fun box rose_remote_procedure()\n: I32 val",
            "title": "rose_remote_procedure"
        },
        {
            "location": "/net-OSSockOpt/#returns_645",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_ship_absent",
            "text": "[Source]  fun box rose_ship_absent()\n: I32 val",
            "title": "rose_ship_absent"
        },
        {
            "location": "/net-OSSockOpt/#returns_646",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_t1",
            "text": "[Source]  fun box rose_t1()\n: I32 val",
            "title": "rose_t1"
        },
        {
            "location": "/net-OSSockOpt/#returns_647",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_t2",
            "text": "[Source]  fun box rose_t2()\n: I32 val",
            "title": "rose_t2"
        },
        {
            "location": "/net-OSSockOpt/#returns_648",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#rose_t3",
            "text": "[Source]  fun box rose_t3()\n: I32 val",
            "title": "rose_t3"
        },
        {
            "location": "/net-OSSockOpt/#returns_649",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#scm_hci_raw_direction",
            "text": "[Source]  fun box scm_hci_raw_direction()\n: I32 val",
            "title": "scm_hci_raw_direction"
        },
        {
            "location": "/net-OSSockOpt/#returns_650",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#scm_timestamp",
            "text": "[Source]  fun box scm_timestamp()\n: I32 val",
            "title": "scm_timestamp"
        },
        {
            "location": "/net-OSSockOpt/#returns_651",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#scm_timestamping",
            "text": "[Source]  fun box scm_timestamping()\n: I32 val",
            "title": "scm_timestamping"
        },
        {
            "location": "/net-OSSockOpt/#returns_652",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#scm_timestampns",
            "text": "[Source]  fun box scm_timestampns()\n: I32 val",
            "title": "scm_timestampns"
        },
        {
            "location": "/net-OSSockOpt/#returns_653",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#scm_wifi_status",
            "text": "[Source]  fun box scm_wifi_status()\n: I32 val",
            "title": "scm_wifi_status"
        },
        {
            "location": "/net-OSSockOpt/#returns_654",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_abort_association",
            "text": "[Source]  fun box sctp_abort_association()\n: I32 val",
            "title": "sctp_abort_association"
        },
        {
            "location": "/net-OSSockOpt/#returns_655",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_adaptation_layer",
            "text": "[Source]  fun box sctp_adaptation_layer()\n: I32 val",
            "title": "sctp_adaptation_layer"
        },
        {
            "location": "/net-OSSockOpt/#returns_656",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_adaption_layer",
            "text": "[Source]  fun box sctp_adaption_layer()\n: I32 val",
            "title": "sctp_adaption_layer"
        },
        {
            "location": "/net-OSSockOpt/#returns_657",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_add_streams",
            "text": "[Source]  fun box sctp_add_streams()\n: I32 val",
            "title": "sctp_add_streams"
        },
        {
            "location": "/net-OSSockOpt/#returns_658",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_add_vrf_id",
            "text": "[Source]  fun box sctp_add_vrf_id()\n: I32 val",
            "title": "sctp_add_vrf_id"
        },
        {
            "location": "/net-OSSockOpt/#returns_659",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_asconf",
            "text": "[Source]  fun box sctp_asconf()\n: I32 val",
            "title": "sctp_asconf"
        },
        {
            "location": "/net-OSSockOpt/#returns_660",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_asconf_ack",
            "text": "[Source]  fun box sctp_asconf_ack()\n: I32 val",
            "title": "sctp_asconf_ack"
        },
        {
            "location": "/net-OSSockOpt/#returns_661",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_asconf_supported",
            "text": "[Source]  fun box sctp_asconf_supported()\n: I32 val",
            "title": "sctp_asconf_supported"
        },
        {
            "location": "/net-OSSockOpt/#returns_662",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_associnfo",
            "text": "[Source]  fun box sctp_associnfo()\n: I32 val",
            "title": "sctp_associnfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_663",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_authentication",
            "text": "[Source]  fun box sctp_authentication()\n: I32 val",
            "title": "sctp_authentication"
        },
        {
            "location": "/net-OSSockOpt/#returns_664",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_auth_active_key",
            "text": "[Source]  fun box sctp_auth_active_key()\n: I32 val",
            "title": "sctp_auth_active_key"
        },
        {
            "location": "/net-OSSockOpt/#returns_665",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_auth_chunk",
            "text": "[Source]  fun box sctp_auth_chunk()\n: I32 val",
            "title": "sctp_auth_chunk"
        },
        {
            "location": "/net-OSSockOpt/#returns_666",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_auth_deactivate_key",
            "text": "[Source]  fun box sctp_auth_deactivate_key()\n: I32 val",
            "title": "sctp_auth_deactivate_key"
        },
        {
            "location": "/net-OSSockOpt/#returns_667",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_auth_delete_key",
            "text": "[Source]  fun box sctp_auth_delete_key()\n: I32 val",
            "title": "sctp_auth_delete_key"
        },
        {
            "location": "/net-OSSockOpt/#returns_668",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_auth_key",
            "text": "[Source]  fun box sctp_auth_key()\n: I32 val",
            "title": "sctp_auth_key"
        },
        {
            "location": "/net-OSSockOpt/#returns_669",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_auth_supported",
            "text": "[Source]  fun box sctp_auth_supported()\n: I32 val",
            "title": "sctp_auth_supported"
        },
        {
            "location": "/net-OSSockOpt/#returns_670",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_autoclose",
            "text": "[Source]  fun box sctp_autoclose()\n: I32 val",
            "title": "sctp_autoclose"
        },
        {
            "location": "/net-OSSockOpt/#returns_671",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_auto_asconf",
            "text": "[Source]  fun box sctp_auto_asconf()\n: I32 val",
            "title": "sctp_auto_asconf"
        },
        {
            "location": "/net-OSSockOpt/#returns_672",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_badcrc",
            "text": "[Source]  fun box sctp_badcrc()\n: I32 val",
            "title": "sctp_badcrc"
        },
        {
            "location": "/net-OSSockOpt/#returns_673",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_bindx_add_addr",
            "text": "[Source]  fun box sctp_bindx_add_addr()\n: I32 val",
            "title": "sctp_bindx_add_addr"
        },
        {
            "location": "/net-OSSockOpt/#returns_674",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_bindx_rem_addr",
            "text": "[Source]  fun box sctp_bindx_rem_addr()\n: I32 val",
            "title": "sctp_bindx_rem_addr"
        },
        {
            "location": "/net-OSSockOpt/#returns_675",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_blk_logging_enable",
            "text": "[Source]  fun box sctp_blk_logging_enable()\n: I32 val",
            "title": "sctp_blk_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_676",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_bound",
            "text": "[Source]  fun box sctp_bound()\n: I32 val",
            "title": "sctp_bound"
        },
        {
            "location": "/net-OSSockOpt/#returns_677",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_cookie_in_shutdown",
            "text": "[Source]  fun box sctp_cause_cookie_in_shutdown()\n: I32 val",
            "title": "sctp_cause_cookie_in_shutdown"
        },
        {
            "location": "/net-OSSockOpt/#returns_678",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_deleting_last_addr",
            "text": "[Source]  fun box sctp_cause_deleting_last_addr()\n: I32 val",
            "title": "sctp_cause_deleting_last_addr"
        },
        {
            "location": "/net-OSSockOpt/#returns_679",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_deleting_src_addr",
            "text": "[Source]  fun box sctp_cause_deleting_src_addr()\n: I32 val",
            "title": "sctp_cause_deleting_src_addr"
        },
        {
            "location": "/net-OSSockOpt/#returns_680",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_illegal_asconf_ack",
            "text": "[Source]  fun box sctp_cause_illegal_asconf_ack()\n: I32 val",
            "title": "sctp_cause_illegal_asconf_ack"
        },
        {
            "location": "/net-OSSockOpt/#returns_681",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_invalid_param",
            "text": "[Source]  fun box sctp_cause_invalid_param()\n: I32 val",
            "title": "sctp_cause_invalid_param"
        },
        {
            "location": "/net-OSSockOpt/#returns_682",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_invalid_stream",
            "text": "[Source]  fun box sctp_cause_invalid_stream()\n: I32 val",
            "title": "sctp_cause_invalid_stream"
        },
        {
            "location": "/net-OSSockOpt/#returns_683",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_missing_param",
            "text": "[Source]  fun box sctp_cause_missing_param()\n: I32 val",
            "title": "sctp_cause_missing_param"
        },
        {
            "location": "/net-OSSockOpt/#returns_684",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_nat_colliding_state",
            "text": "[Source]  fun box sctp_cause_nat_colliding_state()\n: I32 val",
            "title": "sctp_cause_nat_colliding_state"
        },
        {
            "location": "/net-OSSockOpt/#returns_685",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_nat_missing_state",
            "text": "[Source]  fun box sctp_cause_nat_missing_state()\n: I32 val",
            "title": "sctp_cause_nat_missing_state"
        },
        {
            "location": "/net-OSSockOpt/#returns_686",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_no_error",
            "text": "[Source]  fun box sctp_cause_no_error()\n: I32 val",
            "title": "sctp_cause_no_error"
        },
        {
            "location": "/net-OSSockOpt/#returns_687",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_no_user_data",
            "text": "[Source]  fun box sctp_cause_no_user_data()\n: I32 val",
            "title": "sctp_cause_no_user_data"
        },
        {
            "location": "/net-OSSockOpt/#returns_688",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_out_of_resc",
            "text": "[Source]  fun box sctp_cause_out_of_resc()\n: I32 val",
            "title": "sctp_cause_out_of_resc"
        },
        {
            "location": "/net-OSSockOpt/#returns_689",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_protocol_violation",
            "text": "[Source]  fun box sctp_cause_protocol_violation()\n: I32 val",
            "title": "sctp_cause_protocol_violation"
        },
        {
            "location": "/net-OSSockOpt/#returns_690",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_request_refused",
            "text": "[Source]  fun box sctp_cause_request_refused()\n: I32 val",
            "title": "sctp_cause_request_refused"
        },
        {
            "location": "/net-OSSockOpt/#returns_691",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_resource_shortage",
            "text": "[Source]  fun box sctp_cause_resource_shortage()\n: I32 val",
            "title": "sctp_cause_resource_shortage"
        },
        {
            "location": "/net-OSSockOpt/#returns_692",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_restart_w_newaddr",
            "text": "[Source]  fun box sctp_cause_restart_w_newaddr()\n: I32 val",
            "title": "sctp_cause_restart_w_newaddr"
        },
        {
            "location": "/net-OSSockOpt/#returns_693",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_stale_cookie",
            "text": "[Source]  fun box sctp_cause_stale_cookie()\n: I32 val",
            "title": "sctp_cause_stale_cookie"
        },
        {
            "location": "/net-OSSockOpt/#returns_694",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_unrecog_chunk",
            "text": "[Source]  fun box sctp_cause_unrecog_chunk()\n: I32 val",
            "title": "sctp_cause_unrecog_chunk"
        },
        {
            "location": "/net-OSSockOpt/#returns_695",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_unrecog_param",
            "text": "[Source]  fun box sctp_cause_unrecog_param()\n: I32 val",
            "title": "sctp_cause_unrecog_param"
        },
        {
            "location": "/net-OSSockOpt/#returns_696",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_unresolvable_addr",
            "text": "[Source]  fun box sctp_cause_unresolvable_addr()\n: I32 val",
            "title": "sctp_cause_unresolvable_addr"
        },
        {
            "location": "/net-OSSockOpt/#returns_697",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_unsupported_hmacid",
            "text": "[Source]  fun box sctp_cause_unsupported_hmacid()\n: I32 val",
            "title": "sctp_cause_unsupported_hmacid"
        },
        {
            "location": "/net-OSSockOpt/#returns_698",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cause_user_initiated_abt",
            "text": "[Source]  fun box sctp_cause_user_initiated_abt()\n: I32 val",
            "title": "sctp_cause_user_initiated_abt"
        },
        {
            "location": "/net-OSSockOpt/#returns_699",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cc_hstcp",
            "text": "[Source]  fun box sctp_cc_hstcp()\n: I32 val",
            "title": "sctp_cc_hstcp"
        },
        {
            "location": "/net-OSSockOpt/#returns_700",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cc_htcp",
            "text": "[Source]  fun box sctp_cc_htcp()\n: I32 val",
            "title": "sctp_cc_htcp"
        },
        {
            "location": "/net-OSSockOpt/#returns_701",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cc_option",
            "text": "[Source]  fun box sctp_cc_option()\n: I32 val",
            "title": "sctp_cc_option"
        },
        {
            "location": "/net-OSSockOpt/#returns_702",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cc_opt_rtcc_setmode",
            "text": "[Source]  fun box sctp_cc_opt_rtcc_setmode()\n: I32 val",
            "title": "sctp_cc_opt_rtcc_setmode"
        },
        {
            "location": "/net-OSSockOpt/#returns_703",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cc_opt_steady_step",
            "text": "[Source]  fun box sctp_cc_opt_steady_step()\n: I32 val",
            "title": "sctp_cc_opt_steady_step"
        },
        {
            "location": "/net-OSSockOpt/#returns_704",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cc_opt_use_dccc_ecn",
            "text": "[Source]  fun box sctp_cc_opt_use_dccc_ecn()\n: I32 val",
            "title": "sctp_cc_opt_use_dccc_ecn"
        },
        {
            "location": "/net-OSSockOpt/#returns_705",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cc_rfc2581",
            "text": "[Source]  fun box sctp_cc_rfc2581()\n: I32 val",
            "title": "sctp_cc_rfc2581"
        },
        {
            "location": "/net-OSSockOpt/#returns_706",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cc_rtcc",
            "text": "[Source]  fun box sctp_cc_rtcc()\n: I32 val",
            "title": "sctp_cc_rtcc"
        },
        {
            "location": "/net-OSSockOpt/#returns_707",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_closed",
            "text": "[Source]  fun box sctp_closed()\n: I32 val",
            "title": "sctp_closed"
        },
        {
            "location": "/net-OSSockOpt/#returns_708",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_clr_stat_log",
            "text": "[Source]  fun box sctp_clr_stat_log()\n: I32 val",
            "title": "sctp_clr_stat_log"
        },
        {
            "location": "/net-OSSockOpt/#returns_709",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cmt_base",
            "text": "[Source]  fun box sctp_cmt_base()\n: I32 val",
            "title": "sctp_cmt_base"
        },
        {
            "location": "/net-OSSockOpt/#returns_710",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cmt_max",
            "text": "[Source]  fun box sctp_cmt_max()\n: I32 val",
            "title": "sctp_cmt_max"
        },
        {
            "location": "/net-OSSockOpt/#returns_711",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cmt_mptcp",
            "text": "[Source]  fun box sctp_cmt_mptcp()\n: I32 val",
            "title": "sctp_cmt_mptcp"
        },
        {
            "location": "/net-OSSockOpt/#returns_712",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cmt_off",
            "text": "[Source]  fun box sctp_cmt_off()\n: I32 val",
            "title": "sctp_cmt_off"
        },
        {
            "location": "/net-OSSockOpt/#returns_713",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cmt_on_off",
            "text": "[Source]  fun box sctp_cmt_on_off()\n: I32 val",
            "title": "sctp_cmt_on_off"
        },
        {
            "location": "/net-OSSockOpt/#returns_714",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cmt_rpv1",
            "text": "[Source]  fun box sctp_cmt_rpv1()\n: I32 val",
            "title": "sctp_cmt_rpv1"
        },
        {
            "location": "/net-OSSockOpt/#returns_715",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cmt_rpv2",
            "text": "[Source]  fun box sctp_cmt_rpv2()\n: I32 val",
            "title": "sctp_cmt_rpv2"
        },
        {
            "location": "/net-OSSockOpt/#returns_716",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cmt_use_dac",
            "text": "[Source]  fun box sctp_cmt_use_dac()\n: I32 val",
            "title": "sctp_cmt_use_dac"
        },
        {
            "location": "/net-OSSockOpt/#returns_717",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_connect_x",
            "text": "[Source]  fun box sctp_connect_x()\n: I32 val",
            "title": "sctp_connect_x"
        },
        {
            "location": "/net-OSSockOpt/#returns_718",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_connect_x_complete",
            "text": "[Source]  fun box sctp_connect_x_complete()\n: I32 val",
            "title": "sctp_connect_x_complete"
        },
        {
            "location": "/net-OSSockOpt/#returns_719",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_connect_x_delayed",
            "text": "[Source]  fun box sctp_connect_x_delayed()\n: I32 val",
            "title": "sctp_connect_x_delayed"
        },
        {
            "location": "/net-OSSockOpt/#returns_720",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_context",
            "text": "[Source]  fun box sctp_context()\n: I32 val",
            "title": "sctp_context"
        },
        {
            "location": "/net-OSSockOpt/#returns_721",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cookie_ack",
            "text": "[Source]  fun box sctp_cookie_ack()\n: I32 val",
            "title": "sctp_cookie_ack"
        },
        {
            "location": "/net-OSSockOpt/#returns_722",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cookie_echo",
            "text": "[Source]  fun box sctp_cookie_echo()\n: I32 val",
            "title": "sctp_cookie_echo"
        },
        {
            "location": "/net-OSSockOpt/#returns_723",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cookie_echoed",
            "text": "[Source]  fun box sctp_cookie_echoed()\n: I32 val",
            "title": "sctp_cookie_echoed"
        },
        {
            "location": "/net-OSSockOpt/#returns_724",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cookie_wait",
            "text": "[Source]  fun box sctp_cookie_wait()\n: I32 val",
            "title": "sctp_cookie_wait"
        },
        {
            "location": "/net-OSSockOpt/#returns_725",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cwnd_logging_enable",
            "text": "[Source]  fun box sctp_cwnd_logging_enable()\n: I32 val",
            "title": "sctp_cwnd_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_726",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cwnd_monitor_enable",
            "text": "[Source]  fun box sctp_cwnd_monitor_enable()\n: I32 val",
            "title": "sctp_cwnd_monitor_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_727",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cwr_in_same_window",
            "text": "[Source]  fun box sctp_cwr_in_same_window()\n: I32 val",
            "title": "sctp_cwr_in_same_window"
        },
        {
            "location": "/net-OSSockOpt/#returns_728",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_cwr_reduce_override",
            "text": "[Source]  fun box sctp_cwr_reduce_override()\n: I32 val",
            "title": "sctp_cwr_reduce_override"
        },
        {
            "location": "/net-OSSockOpt/#returns_729",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_data",
            "text": "[Source]  fun box sctp_data()\n: I32 val",
            "title": "sctp_data"
        },
        {
            "location": "/net-OSSockOpt/#returns_730",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_data_first_frag",
            "text": "[Source]  fun box sctp_data_first_frag()\n: I32 val",
            "title": "sctp_data_first_frag"
        },
        {
            "location": "/net-OSSockOpt/#returns_731",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_data_frag_mask",
            "text": "[Source]  fun box sctp_data_frag_mask()\n: I32 val",
            "title": "sctp_data_frag_mask"
        },
        {
            "location": "/net-OSSockOpt/#returns_732",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_data_last_frag",
            "text": "[Source]  fun box sctp_data_last_frag()\n: I32 val",
            "title": "sctp_data_last_frag"
        },
        {
            "location": "/net-OSSockOpt/#returns_733",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_data_middle_frag",
            "text": "[Source]  fun box sctp_data_middle_frag()\n: I32 val",
            "title": "sctp_data_middle_frag"
        },
        {
            "location": "/net-OSSockOpt/#returns_734",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_data_not_frag",
            "text": "[Source]  fun box sctp_data_not_frag()\n: I32 val",
            "title": "sctp_data_not_frag"
        },
        {
            "location": "/net-OSSockOpt/#returns_735",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_data_sack_immediately",
            "text": "[Source]  fun box sctp_data_sack_immediately()\n: I32 val",
            "title": "sctp_data_sack_immediately"
        },
        {
            "location": "/net-OSSockOpt/#returns_736",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_data_unordered",
            "text": "[Source]  fun box sctp_data_unordered()\n: I32 val",
            "title": "sctp_data_unordered"
        },
        {
            "location": "/net-OSSockOpt/#returns_737",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_default_prinfo",
            "text": "[Source]  fun box sctp_default_prinfo()\n: I32 val",
            "title": "sctp_default_prinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_738",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_default_send_param",
            "text": "[Source]  fun box sctp_default_send_param()\n: I32 val",
            "title": "sctp_default_send_param"
        },
        {
            "location": "/net-OSSockOpt/#returns_739",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_default_sndinfo",
            "text": "[Source]  fun box sctp_default_sndinfo()\n: I32 val",
            "title": "sctp_default_sndinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_740",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_delayed_sack",
            "text": "[Source]  fun box sctp_delayed_sack()\n: I32 val",
            "title": "sctp_delayed_sack"
        },
        {
            "location": "/net-OSSockOpt/#returns_741",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_del_vrf_id",
            "text": "[Source]  fun box sctp_del_vrf_id()\n: I32 val",
            "title": "sctp_del_vrf_id"
        },
        {
            "location": "/net-OSSockOpt/#returns_742",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_disable_fragments",
            "text": "[Source]  fun box sctp_disable_fragments()\n: I32 val",
            "title": "sctp_disable_fragments"
        },
        {
            "location": "/net-OSSockOpt/#returns_743",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ecn_cwr",
            "text": "[Source]  fun box sctp_ecn_cwr()\n: I32 val",
            "title": "sctp_ecn_cwr"
        },
        {
            "location": "/net-OSSockOpt/#returns_744",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ecn_echo",
            "text": "[Source]  fun box sctp_ecn_echo()\n: I32 val",
            "title": "sctp_ecn_echo"
        },
        {
            "location": "/net-OSSockOpt/#returns_745",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ecn_supported",
            "text": "[Source]  fun box sctp_ecn_supported()\n: I32 val",
            "title": "sctp_ecn_supported"
        },
        {
            "location": "/net-OSSockOpt/#returns_746",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_enable_change_assoc_req",
            "text": "[Source]  fun box sctp_enable_change_assoc_req()\n: I32 val",
            "title": "sctp_enable_change_assoc_req"
        },
        {
            "location": "/net-OSSockOpt/#returns_747",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_enable_reset_assoc_req",
            "text": "[Source]  fun box sctp_enable_reset_assoc_req()\n: I32 val",
            "title": "sctp_enable_reset_assoc_req"
        },
        {
            "location": "/net-OSSockOpt/#returns_748",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_enable_reset_stream_req",
            "text": "[Source]  fun box sctp_enable_reset_stream_req()\n: I32 val",
            "title": "sctp_enable_reset_stream_req"
        },
        {
            "location": "/net-OSSockOpt/#returns_749",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_enable_stream_reset",
            "text": "[Source]  fun box sctp_enable_stream_reset()\n: I32 val",
            "title": "sctp_enable_stream_reset"
        },
        {
            "location": "/net-OSSockOpt/#returns_750",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_enable_value_mask",
            "text": "[Source]  fun box sctp_enable_value_mask()\n: I32 val",
            "title": "sctp_enable_value_mask"
        },
        {
            "location": "/net-OSSockOpt/#returns_751",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_established",
            "text": "[Source]  fun box sctp_established()\n: I32 val",
            "title": "sctp_established"
        },
        {
            "location": "/net-OSSockOpt/#returns_752",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_event",
            "text": "[Source]  fun box sctp_event()\n: I32 val",
            "title": "sctp_event"
        },
        {
            "location": "/net-OSSockOpt/#returns_753",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_events",
            "text": "[Source]  fun box sctp_events()\n: I32 val",
            "title": "sctp_events"
        },
        {
            "location": "/net-OSSockOpt/#returns_754",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_explicit_eor",
            "text": "[Source]  fun box sctp_explicit_eor()\n: I32 val",
            "title": "sctp_explicit_eor"
        },
        {
            "location": "/net-OSSockOpt/#returns_755",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_flight_logging_enable",
            "text": "[Source]  fun box sctp_flight_logging_enable()\n: I32 val",
            "title": "sctp_flight_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_756",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_forward_cum_tsn",
            "text": "[Source]  fun box sctp_forward_cum_tsn()\n: I32 val",
            "title": "sctp_forward_cum_tsn"
        },
        {
            "location": "/net-OSSockOpt/#returns_757",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_fragment_interleave",
            "text": "[Source]  fun box sctp_fragment_interleave()\n: I32 val",
            "title": "sctp_fragment_interleave"
        },
        {
            "location": "/net-OSSockOpt/#returns_758",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_frag_level_0",
            "text": "[Source]  fun box sctp_frag_level_0()\n: I32 val",
            "title": "sctp_frag_level_0"
        },
        {
            "location": "/net-OSSockOpt/#returns_759",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_frag_level_1",
            "text": "[Source]  fun box sctp_frag_level_1()\n: I32 val",
            "title": "sctp_frag_level_1"
        },
        {
            "location": "/net-OSSockOpt/#returns_760",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_frag_level_2",
            "text": "[Source]  fun box sctp_frag_level_2()\n: I32 val",
            "title": "sctp_frag_level_2"
        },
        {
            "location": "/net-OSSockOpt/#returns_761",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_from_middle_box",
            "text": "[Source]  fun box sctp_from_middle_box()\n: I32 val",
            "title": "sctp_from_middle_box"
        },
        {
            "location": "/net-OSSockOpt/#returns_762",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_fr_logging_enable",
            "text": "[Source]  fun box sctp_fr_logging_enable()\n: I32 val",
            "title": "sctp_fr_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_763",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_addr_len",
            "text": "[Source]  fun box sctp_get_addr_len()\n: I32 val",
            "title": "sctp_get_addr_len"
        },
        {
            "location": "/net-OSSockOpt/#returns_764",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_asoc_vrf",
            "text": "[Source]  fun box sctp_get_asoc_vrf()\n: I32 val",
            "title": "sctp_get_asoc_vrf"
        },
        {
            "location": "/net-OSSockOpt/#returns_765",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_assoc_id_list",
            "text": "[Source]  fun box sctp_get_assoc_id_list()\n: I32 val",
            "title": "sctp_get_assoc_id_list"
        },
        {
            "location": "/net-OSSockOpt/#returns_766",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_assoc_number",
            "text": "[Source]  fun box sctp_get_assoc_number()\n: I32 val",
            "title": "sctp_get_assoc_number"
        },
        {
            "location": "/net-OSSockOpt/#returns_767",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_local_addresses",
            "text": "[Source]  fun box sctp_get_local_addresses()\n: I32 val",
            "title": "sctp_get_local_addresses"
        },
        {
            "location": "/net-OSSockOpt/#returns_768",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_local_addr_size",
            "text": "[Source]  fun box sctp_get_local_addr_size()\n: I32 val",
            "title": "sctp_get_local_addr_size"
        },
        {
            "location": "/net-OSSockOpt/#returns_769",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_nonce_values",
            "text": "[Source]  fun box sctp_get_nonce_values()\n: I32 val",
            "title": "sctp_get_nonce_values"
        },
        {
            "location": "/net-OSSockOpt/#returns_770",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_packet_log",
            "text": "[Source]  fun box sctp_get_packet_log()\n: I32 val",
            "title": "sctp_get_packet_log"
        },
        {
            "location": "/net-OSSockOpt/#returns_771",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_peer_addresses",
            "text": "[Source]  fun box sctp_get_peer_addresses()\n: I32 val",
            "title": "sctp_get_peer_addresses"
        },
        {
            "location": "/net-OSSockOpt/#returns_772",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_peer_addr_info",
            "text": "[Source]  fun box sctp_get_peer_addr_info()\n: I32 val",
            "title": "sctp_get_peer_addr_info"
        },
        {
            "location": "/net-OSSockOpt/#returns_773",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_remote_addr_size",
            "text": "[Source]  fun box sctp_get_remote_addr_size()\n: I32 val",
            "title": "sctp_get_remote_addr_size"
        },
        {
            "location": "/net-OSSockOpt/#returns_774",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_sndbuf_use",
            "text": "[Source]  fun box sctp_get_sndbuf_use()\n: I32 val",
            "title": "sctp_get_sndbuf_use"
        },
        {
            "location": "/net-OSSockOpt/#returns_775",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_stat_log",
            "text": "[Source]  fun box sctp_get_stat_log()\n: I32 val",
            "title": "sctp_get_stat_log"
        },
        {
            "location": "/net-OSSockOpt/#returns_776",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_get_vrf_ids",
            "text": "[Source]  fun box sctp_get_vrf_ids()\n: I32 val",
            "title": "sctp_get_vrf_ids"
        },
        {
            "location": "/net-OSSockOpt/#returns_777",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_had_no_tcb",
            "text": "[Source]  fun box sctp_had_no_tcb()\n: I32 val",
            "title": "sctp_had_no_tcb"
        },
        {
            "location": "/net-OSSockOpt/#returns_778",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_heartbeat_ack",
            "text": "[Source]  fun box sctp_heartbeat_ack()\n: I32 val",
            "title": "sctp_heartbeat_ack"
        },
        {
            "location": "/net-OSSockOpt/#returns_779",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_heartbeat_request",
            "text": "[Source]  fun box sctp_heartbeat_request()\n: I32 val",
            "title": "sctp_heartbeat_request"
        },
        {
            "location": "/net-OSSockOpt/#returns_780",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_hmac_ident",
            "text": "[Source]  fun box sctp_hmac_ident()\n: I32 val",
            "title": "sctp_hmac_ident"
        },
        {
            "location": "/net-OSSockOpt/#returns_781",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_idata",
            "text": "[Source]  fun box sctp_idata()\n: I32 val",
            "title": "sctp_idata"
        },
        {
            "location": "/net-OSSockOpt/#returns_782",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_iforward_cum_tsn",
            "text": "[Source]  fun box sctp_iforward_cum_tsn()\n: I32 val",
            "title": "sctp_iforward_cum_tsn"
        },
        {
            "location": "/net-OSSockOpt/#returns_783",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_initiation",
            "text": "[Source]  fun box sctp_initiation()\n: I32 val",
            "title": "sctp_initiation"
        },
        {
            "location": "/net-OSSockOpt/#returns_784",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_initiation_ack",
            "text": "[Source]  fun box sctp_initiation_ack()\n: I32 val",
            "title": "sctp_initiation_ack"
        },
        {
            "location": "/net-OSSockOpt/#returns_785",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_initmsg",
            "text": "[Source]  fun box sctp_initmsg()\n: I32 val",
            "title": "sctp_initmsg"
        },
        {
            "location": "/net-OSSockOpt/#returns_786",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_interleaving_supported",
            "text": "[Source]  fun box sctp_interleaving_supported()\n: I32 val",
            "title": "sctp_interleaving_supported"
        },
        {
            "location": "/net-OSSockOpt/#returns_787",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_i_want_mapped_v4_addr",
            "text": "[Source]  fun box sctp_i_want_mapped_v4_addr()\n: I32 val",
            "title": "sctp_i_want_mapped_v4_addr"
        },
        {
            "location": "/net-OSSockOpt/#returns_788",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_last_packet_tracing",
            "text": "[Source]  fun box sctp_last_packet_tracing()\n: I32 val",
            "title": "sctp_last_packet_tracing"
        },
        {
            "location": "/net-OSSockOpt/#returns_789",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_listen",
            "text": "[Source]  fun box sctp_listen()\n: I32 val",
            "title": "sctp_listen"
        },
        {
            "location": "/net-OSSockOpt/#returns_790",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_local_auth_chunks",
            "text": "[Source]  fun box sctp_local_auth_chunks()\n: I32 val",
            "title": "sctp_local_auth_chunks"
        },
        {
            "location": "/net-OSSockOpt/#returns_791",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_lock_logging_enable",
            "text": "[Source]  fun box sctp_lock_logging_enable()\n: I32 val",
            "title": "sctp_lock_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_792",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_log_at_send_2_outq",
            "text": "[Source]  fun box sctp_log_at_send_2_outq()\n: I32 val",
            "title": "sctp_log_at_send_2_outq"
        },
        {
            "location": "/net-OSSockOpt/#returns_793",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_log_at_send_2_sctp",
            "text": "[Source]  fun box sctp_log_at_send_2_sctp()\n: I32 val",
            "title": "sctp_log_at_send_2_sctp"
        },
        {
            "location": "/net-OSSockOpt/#returns_794",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_log_maxburst_enable",
            "text": "[Source]  fun box sctp_log_maxburst_enable()\n: I32 val",
            "title": "sctp_log_maxburst_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_795",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_log_rwnd_enable",
            "text": "[Source]  fun box sctp_log_rwnd_enable()\n: I32 val",
            "title": "sctp_log_rwnd_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_796",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_log_sack_arrivals_enable",
            "text": "[Source]  fun box sctp_log_sack_arrivals_enable()\n: I32 val",
            "title": "sctp_log_sack_arrivals_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_797",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_log_try_advance",
            "text": "[Source]  fun box sctp_log_try_advance()\n: I32 val",
            "title": "sctp_log_try_advance"
        },
        {
            "location": "/net-OSSockOpt/#returns_798",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ltrace_chunk_enable",
            "text": "[Source]  fun box sctp_ltrace_chunk_enable()\n: I32 val",
            "title": "sctp_ltrace_chunk_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_799",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ltrace_error_enable",
            "text": "[Source]  fun box sctp_ltrace_error_enable()\n: I32 val",
            "title": "sctp_ltrace_error_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_800",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_map_logging_enable",
            "text": "[Source]  fun box sctp_map_logging_enable()\n: I32 val",
            "title": "sctp_map_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_801",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_maxburst",
            "text": "[Source]  fun box sctp_maxburst()\n: I32 val",
            "title": "sctp_maxburst"
        },
        {
            "location": "/net-OSSockOpt/#returns_802",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_maxseg",
            "text": "[Source]  fun box sctp_maxseg()\n: I32 val",
            "title": "sctp_maxseg"
        },
        {
            "location": "/net-OSSockOpt/#returns_803",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_max_burst",
            "text": "[Source]  fun box sctp_max_burst()\n: I32 val",
            "title": "sctp_max_burst"
        },
        {
            "location": "/net-OSSockOpt/#returns_804",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_max_cookie_life",
            "text": "[Source]  fun box sctp_max_cookie_life()\n: I32 val",
            "title": "sctp_max_cookie_life"
        },
        {
            "location": "/net-OSSockOpt/#returns_805",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_max_cwnd",
            "text": "[Source]  fun box sctp_max_cwnd()\n: I32 val",
            "title": "sctp_max_cwnd"
        },
        {
            "location": "/net-OSSockOpt/#returns_806",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_max_hb_interval",
            "text": "[Source]  fun box sctp_max_hb_interval()\n: I32 val",
            "title": "sctp_max_hb_interval"
        },
        {
            "location": "/net-OSSockOpt/#returns_807",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_max_sack_delay",
            "text": "[Source]  fun box sctp_max_sack_delay()\n: I32 val",
            "title": "sctp_max_sack_delay"
        },
        {
            "location": "/net-OSSockOpt/#returns_808",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_mbcnt_logging_enable",
            "text": "[Source]  fun box sctp_mbcnt_logging_enable()\n: I32 val",
            "title": "sctp_mbcnt_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_809",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_mbuf_logging_enable",
            "text": "[Source]  fun box sctp_mbuf_logging_enable()\n: I32 val",
            "title": "sctp_mbuf_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_810",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_mobility_base",
            "text": "[Source]  fun box sctp_mobility_base()\n: I32 val",
            "title": "sctp_mobility_base"
        },
        {
            "location": "/net-OSSockOpt/#returns_811",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_mobility_fasthandoff",
            "text": "[Source]  fun box sctp_mobility_fasthandoff()\n: I32 val",
            "title": "sctp_mobility_fasthandoff"
        },
        {
            "location": "/net-OSSockOpt/#returns_812",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_mobility_prim_deleted",
            "text": "[Source]  fun box sctp_mobility_prim_deleted()\n: I32 val",
            "title": "sctp_mobility_prim_deleted"
        },
        {
            "location": "/net-OSSockOpt/#returns_813",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_nagle_logging_enable",
            "text": "[Source]  fun box sctp_nagle_logging_enable()\n: I32 val",
            "title": "sctp_nagle_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_814",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_nodelay",
            "text": "[Source]  fun box sctp_nodelay()\n: I32 val",
            "title": "sctp_nodelay"
        },
        {
            "location": "/net-OSSockOpt/#returns_815",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_nrsack_supported",
            "text": "[Source]  fun box sctp_nrsack_supported()\n: I32 val",
            "title": "sctp_nrsack_supported"
        },
        {
            "location": "/net-OSSockOpt/#returns_816",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_nr_selective_ack",
            "text": "[Source]  fun box sctp_nr_selective_ack()\n: I32 val",
            "title": "sctp_nr_selective_ack"
        },
        {
            "location": "/net-OSSockOpt/#returns_817",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_operation_error",
            "text": "[Source]  fun box sctp_operation_error()\n: I32 val",
            "title": "sctp_operation_error"
        },
        {
            "location": "/net-OSSockOpt/#returns_818",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_packed",
            "text": "[Source]  fun box sctp_packed()\n: I32 val",
            "title": "sctp_packed"
        },
        {
            "location": "/net-OSSockOpt/#returns_819",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_packet_dropped",
            "text": "[Source]  fun box sctp_packet_dropped()\n: I32 val",
            "title": "sctp_packet_dropped"
        },
        {
            "location": "/net-OSSockOpt/#returns_820",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_packet_log_size",
            "text": "[Source]  fun box sctp_packet_log_size()\n: I32 val",
            "title": "sctp_packet_log_size"
        },
        {
            "location": "/net-OSSockOpt/#returns_821",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_packet_truncated",
            "text": "[Source]  fun box sctp_packet_truncated()\n: I32 val",
            "title": "sctp_packet_truncated"
        },
        {
            "location": "/net-OSSockOpt/#returns_822",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pad_chunk",
            "text": "[Source]  fun box sctp_pad_chunk()\n: I32 val",
            "title": "sctp_pad_chunk"
        },
        {
            "location": "/net-OSSockOpt/#returns_823",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_partial_delivery_point",
            "text": "[Source]  fun box sctp_partial_delivery_point()\n: I32 val",
            "title": "sctp_partial_delivery_point"
        },
        {
            "location": "/net-OSSockOpt/#returns_824",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_copy_flags",
            "text": "[Source]  fun box sctp_pcb_copy_flags()\n: I32 val",
            "title": "sctp_pcb_copy_flags"
        },
        {
            "location": "/net-OSSockOpt/#returns_825",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_accepting",
            "text": "[Source]  fun box sctp_pcb_flags_accepting()\n: I32 val",
            "title": "sctp_pcb_flags_accepting"
        },
        {
            "location": "/net-OSSockOpt/#returns_826",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_adaptationevnt",
            "text": "[Source]  fun box sctp_pcb_flags_adaptationevnt()\n: I32 val",
            "title": "sctp_pcb_flags_adaptationevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_827",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_assoc_resetevnt",
            "text": "[Source]  fun box sctp_pcb_flags_assoc_resetevnt()\n: I32 val",
            "title": "sctp_pcb_flags_assoc_resetevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_828",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_authevnt",
            "text": "[Source]  fun box sctp_pcb_flags_authevnt()\n: I32 val",
            "title": "sctp_pcb_flags_authevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_829",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_autoclose",
            "text": "[Source]  fun box sctp_pcb_flags_autoclose()\n: I32 val",
            "title": "sctp_pcb_flags_autoclose"
        },
        {
            "location": "/net-OSSockOpt/#returns_830",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_auto_asconf",
            "text": "[Source]  fun box sctp_pcb_flags_auto_asconf()\n: I32 val",
            "title": "sctp_pcb_flags_auto_asconf"
        },
        {
            "location": "/net-OSSockOpt/#returns_831",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_blocking_io",
            "text": "[Source]  fun box sctp_pcb_flags_blocking_io()\n: I32 val",
            "title": "sctp_pcb_flags_blocking_io"
        },
        {
            "location": "/net-OSSockOpt/#returns_832",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_boundall",
            "text": "[Source]  fun box sctp_pcb_flags_boundall()\n: I32 val",
            "title": "sctp_pcb_flags_boundall"
        },
        {
            "location": "/net-OSSockOpt/#returns_833",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_bound_v6",
            "text": "[Source]  fun box sctp_pcb_flags_bound_v6()\n: I32 val",
            "title": "sctp_pcb_flags_bound_v6"
        },
        {
            "location": "/net-OSSockOpt/#returns_834",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_close_ip",
            "text": "[Source]  fun box sctp_pcb_flags_close_ip()\n: I32 val",
            "title": "sctp_pcb_flags_close_ip"
        },
        {
            "location": "/net-OSSockOpt/#returns_835",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_connected",
            "text": "[Source]  fun box sctp_pcb_flags_connected()\n: I32 val",
            "title": "sctp_pcb_flags_connected"
        },
        {
            "location": "/net-OSSockOpt/#returns_836",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_donot_heartbeat",
            "text": "[Source]  fun box sctp_pcb_flags_donot_heartbeat()\n: I32 val",
            "title": "sctp_pcb_flags_donot_heartbeat"
        },
        {
            "location": "/net-OSSockOpt/#returns_837",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_dont_wake",
            "text": "[Source]  fun box sctp_pcb_flags_dont_wake()\n: I32 val",
            "title": "sctp_pcb_flags_dont_wake"
        },
        {
            "location": "/net-OSSockOpt/#returns_838",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_do_asconf",
            "text": "[Source]  fun box sctp_pcb_flags_do_asconf()\n: I32 val",
            "title": "sctp_pcb_flags_do_asconf"
        },
        {
            "location": "/net-OSSockOpt/#returns_839",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_do_not_pmtud",
            "text": "[Source]  fun box sctp_pcb_flags_do_not_pmtud()\n: I32 val",
            "title": "sctp_pcb_flags_do_not_pmtud"
        },
        {
            "location": "/net-OSSockOpt/#returns_840",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_dryevnt",
            "text": "[Source]  fun box sctp_pcb_flags_dryevnt()\n: I32 val",
            "title": "sctp_pcb_flags_dryevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_841",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_explicit_eor",
            "text": "[Source]  fun box sctp_pcb_flags_explicit_eor()\n: I32 val",
            "title": "sctp_pcb_flags_explicit_eor"
        },
        {
            "location": "/net-OSSockOpt/#returns_842",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_ext_rcvinfo",
            "text": "[Source]  fun box sctp_pcb_flags_ext_rcvinfo()\n: I32 val",
            "title": "sctp_pcb_flags_ext_rcvinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_843",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_frag_interleave",
            "text": "[Source]  fun box sctp_pcb_flags_frag_interleave()\n: I32 val",
            "title": "sctp_pcb_flags_frag_interleave"
        },
        {
            "location": "/net-OSSockOpt/#returns_844",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_interleave_strms",
            "text": "[Source]  fun box sctp_pcb_flags_interleave_strms()\n: I32 val",
            "title": "sctp_pcb_flags_interleave_strms"
        },
        {
            "location": "/net-OSSockOpt/#returns_845",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_in_tcppool",
            "text": "[Source]  fun box sctp_pcb_flags_in_tcppool()\n: I32 val",
            "title": "sctp_pcb_flags_in_tcppool"
        },
        {
            "location": "/net-OSSockOpt/#returns_846",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_multiple_asconfs",
            "text": "[Source]  fun box sctp_pcb_flags_multiple_asconfs()\n: I32 val",
            "title": "sctp_pcb_flags_multiple_asconfs"
        },
        {
            "location": "/net-OSSockOpt/#returns_847",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_needs_mapped_v4",
            "text": "[Source]  fun box sctp_pcb_flags_needs_mapped_v4()\n: I32 val",
            "title": "sctp_pcb_flags_needs_mapped_v4"
        },
        {
            "location": "/net-OSSockOpt/#returns_848",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_nodelay",
            "text": "[Source]  fun box sctp_pcb_flags_nodelay()\n: I32 val",
            "title": "sctp_pcb_flags_nodelay"
        },
        {
            "location": "/net-OSSockOpt/#returns_849",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_no_fragment",
            "text": "[Source]  fun box sctp_pcb_flags_no_fragment()\n: I32 val",
            "title": "sctp_pcb_flags_no_fragment"
        },
        {
            "location": "/net-OSSockOpt/#returns_850",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_pdapievnt",
            "text": "[Source]  fun box sctp_pcb_flags_pdapievnt()\n: I32 val",
            "title": "sctp_pcb_flags_pdapievnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_851",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_portreuse",
            "text": "[Source]  fun box sctp_pcb_flags_portreuse()\n: I32 val",
            "title": "sctp_pcb_flags_portreuse"
        },
        {
            "location": "/net-OSSockOpt/#returns_852",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_recvassocevnt",
            "text": "[Source]  fun box sctp_pcb_flags_recvassocevnt()\n: I32 val",
            "title": "sctp_pcb_flags_recvassocevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_853",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_recvdataioevnt",
            "text": "[Source]  fun box sctp_pcb_flags_recvdataioevnt()\n: I32 val",
            "title": "sctp_pcb_flags_recvdataioevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_854",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_recvnsendfailevnt",
            "text": "[Source]  fun box sctp_pcb_flags_recvnsendfailevnt()\n: I32 val",
            "title": "sctp_pcb_flags_recvnsendfailevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_855",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_recvnxtinfo",
            "text": "[Source]  fun box sctp_pcb_flags_recvnxtinfo()\n: I32 val",
            "title": "sctp_pcb_flags_recvnxtinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_856",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_recvpaddrevnt",
            "text": "[Source]  fun box sctp_pcb_flags_recvpaddrevnt()\n: I32 val",
            "title": "sctp_pcb_flags_recvpaddrevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_857",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_recvpeererr",
            "text": "[Source]  fun box sctp_pcb_flags_recvpeererr()\n: I32 val",
            "title": "sctp_pcb_flags_recvpeererr"
        },
        {
            "location": "/net-OSSockOpt/#returns_858",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_recvrcvinfo",
            "text": "[Source]  fun box sctp_pcb_flags_recvrcvinfo()\n: I32 val",
            "title": "sctp_pcb_flags_recvrcvinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_859",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_recvsendfailevnt",
            "text": "[Source]  fun box sctp_pcb_flags_recvsendfailevnt()\n: I32 val",
            "title": "sctp_pcb_flags_recvsendfailevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_860",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_recvshutdownevnt",
            "text": "[Source]  fun box sctp_pcb_flags_recvshutdownevnt()\n: I32 val",
            "title": "sctp_pcb_flags_recvshutdownevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_861",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_socket_allgone",
            "text": "[Source]  fun box sctp_pcb_flags_socket_allgone()\n: I32 val",
            "title": "sctp_pcb_flags_socket_allgone"
        },
        {
            "location": "/net-OSSockOpt/#returns_862",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_socket_cant_read",
            "text": "[Source]  fun box sctp_pcb_flags_socket_cant_read()\n: I32 val",
            "title": "sctp_pcb_flags_socket_cant_read"
        },
        {
            "location": "/net-OSSockOpt/#returns_863",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_socket_gone",
            "text": "[Source]  fun box sctp_pcb_flags_socket_gone()\n: I32 val",
            "title": "sctp_pcb_flags_socket_gone"
        },
        {
            "location": "/net-OSSockOpt/#returns_864",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_stream_changeevnt",
            "text": "[Source]  fun box sctp_pcb_flags_stream_changeevnt()\n: I32 val",
            "title": "sctp_pcb_flags_stream_changeevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_865",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_stream_resetevnt",
            "text": "[Source]  fun box sctp_pcb_flags_stream_resetevnt()\n: I32 val",
            "title": "sctp_pcb_flags_stream_resetevnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_866",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_tcptype",
            "text": "[Source]  fun box sctp_pcb_flags_tcptype()\n: I32 val",
            "title": "sctp_pcb_flags_tcptype"
        },
        {
            "location": "/net-OSSockOpt/#returns_867",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_udptype",
            "text": "[Source]  fun box sctp_pcb_flags_udptype()\n: I32 val",
            "title": "sctp_pcb_flags_udptype"
        },
        {
            "location": "/net-OSSockOpt/#returns_868",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_unbound",
            "text": "[Source]  fun box sctp_pcb_flags_unbound()\n: I32 val",
            "title": "sctp_pcb_flags_unbound"
        },
        {
            "location": "/net-OSSockOpt/#returns_869",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_wakeinput",
            "text": "[Source]  fun box sctp_pcb_flags_wakeinput()\n: I32 val",
            "title": "sctp_pcb_flags_wakeinput"
        },
        {
            "location": "/net-OSSockOpt/#returns_870",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_wakeoutput",
            "text": "[Source]  fun box sctp_pcb_flags_wakeoutput()\n: I32 val",
            "title": "sctp_pcb_flags_wakeoutput"
        },
        {
            "location": "/net-OSSockOpt/#returns_871",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_was_aborted",
            "text": "[Source]  fun box sctp_pcb_flags_was_aborted()\n: I32 val",
            "title": "sctp_pcb_flags_was_aborted"
        },
        {
            "location": "/net-OSSockOpt/#returns_872",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_was_connected",
            "text": "[Source]  fun box sctp_pcb_flags_was_connected()\n: I32 val",
            "title": "sctp_pcb_flags_was_connected"
        },
        {
            "location": "/net-OSSockOpt/#returns_873",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_flags_zero_copy_active",
            "text": "[Source]  fun box sctp_pcb_flags_zero_copy_active()\n: I32 val",
            "title": "sctp_pcb_flags_zero_copy_active"
        },
        {
            "location": "/net-OSSockOpt/#returns_874",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pcb_status",
            "text": "[Source]  fun box sctp_pcb_status()\n: I32 val",
            "title": "sctp_pcb_status"
        },
        {
            "location": "/net-OSSockOpt/#returns_875",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_peeloff",
            "text": "[Source]  fun box sctp_peeloff()\n: I32 val",
            "title": "sctp_peeloff"
        },
        {
            "location": "/net-OSSockOpt/#returns_876",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_peer_addr_params",
            "text": "[Source]  fun box sctp_peer_addr_params()\n: I32 val",
            "title": "sctp_peer_addr_params"
        },
        {
            "location": "/net-OSSockOpt/#returns_877",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_peer_addr_thlds",
            "text": "[Source]  fun box sctp_peer_addr_thlds()\n: I32 val",
            "title": "sctp_peer_addr_thlds"
        },
        {
            "location": "/net-OSSockOpt/#returns_878",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_peer_auth_chunks",
            "text": "[Source]  fun box sctp_peer_auth_chunks()\n: I32 val",
            "title": "sctp_peer_auth_chunks"
        },
        {
            "location": "/net-OSSockOpt/#returns_879",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pktdrop_supported",
            "text": "[Source]  fun box sctp_pktdrop_supported()\n: I32 val",
            "title": "sctp_pktdrop_supported"
        },
        {
            "location": "/net-OSSockOpt/#returns_880",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pluggable_cc",
            "text": "[Source]  fun box sctp_pluggable_cc()\n: I32 val",
            "title": "sctp_pluggable_cc"
        },
        {
            "location": "/net-OSSockOpt/#returns_881",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pluggable_ss",
            "text": "[Source]  fun box sctp_pluggable_ss()\n: I32 val",
            "title": "sctp_pluggable_ss"
        },
        {
            "location": "/net-OSSockOpt/#returns_882",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_primary_addr",
            "text": "[Source]  fun box sctp_primary_addr()\n: I32 val",
            "title": "sctp_primary_addr"
        },
        {
            "location": "/net-OSSockOpt/#returns_883",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pr_assoc_status",
            "text": "[Source]  fun box sctp_pr_assoc_status()\n: I32 val",
            "title": "sctp_pr_assoc_status"
        },
        {
            "location": "/net-OSSockOpt/#returns_884",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pr_stream_status",
            "text": "[Source]  fun box sctp_pr_stream_status()\n: I32 val",
            "title": "sctp_pr_stream_status"
        },
        {
            "location": "/net-OSSockOpt/#returns_885",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_pr_supported",
            "text": "[Source]  fun box sctp_pr_supported()\n: I32 val",
            "title": "sctp_pr_supported"
        },
        {
            "location": "/net-OSSockOpt/#returns_886",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_reconfig_supported",
            "text": "[Source]  fun box sctp_reconfig_supported()\n: I32 val",
            "title": "sctp_reconfig_supported"
        },
        {
            "location": "/net-OSSockOpt/#returns_887",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_recvnxtinfo",
            "text": "[Source]  fun box sctp_recvnxtinfo()\n: I32 val",
            "title": "sctp_recvnxtinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_888",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_recvrcvinfo",
            "text": "[Source]  fun box sctp_recvrcvinfo()\n: I32 val",
            "title": "sctp_recvrcvinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_889",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_recv_rwnd_logging_enable",
            "text": "[Source]  fun box sctp_recv_rwnd_logging_enable()\n: I32 val",
            "title": "sctp_recv_rwnd_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_890",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_remote_udp_encaps_port",
            "text": "[Source]  fun box sctp_remote_udp_encaps_port()\n: I32 val",
            "title": "sctp_remote_udp_encaps_port"
        },
        {
            "location": "/net-OSSockOpt/#returns_891",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_reset_assoc",
            "text": "[Source]  fun box sctp_reset_assoc()\n: I32 val",
            "title": "sctp_reset_assoc"
        },
        {
            "location": "/net-OSSockOpt/#returns_892",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_reset_streams",
            "text": "[Source]  fun box sctp_reset_streams()\n: I32 val",
            "title": "sctp_reset_streams"
        },
        {
            "location": "/net-OSSockOpt/#returns_893",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_reuse_port",
            "text": "[Source]  fun box sctp_reuse_port()\n: I32 val",
            "title": "sctp_reuse_port"
        },
        {
            "location": "/net-OSSockOpt/#returns_894",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_rtoinfo",
            "text": "[Source]  fun box sctp_rtoinfo()\n: I32 val",
            "title": "sctp_rtoinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_895",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_rttvar_logging_enable",
            "text": "[Source]  fun box sctp_rttvar_logging_enable()\n: I32 val",
            "title": "sctp_rttvar_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_896",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_sack_cmt_dac",
            "text": "[Source]  fun box sctp_sack_cmt_dac()\n: I32 val",
            "title": "sctp_sack_cmt_dac"
        },
        {
            "location": "/net-OSSockOpt/#returns_897",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_sack_logging_enable",
            "text": "[Source]  fun box sctp_sack_logging_enable()\n: I32 val",
            "title": "sctp_sack_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_898",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_sack_nonce_sum",
            "text": "[Source]  fun box sctp_sack_nonce_sum()\n: I32 val",
            "title": "sctp_sack_nonce_sum"
        },
        {
            "location": "/net-OSSockOpt/#returns_899",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_sack_rwnd_logging_enable",
            "text": "[Source]  fun box sctp_sack_rwnd_logging_enable()\n: I32 val",
            "title": "sctp_sack_rwnd_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_900",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_sat_network_burst_incr",
            "text": "[Source]  fun box sctp_sat_network_burst_incr()\n: I32 val",
            "title": "sctp_sat_network_burst_incr"
        },
        {
            "location": "/net-OSSockOpt/#returns_901",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_sat_network_min",
            "text": "[Source]  fun box sctp_sat_network_min()\n: I32 val",
            "title": "sctp_sat_network_min"
        },
        {
            "location": "/net-OSSockOpt/#returns_902",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_sb_logging_enable",
            "text": "[Source]  fun box sctp_sb_logging_enable()\n: I32 val",
            "title": "sctp_sb_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_903",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_selective_ack",
            "text": "[Source]  fun box sctp_selective_ack()\n: I32 val",
            "title": "sctp_selective_ack"
        },
        {
            "location": "/net-OSSockOpt/#returns_904",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_set_debug_level",
            "text": "[Source]  fun box sctp_set_debug_level()\n: I32 val",
            "title": "sctp_set_debug_level"
        },
        {
            "location": "/net-OSSockOpt/#returns_905",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_set_dynamic_primary",
            "text": "[Source]  fun box sctp_set_dynamic_primary()\n: I32 val",
            "title": "sctp_set_dynamic_primary"
        },
        {
            "location": "/net-OSSockOpt/#returns_906",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_set_initial_dbg_seq",
            "text": "[Source]  fun box sctp_set_initial_dbg_seq()\n: I32 val",
            "title": "sctp_set_initial_dbg_seq"
        },
        {
            "location": "/net-OSSockOpt/#returns_907",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_set_peer_primary_addr",
            "text": "[Source]  fun box sctp_set_peer_primary_addr()\n: I32 val",
            "title": "sctp_set_peer_primary_addr"
        },
        {
            "location": "/net-OSSockOpt/#returns_908",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_shutdown",
            "text": "[Source]  fun box sctp_shutdown()\n: I32 val",
            "title": "sctp_shutdown"
        },
        {
            "location": "/net-OSSockOpt/#returns_909",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_shutdown_ack",
            "text": "[Source]  fun box sctp_shutdown_ack()\n: I32 val",
            "title": "sctp_shutdown_ack"
        },
        {
            "location": "/net-OSSockOpt/#returns_910",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_shutdown_ack_sent",
            "text": "[Source]  fun box sctp_shutdown_ack_sent()\n: I32 val",
            "title": "sctp_shutdown_ack_sent"
        },
        {
            "location": "/net-OSSockOpt/#returns_911",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_shutdown_complete",
            "text": "[Source]  fun box sctp_shutdown_complete()\n: I32 val",
            "title": "sctp_shutdown_complete"
        },
        {
            "location": "/net-OSSockOpt/#returns_912",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_shutdown_pending",
            "text": "[Source]  fun box sctp_shutdown_pending()\n: I32 val",
            "title": "sctp_shutdown_pending"
        },
        {
            "location": "/net-OSSockOpt/#returns_913",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_shutdown_received",
            "text": "[Source]  fun box sctp_shutdown_received()\n: I32 val",
            "title": "sctp_shutdown_received"
        },
        {
            "location": "/net-OSSockOpt/#returns_914",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_shutdown_sent",
            "text": "[Source]  fun box sctp_shutdown_sent()\n: I32 val",
            "title": "sctp_shutdown_sent"
        },
        {
            "location": "/net-OSSockOpt/#returns_915",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_smallest_pmtu",
            "text": "[Source]  fun box sctp_smallest_pmtu()\n: I32 val",
            "title": "sctp_smallest_pmtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_916",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ss_default",
            "text": "[Source]  fun box sctp_ss_default()\n: I32 val",
            "title": "sctp_ss_default"
        },
        {
            "location": "/net-OSSockOpt/#returns_917",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ss_fair_bandwith",
            "text": "[Source]  fun box sctp_ss_fair_bandwith()\n: I32 val",
            "title": "sctp_ss_fair_bandwith"
        },
        {
            "location": "/net-OSSockOpt/#returns_918",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ss_first_come",
            "text": "[Source]  fun box sctp_ss_first_come()\n: I32 val",
            "title": "sctp_ss_first_come"
        },
        {
            "location": "/net-OSSockOpt/#returns_919",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ss_priority",
            "text": "[Source]  fun box sctp_ss_priority()\n: I32 val",
            "title": "sctp_ss_priority"
        },
        {
            "location": "/net-OSSockOpt/#returns_920",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ss_round_robin",
            "text": "[Source]  fun box sctp_ss_round_robin()\n: I32 val",
            "title": "sctp_ss_round_robin"
        },
        {
            "location": "/net-OSSockOpt/#returns_921",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ss_round_robin_packet",
            "text": "[Source]  fun box sctp_ss_round_robin_packet()\n: I32 val",
            "title": "sctp_ss_round_robin_packet"
        },
        {
            "location": "/net-OSSockOpt/#returns_922",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_ss_value",
            "text": "[Source]  fun box sctp_ss_value()\n: I32 val",
            "title": "sctp_ss_value"
        },
        {
            "location": "/net-OSSockOpt/#returns_923",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_status",
            "text": "[Source]  fun box sctp_status()\n: I32 val",
            "title": "sctp_status"
        },
        {
            "location": "/net-OSSockOpt/#returns_924",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_stream_reset",
            "text": "[Source]  fun box sctp_stream_reset()\n: I32 val",
            "title": "sctp_stream_reset"
        },
        {
            "location": "/net-OSSockOpt/#returns_925",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_stream_reset_incoming",
            "text": "[Source]  fun box sctp_stream_reset_incoming()\n: I32 val",
            "title": "sctp_stream_reset_incoming"
        },
        {
            "location": "/net-OSSockOpt/#returns_926",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_stream_reset_outgoing",
            "text": "[Source]  fun box sctp_stream_reset_outgoing()\n: I32 val",
            "title": "sctp_stream_reset_outgoing"
        },
        {
            "location": "/net-OSSockOpt/#returns_927",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_str_logging_enable",
            "text": "[Source]  fun box sctp_str_logging_enable()\n: I32 val",
            "title": "sctp_str_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_928",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_threshold_logging",
            "text": "[Source]  fun box sctp_threshold_logging()\n: I32 val",
            "title": "sctp_threshold_logging"
        },
        {
            "location": "/net-OSSockOpt/#returns_929",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_timeouts",
            "text": "[Source]  fun box sctp_timeouts()\n: I32 val",
            "title": "sctp_timeouts"
        },
        {
            "location": "/net-OSSockOpt/#returns_930",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_use_ext_rcvinfo",
            "text": "[Source]  fun box sctp_use_ext_rcvinfo()\n: I32 val",
            "title": "sctp_use_ext_rcvinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_931",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_vrf_id",
            "text": "[Source]  fun box sctp_vrf_id()\n: I32 val",
            "title": "sctp_vrf_id"
        },
        {
            "location": "/net-OSSockOpt/#returns_932",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sctp_wake_logging_enable",
            "text": "[Source]  fun box sctp_wake_logging_enable()\n: I32 val",
            "title": "sctp_wake_logging_enable"
        },
        {
            "location": "/net-OSSockOpt/#returns_933",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sock_cloexec",
            "text": "[Source]  fun box sock_cloexec()\n: I32 val",
            "title": "sock_cloexec"
        },
        {
            "location": "/net-OSSockOpt/#returns_934",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sock_dgram",
            "text": "[Source]  fun box sock_dgram()\n: I32 val",
            "title": "sock_dgram"
        },
        {
            "location": "/net-OSSockOpt/#returns_935",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sock_maxaddrlen",
            "text": "[Source]  fun box sock_maxaddrlen()\n: I32 val",
            "title": "sock_maxaddrlen"
        },
        {
            "location": "/net-OSSockOpt/#returns_936",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sock_nonblock",
            "text": "[Source]  fun box sock_nonblock()\n: I32 val",
            "title": "sock_nonblock"
        },
        {
            "location": "/net-OSSockOpt/#returns_937",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sock_raw",
            "text": "[Source]  fun box sock_raw()\n: I32 val",
            "title": "sock_raw"
        },
        {
            "location": "/net-OSSockOpt/#returns_938",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sock_rdm",
            "text": "[Source]  fun box sock_rdm()\n: I32 val",
            "title": "sock_rdm"
        },
        {
            "location": "/net-OSSockOpt/#returns_939",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sock_seqpacket",
            "text": "[Source]  fun box sock_seqpacket()\n: I32 val",
            "title": "sock_seqpacket"
        },
        {
            "location": "/net-OSSockOpt/#returns_940",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sock_stream",
            "text": "[Source]  fun box sock_stream()\n: I32 val",
            "title": "sock_stream"
        },
        {
            "location": "/net-OSSockOpt/#returns_941",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#somaxconn",
            "text": "[Source]  fun box somaxconn()\n: I32 val",
            "title": "somaxconn"
        },
        {
            "location": "/net-OSSockOpt/#returns_942",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#sonpx_setoptshut",
            "text": "[Source]  fun box sonpx_setoptshut()\n: I32 val",
            "title": "sonpx_setoptshut"
        },
        {
            "location": "/net-OSSockOpt/#returns_943",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_acceptconn",
            "text": "[Source]  fun box so_acceptconn()\n: I32 val",
            "title": "so_acceptconn"
        },
        {
            "location": "/net-OSSockOpt/#returns_944",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_acceptfilter",
            "text": "[Source]  fun box so_acceptfilter()\n: I32 val",
            "title": "so_acceptfilter"
        },
        {
            "location": "/net-OSSockOpt/#returns_945",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_atmpvc",
            "text": "[Source]  fun box so_atmpvc()\n: I32 val",
            "title": "so_atmpvc"
        },
        {
            "location": "/net-OSSockOpt/#returns_946",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_atmqos",
            "text": "[Source]  fun box so_atmqos()\n: I32 val",
            "title": "so_atmqos"
        },
        {
            "location": "/net-OSSockOpt/#returns_947",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_atmsap",
            "text": "[Source]  fun box so_atmsap()\n: I32 val",
            "title": "so_atmsap"
        },
        {
            "location": "/net-OSSockOpt/#returns_948",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_attach_bpf",
            "text": "[Source]  fun box so_attach_bpf()\n: I32 val",
            "title": "so_attach_bpf"
        },
        {
            "location": "/net-OSSockOpt/#returns_949",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_attach_filter",
            "text": "[Source]  fun box so_attach_filter()\n: I32 val",
            "title": "so_attach_filter"
        },
        {
            "location": "/net-OSSockOpt/#returns_950",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_bindtodevice",
            "text": "[Source]  fun box so_bindtodevice()\n: I32 val",
            "title": "so_bindtodevice"
        },
        {
            "location": "/net-OSSockOpt/#returns_951",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_bintime",
            "text": "[Source]  fun box so_bintime()\n: I32 val",
            "title": "so_bintime"
        },
        {
            "location": "/net-OSSockOpt/#returns_952",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_bpf_extensions",
            "text": "[Source]  fun box so_bpf_extensions()\n: I32 val",
            "title": "so_bpf_extensions"
        },
        {
            "location": "/net-OSSockOpt/#returns_953",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_broadcast",
            "text": "[Source]  fun box so_broadcast()\n: I32 val",
            "title": "so_broadcast"
        },
        {
            "location": "/net-OSSockOpt/#returns_954",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_bsdcompat",
            "text": "[Source]  fun box so_bsdcompat()\n: I32 val",
            "title": "so_bsdcompat"
        },
        {
            "location": "/net-OSSockOpt/#returns_955",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_bsp_state",
            "text": "[Source]  fun box so_bsp_state()\n: I32 val",
            "title": "so_bsp_state"
        },
        {
            "location": "/net-OSSockOpt/#returns_956",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_busy_poll",
            "text": "[Source]  fun box so_busy_poll()\n: I32 val",
            "title": "so_busy_poll"
        },
        {
            "location": "/net-OSSockOpt/#returns_957",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_conaccess",
            "text": "[Source]  fun box so_conaccess()\n: I32 val",
            "title": "so_conaccess"
        },
        {
            "location": "/net-OSSockOpt/#returns_958",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_condata",
            "text": "[Source]  fun box so_condata()\n: I32 val",
            "title": "so_condata"
        },
        {
            "location": "/net-OSSockOpt/#returns_959",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_conditional_accept",
            "text": "[Source]  fun box so_conditional_accept()\n: I32 val",
            "title": "so_conditional_accept"
        },
        {
            "location": "/net-OSSockOpt/#returns_960",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_connect_time",
            "text": "[Source]  fun box so_connect_time()\n: I32 val",
            "title": "so_connect_time"
        },
        {
            "location": "/net-OSSockOpt/#returns_961",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_debug",
            "text": "[Source]  fun box so_debug()\n: I32 val",
            "title": "so_debug"
        },
        {
            "location": "/net-OSSockOpt/#returns_962",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_detach_bpf",
            "text": "[Source]  fun box so_detach_bpf()\n: I32 val",
            "title": "so_detach_bpf"
        },
        {
            "location": "/net-OSSockOpt/#returns_963",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_detach_filter",
            "text": "[Source]  fun box so_detach_filter()\n: I32 val",
            "title": "so_detach_filter"
        },
        {
            "location": "/net-OSSockOpt/#returns_964",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_domain",
            "text": "[Source]  fun box so_domain()\n: I32 val",
            "title": "so_domain"
        },
        {
            "location": "/net-OSSockOpt/#returns_965",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_dontlinger",
            "text": "[Source]  fun box so_dontlinger()\n: I32 val",
            "title": "so_dontlinger"
        },
        {
            "location": "/net-OSSockOpt/#returns_966",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_dontroute",
            "text": "[Source]  fun box so_dontroute()\n: I32 val",
            "title": "so_dontroute"
        },
        {
            "location": "/net-OSSockOpt/#returns_967",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_donttrunc",
            "text": "[Source]  fun box so_donttrunc()\n: I32 val",
            "title": "so_donttrunc"
        },
        {
            "location": "/net-OSSockOpt/#returns_968",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_error",
            "text": "[Source]  fun box so_error()\n: I32 val",
            "title": "so_error"
        },
        {
            "location": "/net-OSSockOpt/#returns_969",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_exclusiveaddruse",
            "text": "[Source]  fun box so_exclusiveaddruse()\n: I32 val",
            "title": "so_exclusiveaddruse"
        },
        {
            "location": "/net-OSSockOpt/#returns_970",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_get_filter",
            "text": "[Source]  fun box so_get_filter()\n: I32 val",
            "title": "so_get_filter"
        },
        {
            "location": "/net-OSSockOpt/#returns_971",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_group_id",
            "text": "[Source]  fun box so_group_id()\n: I32 val",
            "title": "so_group_id"
        },
        {
            "location": "/net-OSSockOpt/#returns_972",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_group_priority",
            "text": "[Source]  fun box so_group_priority()\n: I32 val",
            "title": "so_group_priority"
        },
        {
            "location": "/net-OSSockOpt/#returns_973",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_hci_raw_direction",
            "text": "[Source]  fun box so_hci_raw_direction()\n: I32 val",
            "title": "so_hci_raw_direction"
        },
        {
            "location": "/net-OSSockOpt/#returns_974",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_hci_raw_filter",
            "text": "[Source]  fun box so_hci_raw_filter()\n: I32 val",
            "title": "so_hci_raw_filter"
        },
        {
            "location": "/net-OSSockOpt/#returns_975",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_incoming_cpu",
            "text": "[Source]  fun box so_incoming_cpu()\n: I32 val",
            "title": "so_incoming_cpu"
        },
        {
            "location": "/net-OSSockOpt/#returns_976",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_keepalive",
            "text": "[Source]  fun box so_keepalive()\n: I32 val",
            "title": "so_keepalive"
        },
        {
            "location": "/net-OSSockOpt/#returns_977",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_l2cap_encrypted",
            "text": "[Source]  fun box so_l2cap_encrypted()\n: I32 val",
            "title": "so_l2cap_encrypted"
        },
        {
            "location": "/net-OSSockOpt/#returns_978",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_l2cap_flush",
            "text": "[Source]  fun box so_l2cap_flush()\n: I32 val",
            "title": "so_l2cap_flush"
        },
        {
            "location": "/net-OSSockOpt/#returns_979",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_l2cap_iflow",
            "text": "[Source]  fun box so_l2cap_iflow()\n: I32 val",
            "title": "so_l2cap_iflow"
        },
        {
            "location": "/net-OSSockOpt/#returns_980",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_l2cap_imtu",
            "text": "[Source]  fun box so_l2cap_imtu()\n: I32 val",
            "title": "so_l2cap_imtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_981",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_l2cap_oflow",
            "text": "[Source]  fun box so_l2cap_oflow()\n: I32 val",
            "title": "so_l2cap_oflow"
        },
        {
            "location": "/net-OSSockOpt/#returns_982",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_l2cap_omtu",
            "text": "[Source]  fun box so_l2cap_omtu()\n: I32 val",
            "title": "so_l2cap_omtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_983",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_label",
            "text": "[Source]  fun box so_label()\n: I32 val",
            "title": "so_label"
        },
        {
            "location": "/net-OSSockOpt/#returns_984",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_linger",
            "text": "[Source]  fun box so_linger()\n: I32 val",
            "title": "so_linger"
        },
        {
            "location": "/net-OSSockOpt/#returns_985",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_linger_sec",
            "text": "[Source]  fun box so_linger_sec()\n: I32 val",
            "title": "so_linger_sec"
        },
        {
            "location": "/net-OSSockOpt/#returns_986",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_linkinfo",
            "text": "[Source]  fun box so_linkinfo()\n: I32 val",
            "title": "so_linkinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_987",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_listenincqlen",
            "text": "[Source]  fun box so_listenincqlen()\n: I32 val",
            "title": "so_listenincqlen"
        },
        {
            "location": "/net-OSSockOpt/#returns_988",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_listenqlen",
            "text": "[Source]  fun box so_listenqlen()\n: I32 val",
            "title": "so_listenqlen"
        },
        {
            "location": "/net-OSSockOpt/#returns_989",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_listenqlimit",
            "text": "[Source]  fun box so_listenqlimit()\n: I32 val",
            "title": "so_listenqlimit"
        },
        {
            "location": "/net-OSSockOpt/#returns_990",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_lock_filter",
            "text": "[Source]  fun box so_lock_filter()\n: I32 val",
            "title": "so_lock_filter"
        },
        {
            "location": "/net-OSSockOpt/#returns_991",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_mark",
            "text": "[Source]  fun box so_mark()\n: I32 val",
            "title": "so_mark"
        },
        {
            "location": "/net-OSSockOpt/#returns_992",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_max_msg_size",
            "text": "[Source]  fun box so_max_msg_size()\n: I32 val",
            "title": "so_max_msg_size"
        },
        {
            "location": "/net-OSSockOpt/#returns_993",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_max_pacing_rate",
            "text": "[Source]  fun box so_max_pacing_rate()\n: I32 val",
            "title": "so_max_pacing_rate"
        },
        {
            "location": "/net-OSSockOpt/#returns_994",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_multipoint",
            "text": "[Source]  fun box so_multipoint()\n: I32 val",
            "title": "so_multipoint"
        },
        {
            "location": "/net-OSSockOpt/#returns_995",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_netsvc_marking_level",
            "text": "[Source]  fun box so_netsvc_marking_level()\n: I32 val",
            "title": "so_netsvc_marking_level"
        },
        {
            "location": "/net-OSSockOpt/#returns_996",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_net_service_type",
            "text": "[Source]  fun box so_net_service_type()\n: I32 val",
            "title": "so_net_service_type"
        },
        {
            "location": "/net-OSSockOpt/#returns_997",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_nke",
            "text": "[Source]  fun box so_nke()\n: I32 val",
            "title": "so_nke"
        },
        {
            "location": "/net-OSSockOpt/#returns_998",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_noaddrerr",
            "text": "[Source]  fun box so_noaddrerr()\n: I32 val",
            "title": "so_noaddrerr"
        },
        {
            "location": "/net-OSSockOpt/#returns_999",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_nofcs",
            "text": "[Source]  fun box so_nofcs()\n: I32 val",
            "title": "so_nofcs"
        },
        {
            "location": "/net-OSSockOpt/#returns_1000",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_nosigpipe",
            "text": "[Source]  fun box so_nosigpipe()\n: I32 val",
            "title": "so_nosigpipe"
        },
        {
            "location": "/net-OSSockOpt/#returns_1001",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_notifyconflict",
            "text": "[Source]  fun box so_notifyconflict()\n: I32 val",
            "title": "so_notifyconflict"
        },
        {
            "location": "/net-OSSockOpt/#returns_1002",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_no_check",
            "text": "[Source]  fun box so_no_check()\n: I32 val",
            "title": "so_no_check"
        },
        {
            "location": "/net-OSSockOpt/#returns_1003",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_no_ddp",
            "text": "[Source]  fun box so_no_ddp()\n: I32 val",
            "title": "so_no_ddp"
        },
        {
            "location": "/net-OSSockOpt/#returns_1004",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_no_offload",
            "text": "[Source]  fun box so_no_offload()\n: I32 val",
            "title": "so_no_offload"
        },
        {
            "location": "/net-OSSockOpt/#returns_1005",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_np_extensions",
            "text": "[Source]  fun box so_np_extensions()\n: I32 val",
            "title": "so_np_extensions"
        },
        {
            "location": "/net-OSSockOpt/#returns_1006",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_nread",
            "text": "[Source]  fun box so_nread()\n: I32 val",
            "title": "so_nread"
        },
        {
            "location": "/net-OSSockOpt/#returns_1007",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_numrcvpkt",
            "text": "[Source]  fun box so_numrcvpkt()\n: I32 val",
            "title": "so_numrcvpkt"
        },
        {
            "location": "/net-OSSockOpt/#returns_1008",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_nwrite",
            "text": "[Source]  fun box so_nwrite()\n: I32 val",
            "title": "so_nwrite"
        },
        {
            "location": "/net-OSSockOpt/#returns_1009",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_oobinline",
            "text": "[Source]  fun box so_oobinline()\n: I32 val",
            "title": "so_oobinline"
        },
        {
            "location": "/net-OSSockOpt/#returns_1010",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_original_dst",
            "text": "[Source]  fun box so_original_dst()\n: I32 val",
            "title": "so_original_dst"
        },
        {
            "location": "/net-OSSockOpt/#returns_1011",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_passcred",
            "text": "[Source]  fun box so_passcred()\n: I32 val",
            "title": "so_passcred"
        },
        {
            "location": "/net-OSSockOpt/#returns_1012",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_passsec",
            "text": "[Source]  fun box so_passsec()\n: I32 val",
            "title": "so_passsec"
        },
        {
            "location": "/net-OSSockOpt/#returns_1013",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_peek_off",
            "text": "[Source]  fun box so_peek_off()\n: I32 val",
            "title": "so_peek_off"
        },
        {
            "location": "/net-OSSockOpt/#returns_1014",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_peercred",
            "text": "[Source]  fun box so_peercred()\n: I32 val",
            "title": "so_peercred"
        },
        {
            "location": "/net-OSSockOpt/#returns_1015",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_peerlabel",
            "text": "[Source]  fun box so_peerlabel()\n: I32 val",
            "title": "so_peerlabel"
        },
        {
            "location": "/net-OSSockOpt/#returns_1016",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_peername",
            "text": "[Source]  fun box so_peername()\n: I32 val",
            "title": "so_peername"
        },
        {
            "location": "/net-OSSockOpt/#returns_1017",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_peersec",
            "text": "[Source]  fun box so_peersec()\n: I32 val",
            "title": "so_peersec"
        },
        {
            "location": "/net-OSSockOpt/#returns_1018",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_port_scalability",
            "text": "[Source]  fun box so_port_scalability()\n: I32 val",
            "title": "so_port_scalability"
        },
        {
            "location": "/net-OSSockOpt/#returns_1019",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_priority",
            "text": "[Source]  fun box so_priority()\n: I32 val",
            "title": "so_priority"
        },
        {
            "location": "/net-OSSockOpt/#returns_1020",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_protocol",
            "text": "[Source]  fun box so_protocol()\n: I32 val",
            "title": "so_protocol"
        },
        {
            "location": "/net-OSSockOpt/#returns_1021",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_protocol_info",
            "text": "[Source]  fun box so_protocol_info()\n: I32 val",
            "title": "so_protocol_info"
        },
        {
            "location": "/net-OSSockOpt/#returns_1022",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_prototype",
            "text": "[Source]  fun box so_prototype()\n: I32 val",
            "title": "so_prototype"
        },
        {
            "location": "/net-OSSockOpt/#returns_1023",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_proxyusr",
            "text": "[Source]  fun box so_proxyusr()\n: I32 val",
            "title": "so_proxyusr"
        },
        {
            "location": "/net-OSSockOpt/#returns_1024",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_randomport",
            "text": "[Source]  fun box so_randomport()\n: I32 val",
            "title": "so_randomport"
        },
        {
            "location": "/net-OSSockOpt/#returns_1025",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_rcvbuf",
            "text": "[Source]  fun box so_rcvbuf()\n: I32 val",
            "title": "so_rcvbuf"
        },
        {
            "location": "/net-OSSockOpt/#returns_1026",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_rcvbufforce",
            "text": "[Source]  fun box so_rcvbufforce()\n: I32 val",
            "title": "so_rcvbufforce"
        },
        {
            "location": "/net-OSSockOpt/#returns_1027",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_rcvlowat",
            "text": "[Source]  fun box so_rcvlowat()\n: I32 val",
            "title": "so_rcvlowat"
        },
        {
            "location": "/net-OSSockOpt/#returns_1028",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_rcvtimeo",
            "text": "[Source]  fun box so_rcvtimeo()\n: I32 val",
            "title": "so_rcvtimeo"
        },
        {
            "location": "/net-OSSockOpt/#returns_1029",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_rds_transport",
            "text": "[Source]  fun box so_rds_transport()\n: I32 val",
            "title": "so_rds_transport"
        },
        {
            "location": "/net-OSSockOpt/#returns_1030",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_reuseaddr",
            "text": "[Source]  fun box so_reuseaddr()\n: I32 val",
            "title": "so_reuseaddr"
        },
        {
            "location": "/net-OSSockOpt/#returns_1031",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_reuseport",
            "text": "[Source]  fun box so_reuseport()\n: I32 val",
            "title": "so_reuseport"
        },
        {
            "location": "/net-OSSockOpt/#returns_1032",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_reuseshareuid",
            "text": "[Source]  fun box so_reuseshareuid()\n: I32 val",
            "title": "so_reuseshareuid"
        },
        {
            "location": "/net-OSSockOpt/#returns_1033",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_rfcomm_fc_info",
            "text": "[Source]  fun box so_rfcomm_fc_info()\n: I32 val",
            "title": "so_rfcomm_fc_info"
        },
        {
            "location": "/net-OSSockOpt/#returns_1034",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_rfcomm_mtu",
            "text": "[Source]  fun box so_rfcomm_mtu()\n: I32 val",
            "title": "so_rfcomm_mtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_1035",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_rxq_ovfl",
            "text": "[Source]  fun box so_rxq_ovfl()\n: I32 val",
            "title": "so_rxq_ovfl"
        },
        {
            "location": "/net-OSSockOpt/#returns_1036",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_sco_conninfo",
            "text": "[Source]  fun box so_sco_conninfo()\n: I32 val",
            "title": "so_sco_conninfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_1037",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_sco_mtu",
            "text": "[Source]  fun box so_sco_mtu()\n: I32 val",
            "title": "so_sco_mtu"
        },
        {
            "location": "/net-OSSockOpt/#returns_1038",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_security_authentication",
            "text": "[Source]  fun box so_security_authentication()\n: I32 val",
            "title": "so_security_authentication"
        },
        {
            "location": "/net-OSSockOpt/#returns_1039",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_security_encryption_network",
            "text": "[Source]  fun box so_security_encryption_network()\n: I32 val",
            "title": "so_security_encryption_network"
        },
        {
            "location": "/net-OSSockOpt/#returns_1040",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_security_encryption_transport",
            "text": "[Source]  fun box so_security_encryption_transport()\n: I32 val",
            "title": "so_security_encryption_transport"
        },
        {
            "location": "/net-OSSockOpt/#returns_1041",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_select_err_queue",
            "text": "[Source]  fun box so_select_err_queue()\n: I32 val",
            "title": "so_select_err_queue"
        },
        {
            "location": "/net-OSSockOpt/#returns_1042",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_setclp",
            "text": "[Source]  fun box so_setclp()\n: I32 val",
            "title": "so_setclp"
        },
        {
            "location": "/net-OSSockOpt/#returns_1043",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_setfib",
            "text": "[Source]  fun box so_setfib()\n: I32 val",
            "title": "so_setfib"
        },
        {
            "location": "/net-OSSockOpt/#returns_1044",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_sndbuf",
            "text": "[Source]  fun box so_sndbuf()\n: I32 val",
            "title": "so_sndbuf"
        },
        {
            "location": "/net-OSSockOpt/#returns_1045",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_sndbufforce",
            "text": "[Source]  fun box so_sndbufforce()\n: I32 val",
            "title": "so_sndbufforce"
        },
        {
            "location": "/net-OSSockOpt/#returns_1046",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_sndlowat",
            "text": "[Source]  fun box so_sndlowat()\n: I32 val",
            "title": "so_sndlowat"
        },
        {
            "location": "/net-OSSockOpt/#returns_1047",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_sndtimeo",
            "text": "[Source]  fun box so_sndtimeo()\n: I32 val",
            "title": "so_sndtimeo"
        },
        {
            "location": "/net-OSSockOpt/#returns_1048",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_timestamp",
            "text": "[Source]  fun box so_timestamp()\n: I32 val",
            "title": "so_timestamp"
        },
        {
            "location": "/net-OSSockOpt/#returns_1049",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_timestamping",
            "text": "[Source]  fun box so_timestamping()\n: I32 val",
            "title": "so_timestamping"
        },
        {
            "location": "/net-OSSockOpt/#returns_1050",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_timestampns",
            "text": "[Source]  fun box so_timestampns()\n: I32 val",
            "title": "so_timestampns"
        },
        {
            "location": "/net-OSSockOpt/#returns_1051",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_timestamp_monotonic",
            "text": "[Source]  fun box so_timestamp_monotonic()\n: I32 val",
            "title": "so_timestamp_monotonic"
        },
        {
            "location": "/net-OSSockOpt/#returns_1052",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_type",
            "text": "[Source]  fun box so_type()\n: I32 val",
            "title": "so_type"
        },
        {
            "location": "/net-OSSockOpt/#returns_1053",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_upcallclosewait",
            "text": "[Source]  fun box so_upcallclosewait()\n: I32 val",
            "title": "so_upcallclosewait"
        },
        {
            "location": "/net-OSSockOpt/#returns_1054",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_update_accept_context",
            "text": "[Source]  fun box so_update_accept_context()\n: I32 val",
            "title": "so_update_accept_context"
        },
        {
            "location": "/net-OSSockOpt/#returns_1055",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_useloopback",
            "text": "[Source]  fun box so_useloopback()\n: I32 val",
            "title": "so_useloopback"
        },
        {
            "location": "/net-OSSockOpt/#returns_1056",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_user_cookie",
            "text": "[Source]  fun box so_user_cookie()\n: I32 val",
            "title": "so_user_cookie"
        },
        {
            "location": "/net-OSSockOpt/#returns_1057",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_vendor",
            "text": "[Source]  fun box so_vendor()\n: I32 val",
            "title": "so_vendor"
        },
        {
            "location": "/net-OSSockOpt/#returns_1058",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_vm_sockets_buffer_max_size",
            "text": "[Source]  fun box so_vm_sockets_buffer_max_size()\n: I32 val",
            "title": "so_vm_sockets_buffer_max_size"
        },
        {
            "location": "/net-OSSockOpt/#returns_1059",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_vm_sockets_buffer_min_size",
            "text": "[Source]  fun box so_vm_sockets_buffer_min_size()\n: I32 val",
            "title": "so_vm_sockets_buffer_min_size"
        },
        {
            "location": "/net-OSSockOpt/#returns_1060",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_vm_sockets_buffer_size",
            "text": "[Source]  fun box so_vm_sockets_buffer_size()\n: I32 val",
            "title": "so_vm_sockets_buffer_size"
        },
        {
            "location": "/net-OSSockOpt/#returns_1061",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_vm_sockets_connect_timeout",
            "text": "[Source]  fun box so_vm_sockets_connect_timeout()\n: I32 val",
            "title": "so_vm_sockets_connect_timeout"
        },
        {
            "location": "/net-OSSockOpt/#returns_1062",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_vm_sockets_nonblock_txrx",
            "text": "[Source]  fun box so_vm_sockets_nonblock_txrx()\n: I32 val",
            "title": "so_vm_sockets_nonblock_txrx"
        },
        {
            "location": "/net-OSSockOpt/#returns_1063",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_vm_sockets_peer_host_vm_id",
            "text": "[Source]  fun box so_vm_sockets_peer_host_vm_id()\n: I32 val",
            "title": "so_vm_sockets_peer_host_vm_id"
        },
        {
            "location": "/net-OSSockOpt/#returns_1064",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_vm_sockets_trusted",
            "text": "[Source]  fun box so_vm_sockets_trusted()\n: I32 val",
            "title": "so_vm_sockets_trusted"
        },
        {
            "location": "/net-OSSockOpt/#returns_1065",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_wantmore",
            "text": "[Source]  fun box so_wantmore()\n: I32 val",
            "title": "so_wantmore"
        },
        {
            "location": "/net-OSSockOpt/#returns_1066",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_wantoobflag",
            "text": "[Source]  fun box so_wantoobflag()\n: I32 val",
            "title": "so_wantoobflag"
        },
        {
            "location": "/net-OSSockOpt/#returns_1067",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#so_wifi_status",
            "text": "[Source]  fun box so_wifi_status()\n: I32 val",
            "title": "so_wifi_status"
        },
        {
            "location": "/net-OSSockOpt/#returns_1068",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp6_mss",
            "text": "[Source]  fun box tcp6_mss()\n: I32 val",
            "title": "tcp6_mss"
        },
        {
            "location": "/net-OSSockOpt/#returns_1069",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpci_flag_lossrecovery",
            "text": "[Source]  fun box tcpci_flag_lossrecovery()\n: I32 val",
            "title": "tcpci_flag_lossrecovery"
        },
        {
            "location": "/net-OSSockOpt/#returns_1070",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpci_flag_reordering_detected",
            "text": "[Source]  fun box tcpci_flag_reordering_detected()\n: I32 val",
            "title": "tcpci_flag_reordering_detected"
        },
        {
            "location": "/net-OSSockOpt/#returns_1071",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpci_opt_ecn",
            "text": "[Source]  fun box tcpci_opt_ecn()\n: I32 val",
            "title": "tcpci_opt_ecn"
        },
        {
            "location": "/net-OSSockOpt/#returns_1072",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpci_opt_sack",
            "text": "[Source]  fun box tcpci_opt_sack()\n: I32 val",
            "title": "tcpci_opt_sack"
        },
        {
            "location": "/net-OSSockOpt/#returns_1073",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpci_opt_timestamps",
            "text": "[Source]  fun box tcpci_opt_timestamps()\n: I32 val",
            "title": "tcpci_opt_timestamps"
        },
        {
            "location": "/net-OSSockOpt/#returns_1074",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpci_opt_wscale",
            "text": "[Source]  fun box tcpci_opt_wscale()\n: I32 val",
            "title": "tcpci_opt_wscale"
        },
        {
            "location": "/net-OSSockOpt/#returns_1075",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpf_ca_cwr",
            "text": "[Source]  fun box tcpf_ca_cwr()\n: I32 val",
            "title": "tcpf_ca_cwr"
        },
        {
            "location": "/net-OSSockOpt/#returns_1076",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpf_ca_disorder",
            "text": "[Source]  fun box tcpf_ca_disorder()\n: I32 val",
            "title": "tcpf_ca_disorder"
        },
        {
            "location": "/net-OSSockOpt/#returns_1077",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpf_ca_loss",
            "text": "[Source]  fun box tcpf_ca_loss()\n: I32 val",
            "title": "tcpf_ca_loss"
        },
        {
            "location": "/net-OSSockOpt/#returns_1078",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpf_ca_open",
            "text": "[Source]  fun box tcpf_ca_open()\n: I32 val",
            "title": "tcpf_ca_open"
        },
        {
            "location": "/net-OSSockOpt/#returns_1079",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpf_ca_recovery",
            "text": "[Source]  fun box tcpf_ca_recovery()\n: I32 val",
            "title": "tcpf_ca_recovery"
        },
        {
            "location": "/net-OSSockOpt/#returns_1080",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpi_opt_ecn",
            "text": "[Source]  fun box tcpi_opt_ecn()\n: I32 val",
            "title": "tcpi_opt_ecn"
        },
        {
            "location": "/net-OSSockOpt/#returns_1081",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpi_opt_ecn_seen",
            "text": "[Source]  fun box tcpi_opt_ecn_seen()\n: I32 val",
            "title": "tcpi_opt_ecn_seen"
        },
        {
            "location": "/net-OSSockOpt/#returns_1082",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpi_opt_sack",
            "text": "[Source]  fun box tcpi_opt_sack()\n: I32 val",
            "title": "tcpi_opt_sack"
        },
        {
            "location": "/net-OSSockOpt/#returns_1083",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpi_opt_syn_data",
            "text": "[Source]  fun box tcpi_opt_syn_data()\n: I32 val",
            "title": "tcpi_opt_syn_data"
        },
        {
            "location": "/net-OSSockOpt/#returns_1084",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpi_opt_timestamps",
            "text": "[Source]  fun box tcpi_opt_timestamps()\n: I32 val",
            "title": "tcpi_opt_timestamps"
        },
        {
            "location": "/net-OSSockOpt/#returns_1085",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpi_opt_toe",
            "text": "[Source]  fun box tcpi_opt_toe()\n: I32 val",
            "title": "tcpi_opt_toe"
        },
        {
            "location": "/net-OSSockOpt/#returns_1086",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpi_opt_wscale",
            "text": "[Source]  fun box tcpi_opt_wscale()\n: I32 val",
            "title": "tcpi_opt_wscale"
        },
        {
            "location": "/net-OSSockOpt/#returns_1087",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_cc",
            "text": "[Source]  fun box tcpolen_cc()\n: I32 val",
            "title": "tcpolen_cc"
        },
        {
            "location": "/net-OSSockOpt/#returns_1088",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_cc_appa",
            "text": "[Source]  fun box tcpolen_cc_appa()\n: I32 val",
            "title": "tcpolen_cc_appa"
        },
        {
            "location": "/net-OSSockOpt/#returns_1089",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_eol",
            "text": "[Source]  fun box tcpolen_eol()\n: I32 val",
            "title": "tcpolen_eol"
        },
        {
            "location": "/net-OSSockOpt/#returns_1090",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_fastopen_req",
            "text": "[Source]  fun box tcpolen_fastopen_req()\n: I32 val",
            "title": "tcpolen_fastopen_req"
        },
        {
            "location": "/net-OSSockOpt/#returns_1091",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_fast_open_empty",
            "text": "[Source]  fun box tcpolen_fast_open_empty()\n: I32 val",
            "title": "tcpolen_fast_open_empty"
        },
        {
            "location": "/net-OSSockOpt/#returns_1092",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_fast_open_max",
            "text": "[Source]  fun box tcpolen_fast_open_max()\n: I32 val",
            "title": "tcpolen_fast_open_max"
        },
        {
            "location": "/net-OSSockOpt/#returns_1093",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_fast_open_min",
            "text": "[Source]  fun box tcpolen_fast_open_min()\n: I32 val",
            "title": "tcpolen_fast_open_min"
        },
        {
            "location": "/net-OSSockOpt/#returns_1094",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_maxseg",
            "text": "[Source]  fun box tcpolen_maxseg()\n: I32 val",
            "title": "tcpolen_maxseg"
        },
        {
            "location": "/net-OSSockOpt/#returns_1095",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_nop",
            "text": "[Source]  fun box tcpolen_nop()\n: I32 val",
            "title": "tcpolen_nop"
        },
        {
            "location": "/net-OSSockOpt/#returns_1096",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_pad",
            "text": "[Source]  fun box tcpolen_pad()\n: I32 val",
            "title": "tcpolen_pad"
        },
        {
            "location": "/net-OSSockOpt/#returns_1097",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_sack",
            "text": "[Source]  fun box tcpolen_sack()\n: I32 val",
            "title": "tcpolen_sack"
        },
        {
            "location": "/net-OSSockOpt/#returns_1098",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_sackhdr",
            "text": "[Source]  fun box tcpolen_sackhdr()\n: I32 val",
            "title": "tcpolen_sackhdr"
        },
        {
            "location": "/net-OSSockOpt/#returns_1099",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_sack_permitted",
            "text": "[Source]  fun box tcpolen_sack_permitted()\n: I32 val",
            "title": "tcpolen_sack_permitted"
        },
        {
            "location": "/net-OSSockOpt/#returns_1100",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_signature",
            "text": "[Source]  fun box tcpolen_signature()\n: I32 val",
            "title": "tcpolen_signature"
        },
        {
            "location": "/net-OSSockOpt/#returns_1101",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_timestamp",
            "text": "[Source]  fun box tcpolen_timestamp()\n: I32 val",
            "title": "tcpolen_timestamp"
        },
        {
            "location": "/net-OSSockOpt/#returns_1102",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_tstamp_appa",
            "text": "[Source]  fun box tcpolen_tstamp_appa()\n: I32 val",
            "title": "tcpolen_tstamp_appa"
        },
        {
            "location": "/net-OSSockOpt/#returns_1103",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpolen_window",
            "text": "[Source]  fun box tcpolen_window()\n: I32 val",
            "title": "tcpolen_window"
        },
        {
            "location": "/net-OSSockOpt/#returns_1104",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_cc",
            "text": "[Source]  fun box tcpopt_cc()\n: I32 val",
            "title": "tcpopt_cc"
        },
        {
            "location": "/net-OSSockOpt/#returns_1105",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_ccecho",
            "text": "[Source]  fun box tcpopt_ccecho()\n: I32 val",
            "title": "tcpopt_ccecho"
        },
        {
            "location": "/net-OSSockOpt/#returns_1106",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_ccnew",
            "text": "[Source]  fun box tcpopt_ccnew()\n: I32 val",
            "title": "tcpopt_ccnew"
        },
        {
            "location": "/net-OSSockOpt/#returns_1107",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_eol",
            "text": "[Source]  fun box tcpopt_eol()\n: I32 val",
            "title": "tcpopt_eol"
        },
        {
            "location": "/net-OSSockOpt/#returns_1108",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_fastopen",
            "text": "[Source]  fun box tcpopt_fastopen()\n: I32 val",
            "title": "tcpopt_fastopen"
        },
        {
            "location": "/net-OSSockOpt/#returns_1109",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_fast_open",
            "text": "[Source]  fun box tcpopt_fast_open()\n: I32 val",
            "title": "tcpopt_fast_open"
        },
        {
            "location": "/net-OSSockOpt/#returns_1110",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_maxseg",
            "text": "[Source]  fun box tcpopt_maxseg()\n: I32 val",
            "title": "tcpopt_maxseg"
        },
        {
            "location": "/net-OSSockOpt/#returns_1111",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_multipath",
            "text": "[Source]  fun box tcpopt_multipath()\n: I32 val",
            "title": "tcpopt_multipath"
        },
        {
            "location": "/net-OSSockOpt/#returns_1112",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_nop",
            "text": "[Source]  fun box tcpopt_nop()\n: I32 val",
            "title": "tcpopt_nop"
        },
        {
            "location": "/net-OSSockOpt/#returns_1113",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_pad",
            "text": "[Source]  fun box tcpopt_pad()\n: I32 val",
            "title": "tcpopt_pad"
        },
        {
            "location": "/net-OSSockOpt/#returns_1114",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_sack",
            "text": "[Source]  fun box tcpopt_sack()\n: I32 val",
            "title": "tcpopt_sack"
        },
        {
            "location": "/net-OSSockOpt/#returns_1115",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_sack_hdr",
            "text": "[Source]  fun box tcpopt_sack_hdr()\n: I32 val",
            "title": "tcpopt_sack_hdr"
        },
        {
            "location": "/net-OSSockOpt/#returns_1116",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_sack_permitted",
            "text": "[Source]  fun box tcpopt_sack_permitted()\n: I32 val",
            "title": "tcpopt_sack_permitted"
        },
        {
            "location": "/net-OSSockOpt/#returns_1117",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_sack_permit_hdr",
            "text": "[Source]  fun box tcpopt_sack_permit_hdr()\n: I32 val",
            "title": "tcpopt_sack_permit_hdr"
        },
        {
            "location": "/net-OSSockOpt/#returns_1118",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_signature",
            "text": "[Source]  fun box tcpopt_signature()\n: I32 val",
            "title": "tcpopt_signature"
        },
        {
            "location": "/net-OSSockOpt/#returns_1119",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_timestamp",
            "text": "[Source]  fun box tcpopt_timestamp()\n: I32 val",
            "title": "tcpopt_timestamp"
        },
        {
            "location": "/net-OSSockOpt/#returns_1120",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_tstamp_hdr",
            "text": "[Source]  fun box tcpopt_tstamp_hdr()\n: I32 val",
            "title": "tcpopt_tstamp_hdr"
        },
        {
            "location": "/net-OSSockOpt/#returns_1121",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcpopt_window",
            "text": "[Source]  fun box tcpopt_window()\n: I32 val",
            "title": "tcpopt_window"
        },
        {
            "location": "/net-OSSockOpt/#returns_1122",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_ca_name_max",
            "text": "[Source]  fun box tcp_ca_name_max()\n: I32 val",
            "title": "tcp_ca_name_max"
        },
        {
            "location": "/net-OSSockOpt/#returns_1123",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_ccalgoopt",
            "text": "[Source]  fun box tcp_ccalgoopt()\n: I32 val",
            "title": "tcp_ccalgoopt"
        },
        {
            "location": "/net-OSSockOpt/#returns_1124",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_cc_info",
            "text": "[Source]  fun box tcp_cc_info()\n: I32 val",
            "title": "tcp_cc_info"
        },
        {
            "location": "/net-OSSockOpt/#returns_1125",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_congestion",
            "text": "[Source]  fun box tcp_congestion()\n: I32 val",
            "title": "tcp_congestion"
        },
        {
            "location": "/net-OSSockOpt/#returns_1126",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_connectiontimeout",
            "text": "[Source]  fun box tcp_connectiontimeout()\n: I32 val",
            "title": "tcp_connectiontimeout"
        },
        {
            "location": "/net-OSSockOpt/#returns_1127",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_connection_info",
            "text": "[Source]  fun box tcp_connection_info()\n: I32 val",
            "title": "tcp_connection_info"
        },
        {
            "location": "/net-OSSockOpt/#returns_1128",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_cookie_in_always",
            "text": "[Source]  fun box tcp_cookie_in_always()\n: I32 val",
            "title": "tcp_cookie_in_always"
        },
        {
            "location": "/net-OSSockOpt/#returns_1129",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_cookie_max",
            "text": "[Source]  fun box tcp_cookie_max()\n: I32 val",
            "title": "tcp_cookie_max"
        },
        {
            "location": "/net-OSSockOpt/#returns_1130",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_cookie_min",
            "text": "[Source]  fun box tcp_cookie_min()\n: I32 val",
            "title": "tcp_cookie_min"
        },
        {
            "location": "/net-OSSockOpt/#returns_1131",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_cookie_out_never",
            "text": "[Source]  fun box tcp_cookie_out_never()\n: I32 val",
            "title": "tcp_cookie_out_never"
        },
        {
            "location": "/net-OSSockOpt/#returns_1132",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_cookie_pair_size",
            "text": "[Source]  fun box tcp_cookie_pair_size()\n: I32 val",
            "title": "tcp_cookie_pair_size"
        },
        {
            "location": "/net-OSSockOpt/#returns_1133",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_cookie_transactions",
            "text": "[Source]  fun box tcp_cookie_transactions()\n: I32 val",
            "title": "tcp_cookie_transactions"
        },
        {
            "location": "/net-OSSockOpt/#returns_1134",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_cork",
            "text": "[Source]  fun box tcp_cork()\n: I32 val",
            "title": "tcp_cork"
        },
        {
            "location": "/net-OSSockOpt/#returns_1135",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_defer_accept",
            "text": "[Source]  fun box tcp_defer_accept()\n: I32 val",
            "title": "tcp_defer_accept"
        },
        {
            "location": "/net-OSSockOpt/#returns_1136",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_enable_ecn",
            "text": "[Source]  fun box tcp_enable_ecn()\n: I32 val",
            "title": "tcp_enable_ecn"
        },
        {
            "location": "/net-OSSockOpt/#returns_1137",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_fastopen",
            "text": "[Source]  fun box tcp_fastopen()\n: I32 val",
            "title": "tcp_fastopen"
        },
        {
            "location": "/net-OSSockOpt/#returns_1138",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_function_blk",
            "text": "[Source]  fun box tcp_function_blk()\n: I32 val",
            "title": "tcp_function_blk"
        },
        {
            "location": "/net-OSSockOpt/#returns_1139",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_function_name_len_max",
            "text": "[Source]  fun box tcp_function_name_len_max()\n: I32 val",
            "title": "tcp_function_name_len_max"
        },
        {
            "location": "/net-OSSockOpt/#returns_1140",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_info",
            "text": "[Source]  fun box tcp_info()\n: I32 val",
            "title": "tcp_info"
        },
        {
            "location": "/net-OSSockOpt/#returns_1141",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_keepalive",
            "text": "[Source]  fun box tcp_keepalive()\n: I32 val",
            "title": "tcp_keepalive"
        },
        {
            "location": "/net-OSSockOpt/#returns_1142",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_keepcnt",
            "text": "[Source]  fun box tcp_keepcnt()\n: I32 val",
            "title": "tcp_keepcnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_1143",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_keepidle",
            "text": "[Source]  fun box tcp_keepidle()\n: I32 val",
            "title": "tcp_keepidle"
        },
        {
            "location": "/net-OSSockOpt/#returns_1144",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_keepinit",
            "text": "[Source]  fun box tcp_keepinit()\n: I32 val",
            "title": "tcp_keepinit"
        },
        {
            "location": "/net-OSSockOpt/#returns_1145",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_keepintvl",
            "text": "[Source]  fun box tcp_keepintvl()\n: I32 val",
            "title": "tcp_keepintvl"
        },
        {
            "location": "/net-OSSockOpt/#returns_1146",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_linger2",
            "text": "[Source]  fun box tcp_linger2()\n: I32 val",
            "title": "tcp_linger2"
        },
        {
            "location": "/net-OSSockOpt/#returns_1147",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_maxburst",
            "text": "[Source]  fun box tcp_maxburst()\n: I32 val",
            "title": "tcp_maxburst"
        },
        {
            "location": "/net-OSSockOpt/#returns_1148",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_maxhlen",
            "text": "[Source]  fun box tcp_maxhlen()\n: I32 val",
            "title": "tcp_maxhlen"
        },
        {
            "location": "/net-OSSockOpt/#returns_1149",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_maxolen",
            "text": "[Source]  fun box tcp_maxolen()\n: I32 val",
            "title": "tcp_maxolen"
        },
        {
            "location": "/net-OSSockOpt/#returns_1150",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_maxseg",
            "text": "[Source]  fun box tcp_maxseg()\n: I32 val",
            "title": "tcp_maxseg"
        },
        {
            "location": "/net-OSSockOpt/#returns_1151",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_maxwin",
            "text": "[Source]  fun box tcp_maxwin()\n: I32 val",
            "title": "tcp_maxwin"
        },
        {
            "location": "/net-OSSockOpt/#returns_1152",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_max_sack",
            "text": "[Source]  fun box tcp_max_sack()\n: I32 val",
            "title": "tcp_max_sack"
        },
        {
            "location": "/net-OSSockOpt/#returns_1153",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_max_winshift",
            "text": "[Source]  fun box tcp_max_winshift()\n: I32 val",
            "title": "tcp_max_winshift"
        },
        {
            "location": "/net-OSSockOpt/#returns_1154",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_md5sig",
            "text": "[Source]  fun box tcp_md5sig()\n: I32 val",
            "title": "tcp_md5sig"
        },
        {
            "location": "/net-OSSockOpt/#returns_1155",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_md5sig_maxkeylen",
            "text": "[Source]  fun box tcp_md5sig_maxkeylen()\n: I32 val",
            "title": "tcp_md5sig_maxkeylen"
        },
        {
            "location": "/net-OSSockOpt/#returns_1156",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_minmss",
            "text": "[Source]  fun box tcp_minmss()\n: I32 val",
            "title": "tcp_minmss"
        },
        {
            "location": "/net-OSSockOpt/#returns_1157",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_mss",
            "text": "[Source]  fun box tcp_mss()\n: I32 val",
            "title": "tcp_mss"
        },
        {
            "location": "/net-OSSockOpt/#returns_1158",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_mss_default",
            "text": "[Source]  fun box tcp_mss_default()\n: I32 val",
            "title": "tcp_mss_default"
        },
        {
            "location": "/net-OSSockOpt/#returns_1159",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_mss_desired",
            "text": "[Source]  fun box tcp_mss_desired()\n: I32 val",
            "title": "tcp_mss_desired"
        },
        {
            "location": "/net-OSSockOpt/#returns_1160",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_nodelay",
            "text": "[Source]  fun box tcp_nodelay()\n: I32 val",
            "title": "tcp_nodelay"
        },
        {
            "location": "/net-OSSockOpt/#returns_1161",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_noopt",
            "text": "[Source]  fun box tcp_noopt()\n: I32 val",
            "title": "tcp_noopt"
        },
        {
            "location": "/net-OSSockOpt/#returns_1162",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_nopush",
            "text": "[Source]  fun box tcp_nopush()\n: I32 val",
            "title": "tcp_nopush"
        },
        {
            "location": "/net-OSSockOpt/#returns_1163",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_notsent_lowat",
            "text": "[Source]  fun box tcp_notsent_lowat()\n: I32 val",
            "title": "tcp_notsent_lowat"
        },
        {
            "location": "/net-OSSockOpt/#returns_1164",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_pcap_in",
            "text": "[Source]  fun box tcp_pcap_in()\n: I32 val",
            "title": "tcp_pcap_in"
        },
        {
            "location": "/net-OSSockOpt/#returns_1165",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_pcap_out",
            "text": "[Source]  fun box tcp_pcap_out()\n: I32 val",
            "title": "tcp_pcap_out"
        },
        {
            "location": "/net-OSSockOpt/#returns_1166",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_queue_seq",
            "text": "[Source]  fun box tcp_queue_seq()\n: I32 val",
            "title": "tcp_queue_seq"
        },
        {
            "location": "/net-OSSockOpt/#returns_1167",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_quickack",
            "text": "[Source]  fun box tcp_quickack()\n: I32 val",
            "title": "tcp_quickack"
        },
        {
            "location": "/net-OSSockOpt/#returns_1168",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_repair",
            "text": "[Source]  fun box tcp_repair()\n: I32 val",
            "title": "tcp_repair"
        },
        {
            "location": "/net-OSSockOpt/#returns_1169",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_repair_options",
            "text": "[Source]  fun box tcp_repair_options()\n: I32 val",
            "title": "tcp_repair_options"
        },
        {
            "location": "/net-OSSockOpt/#returns_1170",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_repair_queue",
            "text": "[Source]  fun box tcp_repair_queue()\n: I32 val",
            "title": "tcp_repair_queue"
        },
        {
            "location": "/net-OSSockOpt/#returns_1171",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_rxt_conndroptime",
            "text": "[Source]  fun box tcp_rxt_conndroptime()\n: I32 val",
            "title": "tcp_rxt_conndroptime"
        },
        {
            "location": "/net-OSSockOpt/#returns_1172",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_rxt_findrop",
            "text": "[Source]  fun box tcp_rxt_findrop()\n: I32 val",
            "title": "tcp_rxt_findrop"
        },
        {
            "location": "/net-OSSockOpt/#returns_1173",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_saved_syn",
            "text": "[Source]  fun box tcp_saved_syn()\n: I32 val",
            "title": "tcp_saved_syn"
        },
        {
            "location": "/net-OSSockOpt/#returns_1174",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_save_syn",
            "text": "[Source]  fun box tcp_save_syn()\n: I32 val",
            "title": "tcp_save_syn"
        },
        {
            "location": "/net-OSSockOpt/#returns_1175",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_sendmoreacks",
            "text": "[Source]  fun box tcp_sendmoreacks()\n: I32 val",
            "title": "tcp_sendmoreacks"
        },
        {
            "location": "/net-OSSockOpt/#returns_1176",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_syncnt",
            "text": "[Source]  fun box tcp_syncnt()\n: I32 val",
            "title": "tcp_syncnt"
        },
        {
            "location": "/net-OSSockOpt/#returns_1177",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_s_data_in",
            "text": "[Source]  fun box tcp_s_data_in()\n: I32 val",
            "title": "tcp_s_data_in"
        },
        {
            "location": "/net-OSSockOpt/#returns_1178",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_s_data_out",
            "text": "[Source]  fun box tcp_s_data_out()\n: I32 val",
            "title": "tcp_s_data_out"
        },
        {
            "location": "/net-OSSockOpt/#returns_1179",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_thin_dupack",
            "text": "[Source]  fun box tcp_thin_dupack()\n: I32 val",
            "title": "tcp_thin_dupack"
        },
        {
            "location": "/net-OSSockOpt/#returns_1180",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_thin_linear_timeouts",
            "text": "[Source]  fun box tcp_thin_linear_timeouts()\n: I32 val",
            "title": "tcp_thin_linear_timeouts"
        },
        {
            "location": "/net-OSSockOpt/#returns_1181",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_timestamp",
            "text": "[Source]  fun box tcp_timestamp()\n: I32 val",
            "title": "tcp_timestamp"
        },
        {
            "location": "/net-OSSockOpt/#returns_1182",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_user_timeout",
            "text": "[Source]  fun box tcp_user_timeout()\n: I32 val",
            "title": "tcp_user_timeout"
        },
        {
            "location": "/net-OSSockOpt/#returns_1183",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_vendor",
            "text": "[Source]  fun box tcp_vendor()\n: I32 val",
            "title": "tcp_vendor"
        },
        {
            "location": "/net-OSSockOpt/#returns_1184",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tcp_window_clamp",
            "text": "[Source]  fun box tcp_window_clamp()\n: I32 val",
            "title": "tcp_window_clamp"
        },
        {
            "location": "/net-OSSockOpt/#returns_1185",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_addr_id",
            "text": "[Source]  fun box tipc_addr_id()\n: I32 val",
            "title": "tipc_addr_id"
        },
        {
            "location": "/net-OSSockOpt/#returns_1186",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_addr_mcast",
            "text": "[Source]  fun box tipc_addr_mcast()\n: I32 val",
            "title": "tipc_addr_mcast"
        },
        {
            "location": "/net-OSSockOpt/#returns_1187",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_addr_name",
            "text": "[Source]  fun box tipc_addr_name()\n: I32 val",
            "title": "tipc_addr_name"
        },
        {
            "location": "/net-OSSockOpt/#returns_1188",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_addr_nameseq",
            "text": "[Source]  fun box tipc_addr_nameseq()\n: I32 val",
            "title": "tipc_addr_nameseq"
        },
        {
            "location": "/net-OSSockOpt/#returns_1189",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_cfg_srv",
            "text": "[Source]  fun box tipc_cfg_srv()\n: I32 val",
            "title": "tipc_cfg_srv"
        },
        {
            "location": "/net-OSSockOpt/#returns_1190",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_cluster_scope",
            "text": "[Source]  fun box tipc_cluster_scope()\n: I32 val",
            "title": "tipc_cluster_scope"
        },
        {
            "location": "/net-OSSockOpt/#returns_1191",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_conn_shutdown",
            "text": "[Source]  fun box tipc_conn_shutdown()\n: I32 val",
            "title": "tipc_conn_shutdown"
        },
        {
            "location": "/net-OSSockOpt/#returns_1192",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_conn_timeout",
            "text": "[Source]  fun box tipc_conn_timeout()\n: I32 val",
            "title": "tipc_conn_timeout"
        },
        {
            "location": "/net-OSSockOpt/#returns_1193",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_critical_importance",
            "text": "[Source]  fun box tipc_critical_importance()\n: I32 val",
            "title": "tipc_critical_importance"
        },
        {
            "location": "/net-OSSockOpt/#returns_1194",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_destname",
            "text": "[Source]  fun box tipc_destname()\n: I32 val",
            "title": "tipc_destname"
        },
        {
            "location": "/net-OSSockOpt/#returns_1195",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_dest_droppable",
            "text": "[Source]  fun box tipc_dest_droppable()\n: I32 val",
            "title": "tipc_dest_droppable"
        },
        {
            "location": "/net-OSSockOpt/#returns_1196",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_errinfo",
            "text": "[Source]  fun box tipc_errinfo()\n: I32 val",
            "title": "tipc_errinfo"
        },
        {
            "location": "/net-OSSockOpt/#returns_1197",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_err_no_name",
            "text": "[Source]  fun box tipc_err_no_name()\n: I32 val",
            "title": "tipc_err_no_name"
        },
        {
            "location": "/net-OSSockOpt/#returns_1198",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_err_no_node",
            "text": "[Source]  fun box tipc_err_no_node()\n: I32 val",
            "title": "tipc_err_no_node"
        },
        {
            "location": "/net-OSSockOpt/#returns_1199",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_err_no_port",
            "text": "[Source]  fun box tipc_err_no_port()\n: I32 val",
            "title": "tipc_err_no_port"
        },
        {
            "location": "/net-OSSockOpt/#returns_1200",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_err_overload",
            "text": "[Source]  fun box tipc_err_overload()\n: I32 val",
            "title": "tipc_err_overload"
        },
        {
            "location": "/net-OSSockOpt/#returns_1201",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_high_importance",
            "text": "[Source]  fun box tipc_high_importance()\n: I32 val",
            "title": "tipc_high_importance"
        },
        {
            "location": "/net-OSSockOpt/#returns_1202",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_importance",
            "text": "[Source]  fun box tipc_importance()\n: I32 val",
            "title": "tipc_importance"
        },
        {
            "location": "/net-OSSockOpt/#returns_1203",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_link_state",
            "text": "[Source]  fun box tipc_link_state()\n: I32 val",
            "title": "tipc_link_state"
        },
        {
            "location": "/net-OSSockOpt/#returns_1204",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_low_importance",
            "text": "[Source]  fun box tipc_low_importance()\n: I32 val",
            "title": "tipc_low_importance"
        },
        {
            "location": "/net-OSSockOpt/#returns_1205",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_max_bearer_name",
            "text": "[Source]  fun box tipc_max_bearer_name()\n: I32 val",
            "title": "tipc_max_bearer_name"
        },
        {
            "location": "/net-OSSockOpt/#returns_1206",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_max_if_name",
            "text": "[Source]  fun box tipc_max_if_name()\n: I32 val",
            "title": "tipc_max_if_name"
        },
        {
            "location": "/net-OSSockOpt/#returns_1207",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_max_link_name",
            "text": "[Source]  fun box tipc_max_link_name()\n: I32 val",
            "title": "tipc_max_link_name"
        },
        {
            "location": "/net-OSSockOpt/#returns_1208",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_max_media_name",
            "text": "[Source]  fun box tipc_max_media_name()\n: I32 val",
            "title": "tipc_max_media_name"
        },
        {
            "location": "/net-OSSockOpt/#returns_1209",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_max_user_msg_size",
            "text": "[Source]  fun box tipc_max_user_msg_size()\n: I32 val",
            "title": "tipc_max_user_msg_size"
        },
        {
            "location": "/net-OSSockOpt/#returns_1210",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_medium_importance",
            "text": "[Source]  fun box tipc_medium_importance()\n: I32 val",
            "title": "tipc_medium_importance"
        },
        {
            "location": "/net-OSSockOpt/#returns_1211",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_node_recvq_depth",
            "text": "[Source]  fun box tipc_node_recvq_depth()\n: I32 val",
            "title": "tipc_node_recvq_depth"
        },
        {
            "location": "/net-OSSockOpt/#returns_1212",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_node_scope",
            "text": "[Source]  fun box tipc_node_scope()\n: I32 val",
            "title": "tipc_node_scope"
        },
        {
            "location": "/net-OSSockOpt/#returns_1213",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_ok",
            "text": "[Source]  fun box tipc_ok()\n: I32 val",
            "title": "tipc_ok"
        },
        {
            "location": "/net-OSSockOpt/#returns_1214",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_published",
            "text": "[Source]  fun box tipc_published()\n: I32 val",
            "title": "tipc_published"
        },
        {
            "location": "/net-OSSockOpt/#returns_1215",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_reserved_types",
            "text": "[Source]  fun box tipc_reserved_types()\n: I32 val",
            "title": "tipc_reserved_types"
        },
        {
            "location": "/net-OSSockOpt/#returns_1216",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_retdata",
            "text": "[Source]  fun box tipc_retdata()\n: I32 val",
            "title": "tipc_retdata"
        },
        {
            "location": "/net-OSSockOpt/#returns_1217",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_sock_recvq_depth",
            "text": "[Source]  fun box tipc_sock_recvq_depth()\n: I32 val",
            "title": "tipc_sock_recvq_depth"
        },
        {
            "location": "/net-OSSockOpt/#returns_1218",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_src_droppable",
            "text": "[Source]  fun box tipc_src_droppable()\n: I32 val",
            "title": "tipc_src_droppable"
        },
        {
            "location": "/net-OSSockOpt/#returns_1219",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_subscr_timeout",
            "text": "[Source]  fun box tipc_subscr_timeout()\n: I32 val",
            "title": "tipc_subscr_timeout"
        },
        {
            "location": "/net-OSSockOpt/#returns_1220",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_sub_cancel",
            "text": "[Source]  fun box tipc_sub_cancel()\n: I32 val",
            "title": "tipc_sub_cancel"
        },
        {
            "location": "/net-OSSockOpt/#returns_1221",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_sub_ports",
            "text": "[Source]  fun box tipc_sub_ports()\n: I32 val",
            "title": "tipc_sub_ports"
        },
        {
            "location": "/net-OSSockOpt/#returns_1222",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_sub_service",
            "text": "[Source]  fun box tipc_sub_service()\n: I32 val",
            "title": "tipc_sub_service"
        },
        {
            "location": "/net-OSSockOpt/#returns_1223",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_top_srv",
            "text": "[Source]  fun box tipc_top_srv()\n: I32 val",
            "title": "tipc_top_srv"
        },
        {
            "location": "/net-OSSockOpt/#returns_1224",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_wait_forever",
            "text": "[Source]  fun box tipc_wait_forever()\n: I32 val",
            "title": "tipc_wait_forever"
        },
        {
            "location": "/net-OSSockOpt/#returns_1225",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_withdrawn",
            "text": "[Source]  fun box tipc_withdrawn()\n: I32 val",
            "title": "tipc_withdrawn"
        },
        {
            "location": "/net-OSSockOpt/#returns_1226",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#tipc_zone_scope",
            "text": "[Source]  fun box tipc_zone_scope()\n: I32 val",
            "title": "tipc_zone_scope"
        },
        {
            "location": "/net-OSSockOpt/#returns_1227",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ttcp_client_snd_wnd",
            "text": "[Source]  fun box ttcp_client_snd_wnd()\n: I32 val",
            "title": "ttcp_client_snd_wnd"
        },
        {
            "location": "/net-OSSockOpt/#returns_1228",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#udp_cork",
            "text": "[Source]  fun box udp_cork()\n: I32 val",
            "title": "udp_cork"
        },
        {
            "location": "/net-OSSockOpt/#returns_1229",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#udp_encap",
            "text": "[Source]  fun box udp_encap()\n: I32 val",
            "title": "udp_encap"
        },
        {
            "location": "/net-OSSockOpt/#returns_1230",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#udp_encap_espinudp",
            "text": "[Source]  fun box udp_encap_espinudp()\n: I32 val",
            "title": "udp_encap_espinudp"
        },
        {
            "location": "/net-OSSockOpt/#returns_1231",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#udp_encap_espinudp_maxfraglen",
            "text": "[Source]  fun box udp_encap_espinudp_maxfraglen()\n: I32 val",
            "title": "udp_encap_espinudp_maxfraglen"
        },
        {
            "location": "/net-OSSockOpt/#returns_1232",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#udp_encap_espinudp_non_ike",
            "text": "[Source]  fun box udp_encap_espinudp_non_ike()\n: I32 val",
            "title": "udp_encap_espinudp_non_ike"
        },
        {
            "location": "/net-OSSockOpt/#returns_1233",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#udp_encap_espinudp_port",
            "text": "[Source]  fun box udp_encap_espinudp_port()\n: I32 val",
            "title": "udp_encap_espinudp_port"
        },
        {
            "location": "/net-OSSockOpt/#returns_1234",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#udp_encap_l2tpinudp",
            "text": "[Source]  fun box udp_encap_l2tpinudp()\n: I32 val",
            "title": "udp_encap_l2tpinudp"
        },
        {
            "location": "/net-OSSockOpt/#returns_1235",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#udp_nocksum",
            "text": "[Source]  fun box udp_nocksum()\n: I32 val",
            "title": "udp_nocksum"
        },
        {
            "location": "/net-OSSockOpt/#returns_1236",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#udp_no_check6_rx",
            "text": "[Source]  fun box udp_no_check6_rx()\n: I32 val",
            "title": "udp_no_check6_rx"
        },
        {
            "location": "/net-OSSockOpt/#returns_1237",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#udp_no_check6_tx",
            "text": "[Source]  fun box udp_no_check6_tx()\n: I32 val",
            "title": "udp_no_check6_tx"
        },
        {
            "location": "/net-OSSockOpt/#returns_1238",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#udp_vendor",
            "text": "[Source]  fun box udp_vendor()\n: I32 val",
            "title": "udp_vendor"
        },
        {
            "location": "/net-OSSockOpt/#returns_1239",
            "text": "I32  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#eq",
            "text": "[Source]  fun box eq(\n  that: OSSockOpt val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-OSSockOpt/#parameters",
            "text": "that:  OSSockOpt  val",
            "title": "Parameters"
        },
        {
            "location": "/net-OSSockOpt/#returns_1240",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-OSSockOpt/#ne",
            "text": "[Source]  fun box ne(\n  that: OSSockOpt val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-OSSockOpt/#parameters_1",
            "text": "that:  OSSockOpt  val",
            "title": "Parameters"
        },
        {
            "location": "/net-OSSockOpt/#returns_1241",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-NetAddress/",
            "text": "NetAddress\n\u00b6\n\n\n[Source]\n\n\nRepresents an IPv4 or IPv6 address. The family field indicates the address\ntype. The addr field is either the IPv4 address or the IPv6 flow info. The\naddr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The\nscope field is the IPv6 scope, or invalid for an IPv4 address.\n\n\nThis class is modelled after the C data structure for holding socket\naddresses for both IPv4 and IPv6 \nsockaddr_storage\n.\n\n\nUse the \nname\n method to obtain address/hostname and port/service as Strings.\n\n\nclass val NetAddress is\n  Equatable[NetAddress val] ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nEquatable\n[\nNetAddress\n val] ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create()\n: NetAddress iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNetAddress\n iso^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet length: \nU8\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nlet family: \nU8\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nlet port: \nU16\n val\n\u00b6\n\n\n[Source]\n\n\nPort number in network byte order.\n\n\nIn order to obtain a host byte order port, use:\n\n\nlet host_order_port: U16 = @ntohs[U16](net_address.port)\n\n\n\n\n\n\nlet addr: \nU32\n val\n\u00b6\n\n\n[Source]\n\n\nIPv4 address in network byte order.\nWill be \n0\n for IPv6 addresses. Check with \nipv4()\n and \nipv6()\n.\n\n\nUse \n@ntohl[U32](net_address.addr)\n to obtain it in the host byte order.\n\n\n\n\nlet addr1: \nU32\n val\n\u00b6\n\n\n[Source]\n\n\nBits 0-32 of the IPv6 address in network byte order.\n\n\n0\n if this is an IPv4 address. Check with \nipv4()\n and \nipv6()\n.\n\n\n\n\nlet addr2: \nU32\n val\n\u00b6\n\n\n[Source]\n\n\nBits 33-64 of the IPv6 address in network byte order.\n\n\n0\n if this is an IPv4 address. Check with \nipv4()\n and \nipv6()\n.\n\n\n\n\nlet addr3: \nU32\n val\n\u00b6\n\n\n[Source]\n\n\nBits 65-96 of the IPv6 address in network byte order.\n\n\n0\n if this is an IPv4 address. Check with \nipv4()\n and \nipv6()\n.\n\n\n\n\nlet addr4: \nU32\n val\n\u00b6\n\n\n[Source]\n\n\nBits 97-128 of the IPv6 address in network byte order.\n\n\n0\n if this is an IPv4 address. Check with \nipv4()\n and \nipv6()\n.\n\n\n\n\nlet scope: \nU32\n val\n\u00b6\n\n\n[Source]\n\n\nIPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes.\n\n\n\n\nPublic Functions\n\u00b6\n\n\nip4\n\u00b6\n\n\n[Source]\n\n\nReturns true for an IPv4 address.\n\n\nfun box ip4()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nip6\n\u00b6\n\n\n[Source]\n\n\nReturns true for an IPv6 address.\n\n\nfun box ip6()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nname\n\u00b6\n\n\n[Source]\n\n\nReturns the host and service name.\n\n\nIf \nreversedns\n is an instance of \nDNSLookupAuth\n\na DNS lookup will be executed and the hostname\nfor this address is returned as first element of the result tuple.\nIf no hostname could be found, an error is raised.\nIf \nreversedns\n is \nNone\n the plain IP address is given\nand no DNS lookup is executed.\n\n\nIf \nservicename\n is \nfalse\n the numeric port is returned\nas second element of the result tuple.\nIf it is \ntrue\n the port is translated into its\ncorresponding servicename (e.g. port 80 is returned as \n\"http\"\n).\n\n\nInternally this method uses the POSIX C function \ngetnameinfo\n.\n\n\nfun box name(\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val) = seq,\n  servicename: Bool val = seq)\n: (String val , String val) ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nreversedns: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val | \n    \nNone\n val) = seq\n\n\nservicename: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nString\n val , \nString\n val) ?\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: NetAddress box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNetAddress\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhost_eq\n\u00b6\n\n\n[Source]\n\n\nfun box host_eq(\n  that: NetAddress box)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNetAddress\n box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: NetAddress val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNetAddress\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "class NetAddress"
        },
        {
            "location": "/net-NetAddress/#netaddress",
            "text": "[Source]  Represents an IPv4 or IPv6 address. The family field indicates the address\ntype. The addr field is either the IPv4 address or the IPv6 flow info. The\naddr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The\nscope field is the IPv6 scope, or invalid for an IPv4 address.  This class is modelled after the C data structure for holding socket\naddresses for both IPv4 and IPv6  sockaddr_storage .  Use the  name  method to obtain address/hostname and port/service as Strings.  class val NetAddress is\n  Equatable[NetAddress val] ref",
            "title": "NetAddress"
        },
        {
            "location": "/net-NetAddress/#implements",
            "text": "Equatable [ NetAddress  val] ref",
            "title": "Implements"
        },
        {
            "location": "/net-NetAddress/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-NetAddress/#create",
            "text": "[Source]  new iso create()\n: NetAddress iso^",
            "title": "create"
        },
        {
            "location": "/net-NetAddress/#returns",
            "text": "NetAddress  iso^",
            "title": "Returns"
        },
        {
            "location": "/net-NetAddress/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/net-NetAddress/#let-length-u8-val",
            "text": "[Source]",
            "title": "let length: U8 val"
        },
        {
            "location": "/net-NetAddress/#let-family-u8-val",
            "text": "[Source]",
            "title": "let family: U8 val"
        },
        {
            "location": "/net-NetAddress/#let-port-u16-val",
            "text": "[Source]  Port number in network byte order.  In order to obtain a host byte order port, use:  let host_order_port: U16 = @ntohs[U16](net_address.port)",
            "title": "let port: U16 val"
        },
        {
            "location": "/net-NetAddress/#let-addr-u32-val",
            "text": "[Source]  IPv4 address in network byte order.\nWill be  0  for IPv6 addresses. Check with  ipv4()  and  ipv6() .  Use  @ntohl[U32](net_address.addr)  to obtain it in the host byte order.",
            "title": "let addr: U32 val"
        },
        {
            "location": "/net-NetAddress/#let-addr1-u32-val",
            "text": "[Source]  Bits 0-32 of the IPv6 address in network byte order.  0  if this is an IPv4 address. Check with  ipv4()  and  ipv6() .",
            "title": "let addr1: U32 val"
        },
        {
            "location": "/net-NetAddress/#let-addr2-u32-val",
            "text": "[Source]  Bits 33-64 of the IPv6 address in network byte order.  0  if this is an IPv4 address. Check with  ipv4()  and  ipv6() .",
            "title": "let addr2: U32 val"
        },
        {
            "location": "/net-NetAddress/#let-addr3-u32-val",
            "text": "[Source]  Bits 65-96 of the IPv6 address in network byte order.  0  if this is an IPv4 address. Check with  ipv4()  and  ipv6() .",
            "title": "let addr3: U32 val"
        },
        {
            "location": "/net-NetAddress/#let-addr4-u32-val",
            "text": "[Source]  Bits 97-128 of the IPv6 address in network byte order.  0  if this is an IPv4 address. Check with  ipv4()  and  ipv6() .",
            "title": "let addr4: U32 val"
        },
        {
            "location": "/net-NetAddress/#let-scope-u32-val",
            "text": "[Source]  IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes.",
            "title": "let scope: U32 val"
        },
        {
            "location": "/net-NetAddress/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-NetAddress/#ip4",
            "text": "[Source]  Returns true for an IPv4 address.  fun box ip4()\n: Bool val",
            "title": "ip4"
        },
        {
            "location": "/net-NetAddress/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-NetAddress/#ip6",
            "text": "[Source]  Returns true for an IPv6 address.  fun box ip6()\n: Bool val",
            "title": "ip6"
        },
        {
            "location": "/net-NetAddress/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-NetAddress/#name",
            "text": "[Source]  Returns the host and service name.  If  reversedns  is an instance of  DNSLookupAuth \na DNS lookup will be executed and the hostname\nfor this address is returned as first element of the result tuple.\nIf no hostname could be found, an error is raised.\nIf  reversedns  is  None  the plain IP address is given\nand no DNS lookup is executed.  If  servicename  is  false  the numeric port is returned\nas second element of the result tuple.\nIf it is  true  the port is translated into its\ncorresponding servicename (e.g. port 80 is returned as  \"http\" ).  Internally this method uses the POSIX C function  getnameinfo .  fun box name(\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val) = seq,\n  servicename: Bool val = seq)\n: (String val , String val) ?",
            "title": "name"
        },
        {
            "location": "/net-NetAddress/#parameters",
            "text": "reversedns: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val | \n     None  val) = seq  servicename:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-NetAddress/#returns_3",
            "text": "( String  val ,  String  val) ?",
            "title": "Returns"
        },
        {
            "location": "/net-NetAddress/#eq",
            "text": "[Source]  fun box eq(\n  that: NetAddress box)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-NetAddress/#parameters_1",
            "text": "that:  NetAddress  box",
            "title": "Parameters"
        },
        {
            "location": "/net-NetAddress/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-NetAddress/#host_eq",
            "text": "[Source]  fun box host_eq(\n  that: NetAddress box)\n: Bool val",
            "title": "host_eq"
        },
        {
            "location": "/net-NetAddress/#parameters_2",
            "text": "that:  NetAddress  box",
            "title": "Parameters"
        },
        {
            "location": "/net-NetAddress/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-NetAddress/#ne",
            "text": "[Source]  fun box ne(\n  that: NetAddress val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-NetAddress/#parameters_3",
            "text": "that:  NetAddress  val",
            "title": "Parameters"
        },
        {
            "location": "/net-NetAddress/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-DNSLookupAuth/",
            "text": "DNSLookupAuth\n\u00b6\n\n\n[Source]\n\n\ntype DNSLookupAuth is\n  (AmbientAuth val | NetAuth val | DNSAuth val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)",
            "title": "type DNSLookupAuth"
        },
        {
            "location": "/net-DNSLookupAuth/#dnslookupauth",
            "text": "[Source]  type DNSLookupAuth is\n  (AmbientAuth val | NetAuth val | DNSAuth val)",
            "title": "DNSLookupAuth"
        },
        {
            "location": "/net-DNSLookupAuth/#type-alias-for",
            "text": "( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/net-DNS/",
            "text": "DNS\n\u00b6\n\n\n[Source]\n\n\nHelper functions for resolving DNS queries.\n\n\nprimitive val DNS\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: DNS val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDNS\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nGets all IPv4 and IPv6 addresses for a host and service.\n\n\nfun box apply(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nNetAddress\n val] iso^\n\n\n\n\n\n\nip4\n\u00b6\n\n\n[Source]\n\n\nGets all IPv4 addresses for a host and service.\n\n\nfun box ip4(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nNetAddress\n val] iso^\n\n\n\n\n\n\nip6\n\u00b6\n\n\n[Source]\n\n\nGets all IPv6 addresses for a host and service.\n\n\nfun box ip6(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nNetAddress\n val] iso^\n\n\n\n\n\n\nbroadcast_ip4\n\u00b6\n\n\n[Source]\n\n\nLink-local IP4 broadcast address.\n\n\nfun box broadcast_ip4(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  service: String val)\n: Array[NetAddress val] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)\n\n\nservice: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nNetAddress\n val] iso^\n\n\n\n\n\n\nbroadcast_ip6\n\u00b6\n\n\n[Source]\n\n\nLink-local IP6 broadcast address.\n\n\nfun box broadcast_ip6(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  service: String val)\n: Array[NetAddress val] iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)\n\n\nservice: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nNetAddress\n val] iso^\n\n\n\n\n\n\nis_ip4\n\u00b6\n\n\n[Source]\n\n\nReturns true if the host is a literal IPv4 address.\n\n\nfun box is_ip4(\n  host: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nhost: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nis_ip6\n\u00b6\n\n\n[Source]\n\n\nReturns true if the host is a literal IPv6 address.\n\n\nfun box is_ip6(\n  host: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nhost: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: DNS val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDNS\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: DNS val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDNS\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive DNS"
        },
        {
            "location": "/net-DNS/#dns",
            "text": "[Source]  Helper functions for resolving DNS queries.  primitive val DNS",
            "title": "DNS"
        },
        {
            "location": "/net-DNS/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-DNS/#create",
            "text": "[Source]  new val create()\n: DNS val^",
            "title": "create"
        },
        {
            "location": "/net-DNS/#returns",
            "text": "DNS  val^",
            "title": "Returns"
        },
        {
            "location": "/net-DNS/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-DNS/#apply",
            "text": "[Source]  Gets all IPv4 and IPv6 addresses for a host and service.  fun box apply(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^",
            "title": "apply"
        },
        {
            "location": "/net-DNS/#parameters",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)  host:  String  val  service:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/net-DNS/#returns_1",
            "text": "Array [ NetAddress  val] iso^",
            "title": "Returns"
        },
        {
            "location": "/net-DNS/#ip4",
            "text": "[Source]  Gets all IPv4 addresses for a host and service.  fun box ip4(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^",
            "title": "ip4"
        },
        {
            "location": "/net-DNS/#parameters_1",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)  host:  String  val  service:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/net-DNS/#returns_2",
            "text": "Array [ NetAddress  val] iso^",
            "title": "Returns"
        },
        {
            "location": "/net-DNS/#ip6",
            "text": "[Source]  Gets all IPv6 addresses for a host and service.  fun box ip6(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^",
            "title": "ip6"
        },
        {
            "location": "/net-DNS/#parameters_2",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)  host:  String  val  service:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/net-DNS/#returns_3",
            "text": "Array [ NetAddress  val] iso^",
            "title": "Returns"
        },
        {
            "location": "/net-DNS/#broadcast_ip4",
            "text": "[Source]  Link-local IP4 broadcast address.  fun box broadcast_ip4(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  service: String val)\n: Array[NetAddress val] iso^",
            "title": "broadcast_ip4"
        },
        {
            "location": "/net-DNS/#parameters_3",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)  service:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/net-DNS/#returns_4",
            "text": "Array [ NetAddress  val] iso^",
            "title": "Returns"
        },
        {
            "location": "/net-DNS/#broadcast_ip6",
            "text": "[Source]  Link-local IP6 broadcast address.  fun box broadcast_ip6(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  service: String val)\n: Array[NetAddress val] iso^",
            "title": "broadcast_ip6"
        },
        {
            "location": "/net-DNS/#parameters_4",
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)  service:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/net-DNS/#returns_5",
            "text": "Array [ NetAddress  val] iso^",
            "title": "Returns"
        },
        {
            "location": "/net-DNS/#is_ip4",
            "text": "[Source]  Returns true if the host is a literal IPv4 address.  fun box is_ip4(\n  host: String val)\n: Bool val",
            "title": "is_ip4"
        },
        {
            "location": "/net-DNS/#parameters_5",
            "text": "host:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/net-DNS/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-DNS/#is_ip6",
            "text": "[Source]  Returns true if the host is a literal IPv6 address.  fun box is_ip6(\n  host: String val)\n: Bool val",
            "title": "is_ip6"
        },
        {
            "location": "/net-DNS/#parameters_6",
            "text": "host:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/net-DNS/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-DNS/#eq",
            "text": "[Source]  fun box eq(\n  that: DNS val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-DNS/#parameters_7",
            "text": "that:  DNS  val",
            "title": "Parameters"
        },
        {
            "location": "/net-DNS/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-DNS/#ne",
            "text": "[Source]  fun box ne(\n  that: DNS val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-DNS/#parameters_8",
            "text": "that:  DNS  val",
            "title": "Parameters"
        },
        {
            "location": "/net-DNS/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-NetAuth/",
            "text": "NetAuth\n\u00b6\n\n\n[Source]\n\n\nprimitive val NetAuth\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  from: AmbientAuth val)\n: NetAuth val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: \nAmbientAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNetAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: NetAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNetAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: NetAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNetAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive NetAuth"
        },
        {
            "location": "/net-NetAuth/#netauth",
            "text": "[Source]  primitive val NetAuth",
            "title": "NetAuth"
        },
        {
            "location": "/net-NetAuth/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-NetAuth/#create",
            "text": "[Source]  new val create(\n  from: AmbientAuth val)\n: NetAuth val^",
            "title": "create"
        },
        {
            "location": "/net-NetAuth/#parameters",
            "text": "from:  AmbientAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-NetAuth/#returns",
            "text": "NetAuth  val^",
            "title": "Returns"
        },
        {
            "location": "/net-NetAuth/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-NetAuth/#eq",
            "text": "[Source]  fun box eq(\n  that: NetAuth val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-NetAuth/#parameters_1",
            "text": "that:  NetAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-NetAuth/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-NetAuth/#ne",
            "text": "[Source]  fun box ne(\n  that: NetAuth val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-NetAuth/#parameters_2",
            "text": "that:  NetAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-NetAuth/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-DNSAuth/",
            "text": "DNSAuth\n\u00b6\n\n\n[Source]\n\n\nprimitive val DNSAuth\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  from: (AmbientAuth val | NetAuth val))\n: DNSAuth val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: (\nAmbientAuth\n val | \nNetAuth\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDNSAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: DNSAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDNSAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: DNSAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDNSAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive DNSAuth"
        },
        {
            "location": "/net-DNSAuth/#dnsauth",
            "text": "[Source]  primitive val DNSAuth",
            "title": "DNSAuth"
        },
        {
            "location": "/net-DNSAuth/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-DNSAuth/#create",
            "text": "[Source]  new val create(\n  from: (AmbientAuth val | NetAuth val))\n: DNSAuth val^",
            "title": "create"
        },
        {
            "location": "/net-DNSAuth/#parameters",
            "text": "from: ( AmbientAuth  val |  NetAuth  val)",
            "title": "Parameters"
        },
        {
            "location": "/net-DNSAuth/#returns",
            "text": "DNSAuth  val^",
            "title": "Returns"
        },
        {
            "location": "/net-DNSAuth/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-DNSAuth/#eq",
            "text": "[Source]  fun box eq(\n  that: DNSAuth val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-DNSAuth/#parameters_1",
            "text": "that:  DNSAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-DNSAuth/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-DNSAuth/#ne",
            "text": "[Source]  fun box ne(\n  that: DNSAuth val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-DNSAuth/#parameters_2",
            "text": "that:  DNSAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-DNSAuth/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPAuth/",
            "text": "UDPAuth\n\u00b6\n\n\n[Source]\n\n\nprimitive val UDPAuth\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  from: (AmbientAuth val | NetAuth val))\n: UDPAuth val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: (\nAmbientAuth\n val | \nNetAuth\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUDPAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: UDPAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nUDPAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: UDPAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nUDPAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive UDPAuth"
        },
        {
            "location": "/net-UDPAuth/#udpauth",
            "text": "[Source]  primitive val UDPAuth",
            "title": "UDPAuth"
        },
        {
            "location": "/net-UDPAuth/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-UDPAuth/#create",
            "text": "[Source]  new val create(\n  from: (AmbientAuth val | NetAuth val))\n: UDPAuth val^",
            "title": "create"
        },
        {
            "location": "/net-UDPAuth/#parameters",
            "text": "from: ( AmbientAuth  val |  NetAuth  val)",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPAuth/#returns",
            "text": "UDPAuth  val^",
            "title": "Returns"
        },
        {
            "location": "/net-UDPAuth/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-UDPAuth/#eq",
            "text": "[Source]  fun box eq(\n  that: UDPAuth val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-UDPAuth/#parameters_1",
            "text": "that:  UDPAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPAuth/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-UDPAuth/#ne",
            "text": "[Source]  fun box ne(\n  that: UDPAuth val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-UDPAuth/#parameters_2",
            "text": "that:  UDPAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-UDPAuth/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPAuth/",
            "text": "TCPAuth\n\u00b6\n\n\n[Source]\n\n\nprimitive val TCPAuth\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  from: (AmbientAuth val | NetAuth val))\n: TCPAuth val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: (\nAmbientAuth\n val | \nNetAuth\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTCPAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: TCPAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTCPAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: TCPAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTCPAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive TCPAuth"
        },
        {
            "location": "/net-TCPAuth/#tcpauth",
            "text": "[Source]  primitive val TCPAuth",
            "title": "TCPAuth"
        },
        {
            "location": "/net-TCPAuth/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-TCPAuth/#create",
            "text": "[Source]  new val create(\n  from: (AmbientAuth val | NetAuth val))\n: TCPAuth val^",
            "title": "create"
        },
        {
            "location": "/net-TCPAuth/#parameters",
            "text": "from: ( AmbientAuth  val |  NetAuth  val)",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPAuth/#returns",
            "text": "TCPAuth  val^",
            "title": "Returns"
        },
        {
            "location": "/net-TCPAuth/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-TCPAuth/#eq",
            "text": "[Source]  fun box eq(\n  that: TCPAuth val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-TCPAuth/#parameters_1",
            "text": "that:  TCPAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPAuth/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPAuth/#ne",
            "text": "[Source]  fun box ne(\n  that: TCPAuth val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-TCPAuth/#parameters_2",
            "text": "that:  TCPAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPAuth/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListenAuth/",
            "text": "TCPListenAuth\n\u00b6\n\n\n[Source]\n\n\nprimitive val TCPListenAuth\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  from: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPListenAuth val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTCPListenAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: TCPListenAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTCPListenAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: TCPListenAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTCPListenAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive TCPListenAuth"
        },
        {
            "location": "/net-TCPListenAuth/#tcplistenauth",
            "text": "[Source]  primitive val TCPListenAuth",
            "title": "TCPListenAuth"
        },
        {
            "location": "/net-TCPListenAuth/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-TCPListenAuth/#create",
            "text": "[Source]  new val create(\n  from: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPListenAuth val^",
            "title": "create"
        },
        {
            "location": "/net-TCPListenAuth/#parameters",
            "text": "from: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val)",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPListenAuth/#returns",
            "text": "TCPListenAuth  val^",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListenAuth/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-TCPListenAuth/#eq",
            "text": "[Source]  fun box eq(\n  that: TCPListenAuth val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-TCPListenAuth/#parameters_1",
            "text": "that:  TCPListenAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPListenAuth/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPListenAuth/#ne",
            "text": "[Source]  fun box ne(\n  that: TCPListenAuth val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-TCPListenAuth/#parameters_2",
            "text": "that:  TCPListenAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPListenAuth/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectAuth/",
            "text": "TCPConnectAuth\n\u00b6\n\n\n[Source]\n\n\nprimitive val TCPConnectAuth\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create(\n  from: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPConnectAuth val^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfrom: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTCPConnectAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: TCPConnectAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTCPConnectAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: TCPConnectAuth val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTCPConnectAuth\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive TCPConnectAuth"
        },
        {
            "location": "/net-TCPConnectAuth/#tcpconnectauth",
            "text": "[Source]  primitive val TCPConnectAuth",
            "title": "TCPConnectAuth"
        },
        {
            "location": "/net-TCPConnectAuth/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-TCPConnectAuth/#create",
            "text": "[Source]  new val create(\n  from: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPConnectAuth val^",
            "title": "create"
        },
        {
            "location": "/net-TCPConnectAuth/#parameters",
            "text": "from: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val)",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectAuth/#returns",
            "text": "TCPConnectAuth  val^",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectAuth/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-TCPConnectAuth/#eq",
            "text": "[Source]  fun box eq(\n  that: TCPConnectAuth val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-TCPConnectAuth/#parameters_1",
            "text": "that:  TCPConnectAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectAuth/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-TCPConnectAuth/#ne",
            "text": "[Source]  fun box ne(\n  that: TCPConnectAuth val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-TCPConnectAuth/#parameters_2",
            "text": "that:  TCPConnectAuth  val",
            "title": "Parameters"
        },
        {
            "location": "/net-TCPConnectAuth/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl--index/",
            "text": "No package doc string provided for net/ssl.\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive X509\n\n\nprimitive SslAutoVersion\n\n\nprimitive Ssl3Version\n\n\nprimitive Tls1Version\n\n\nprimitive Tls1u1Version\n\n\nprimitive Tls1u2Version\n\n\nprimitive Tls1u3Version\n\n\nprimitive Dtls1Version\n\n\nprimitive Dtls1u2Version\n\n\nprimitive TlsMinVersion\n\n\nprimitive TlsMaxVersion\n\n\nprimitive DtlsMinVersion\n\n\nprimitive DtlsMaxVersion\n\n\nclass SSLContext\n\n\nclass SSLConnection\n\n\nprimitive SSLHandshake\n\n\nprimitive SSLAuthFail\n\n\nprimitive SSLReady\n\n\nprimitive SSLError\n\n\ntype SSLState\n\n\nclass SSL",
            "title": "Package"
        },
        {
            "location": "/net-ssl--index/#public-types",
            "text": "primitive X509  primitive SslAutoVersion  primitive Ssl3Version  primitive Tls1Version  primitive Tls1u1Version  primitive Tls1u2Version  primitive Tls1u3Version  primitive Dtls1Version  primitive Dtls1u2Version  primitive TlsMinVersion  primitive TlsMaxVersion  primitive DtlsMinVersion  primitive DtlsMaxVersion  class SSLContext  class SSLConnection  primitive SSLHandshake  primitive SSLAuthFail  primitive SSLReady  primitive SSLError  type SSLState  class SSL",
            "title": "Public Types"
        },
        {
            "location": "/net-ssl-X509/",
            "text": "X509\n\u00b6\n\n\n[Source]\n\n\nprimitive val X509\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: X509 val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nX509\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nvalid_for_host\n\u00b6\n\n\n[Source]\n\n\nChecks if an OpenSSL X509 certificate is valid for a given host.\n\n\nfun box valid_for_host(\n  cert: Pointer[X509 val] ref,\n  host: String val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ncert: \nPointer\n[\nX509\n val] ref\n\n\nhost: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncommon_name\n\u00b6\n\n\n[Source]\n\n\nGet the common name for the certificate. Raises an error if the common name\ncontains any NULL bytes.\n\n\nfun box common_name(\n  cert: Pointer[X509 val] ref)\n: String val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ncert: \nPointer\n[\nX509\n val] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val ?\n\n\n\n\n\n\nall_names\n\u00b6\n\n\n[Source]\n\n\nReturns an array of all names for the certificate. Any names containing\nNULL bytes are not included. This includes the common name and all subject\nalternate names.\n\n\nfun box all_names(\n  cert: Pointer[X509 val] ref)\n: Array[String val] val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ncert: \nPointer\n[\nX509\n val] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nString\n val] val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: X509 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nX509\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: X509 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nX509\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive X509"
        },
        {
            "location": "/net-ssl-X509/#x509",
            "text": "[Source]  primitive val X509",
            "title": "X509"
        },
        {
            "location": "/net-ssl-X509/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-X509/#create",
            "text": "[Source]  new val create()\n: X509 val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-X509/#returns",
            "text": "X509  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-X509/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-X509/#valid_for_host",
            "text": "[Source]  Checks if an OpenSSL X509 certificate is valid for a given host.  fun box valid_for_host(\n  cert: Pointer[X509 val] ref,\n  host: String val)\n: Bool val",
            "title": "valid_for_host"
        },
        {
            "location": "/net-ssl-X509/#parameters",
            "text": "cert:  Pointer [ X509  val] ref  host:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-X509/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-X509/#common_name",
            "text": "[Source]  Get the common name for the certificate. Raises an error if the common name\ncontains any NULL bytes.  fun box common_name(\n  cert: Pointer[X509 val] ref)\n: String val ?",
            "title": "common_name"
        },
        {
            "location": "/net-ssl-X509/#parameters_1",
            "text": "cert:  Pointer [ X509  val] ref",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-X509/#returns_2",
            "text": "String  val ?",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-X509/#all_names",
            "text": "[Source]  Returns an array of all names for the certificate. Any names containing\nNULL bytes are not included. This includes the common name and all subject\nalternate names.  fun box all_names(\n  cert: Pointer[X509 val] ref)\n: Array[String val] val",
            "title": "all_names"
        },
        {
            "location": "/net-ssl-X509/#parameters_2",
            "text": "cert:  Pointer [ X509  val] ref",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-X509/#returns_3",
            "text": "Array [ String  val] val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-X509/#eq",
            "text": "[Source]  fun box eq(\n  that: X509 val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-X509/#parameters_3",
            "text": "that:  X509  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-X509/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-X509/#ne",
            "text": "[Source]  fun box ne(\n  that: X509 val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-X509/#parameters_4",
            "text": "that:  X509  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-X509/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SslAutoVersion/",
            "text": "SslAutoVersion\n\u00b6\n\n\n[Source]\n\n\nprimitive val SslAutoVersion\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: SslAutoVersion val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSslAutoVersion\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: SslAutoVersion val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSslAutoVersion\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: SslAutoVersion val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSslAutoVersion\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive SslAutoVersion"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#sslautoversion",
            "text": "[Source]  primitive val SslAutoVersion",
            "title": "SslAutoVersion"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#create",
            "text": "[Source]  new val create()\n: SslAutoVersion val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#returns",
            "text": "SslAutoVersion  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#eq",
            "text": "[Source]  fun box eq(\n  that: SslAutoVersion val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#parameters",
            "text": "that:  SslAutoVersion  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#ne",
            "text": "[Source]  fun box ne(\n  that: SslAutoVersion val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#parameters_1",
            "text": "that:  SslAutoVersion  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SslAutoVersion/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Ssl3Version/",
            "text": "Ssl3Version\n\u00b6\n\n\n[Source]\n\n\nprimitive val Ssl3Version\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Ssl3Version val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSsl3Version\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Ssl3Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSsl3Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Ssl3Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSsl3Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Ssl3Version"
        },
        {
            "location": "/net-ssl-Ssl3Version/#ssl3version",
            "text": "[Source]  primitive val Ssl3Version",
            "title": "Ssl3Version"
        },
        {
            "location": "/net-ssl-Ssl3Version/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-Ssl3Version/#create",
            "text": "[Source]  new val create()\n: Ssl3Version val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-Ssl3Version/#returns",
            "text": "Ssl3Version  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Ssl3Version/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-Ssl3Version/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-Ssl3Version/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Ssl3Version/#eq",
            "text": "[Source]  fun box eq(\n  that: Ssl3Version val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-Ssl3Version/#parameters",
            "text": "that:  Ssl3Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Ssl3Version/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Ssl3Version/#ne",
            "text": "[Source]  fun box ne(\n  that: Ssl3Version val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-Ssl3Version/#parameters_1",
            "text": "that:  Ssl3Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Ssl3Version/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1Version/",
            "text": "Tls1Version\n\u00b6\n\n\n[Source]\n\n\nprimitive val Tls1Version\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Tls1Version val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTls1Version\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Tls1Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTls1Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Tls1Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTls1Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Tls1Version"
        },
        {
            "location": "/net-ssl-Tls1Version/#tls1version",
            "text": "[Source]  primitive val Tls1Version",
            "title": "Tls1Version"
        },
        {
            "location": "/net-ssl-Tls1Version/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-Tls1Version/#create",
            "text": "[Source]  new val create()\n: Tls1Version val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-Tls1Version/#returns",
            "text": "Tls1Version  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1Version/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-Tls1Version/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-Tls1Version/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1Version/#eq",
            "text": "[Source]  fun box eq(\n  that: Tls1Version val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-Tls1Version/#parameters",
            "text": "that:  Tls1Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Tls1Version/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1Version/#ne",
            "text": "[Source]  fun box ne(\n  that: Tls1Version val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-Tls1Version/#parameters_1",
            "text": "that:  Tls1Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Tls1Version/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u1Version/",
            "text": "Tls1u1Version\n\u00b6\n\n\n[Source]\n\n\nprimitive val Tls1u1Version\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Tls1u1Version val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTls1u1Version\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Tls1u1Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTls1u1Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Tls1u1Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTls1u1Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Tls1u1Version"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#tls1u1version",
            "text": "[Source]  primitive val Tls1u1Version",
            "title": "Tls1u1Version"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#create",
            "text": "[Source]  new val create()\n: Tls1u1Version val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#returns",
            "text": "Tls1u1Version  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#eq",
            "text": "[Source]  fun box eq(\n  that: Tls1u1Version val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#parameters",
            "text": "that:  Tls1u1Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#ne",
            "text": "[Source]  fun box ne(\n  that: Tls1u1Version val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#parameters_1",
            "text": "that:  Tls1u1Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Tls1u1Version/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u2Version/",
            "text": "Tls1u2Version\n\u00b6\n\n\n[Source]\n\n\nprimitive val Tls1u2Version\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Tls1u2Version val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTls1u2Version\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Tls1u2Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTls1u2Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Tls1u2Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTls1u2Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Tls1u2Version"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#tls1u2version",
            "text": "[Source]  primitive val Tls1u2Version",
            "title": "Tls1u2Version"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#create",
            "text": "[Source]  new val create()\n: Tls1u2Version val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#returns",
            "text": "Tls1u2Version  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#eq",
            "text": "[Source]  fun box eq(\n  that: Tls1u2Version val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#parameters",
            "text": "that:  Tls1u2Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#ne",
            "text": "[Source]  fun box ne(\n  that: Tls1u2Version val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#parameters_1",
            "text": "that:  Tls1u2Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Tls1u2Version/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u3Version/",
            "text": "Tls1u3Version\n\u00b6\n\n\n[Source]\n\n\nprimitive val Tls1u3Version\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Tls1u3Version val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTls1u3Version\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Tls1u3Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTls1u3Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Tls1u3Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTls1u3Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Tls1u3Version"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#tls1u3version",
            "text": "[Source]  primitive val Tls1u3Version",
            "title": "Tls1u3Version"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#create",
            "text": "[Source]  new val create()\n: Tls1u3Version val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#returns",
            "text": "Tls1u3Version  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#eq",
            "text": "[Source]  fun box eq(\n  that: Tls1u3Version val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#parameters",
            "text": "that:  Tls1u3Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#ne",
            "text": "[Source]  fun box ne(\n  that: Tls1u3Version val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#parameters_1",
            "text": "that:  Tls1u3Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Tls1u3Version/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Dtls1Version/",
            "text": "Dtls1Version\n\u00b6\n\n\n[Source]\n\n\nprimitive val Dtls1Version\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Dtls1Version val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDtls1Version\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Dtls1Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDtls1Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Dtls1Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDtls1Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Dtls1Version"
        },
        {
            "location": "/net-ssl-Dtls1Version/#dtls1version",
            "text": "[Source]  primitive val Dtls1Version",
            "title": "Dtls1Version"
        },
        {
            "location": "/net-ssl-Dtls1Version/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-Dtls1Version/#create",
            "text": "[Source]  new val create()\n: Dtls1Version val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-Dtls1Version/#returns",
            "text": "Dtls1Version  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Dtls1Version/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-Dtls1Version/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-Dtls1Version/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Dtls1Version/#eq",
            "text": "[Source]  fun box eq(\n  that: Dtls1Version val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-Dtls1Version/#parameters",
            "text": "that:  Dtls1Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Dtls1Version/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Dtls1Version/#ne",
            "text": "[Source]  fun box ne(\n  that: Dtls1Version val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-Dtls1Version/#parameters_1",
            "text": "that:  Dtls1Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Dtls1Version/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/",
            "text": "Dtls1u2Version\n\u00b6\n\n\n[Source]\n\n\nprimitive val Dtls1u2Version\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Dtls1u2Version val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDtls1u2Version\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Dtls1u2Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDtls1u2Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Dtls1u2Version val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDtls1u2Version\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Dtls1u2Version"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#dtls1u2version",
            "text": "[Source]  primitive val Dtls1u2Version",
            "title": "Dtls1u2Version"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#create",
            "text": "[Source]  new val create()\n: Dtls1u2Version val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#returns",
            "text": "Dtls1u2Version  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#eq",
            "text": "[Source]  fun box eq(\n  that: Dtls1u2Version val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#parameters",
            "text": "that:  Dtls1u2Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#ne",
            "text": "[Source]  fun box ne(\n  that: Dtls1u2Version val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#parameters_1",
            "text": "that:  Dtls1u2Version  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-Dtls1u2Version/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-TlsMinVersion/",
            "text": "TlsMinVersion\n\u00b6\n\n\n[Source]\n\n\nprimitive val TlsMinVersion\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: TlsMinVersion val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTlsMinVersion\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: TlsMinVersion val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTlsMinVersion\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: TlsMinVersion val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTlsMinVersion\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive TlsMinVersion"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#tlsminversion",
            "text": "[Source]  primitive val TlsMinVersion",
            "title": "TlsMinVersion"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#create",
            "text": "[Source]  new val create()\n: TlsMinVersion val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#returns",
            "text": "TlsMinVersion  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#eq",
            "text": "[Source]  fun box eq(\n  that: TlsMinVersion val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#parameters",
            "text": "that:  TlsMinVersion  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#ne",
            "text": "[Source]  fun box ne(\n  that: TlsMinVersion val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#parameters_1",
            "text": "that:  TlsMinVersion  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-TlsMinVersion/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/",
            "text": "TlsMaxVersion\n\u00b6\n\n\n[Source]\n\n\nprimitive val TlsMaxVersion\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: TlsMaxVersion val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTlsMaxVersion\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: TlsMaxVersion val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTlsMaxVersion\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: TlsMaxVersion val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTlsMaxVersion\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive TlsMaxVersion"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#tlsmaxversion",
            "text": "[Source]  primitive val TlsMaxVersion",
            "title": "TlsMaxVersion"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#create",
            "text": "[Source]  new val create()\n: TlsMaxVersion val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#returns",
            "text": "TlsMaxVersion  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#eq",
            "text": "[Source]  fun box eq(\n  that: TlsMaxVersion val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#parameters",
            "text": "that:  TlsMaxVersion  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#ne",
            "text": "[Source]  fun box ne(\n  that: TlsMaxVersion val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#parameters_1",
            "text": "that:  TlsMaxVersion  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-TlsMaxVersion/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/",
            "text": "DtlsMinVersion\n\u00b6\n\n\n[Source]\n\n\nprimitive val DtlsMinVersion\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: DtlsMinVersion val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDtlsMinVersion\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: DtlsMinVersion val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDtlsMinVersion\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: DtlsMinVersion val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDtlsMinVersion\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive DtlsMinVersion"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#dtlsminversion",
            "text": "[Source]  primitive val DtlsMinVersion",
            "title": "DtlsMinVersion"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#create",
            "text": "[Source]  new val create()\n: DtlsMinVersion val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#returns",
            "text": "DtlsMinVersion  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#eq",
            "text": "[Source]  fun box eq(\n  that: DtlsMinVersion val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#parameters",
            "text": "that:  DtlsMinVersion  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#ne",
            "text": "[Source]  fun box ne(\n  that: DtlsMinVersion val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#parameters_1",
            "text": "that:  DtlsMinVersion  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-DtlsMinVersion/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/",
            "text": "DtlsMaxVersion\n\u00b6\n\n\n[Source]\n\n\nprimitive val DtlsMaxVersion\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: DtlsMaxVersion val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nDtlsMaxVersion\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun val apply()\n: ULong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: DtlsMaxVersion val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDtlsMaxVersion\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: DtlsMaxVersion val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nDtlsMaxVersion\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive DtlsMaxVersion"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#dtlsmaxversion",
            "text": "[Source]  primitive val DtlsMaxVersion",
            "title": "DtlsMaxVersion"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#create",
            "text": "[Source]  new val create()\n: DtlsMaxVersion val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#returns",
            "text": "DtlsMaxVersion  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#apply",
            "text": "[Source]  fun val apply()\n: ULong val",
            "title": "apply"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#returns_1",
            "text": "ULong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#eq",
            "text": "[Source]  fun box eq(\n  that: DtlsMaxVersion val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#parameters",
            "text": "that:  DtlsMaxVersion  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#ne",
            "text": "[Source]  fun box ne(\n  that: DtlsMaxVersion val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#parameters_1",
            "text": "that:  DtlsMaxVersion  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-DtlsMaxVersion/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/",
            "text": "SSLContext\n\u00b6\n\n\n[Source]\n\n\nAn SSL context is used to create SSL sessions.\n\n\nclass val SSLContext\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate an SSL context.\n\n\nnew ref create()\n: SSLContext ref^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSSLContext\n ref^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nclient\n\u00b6\n\n\n[Source]\n\n\nCreate a client-side SSL session. If a hostname is supplied, the server\nside certificate must be valid for that hostname.\n\n\nfun box client(\n  hostname: String val = seq)\n: SSL iso^ ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nhostname: \nString\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSSL\n iso^ ?\n\n\n\n\n\n\nserver\n\u00b6\n\n\n[Source]\n\n\nCreate a server-side SSL session.\n\n\nfun box server()\n: SSL iso^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSSL\n iso^ ?\n\n\n\n\n\n\nset_cert\n\u00b6\n\n\n[Source]\n\n\nThe cert file is a PEM certificate chain. The key file is a private key.\nServers must set this. For clients, it is optional.\n\n\nfun ref set_cert(\n  cert: FilePath val,\n  key: FilePath val)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ncert: \nFilePath\n val\n\n\nkey: \nFilePath\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nset_authority\n\u00b6\n\n\n[Source]\n\n\nUse a PEM file and/or a directory of PEM files to specify certificate\nauthorities. Clients must set this. For servers, it is optional. Use None\nto indicate no file or no path. Raises an error if these verify locations\naren't valid, or if both are None.\n\n\nfun ref set_authority(\n  file: (FilePath val | None val),\n  path: (FilePath val | None val) = seq)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfile: (\nFilePath\n val | \nNone\n val)\n\n\npath: (\nFilePath\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nset_ciphers\n\u00b6\n\n\n[Source]\n\n\nSet the accepted ciphers. This replaces the existing list. Raises an error\nif the cipher list is invalid.\n\n\nfun ref set_ciphers(\n  ciphers: String val)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nciphers: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nset_client_verify\n\u00b6\n\n\n[Source]\n\n\nSet to true to require verification. Defaults to true.\n\n\nfun ref set_client_verify(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset_server_verify\n\u00b6\n\n\n[Source]\n\n\nSet to true to require verification. Defaults to false.\n\n\nfun ref set_server_verify(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset_verify_depth\n\u00b6\n\n\n[Source]\n\n\nSet the verify depth. Defaults to 6.\n\n\nfun ref set_verify_depth(\n  depth: U32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndepth: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset_min_proto_version\n\u00b6\n\n\n[Source]\n\n\nSet minimum protocol version. Set to SslAutoVersion, 0,\nto automatically manage lowest version.\n\n\nSupported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                    Tls1u2Version, Tls1u3Version, Dtls1Version,\n                    Dtls1u2Version\n\n\nfun ref set_min_proto_version(\n  version: ULong val)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nversion: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nget_min_proto_version\n\u00b6\n\n\n[Source]\n\n\nGet minimum protocol version. Returns SslAutoVersion, 0,\nwhen automatically managing lowest version.\n\n\nSupported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                    Tls1u2Version, Tls1u3Version, Dtls1Version,\n                    Dtls1u2Version\n\n\nfun ref get_min_proto_version()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nset_max_proto_version\n\u00b6\n\n\n[Source]\n\n\nSet maximum protocol version. Set to SslAutoVersion, 0,\nto automatically manage higest version.\n\n\nSupported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                    Tls1u2Version, Tls1u3Version, Dtls1Version,\n                    Dtls1u2Version\n\n\nfun ref set_max_proto_version(\n  version: ULong val)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nversion: \nULong\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nget_max_proto_version\n\u00b6\n\n\n[Source]\n\n\nGet maximum protocol version. Returns SslAutoVersion, 0,\nwhen automatically managing highest version.\n\n\nSupported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                    Tls1u2Version, Tls1u3Version, Dtls1Version,\n                    Dtls1u2Version\n\n\nfun ref get_max_proto_version()\n: ILong val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nILong\n val\n\n\n\n\n\n\nallow_tls_v1\n\u00b6\n\n\n[Source]\n\n\nAllow TLS v1. Defaults to false.\nDeprecated: use set_min_proto_version and set_max_proto_version\n\n\nfun ref allow_tls_v1(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nallow_tls_v1_1\n\u00b6\n\n\n[Source]\n\n\nAllow TLS v1.1. Defaults to false.\nDeprecated: use set_min_proto_version and set_max_proto_version\n\n\nfun ref allow_tls_v1_1(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nallow_tls_v1_2\n\u00b6\n\n\n[Source]\n\n\nAllow TLS v1.2. Defaults to true.\nDeprecated: use set_min_proto_version and set_max_proto_version\n\n\nfun ref allow_tls_v1_2(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nFree the SSL context.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class SSLContext"
        },
        {
            "location": "/net-ssl-SSLContext/#sslcontext",
            "text": "[Source]  An SSL context is used to create SSL sessions.  class val SSLContext",
            "title": "SSLContext"
        },
        {
            "location": "/net-ssl-SSLContext/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLContext/#create",
            "text": "[Source]  Create an SSL context.  new ref create()\n: SSLContext ref^",
            "title": "create"
        },
        {
            "location": "/net-ssl-SSLContext/#returns",
            "text": "SSLContext  ref^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-SSLContext/#client",
            "text": "[Source]  Create a client-side SSL session. If a hostname is supplied, the server\nside certificate must be valid for that hostname.  fun box client(\n  hostname: String val = seq)\n: SSL iso^ ?",
            "title": "client"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters",
            "text": "hostname:  String  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_1",
            "text": "SSL  iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#server",
            "text": "[Source]  Create a server-side SSL session.  fun box server()\n: SSL iso^ ?",
            "title": "server"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_2",
            "text": "SSL  iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#set_cert",
            "text": "[Source]  The cert file is a PEM certificate chain. The key file is a private key.\nServers must set this. For clients, it is optional.  fun ref set_cert(\n  cert: FilePath val,\n  key: FilePath val)\n: None val ?",
            "title": "set_cert"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters_1",
            "text": "cert:  FilePath  val  key:  FilePath  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_3",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#set_authority",
            "text": "[Source]  Use a PEM file and/or a directory of PEM files to specify certificate\nauthorities. Clients must set this. For servers, it is optional. Use None\nto indicate no file or no path. Raises an error if these verify locations\naren't valid, or if both are None.  fun ref set_authority(\n  file: (FilePath val | None val),\n  path: (FilePath val | None val) = seq)\n: None val ?",
            "title": "set_authority"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters_2",
            "text": "file: ( FilePath  val |  None  val)  path: ( FilePath  val |  None  val) = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_4",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#set_ciphers",
            "text": "[Source]  Set the accepted ciphers. This replaces the existing list. Raises an error\nif the cipher list is invalid.  fun ref set_ciphers(\n  ciphers: String val)\n: None val ?",
            "title": "set_ciphers"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters_3",
            "text": "ciphers:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_5",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#set_client_verify",
            "text": "[Source]  Set to true to require verification. Defaults to true.  fun ref set_client_verify(\n  state: Bool val)\n: None val",
            "title": "set_client_verify"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters_4",
            "text": "state:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#set_server_verify",
            "text": "[Source]  Set to true to require verification. Defaults to false.  fun ref set_server_verify(\n  state: Bool val)\n: None val",
            "title": "set_server_verify"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters_5",
            "text": "state:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#set_verify_depth",
            "text": "[Source]  Set the verify depth. Defaults to 6.  fun ref set_verify_depth(\n  depth: U32 val)\n: None val",
            "title": "set_verify_depth"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters_6",
            "text": "depth:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#set_min_proto_version",
            "text": "[Source]  Set minimum protocol version. Set to SslAutoVersion, 0,\nto automatically manage lowest version.  Supported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                    Tls1u2Version, Tls1u3Version, Dtls1Version,\n                    Dtls1u2Version  fun ref set_min_proto_version(\n  version: ULong val)\n: None val ?",
            "title": "set_min_proto_version"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters_7",
            "text": "version:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_9",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#get_min_proto_version",
            "text": "[Source]  Get minimum protocol version. Returns SslAutoVersion, 0,\nwhen automatically managing lowest version.  Supported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                    Tls1u2Version, Tls1u3Version, Dtls1Version,\n                    Dtls1u2Version  fun ref get_min_proto_version()\n: ILong val",
            "title": "get_min_proto_version"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_10",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#set_max_proto_version",
            "text": "[Source]  Set maximum protocol version. Set to SslAutoVersion, 0,\nto automatically manage higest version.  Supported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                    Tls1u2Version, Tls1u3Version, Dtls1Version,\n                    Dtls1u2Version  fun ref set_max_proto_version(\n  version: ULong val)\n: None val ?",
            "title": "set_max_proto_version"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters_8",
            "text": "version:  ULong  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_11",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#get_max_proto_version",
            "text": "[Source]  Get maximum protocol version. Returns SslAutoVersion, 0,\nwhen automatically managing highest version.  Supported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                    Tls1u2Version, Tls1u3Version, Dtls1Version,\n                    Dtls1u2Version  fun ref get_max_proto_version()\n: ILong val",
            "title": "get_max_proto_version"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_12",
            "text": "ILong  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#allow_tls_v1",
            "text": "[Source]  Allow TLS v1. Defaults to false.\nDeprecated: use set_min_proto_version and set_max_proto_version  fun ref allow_tls_v1(\n  state: Bool val)\n: None val",
            "title": "allow_tls_v1"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters_9",
            "text": "state:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#allow_tls_v1_1",
            "text": "[Source]  Allow TLS v1.1. Defaults to false.\nDeprecated: use set_min_proto_version and set_max_proto_version  fun ref allow_tls_v1_1(\n  state: Bool val)\n: None val",
            "title": "allow_tls_v1_1"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters_10",
            "text": "state:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_14",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#allow_tls_v1_2",
            "text": "[Source]  Allow TLS v1.2. Defaults to true.\nDeprecated: use set_min_proto_version and set_max_proto_version  fun ref allow_tls_v1_2(\n  state: Bool val)\n: None val",
            "title": "allow_tls_v1_2"
        },
        {
            "location": "/net-ssl-SSLContext/#parameters_11",
            "text": "state:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_15",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLContext/#dispose",
            "text": "[Source]  Free the SSL context.  fun ref dispose()\n: None val",
            "title": "dispose"
        },
        {
            "location": "/net-ssl-SSLContext/#returns_16",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/",
            "text": "SSLConnection\n\u00b6\n\n\n[Source]\n\n\nWrap another protocol in an SSL connection.\n\n\nclass ref SSLConnection is\n  TCPConnectionNotify ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nTCPConnectionNotify\n ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nInitialise with a wrapped protocol and an SSL session.\n\n\nnew iso create(\n  notify: TCPConnectionNotify iso,\n  ssl: SSL iso)\n: SSLConnection iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: \nTCPConnectionNotify\n iso\n\n\nssl: \nSSL\n iso\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSSLConnection\n iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\naccepted\n\u00b6\n\n\n[Source]\n\n\nForward to the wrapped protocol.\n\n\nfun ref accepted(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnecting\n\u00b6\n\n\n[Source]\n\n\nForward to the wrapped protocol.\n\n\nfun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ncount: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnected\n\u00b6\n\n\n[Source]\n\n\nSwallow this event until the handshake is complete.\n\n\nfun ref connected(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnect_failed\n\u00b6\n\n\n[Source]\n\n\nForward to the wrapped protocol.\n\n\nfun ref connect_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsent\n\u00b6\n\n\n[Source]\n\n\nPass the data to the SSL session and check for both new application data\nand new destination data.\n\n\nfun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nsentv\n\u00b6\n\n\n[Source]\n\n\nfun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nByteSeqIter\n val\n\n\n\n\n\n\nreceived\n\u00b6\n\n\n[Source]\n\n\nPass the data to the SSL session and check for both new application data\nand new destination data.\n\n\nfun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\ntimes: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexpect\n\u00b6\n\n\n[Source]\n\n\nKeep track of the expect count for the wrapped protocol. Always tell the\nTCPConnection to read all available data.\n\n\nfun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\nqty: \nUSize\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclosed\n\u00b6\n\n\n[Source]\n\n\nForward to the wrapped protocol.\n\n\nfun ref closed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nauth_failed\n\u00b6\n\n\n[Source]\n\n\nfun ref auth_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nthrottled\n\u00b6\n\n\n[Source]\n\n\nfun ref throttled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunthrottled\n\u00b6\n\n\n[Source]\n\n\nfun ref unthrottled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class SSLConnection"
        },
        {
            "location": "/net-ssl-SSLConnection/#sslconnection",
            "text": "[Source]  Wrap another protocol in an SSL connection.  class ref SSLConnection is\n  TCPConnectionNotify ref",
            "title": "SSLConnection"
        },
        {
            "location": "/net-ssl-SSLConnection/#implements",
            "text": "TCPConnectionNotify  ref",
            "title": "Implements"
        },
        {
            "location": "/net-ssl-SSLConnection/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLConnection/#create",
            "text": "[Source]  Initialise with a wrapped protocol and an SSL session.  new iso create(\n  notify: TCPConnectionNotify iso,\n  ssl: SSL iso)\n: SSLConnection iso^",
            "title": "create"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters",
            "text": "notify:  TCPConnectionNotify  iso  ssl:  SSL  iso",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns",
            "text": "SSLConnection  iso^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-SSLConnection/#accepted",
            "text": "[Source]  Forward to the wrapped protocol.  fun ref accepted(\n  conn: TCPConnection ref)\n: None val",
            "title": "accepted"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_1",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#connecting",
            "text": "[Source]  Forward to the wrapped protocol.  fun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val",
            "title": "connecting"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_2",
            "text": "conn:  TCPConnection  ref  count:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#connected",
            "text": "[Source]  Swallow this event until the handshake is complete.  fun ref connected(\n  conn: TCPConnection ref)\n: None val",
            "title": "connected"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_3",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#connect_failed",
            "text": "[Source]  Forward to the wrapped protocol.  fun ref connect_failed(\n  conn: TCPConnection ref)\n: None val",
            "title": "connect_failed"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_4",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#sent",
            "text": "[Source]  Pass the data to the SSL session and check for both new application data\nand new destination data.  fun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)",
            "title": "sent"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_5",
            "text": "conn:  TCPConnection  ref  data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_5",
            "text": "( String  val |  Array [ U8  val] val)",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#sentv",
            "text": "[Source]  fun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val",
            "title": "sentv"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_6",
            "text": "conn:  TCPConnection  ref  data:  ByteSeqIter  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_6",
            "text": "ByteSeqIter  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#received",
            "text": "[Source]  Pass the data to the SSL session and check for both new application data\nand new destination data.  fun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val",
            "title": "received"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_7",
            "text": "conn:  TCPConnection  ref  data:  Array [ U8  val] iso  times:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#expect",
            "text": "[Source]  Keep track of the expect count for the wrapped protocol. Always tell the\nTCPConnection to read all available data.  fun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val",
            "title": "expect"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_8",
            "text": "conn:  TCPConnection  ref  qty:  USize  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_8",
            "text": "USize  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#closed",
            "text": "[Source]  Forward to the wrapped protocol.  fun ref closed(\n  conn: TCPConnection ref)\n: None val",
            "title": "closed"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_9",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#auth_failed",
            "text": "[Source]  fun ref auth_failed(\n  conn: TCPConnection ref)\n: None val",
            "title": "auth_failed"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_10",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#throttled",
            "text": "[Source]  fun ref throttled(\n  conn: TCPConnection ref)\n: None val",
            "title": "throttled"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_11",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLConnection/#unthrottled",
            "text": "[Source]  fun ref unthrottled(\n  conn: TCPConnection ref)\n: None val",
            "title": "unthrottled"
        },
        {
            "location": "/net-ssl-SSLConnection/#parameters_12",
            "text": "conn:  TCPConnection  ref",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLConnection/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLHandshake/",
            "text": "SSLHandshake\n\u00b6\n\n\n[Source]\n\n\nprimitive val SSLHandshake\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: SSLHandshake val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSSLHandshake\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: SSLHandshake val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSSLHandshake\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: SSLHandshake val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSSLHandshake\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive SSLHandshake"
        },
        {
            "location": "/net-ssl-SSLHandshake/#sslhandshake",
            "text": "[Source]  primitive val SSLHandshake",
            "title": "SSLHandshake"
        },
        {
            "location": "/net-ssl-SSLHandshake/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLHandshake/#create",
            "text": "[Source]  new val create()\n: SSLHandshake val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-SSLHandshake/#returns",
            "text": "SSLHandshake  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLHandshake/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-SSLHandshake/#eq",
            "text": "[Source]  fun box eq(\n  that: SSLHandshake val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-SSLHandshake/#parameters",
            "text": "that:  SSLHandshake  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLHandshake/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLHandshake/#ne",
            "text": "[Source]  fun box ne(\n  that: SSLHandshake val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-SSLHandshake/#parameters_1",
            "text": "that:  SSLHandshake  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLHandshake/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLAuthFail/",
            "text": "SSLAuthFail\n\u00b6\n\n\n[Source]\n\n\nprimitive val SSLAuthFail\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: SSLAuthFail val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSSLAuthFail\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: SSLAuthFail val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSSLAuthFail\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: SSLAuthFail val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSSLAuthFail\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive SSLAuthFail"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#sslauthfail",
            "text": "[Source]  primitive val SSLAuthFail",
            "title": "SSLAuthFail"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#create",
            "text": "[Source]  new val create()\n: SSLAuthFail val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#returns",
            "text": "SSLAuthFail  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#eq",
            "text": "[Source]  fun box eq(\n  that: SSLAuthFail val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#parameters",
            "text": "that:  SSLAuthFail  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#ne",
            "text": "[Source]  fun box ne(\n  that: SSLAuthFail val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#parameters_1",
            "text": "that:  SSLAuthFail  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLReady/",
            "text": "SSLReady\n\u00b6\n\n\n[Source]\n\n\nprimitive val SSLReady\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: SSLReady val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSSLReady\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: SSLReady val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSSLReady\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: SSLReady val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSSLReady\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive SSLReady"
        },
        {
            "location": "/net-ssl-SSLReady/#sslready",
            "text": "[Source]  primitive val SSLReady",
            "title": "SSLReady"
        },
        {
            "location": "/net-ssl-SSLReady/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLReady/#create",
            "text": "[Source]  new val create()\n: SSLReady val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-SSLReady/#returns",
            "text": "SSLReady  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLReady/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-SSLReady/#eq",
            "text": "[Source]  fun box eq(\n  that: SSLReady val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-SSLReady/#parameters",
            "text": "that:  SSLReady  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLReady/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLReady/#ne",
            "text": "[Source]  fun box ne(\n  that: SSLReady val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-SSLReady/#parameters_1",
            "text": "that:  SSLReady  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLReady/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLError/",
            "text": "SSLError\n\u00b6\n\n\n[Source]\n\n\nprimitive val SSLError\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: SSLError val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSSLError\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: SSLError val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSSLError\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: SSLError val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSSLError\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive SSLError"
        },
        {
            "location": "/net-ssl-SSLError/#sslerror",
            "text": "[Source]  primitive val SSLError",
            "title": "SSLError"
        },
        {
            "location": "/net-ssl-SSLError/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLError/#create",
            "text": "[Source]  new val create()\n: SSLError val^",
            "title": "create"
        },
        {
            "location": "/net-ssl-SSLError/#returns",
            "text": "SSLError  val^",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLError/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-SSLError/#eq",
            "text": "[Source]  fun box eq(\n  that: SSLError val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/net-ssl-SSLError/#parameters",
            "text": "that:  SSLError  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLError/#returns_1",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLError/#ne",
            "text": "[Source]  fun box ne(\n  that: SSLError val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/net-ssl-SSLError/#parameters_1",
            "text": "that:  SSLError  val",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSLError/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSLState/",
            "text": "SSLState\n\u00b6\n\n\n[Source]\n\n\ntype SSLState is\n  (SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val)\n\n\n\n\nType Alias For\n\u00b6\n\n\n\n\n(\nSSLHandshake\n val | \nSSLAuthFail\n val | \nSSLReady\n val | \nSSLError\n val)",
            "title": "type SSLState"
        },
        {
            "location": "/net-ssl-SSLState/#sslstate",
            "text": "[Source]  type SSLState is\n  (SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val)",
            "title": "SSLState"
        },
        {
            "location": "/net-ssl-SSLState/#type-alias-for",
            "text": "( SSLHandshake  val |  SSLAuthFail  val |  SSLReady  val |  SSLError  val)",
            "title": "Type Alias For"
        },
        {
            "location": "/net-ssl-SSL/",
            "text": "SSL\n\u00b6\n\n\n[Source]\n\n\nAn SSL session manages handshakes, encryption and decryption. It is not tied\nto any transport layer.\n\n\nclass ref SSL\n\n\n\n\nPublic Functions\n\u00b6\n\n\nstate\n\u00b6\n\n\n[Source]\n\n\nReturns the SSL session state.\n\n\nfun box state()\n: (SSLHandshake val | SSLAuthFail val | SSLReady val | \n    SSLError val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nSSLHandshake\n val | \nSSLAuthFail\n val | \nSSLReady\n val | \n    \nSSLError\n val)\n\n\n\n\n\n\nread\n\u00b6\n\n\n[Source]\n\n\nReturns unencrypted bytes to be passed to the application. If \nexpect\n is\nnon-zero, the number of bytes returned will be exactly \nexpect\n. If no data\n(or less than \nexpect\n bytes) is available, this returns None.\n\n\nfun ref read(\n  expect: USize val = seq)\n: (Array[U8 val] iso^ | None val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpect: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nArray\n[\nU8\n val] iso^ | \nNone\n val)\n\n\n\n\n\n\nwrite\n\u00b6\n\n\n[Source]\n\n\nWhen application data is sent, add it to the SSL session. Raises an error\nif the handshake is not complete.\n\n\nfun ref write(\n  data: (String val | Array[U8 val] val))\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nreceive\n\u00b6\n\n\n[Source]\n\n\nWhen data is received, add it to the SSL session.\n\n\nfun ref receive(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncan_send\n\u00b6\n\n\n[Source]\n\n\nReturns true if there are encrypted bytes to be passed to the destination.\n\n\nfun ref can_send()\n: Bool val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nsend\n\u00b6\n\n\n[Source]\n\n\nReturns encrypted bytes to be passed to the destination. Raises an error\nif no data is available.\n\n\nfun ref send()\n: Array[U8 val] iso^ ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nArray\n[\nU8\n val] iso^ ?\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nDispose of the session.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class SSL"
        },
        {
            "location": "/net-ssl-SSL/#ssl",
            "text": "[Source]  An SSL session manages handshakes, encryption and decryption. It is not tied\nto any transport layer.  class ref SSL",
            "title": "SSL"
        },
        {
            "location": "/net-ssl-SSL/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/net-ssl-SSL/#state",
            "text": "[Source]  Returns the SSL session state.  fun box state()\n: (SSLHandshake val | SSLAuthFail val | SSLReady val | \n    SSLError val)",
            "title": "state"
        },
        {
            "location": "/net-ssl-SSL/#returns",
            "text": "( SSLHandshake  val |  SSLAuthFail  val |  SSLReady  val | \n     SSLError  val)",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSL/#read",
            "text": "[Source]  Returns unencrypted bytes to be passed to the application. If  expect  is\nnon-zero, the number of bytes returned will be exactly  expect . If no data\n(or less than  expect  bytes) is available, this returns None.  fun ref read(\n  expect: USize val = seq)\n: (Array[U8 val] iso^ | None val)",
            "title": "read"
        },
        {
            "location": "/net-ssl-SSL/#parameters",
            "text": "expect:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSL/#returns_1",
            "text": "( Array [ U8  val] iso^ |  None  val)",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSL/#write",
            "text": "[Source]  When application data is sent, add it to the SSL session. Raises an error\nif the handshake is not complete.  fun ref write(\n  data: (String val | Array[U8 val] val))\n: None val ?",
            "title": "write"
        },
        {
            "location": "/net-ssl-SSL/#parameters_1",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSL/#returns_2",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSL/#receive",
            "text": "[Source]  When data is received, add it to the SSL session.  fun ref receive(\n  data: (String val | Array[U8 val] val))\n: None val",
            "title": "receive"
        },
        {
            "location": "/net-ssl-SSL/#parameters_2",
            "text": "data: ( String  val |  Array [ U8  val] val)",
            "title": "Parameters"
        },
        {
            "location": "/net-ssl-SSL/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSL/#can_send",
            "text": "[Source]  Returns true if there are encrypted bytes to be passed to the destination.  fun ref can_send()\n: Bool val",
            "title": "can_send"
        },
        {
            "location": "/net-ssl-SSL/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSL/#send",
            "text": "[Source]  Returns encrypted bytes to be passed to the destination. Raises an error\nif no data is available.  fun ref send()\n: Array[U8 val] iso^ ?",
            "title": "send"
        },
        {
            "location": "/net-ssl-SSL/#returns_5",
            "text": "Array [ U8  val] iso^ ?",
            "title": "Returns"
        },
        {
            "location": "/net-ssl-SSL/#dispose",
            "text": "[Source]  Dispose of the session.  fun ref dispose()\n: None val",
            "title": "dispose"
        },
        {
            "location": "/net-ssl-SSL/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest--index/",
            "text": "PonyTest package\n\u00b6\n\n\nThe PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.\n\n\nTo help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:\n\n\n\n\nbuiltin\n\n\ntime\n\n\ncollections\n\n\n\n\nEach unit test is a class, with a single test function. By default all tests\nrun concurrently.\n\n\nEach test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.\n\n\nWhen any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.\n\n\nExample program\n\u00b6\n\n\nTo use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.\n\n\nThe following is a complete program with 2 trivial tests.\n\n\nuse \"ponytest\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String => \"addition\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String => \"subtraction\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](2, 4 - 2)\n\n\n\n\nThe make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.\n\n\nMain.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.\n\n\nTest names\n\u00b6\n\n\nTests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.\n\n\nArbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.\n\n\nYou can skip any tests whose names start with a given string by using the\n\n--exclude=[prefix]\n command line option.\n\n\nYou can run only tests whose names start with a given string by using the\n\n--only=[prefix]\n command line option.\n\n\nAggregation\n\u00b6\n\n\nOften it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.\n\n\nThis can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages \nfoo\n and \nbar\n.\n\n\nuse \"ponytest\"\nuse foo = \"foo\"\nuse bar = \"bar\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)\n\n\n\n\nAggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.\n\n\nLong tests\n\u00b6\n\n\nSimple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.\n\n\nLong tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.\n\n\nThe complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.\n\n\nSince failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.\n\n\nOn a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.\n\n\nNote that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.\n\n\nTimeouts should not be used as the standard method of detecting if a test has\nfailed.\n\n\nExclusion groups\n\u00b6\n\n\nBy default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.\n\n\nNo tests that are in the same exclusion group will be run concurrently.\n\n\nExclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.\n\n\nThe command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.\n\n\nLabels\n\u00b6\n\n\nTest can have label. Labels are used to filter which tests are run, by setting\ncommand line argument \n--label=[some custom label]\n. It can be used to separate\nunit tests from integration tests.\n\n\nBy default label is empty. You can set it up by overriding \nlabel(): String\n\nmethod in unit test.\n\n\nuse \"ponytest\"\n\nclass iso _I8AddTest is UnitTest\n  fun name(): String => \"_I8AddTest\"\n  fun label(): String => \"simple\"\n  fun apply(h: TestHelper) =>\n    h.assert_eq[I8](1, 1)\n\n\n\n\n\nTear down\n\u00b6\n\n\nEach unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.\n\n\nThe tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.\n\n\nWhen a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.\n\n\nThe test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.\n\n\nPublic Types\n\u00b6\n\n\n\n\ntrait UnitTest\n\n\ntrait TestList\n\n\ninterface ITest\n\n\nclass TestHelper\n\n\nactor PonyTest",
            "title": "Package"
        },
        {
            "location": "/ponytest--index/#ponytest-package",
            "text": "The PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.  To help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:   builtin  time  collections   Each unit test is a class, with a single test function. By default all tests\nrun concurrently.  Each test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.  When any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.",
            "title": "PonyTest package"
        },
        {
            "location": "/ponytest--index/#example-program",
            "text": "To use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.  The following is a complete program with 2 trivial tests.  use \"ponytest\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String => \"addition\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String => \"subtraction\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](2, 4 - 2)  The make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.  Main.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.",
            "title": "Example program"
        },
        {
            "location": "/ponytest--index/#test-names",
            "text": "Tests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.  Arbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.  You can skip any tests whose names start with a given string by using the --exclude=[prefix]  command line option.  You can run only tests whose names start with a given string by using the --only=[prefix]  command line option.",
            "title": "Test names"
        },
        {
            "location": "/ponytest--index/#aggregation",
            "text": "Often it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.  This can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages  foo  and  bar .  use \"ponytest\"\nuse foo = \"foo\"\nuse bar = \"bar\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)  Aggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.",
            "title": "Aggregation"
        },
        {
            "location": "/ponytest--index/#long-tests",
            "text": "Simple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.  Long tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.  The complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.  Since failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.  On a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.  Note that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.  Timeouts should not be used as the standard method of detecting if a test has\nfailed.",
            "title": "Long tests"
        },
        {
            "location": "/ponytest--index/#exclusion-groups",
            "text": "By default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.  No tests that are in the same exclusion group will be run concurrently.  Exclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.  The command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.",
            "title": "Exclusion groups"
        },
        {
            "location": "/ponytest--index/#labels",
            "text": "Test can have label. Labels are used to filter which tests are run, by setting\ncommand line argument  --label=[some custom label] . It can be used to separate\nunit tests from integration tests.  By default label is empty. You can set it up by overriding  label(): String \nmethod in unit test.  use \"ponytest\"\n\nclass iso _I8AddTest is UnitTest\n  fun name(): String => \"_I8AddTest\"\n  fun label(): String => \"simple\"\n  fun apply(h: TestHelper) =>\n    h.assert_eq[I8](1, 1)",
            "title": "Labels"
        },
        {
            "location": "/ponytest--index/#tear-down",
            "text": "Each unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.  The tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.  When a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.  The test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.",
            "title": "Tear down"
        },
        {
            "location": "/ponytest--index/#public-types",
            "text": "trait UnitTest  trait TestList  interface ITest  class TestHelper  actor PonyTest",
            "title": "Public Types"
        },
        {
            "location": "/ponytest-UnitTest/",
            "text": "UnitTest\n\u00b6\n\n\n[Source]\n\n\nEach unit test class must provide this trait. Simple tests only need to\ndefine the name() and apply() functions. The remaining functions specify\nadditional test options.\n\n\ntrait ref UnitTest\n\n\n\n\nPublic Functions\n\u00b6\n\n\nname\n\u00b6\n\n\n[Source]\n\n\nReport the test name, which is used when printing test results and on the\ncommand line to select tests to run.\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nexclusion_group\n\u00b6\n\n\n[Source]\n\n\nReport the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.\n\n\nfun box exclusion_group()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nRun the test.\nRaising an error is interpreted as a test failure.\n\n\nfun ref apply(\n  h: TestHelper val)\n: None val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\ntimed_out\n\u00b6\n\n\n[Source]\n\n\nTear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.\n\n\nfun ref timed_out(\n  h: TestHelper val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntear_down\n\u00b6\n\n\n[Source]\n\n\nTidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.\n\n\nfun ref tear_down(\n  h: TestHelper val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nlabel\n\u00b6\n\n\n[Source]\n\n\nReport the test label, returning an empty string for none.\nIt can be later use to filter tests which we want to run, by labels.\n\n\nfun box label()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val",
            "title": "trait UnitTest"
        },
        {
            "location": "/ponytest-UnitTest/#unittest",
            "text": "[Source]  Each unit test class must provide this trait. Simple tests only need to\ndefine the name() and apply() functions. The remaining functions specify\nadditional test options.  trait ref UnitTest",
            "title": "UnitTest"
        },
        {
            "location": "/ponytest-UnitTest/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-UnitTest/#name",
            "text": "[Source]  Report the test name, which is used when printing test results and on the\ncommand line to select tests to run.  fun box name()\n: String val",
            "title": "name"
        },
        {
            "location": "/ponytest-UnitTest/#returns",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-UnitTest/#exclusion_group",
            "text": "[Source]  Report the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.  fun box exclusion_group()\n: String val",
            "title": "exclusion_group"
        },
        {
            "location": "/ponytest-UnitTest/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-UnitTest/#apply",
            "text": "[Source]  Run the test.\nRaising an error is interpreted as a test failure.  fun ref apply(\n  h: TestHelper val)\n: None val ?",
            "title": "apply"
        },
        {
            "location": "/ponytest-UnitTest/#parameters",
            "text": "h:  TestHelper  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-UnitTest/#returns_2",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/ponytest-UnitTest/#timed_out",
            "text": "[Source]  Tear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.  fun ref timed_out(\n  h: TestHelper val)\n: None val",
            "title": "timed_out"
        },
        {
            "location": "/ponytest-UnitTest/#parameters_1",
            "text": "h:  TestHelper  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-UnitTest/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-UnitTest/#tear_down",
            "text": "[Source]  Tidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.  fun ref tear_down(\n  h: TestHelper val)\n: None val",
            "title": "tear_down"
        },
        {
            "location": "/ponytest-UnitTest/#parameters_2",
            "text": "h:  TestHelper  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-UnitTest/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-UnitTest/#label",
            "text": "[Source]  Report the test label, returning an empty string for none.\nIt can be later use to filter tests which we want to run, by labels.  fun box label()\n: String val",
            "title": "label"
        },
        {
            "location": "/ponytest-UnitTest/#returns_5",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestList/",
            "text": "TestList\n\u00b6\n\n\n[Source]\n\n\nSource of unit tests for a PonyTest object.\nSee package doc string for further information and example use.\n\n\ntrait ref TestList\n\n\n\n\nPublic Functions\n\u00b6\n\n\ntests\n\u00b6\n\n\n[Source]\n\n\nAdd all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:\n\n\nfun tests(test: PonyTest) =>\n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)\n\n\n\n\nfun tag tests(\n  test: PonyTest tag)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntest: \nPonyTest\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "trait TestList"
        },
        {
            "location": "/ponytest-TestList/#testlist",
            "text": "[Source]  Source of unit tests for a PonyTest object.\nSee package doc string for further information and example use.  trait ref TestList",
            "title": "TestList"
        },
        {
            "location": "/ponytest-TestList/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-TestList/#tests",
            "text": "[Source]  Add all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:  fun tests(test: PonyTest) =>\n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)  fun tag tests(\n  test: PonyTest tag)\n: None val",
            "title": "tests"
        },
        {
            "location": "/ponytest-TestList/#parameters",
            "text": "test:  PonyTest  tag",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestList/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-ITest/",
            "text": "ITest\n\u00b6\n\n\n[Source]\n\n\ninterface ref ITest\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply()\n: None val ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val ?",
            "title": "interface ITest"
        },
        {
            "location": "/ponytest-ITest/#itest",
            "text": "[Source]  interface ref ITest",
            "title": "ITest"
        },
        {
            "location": "/ponytest-ITest/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-ITest/#apply",
            "text": "[Source]  fun box apply()\n: None val ?",
            "title": "apply"
        },
        {
            "location": "/ponytest-ITest/#returns",
            "text": "None  val ?",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/",
            "text": "TestHelper\n\u00b6\n\n\n[Source]\n\n\nPer unit test class that provides control, logging and assertion functions.\n\n\nEach unit test is given a TestHelper when it is run. This is val and so can\nbe passed between methods and actors within the test without restriction.\n\n\nThe assertion functions check the relevant condition and mark the test as a\nfailure if appropriate. The success or failure of the condition is reported\nback as a Bool which can be checked if a different code path is needed when\nthat condition fails.\n\n\nAll assert functions take an optional message argument. This is simply a\nstring that is printed as part of the error message when the condition fails.\nIt is intended to aid identifying what failed.\n\n\nclass val TestHelper\n\n\n\n\nPublic fields\n\u00b6\n\n\nlet env: \nEnv\n val\n\u00b6\n\n\n[Source]\n\n\nThe process environment.\n\n\nThis is useful for getting the \nroot authority\n in order to access\nthe filesystem (See \nfiles\n) or the network (See \nnet\n)\nin your tests.\n\n\n\n\nPublic Functions\n\u00b6\n\n\nlog\n\u00b6\n\n\n[Source]\n\n\nLog the given message.\n\n\nThe verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.\n\n\nLogs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.\n\n\nfun box log(\n  msg: String val,\n  verbose: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmsg: \nString\n val\n\n\nverbose: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfail\n\u00b6\n\n\n[Source]\n\n\nFlag the test as having failed.\n\n\nfun box fail(\n  msg: String val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nmsg: \nString\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nassert_true\n\u00b6\n\n\n[Source]\n\n\nAssert that the given expression is true.\n\n\nfun box assert_true(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nactual: \nBool\n val\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_false\n\u00b6\n\n\n[Source]\n\n\nAssert that the given expression is false.\n\n\nfun box assert_false(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nactual: \nBool\n val\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_error\n\u00b6\n\n\n[Source]\n\n\nAssert that the given test function throws an error when run.\n\n\nfun box assert_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntest: \nITest\n box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_no_error\n\u00b6\n\n\n[Source]\n\n\nAssert that the gived test function does not throw an error when run.\n\n\nfun box assert_no_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntest: \nITest\n box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_is[A: A]\n\u00b6\n\n\n[Source]\n\n\nAssert that the 2 given expressions resolve to the same instance\n\n\nfun box assert_is[A: A](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_eq[A: (\nEquatable\n[A] #read & \nStringable\n #read)]\n\u00b6\n\n\n[Source]\n\n\nAssert that the 2 given expressions are equal.\n\n\nfun box assert_eq[A: (Equatable[A] #read & Stringable #read)](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_isnt[A: A]\n\u00b6\n\n\n[Source]\n\n\nAssert that the 2 given expressions resolve to different instances.\n\n\nfun box assert_isnt[A: A](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnot_expect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_ne[A: (\nEquatable\n[A] #read & \nStringable\n #read)]\n\u00b6\n\n\n[Source]\n\n\nAssert that the 2 given expressions are not equal.\n\n\nfun box assert_ne[A: (Equatable[A] #read & Stringable #read)](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnot_expect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_array_eq[A: (\nEquatable\n[A] #read & \nStringable\n #read)]\n\u00b6\n\n\n[Source]\n\n\nAssert that the contents of the 2 given ReadSeqs are equal.\n\n\nfun box assert_array_eq[A: (Equatable[A] #read & Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpect: \nReadSeq\n[A] box\n\n\nactual: \nReadSeq\n[A] box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_array_eq_unordered[A: (\nEquatable\n[A] #read & \nStringable\n #read)]\n\u00b6\n\n\n[Source]\n\n\nAssert that the contents of the 2 given ReadSeqs are equal ignoring order.\n\n\nfun box assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpect: \nReadSeq\n[A] box\n\n\nactual: \nReadSeq\n[A] box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlong_test\n\u00b6\n\n\n[Source]\n\n\nIndicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.\n\n\nfun box long_test(\n  timeout: U64 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimeout: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncomplete\n\u00b6\n\n\n[Source]\n\n\nMUST be called by each long test to indicate the test has finished, unless\na timeout occurs.\n\n\nThe \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.\n\n\nOnce this is called tear_down() may be called at any time.\n\n\nfun box complete(\n  success: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsuccess: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nexpect_action\n\u00b6\n\n\n[Source]\n\n\nCan be called in a long test to set up expectations for one or more actions\nthat, when all completed, will complete the test.\n\n\nThis pattern is useful for cases where you have multiple things that need\nto happen to complete your test, but don't want to have to collect them\nall yourself into a single actor that calls the complete method.\n\n\nThe order of calls to expect_action don't matter - the actions may be\ncompleted in any other order to complete the test.\n\n\nfun box expect_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncomplete_action\n\u00b6\n\n\n[Source]\n\n\nMUST be called for each action expectation that was set up in a long test\nto fulfill the expectations. Any expectations that are still outstanding\nwhen the long test timeout runs out will be printed by name when it fails.\n\n\nCompleting all outstanding actions is enough to finish the test. There's no\nneed to also call the complete method when the actions are finished.\n\n\nCalling the complete method will finish the test immediately, without\nwaiting for any outstanding actions to be completed.\n\n\nfun box complete_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfail_action\n\u00b6\n\n\n[Source]\n\n\nCall to fail an action, which will also cause the entire test to fail\nimmediately, without waiting the rest of the outstanding actions.\n\n\nThe name of the failed action will be included in the failure output.\n\n\nUsually the action name should be an expected action set up by a call to\nexpect_action, but failing unexpected actions will also fail the test.\n\n\nfun box fail_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndispose_when_done\n\u00b6\n\n\n[Source]\n\n\nPass a disposable actor to be disposed of when the test is complete.\nThe actor will be disposed no matter whether the test succeeds or fails.\n\n\nIf the test is already tearing down, the actor will be disposed immediately.\n\n\nfun box dispose_when_done(\n  disposable: DisposableActor tag)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndisposable: \nDisposableActor\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class TestHelper"
        },
        {
            "location": "/ponytest-TestHelper/#testhelper",
            "text": "[Source]  Per unit test class that provides control, logging and assertion functions.  Each unit test is given a TestHelper when it is run. This is val and so can\nbe passed between methods and actors within the test without restriction.  The assertion functions check the relevant condition and mark the test as a\nfailure if appropriate. The success or failure of the condition is reported\nback as a Bool which can be checked if a different code path is needed when\nthat condition fails.  All assert functions take an optional message argument. This is simply a\nstring that is printed as part of the error message when the condition fails.\nIt is intended to aid identifying what failed.  class val TestHelper",
            "title": "TestHelper"
        },
        {
            "location": "/ponytest-TestHelper/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/ponytest-TestHelper/#let-env-env-val",
            "text": "[Source]  The process environment.  This is useful for getting the  root authority  in order to access\nthe filesystem (See  files ) or the network (See  net )\nin your tests.",
            "title": "let env: Env val"
        },
        {
            "location": "/ponytest-TestHelper/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/ponytest-TestHelper/#log",
            "text": "[Source]  Log the given message.  The verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.  Logs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.  fun box log(\n  msg: String val,\n  verbose: Bool val = seq)\n: None val",
            "title": "log"
        },
        {
            "location": "/ponytest-TestHelper/#parameters",
            "text": "msg:  String  val  verbose:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#fail",
            "text": "[Source]  Flag the test as having failed.  fun box fail(\n  msg: String val = seq)\n: None val",
            "title": "fail"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_1",
            "text": "msg:  String  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_true",
            "text": "[Source]  Assert that the given expression is true.  fun box assert_true(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_true"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_2",
            "text": "actual:  Bool  val  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_false",
            "text": "[Source]  Assert that the given expression is false.  fun box assert_false(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_false"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_3",
            "text": "actual:  Bool  val  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_error",
            "text": "[Source]  Assert that the given test function throws an error when run.  fun box assert_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_error"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_4",
            "text": "test:  ITest  box  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_4",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_no_error",
            "text": "[Source]  Assert that the gived test function does not throw an error when run.  fun box assert_no_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_no_error"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_5",
            "text": "test:  ITest  box  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_5",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_is91a-a93",
            "text": "[Source]  Assert that the 2 given expressions resolve to the same instance  fun box assert_is[A: A](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_is[A: A]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_6",
            "text": "expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_6",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_eq91a-equatable91a93-read-stringable-read93",
            "text": "[Source]  Assert that the 2 given expressions are equal.  fun box assert_eq[A: (Equatable[A] #read & Stringable #read)](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_eq[A: (Equatable[A] #read &amp; Stringable #read)]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_7",
            "text": "expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_7",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_isnt91a-a93",
            "text": "[Source]  Assert that the 2 given expressions resolve to different instances.  fun box assert_isnt[A: A](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_isnt[A: A]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_8",
            "text": "not_expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_ne91a-equatable91a93-read-stringable-read93",
            "text": "[Source]  Assert that the 2 given expressions are not equal.  fun box assert_ne[A: (Equatable[A] #read & Stringable #read)](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_ne[A: (Equatable[A] #read &amp; Stringable #read)]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_9",
            "text": "not_expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_array_eq91a-equatable91a93-read-stringable-read93",
            "text": "[Source]  Assert that the contents of the 2 given ReadSeqs are equal.  fun box assert_array_eq[A: (Equatable[A] #read & Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_10",
            "text": "expect:  ReadSeq [A] box  actual:  ReadSeq [A] box  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#assert_array_eq_unordered91a-equatable91a93-read-stringable-read93",
            "text": "[Source]  Assert that the contents of the 2 given ReadSeqs are equal ignoring order.  fun box assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val",
            "title": "assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)]"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_11",
            "text": "expect:  ReadSeq [A] box  actual:  ReadSeq [A] box  msg:  String  val = seq  loc:  SourceLoc  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_11",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#long_test",
            "text": "[Source]  Indicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.  fun box long_test(\n  timeout: U64 val)\n: None val",
            "title": "long_test"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_12",
            "text": "timeout:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#complete",
            "text": "[Source]  MUST be called by each long test to indicate the test has finished, unless\na timeout occurs.  The \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.  Once this is called tear_down() may be called at any time.  fun box complete(\n  success: Bool val)\n: None val",
            "title": "complete"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_13",
            "text": "success:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#expect_action",
            "text": "[Source]  Can be called in a long test to set up expectations for one or more actions\nthat, when all completed, will complete the test.  This pattern is useful for cases where you have multiple things that need\nto happen to complete your test, but don't want to have to collect them\nall yourself into a single actor that calls the complete method.  The order of calls to expect_action don't matter - the actions may be\ncompleted in any other order to complete the test.  fun box expect_action(\n  name: String val)\n: None val",
            "title": "expect_action"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_14",
            "text": "name:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_14",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#complete_action",
            "text": "[Source]  MUST be called for each action expectation that was set up in a long test\nto fulfill the expectations. Any expectations that are still outstanding\nwhen the long test timeout runs out will be printed by name when it fails.  Completing all outstanding actions is enough to finish the test. There's no\nneed to also call the complete method when the actions are finished.  Calling the complete method will finish the test immediately, without\nwaiting for any outstanding actions to be completed.  fun box complete_action(\n  name: String val)\n: None val",
            "title": "complete_action"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_15",
            "text": "name:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_15",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#fail_action",
            "text": "[Source]  Call to fail an action, which will also cause the entire test to fail\nimmediately, without waiting the rest of the outstanding actions.  The name of the failed action will be included in the failure output.  Usually the action name should be an expected action set up by a call to\nexpect_action, but failing unexpected actions will also fail the test.  fun box fail_action(\n  name: String val)\n: None val",
            "title": "fail_action"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_16",
            "text": "name:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_16",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-TestHelper/#dispose_when_done",
            "text": "[Source]  Pass a disposable actor to be disposed of when the test is complete.\nThe actor will be disposed no matter whether the test succeeds or fails.  If the test is already tearing down, the actor will be disposed immediately.  fun box dispose_when_done(\n  disposable: DisposableActor tag)\n: None val",
            "title": "dispose_when_done"
        },
        {
            "location": "/ponytest-TestHelper/#parameters_17",
            "text": "disposable:  DisposableActor  tag",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-TestHelper/#returns_17",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/ponytest-PonyTest/",
            "text": "PonyTest\n\u00b6\n\n\n[Source]\n\n\nMain test framework actor that organises tests, collates information and\nprints results.\n\n\nactor tag PonyTest\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a PonyTest object and use it to run the tests from the given\nTestList\n\n\nnew tag create(\n  env: Env val,\n  list: TestList tag)\n: PonyTest tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nenv: \nEnv\n val\n\n\nlist: \nTestList\n tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPonyTest\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nRun the given test, subject to our filters and options.\n\n\nbe apply(\n  test: UnitTest iso)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntest: \nUnitTest\n iso",
            "title": "actor PonyTest"
        },
        {
            "location": "/ponytest-PonyTest/#ponytest",
            "text": "[Source]  Main test framework actor that organises tests, collates information and\nprints results.  actor tag PonyTest",
            "title": "PonyTest"
        },
        {
            "location": "/ponytest-PonyTest/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-PonyTest/#create",
            "text": "[Source]  Create a PonyTest object and use it to run the tests from the given\nTestList  new tag create(\n  env: Env val,\n  list: TestList tag)\n: PonyTest tag^",
            "title": "create"
        },
        {
            "location": "/ponytest-PonyTest/#parameters",
            "text": "env:  Env  val  list:  TestList  tag",
            "title": "Parameters"
        },
        {
            "location": "/ponytest-PonyTest/#returns",
            "text": "PonyTest  tag^",
            "title": "Returns"
        },
        {
            "location": "/ponytest-PonyTest/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/ponytest-PonyTest/#apply",
            "text": "[Source]  Run the given test, subject to our filters and options.  be apply(\n  test: UnitTest iso)",
            "title": "apply"
        },
        {
            "location": "/ponytest-PonyTest/#parameters_1",
            "text": "test:  UnitTest  iso",
            "title": "Parameters"
        },
        {
            "location": "/promises--index/",
            "text": "Promises Package\n\u00b6\n\n\nA \nPromise\n represents a value that will be available at a later\ntime. \nPromise\ns can either be fulfilled with a value or rejected. Any\nnumber of function handlers can be added to the \nPromise\n, to be\ncalled when the \nPromise\n is fulfilled or rejected. These handlers\nthemselves are also wrapped in \nPromise\ns so that they can be chained\ntogether in order for the fulfilled value of one \nPromise\n to be used\nto compute a value which will be used to fulfill the next \nPromise\n in\nthe chain, or so that if the \nPromise\n is rejected then the subsequent\nreject functions will also be called. The input and output types of a\nfulfill handler do not have to be the same, so a chain of fulfill\nhandlers can transform the original value into something new.\n\n\nFulfill and reject handlers can either be specified as classes that\nimplment the \nFulfill\n and \nReject\n interfaces, or as functions with\nthe same signatures as the \napply\n methods in \nFulfill\n and \nReject\n.\n\n\nIn the following code, the fulfillment of the \nPromise\n causes the\nexecution of several fulfillment functions. The output is:\n\n\nfulfilled + foo\nfulfilled + bar\nfulfilled + baz\n\n\n\n\nuse \"promises\"\n\nclass PrintFulfill is Fulfill[String, String]\n  let _env: Env\n  let _msg: String\n  new create(env: Env, msg: String) =>\n    _env = env\n    _msg = msg\n  fun apply(s: String): String =>\n    _env.out.print(\" + \".join([s; _msg]))\n    s\n\nactor Main\n  new create(env: Env) =>\n     let promise = Promise[String]\n     promise.next[String](recover PrintFulfill(env, \"foo\") end)\n     promise.next[String](recover PrintFulfill(env, \"bar\") end)\n     promise.next[String](recover PrintFulfill(env, \"baz\") end)\n     promise(\"fulfilled\")\n\n\n\n\nIn the following code, the fulfill functions are chained together so\nthat the fulfilled value of the first one is used to generate a value\nwhich fulfills the second one, which in turn is used to compute a\nvalue which fulfills the third one, which in turn is used to compute a\nvalue which fulfills the fourth one. The output is the average length\nof the words passed on the command line or \n0\n if there are no command\nline arguments.\n\n\nuse \"promises\"\n\nprimitive Computation\n  fun tag string_to_strings(s: String): Array[String] val =>\n    recover s.split() end\n  fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val =>\n    recover\n      let len = Array[USize]\n      for s in sa.values() do\n        len.push(s.size())\n      end\n      len\n    end\n  fun tag sizes_to_avg(sza: Array[USize] val): USize =>\n    var acc = USize(0)\n    for sz in sza.values() do\n      acc = acc + sz\n    end\n    acc / sza.size()\n  fun tag output(env: Env, sz: USize): None =>\n    env.out.print(sz.string())\n\nactor Main\n  new create(env: Env) =>\n     let promise = Promise[String]\n     promise.next[Array[String] val](recover Computation~string_to_strings() end)\n            .next[Array[USize] val](recover Computation~strings_to_sizes() end)\n            .next[USize](recover Computation~sizes_to_avg() end)\n            .next[None](recover Computation~output(env) end)\n     promise(\" \".join(env.args.slice(1)))\n\n\n\n\nPublic Types\n\u00b6\n\n\n\n\nactor Promise\n\n\nprimitive Promises\n\n\ninterface Fulfill\n\n\ninterface Reject\n\n\nclass FulfillIdentity\n\n\nclass RejectAlways",
            "title": "Package"
        },
        {
            "location": "/promises--index/#promises-package",
            "text": "A  Promise  represents a value that will be available at a later\ntime.  Promise s can either be fulfilled with a value or rejected. Any\nnumber of function handlers can be added to the  Promise , to be\ncalled when the  Promise  is fulfilled or rejected. These handlers\nthemselves are also wrapped in  Promise s so that they can be chained\ntogether in order for the fulfilled value of one  Promise  to be used\nto compute a value which will be used to fulfill the next  Promise  in\nthe chain, or so that if the  Promise  is rejected then the subsequent\nreject functions will also be called. The input and output types of a\nfulfill handler do not have to be the same, so a chain of fulfill\nhandlers can transform the original value into something new.  Fulfill and reject handlers can either be specified as classes that\nimplment the  Fulfill  and  Reject  interfaces, or as functions with\nthe same signatures as the  apply  methods in  Fulfill  and  Reject .  In the following code, the fulfillment of the  Promise  causes the\nexecution of several fulfillment functions. The output is:  fulfilled + foo\nfulfilled + bar\nfulfilled + baz  use \"promises\"\n\nclass PrintFulfill is Fulfill[String, String]\n  let _env: Env\n  let _msg: String\n  new create(env: Env, msg: String) =>\n    _env = env\n    _msg = msg\n  fun apply(s: String): String =>\n    _env.out.print(\" + \".join([s; _msg]))\n    s\n\nactor Main\n  new create(env: Env) =>\n     let promise = Promise[String]\n     promise.next[String](recover PrintFulfill(env, \"foo\") end)\n     promise.next[String](recover PrintFulfill(env, \"bar\") end)\n     promise.next[String](recover PrintFulfill(env, \"baz\") end)\n     promise(\"fulfilled\")  In the following code, the fulfill functions are chained together so\nthat the fulfilled value of the first one is used to generate a value\nwhich fulfills the second one, which in turn is used to compute a\nvalue which fulfills the third one, which in turn is used to compute a\nvalue which fulfills the fourth one. The output is the average length\nof the words passed on the command line or  0  if there are no command\nline arguments.  use \"promises\"\n\nprimitive Computation\n  fun tag string_to_strings(s: String): Array[String] val =>\n    recover s.split() end\n  fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val =>\n    recover\n      let len = Array[USize]\n      for s in sa.values() do\n        len.push(s.size())\n      end\n      len\n    end\n  fun tag sizes_to_avg(sza: Array[USize] val): USize =>\n    var acc = USize(0)\n    for sz in sza.values() do\n      acc = acc + sz\n    end\n    acc / sza.size()\n  fun tag output(env: Env, sz: USize): None =>\n    env.out.print(sz.string())\n\nactor Main\n  new create(env: Env) =>\n     let promise = Promise[String]\n     promise.next[Array[String] val](recover Computation~string_to_strings() end)\n            .next[Array[USize] val](recover Computation~strings_to_sizes() end)\n            .next[USize](recover Computation~sizes_to_avg() end)\n            .next[None](recover Computation~output(env) end)\n     promise(\" \".join(env.args.slice(1)))",
            "title": "Promises Package"
        },
        {
            "location": "/promises--index/#public-types",
            "text": "actor Promise  primitive Promises  interface Fulfill  interface Reject  class FulfillIdentity  class RejectAlways",
            "title": "Public Types"
        },
        {
            "location": "/promises-Promise/",
            "text": "Promise[A: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nA promise to eventually produce a result of type A. This promise can either\nbe fulfilled or rejected.\n\n\nAny number of promises can be chained after this one.\n\n\nactor tag Promise[A: Any #share]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew tag create()\n: Promise[A] tag^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPromise\n[A] tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nFulfill the promise.\n\n\nbe apply(\n  value: A)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\n\n\nreject\n\u00b6\n\n\n[Source]\n\n\nReject the promise.\n\n\nbe reject()\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnext[B: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nChain a promise after this one.\n\n\nWhen this promise is fulfilled, the result of type A is passed to the\nfulfill function, generating in an intermediate result of type B. This\nis then used to fulfill the next promise in the chain.\n\n\nIf there is no fulfill function, or if the fulfill function raises an\nerror, then the next promise in the chain will be rejected.\n\n\nIf this promise is rejected, this step's reject function is called with no\ninput, generating an intermediate result of type B which is used to\nfulfill the next promise in the chain.\n\n\nIf there is no reject function, of if the reject function raises an error,\nthen the next promise in the chain will be rejected.\n\n\nfun tag next[B: Any #share](\n  fulfill: Fulfill[A, B] iso,\n  rejected: Reject[B] iso = seq)\n: Promise[B] tag\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfulfill: \nFulfill\n[A, B] iso\n\n\nrejected: \nReject\n[B] iso = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPromise\n[B] tag\n\n\n\n\n\n\nadd[optional B: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nAdd two promises into one promise that returns the result of both when\nthey are fulfilled. If either of the promises is rejected then the new\npromise is also rejected.\n\n\nfun tag add[optional B: Any #share](\n  p: Promise[B] tag)\n: Promise[(A , B)] tag\n\n\n\n\nParameters\n\u00b6\n\n\n\n\np: \nPromise\n[B] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPromise\n[(A , B)] tag\n\n\n\n\n\n\njoin\n\u00b6\n\n\n[Source]\n\n\nCreate a promise that is fulfilled when the receiver and all promises in\nthe given iterator are fulfilled. If the receiver or any promise in the\nsequence is rejected then the new promise is also rejected.\n\n\nfun tag join(\n  ps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nps: \nIterator\n[\nPromise\n[A] tag] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPromise\n[\nArray\n[A] val] tag\n\n\n\n\n\n\nselect\n\u00b6\n\n\n[Source]\n\n\nReturn a promise that is fulfilled when either promise is fulfilled,\nresulting in a tuple of its value and the other promise.\n\n\nfun tag select(\n  p: Promise[A] tag)\n: Promise[(A , Promise[A] tag)] tag\n\n\n\n\nParameters\n\u00b6\n\n\n\n\np: \nPromise\n[A] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPromise\n[(A , \nPromise\n[A] tag)] tag\n\n\n\n\n\n\ntimeout\n\u00b6\n\n\n[Source]\n\n\nReject the promise after the given expiration in nanoseconds.\n\n\nfun tag timeout(\n  expiration: U64 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nexpiration: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "actor Promise"
        },
        {
            "location": "/promises-Promise/#promise91a-any-share93",
            "text": "[Source]  A promise to eventually produce a result of type A. This promise can either\nbe fulfilled or rejected.  Any number of promises can be chained after this one.  actor tag Promise[A: Any #share]",
            "title": "Promise[A: Any #share]"
        },
        {
            "location": "/promises-Promise/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/promises-Promise/#create",
            "text": "[Source]  new tag create()\n: Promise[A] tag^",
            "title": "create"
        },
        {
            "location": "/promises-Promise/#returns",
            "text": "Promise [A] tag^",
            "title": "Returns"
        },
        {
            "location": "/promises-Promise/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/promises-Promise/#apply",
            "text": "[Source]  Fulfill the promise.  be apply(\n  value: A)",
            "title": "apply"
        },
        {
            "location": "/promises-Promise/#parameters",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/promises-Promise/#reject",
            "text": "[Source]  Reject the promise.  be reject()",
            "title": "reject"
        },
        {
            "location": "/promises-Promise/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/promises-Promise/#next91b-any-share93",
            "text": "[Source]  Chain a promise after this one.  When this promise is fulfilled, the result of type A is passed to the\nfulfill function, generating in an intermediate result of type B. This\nis then used to fulfill the next promise in the chain.  If there is no fulfill function, or if the fulfill function raises an\nerror, then the next promise in the chain will be rejected.  If this promise is rejected, this step's reject function is called with no\ninput, generating an intermediate result of type B which is used to\nfulfill the next promise in the chain.  If there is no reject function, of if the reject function raises an error,\nthen the next promise in the chain will be rejected.  fun tag next[B: Any #share](\n  fulfill: Fulfill[A, B] iso,\n  rejected: Reject[B] iso = seq)\n: Promise[B] tag",
            "title": "next[B: Any #share]"
        },
        {
            "location": "/promises-Promise/#parameters_1",
            "text": "fulfill:  Fulfill [A, B] iso  rejected:  Reject [B] iso = seq",
            "title": "Parameters"
        },
        {
            "location": "/promises-Promise/#returns_1",
            "text": "Promise [B] tag",
            "title": "Returns"
        },
        {
            "location": "/promises-Promise/#add91optional-b-any-share93",
            "text": "[Source]  Add two promises into one promise that returns the result of both when\nthey are fulfilled. If either of the promises is rejected then the new\npromise is also rejected.  fun tag add[optional B: Any #share](\n  p: Promise[B] tag)\n: Promise[(A , B)] tag",
            "title": "add[optional B: Any #share]"
        },
        {
            "location": "/promises-Promise/#parameters_2",
            "text": "p:  Promise [B] tag",
            "title": "Parameters"
        },
        {
            "location": "/promises-Promise/#returns_2",
            "text": "Promise [(A , B)] tag",
            "title": "Returns"
        },
        {
            "location": "/promises-Promise/#join",
            "text": "[Source]  Create a promise that is fulfilled when the receiver and all promises in\nthe given iterator are fulfilled. If the receiver or any promise in the\nsequence is rejected then the new promise is also rejected.  fun tag join(\n  ps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag",
            "title": "join"
        },
        {
            "location": "/promises-Promise/#parameters_3",
            "text": "ps:  Iterator [ Promise [A] tag] ref",
            "title": "Parameters"
        },
        {
            "location": "/promises-Promise/#returns_3",
            "text": "Promise [ Array [A] val] tag",
            "title": "Returns"
        },
        {
            "location": "/promises-Promise/#select",
            "text": "[Source]  Return a promise that is fulfilled when either promise is fulfilled,\nresulting in a tuple of its value and the other promise.  fun tag select(\n  p: Promise[A] tag)\n: Promise[(A , Promise[A] tag)] tag",
            "title": "select"
        },
        {
            "location": "/promises-Promise/#parameters_4",
            "text": "p:  Promise [A] tag",
            "title": "Parameters"
        },
        {
            "location": "/promises-Promise/#returns_4",
            "text": "Promise [(A ,  Promise [A] tag)] tag",
            "title": "Returns"
        },
        {
            "location": "/promises-Promise/#timeout",
            "text": "[Source]  Reject the promise after the given expiration in nanoseconds.  fun tag timeout(\n  expiration: U64 val)\n: None val",
            "title": "timeout"
        },
        {
            "location": "/promises-Promise/#parameters_5",
            "text": "expiration:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/promises-Promise/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/promises-Promises/",
            "text": "Promises[A: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nprimitive val Promises[A: Any #share]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Promises[A] val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPromises\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\njoin\n\u00b6\n\n\n[Source]\n\n\nCreate a promise that is fulfilled when all promises in the given sequence\nare fulfilled. If any promise in the sequence is rejected then the new\npromise is also rejected. The order that values appear in the final array\nis based on when each promise is fulfilled and not the order that they are\ngiven.\n\n\nfun box join(\n  ps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nps: \nIterator\n[\nPromise\n[A] tag] ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPromise\n[\nArray\n[A] val] tag\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Promises[A] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPromises\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Promises[A] val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nPromises\n[A] val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Promises"
        },
        {
            "location": "/promises-Promises/#promises91a-any-share93",
            "text": "[Source]  primitive val Promises[A: Any #share]",
            "title": "Promises[A: Any #share]"
        },
        {
            "location": "/promises-Promises/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/promises-Promises/#create",
            "text": "[Source]  new val create()\n: Promises[A] val^",
            "title": "create"
        },
        {
            "location": "/promises-Promises/#returns",
            "text": "Promises [A] val^",
            "title": "Returns"
        },
        {
            "location": "/promises-Promises/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/promises-Promises/#join",
            "text": "[Source]  Create a promise that is fulfilled when all promises in the given sequence\nare fulfilled. If any promise in the sequence is rejected then the new\npromise is also rejected. The order that values appear in the final array\nis based on when each promise is fulfilled and not the order that they are\ngiven.  fun box join(\n  ps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag",
            "title": "join"
        },
        {
            "location": "/promises-Promises/#parameters",
            "text": "ps:  Iterator [ Promise [A] tag] ref",
            "title": "Parameters"
        },
        {
            "location": "/promises-Promises/#returns_1",
            "text": "Promise [ Array [A] val] tag",
            "title": "Returns"
        },
        {
            "location": "/promises-Promises/#eq",
            "text": "[Source]  fun box eq(\n  that: Promises[A] val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/promises-Promises/#parameters_1",
            "text": "that:  Promises [A] val",
            "title": "Parameters"
        },
        {
            "location": "/promises-Promises/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/promises-Promises/#ne",
            "text": "[Source]  fun box ne(\n  that: Promises[A] val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/promises-Promises/#parameters_2",
            "text": "that:  Promises [A] val",
            "title": "Parameters"
        },
        {
            "location": "/promises-Promises/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/promises-Fulfill/",
            "text": "Fulfill[A: \nAny\n #share, B: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nA function from A to B that is called when a promise is fulfilled.\n\n\ninterface iso Fulfill[A: Any #share, B: Any #share]\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun ref apply(\n  value: A)\n: B ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nB ?",
            "title": "interface Fulfill"
        },
        {
            "location": "/promises-Fulfill/#fulfill91a-any-share-b-any-share93",
            "text": "[Source]  A function from A to B that is called when a promise is fulfilled.  interface iso Fulfill[A: Any #share, B: Any #share]",
            "title": "Fulfill[A: Any #share, B: Any #share]"
        },
        {
            "location": "/promises-Fulfill/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/promises-Fulfill/#apply",
            "text": "[Source]  fun ref apply(\n  value: A)\n: B ?",
            "title": "apply"
        },
        {
            "location": "/promises-Fulfill/#parameters",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/promises-Fulfill/#returns",
            "text": "B ?",
            "title": "Returns"
        },
        {
            "location": "/promises-Reject/",
            "text": "Reject[A: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nA function on A that is called when a promise is rejected.\n\n\ninterface iso Reject[A: Any #share]\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun ref apply()\n: A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA ?",
            "title": "interface Reject"
        },
        {
            "location": "/promises-Reject/#reject91a-any-share93",
            "text": "[Source]  A function on A that is called when a promise is rejected.  interface iso Reject[A: Any #share]",
            "title": "Reject[A: Any #share]"
        },
        {
            "location": "/promises-Reject/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/promises-Reject/#apply",
            "text": "[Source]  fun ref apply()\n: A ?",
            "title": "apply"
        },
        {
            "location": "/promises-Reject/#returns",
            "text": "A ?",
            "title": "Returns"
        },
        {
            "location": "/promises-FulfillIdentity/",
            "text": "FulfillIdentity[A: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nAn identity function for fulfilling promises.\n\n\nclass iso FulfillIdentity[A: Any #share]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create()\n: FulfillIdentity[A] iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nFulfillIdentity\n[A] iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun ref apply(\n  value: A)\n: A\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA",
            "title": "class FulfillIdentity"
        },
        {
            "location": "/promises-FulfillIdentity/#fulfillidentity91a-any-share93",
            "text": "[Source]  An identity function for fulfilling promises.  class iso FulfillIdentity[A: Any #share]",
            "title": "FulfillIdentity[A: Any #share]"
        },
        {
            "location": "/promises-FulfillIdentity/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/promises-FulfillIdentity/#create",
            "text": "[Source]  new iso create()\n: FulfillIdentity[A] iso^",
            "title": "create"
        },
        {
            "location": "/promises-FulfillIdentity/#returns",
            "text": "FulfillIdentity [A] iso^",
            "title": "Returns"
        },
        {
            "location": "/promises-FulfillIdentity/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/promises-FulfillIdentity/#apply",
            "text": "[Source]  fun ref apply(\n  value: A)\n: A",
            "title": "apply"
        },
        {
            "location": "/promises-FulfillIdentity/#parameters",
            "text": "value: A",
            "title": "Parameters"
        },
        {
            "location": "/promises-FulfillIdentity/#returns_1",
            "text": "A",
            "title": "Returns"
        },
        {
            "location": "/promises-RejectAlways/",
            "text": "RejectAlways[A: \nAny\n #share]\n\u00b6\n\n\n[Source]\n\n\nA reject that always raises an error.\n\n\nclass iso RejectAlways[A: Any #share]\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew iso create()\n: RejectAlways[A] iso^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nRejectAlways\n[A] iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun ref apply()\n: A ?\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nA ?",
            "title": "class RejectAlways"
        },
        {
            "location": "/promises-RejectAlways/#rejectalways91a-any-share93",
            "text": "[Source]  A reject that always raises an error.  class iso RejectAlways[A: Any #share]",
            "title": "RejectAlways[A: Any #share]"
        },
        {
            "location": "/promises-RejectAlways/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/promises-RejectAlways/#create",
            "text": "[Source]  new iso create()\n: RejectAlways[A] iso^",
            "title": "create"
        },
        {
            "location": "/promises-RejectAlways/#returns",
            "text": "RejectAlways [A] iso^",
            "title": "Returns"
        },
        {
            "location": "/promises-RejectAlways/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/promises-RejectAlways/#apply",
            "text": "[Source]  fun ref apply()\n: A ?",
            "title": "apply"
        },
        {
            "location": "/promises-RejectAlways/#returns_1",
            "text": "A ?",
            "title": "Returns"
        },
        {
            "location": "/signals--index/",
            "text": "Signals package\n\u00b6\n\n\nThe Signals package provides support for handling Unix style signals.\nFor each signal that you want to handle, you need to create a \nSignalHandler\n\nand a corresponding \nSignalNotify\n object. Each SignalHandler runs as it own\nactor and upon receiving the signal will call its corresponding\n\nSignalNotify\n's apply method.\n\n\nExample program\n\u00b6\n\n\nThe following program will listen for the TERM signal and output a message to\nstandard out if it is received.\n\n\nuse \"signals\"\n\nactor Main\n  new create(env: Env) =>\n    // Create a TERM handler\n    let signal = SignalHandler(TermHandler(env), Sig.term())\n    // Raise TERM signal\n    signal.raise()\n\nclass TermHandler is SignalNotify\n  let _env: Env\n\n  new iso create(env: Env) =>\n    _env = env\n\n  fun ref apply(count: U32): Bool =>\n    _env.out.print(\"TERM signal received\")\n    true\n\n\n\n\nSignal portability\n\u00b6\n\n\nThe \nSig\n primitive provides support for portable signal handling across Linux,\nFreeBSD and OSX. Signals are not supported on Windows and attempting to use\nthem will cause a compilation error.\n\n\nShutting down handlers\n\u00b6\n\n\nUnlike a \nTCPConnection\n and other forms of input receiving, creating a\n\nSignalHandler\n will not keep your program running. As such, you are not\nrequired to call \ndispose\n on your signal handlers in order to shutdown your\nprogram.\n\n\nPublic Types\n\u00b6\n\n\n\n\ninterface SignalNotify\n\n\nprimitive SignalRaise\n\n\nactor SignalHandler\n\n\nprimitive Sig",
            "title": "Package"
        },
        {
            "location": "/signals--index/#signals-package",
            "text": "The Signals package provides support for handling Unix style signals.\nFor each signal that you want to handle, you need to create a  SignalHandler \nand a corresponding  SignalNotify  object. Each SignalHandler runs as it own\nactor and upon receiving the signal will call its corresponding SignalNotify 's apply method.",
            "title": "Signals package"
        },
        {
            "location": "/signals--index/#example-program",
            "text": "The following program will listen for the TERM signal and output a message to\nstandard out if it is received.  use \"signals\"\n\nactor Main\n  new create(env: Env) =>\n    // Create a TERM handler\n    let signal = SignalHandler(TermHandler(env), Sig.term())\n    // Raise TERM signal\n    signal.raise()\n\nclass TermHandler is SignalNotify\n  let _env: Env\n\n  new iso create(env: Env) =>\n    _env = env\n\n  fun ref apply(count: U32): Bool =>\n    _env.out.print(\"TERM signal received\")\n    true",
            "title": "Example program"
        },
        {
            "location": "/signals--index/#signal-portability",
            "text": "The  Sig  primitive provides support for portable signal handling across Linux,\nFreeBSD and OSX. Signals are not supported on Windows and attempting to use\nthem will cause a compilation error.",
            "title": "Signal portability"
        },
        {
            "location": "/signals--index/#shutting-down-handlers",
            "text": "Unlike a  TCPConnection  and other forms of input receiving, creating a SignalHandler  will not keep your program running. As such, you are not\nrequired to call  dispose  on your signal handlers in order to shutdown your\nprogram.",
            "title": "Shutting down handlers"
        },
        {
            "location": "/signals--index/#public-types",
            "text": "interface SignalNotify  primitive SignalRaise  actor SignalHandler  primitive Sig",
            "title": "Public Types"
        },
        {
            "location": "/signals-SignalNotify/",
            "text": "SignalNotify\n\u00b6\n\n\n[Source]\n\n\nNotifications for a signal.\n\n\ninterface ref SignalNotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nCalled with the the number of times the signal has fired since this was\nlast called. Return false to stop listening for the signal.\n\n\nfun ref apply(\n  count: U32 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ncount: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nCalled if the signal is disposed. This is also called if the notifier\nreturns false.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface SignalNotify"
        },
        {
            "location": "/signals-SignalNotify/#signalnotify",
            "text": "[Source]  Notifications for a signal.  interface ref SignalNotify",
            "title": "SignalNotify"
        },
        {
            "location": "/signals-SignalNotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/signals-SignalNotify/#apply",
            "text": "[Source]  Called with the the number of times the signal has fired since this was\nlast called. Return false to stop listening for the signal.  fun ref apply(\n  count: U32 val)\n: Bool val",
            "title": "apply"
        },
        {
            "location": "/signals-SignalNotify/#parameters",
            "text": "count:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/signals-SignalNotify/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/signals-SignalNotify/#dispose",
            "text": "[Source]  Called if the signal is disposed. This is also called if the notifier\nreturns false.  fun ref dispose()\n: None val",
            "title": "dispose"
        },
        {
            "location": "/signals-SignalNotify/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/signals-SignalRaise/",
            "text": "SignalRaise\n\u00b6\n\n\n[Source]\n\n\nRaise a signal.\n\n\nprimitive val SignalRaise\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: SignalRaise val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSignalRaise\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply(\n  sig: U32 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nsig: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: SignalRaise val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSignalRaise\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: SignalRaise val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSignalRaise\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive SignalRaise"
        },
        {
            "location": "/signals-SignalRaise/#signalraise",
            "text": "[Source]  Raise a signal.  primitive val SignalRaise",
            "title": "SignalRaise"
        },
        {
            "location": "/signals-SignalRaise/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/signals-SignalRaise/#create",
            "text": "[Source]  new val create()\n: SignalRaise val^",
            "title": "create"
        },
        {
            "location": "/signals-SignalRaise/#returns",
            "text": "SignalRaise  val^",
            "title": "Returns"
        },
        {
            "location": "/signals-SignalRaise/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/signals-SignalRaise/#apply",
            "text": "[Source]  fun box apply(\n  sig: U32 val)\n: None val",
            "title": "apply"
        },
        {
            "location": "/signals-SignalRaise/#parameters",
            "text": "sig:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/signals-SignalRaise/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/signals-SignalRaise/#eq",
            "text": "[Source]  fun box eq(\n  that: SignalRaise val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/signals-SignalRaise/#parameters_1",
            "text": "that:  SignalRaise  val",
            "title": "Parameters"
        },
        {
            "location": "/signals-SignalRaise/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/signals-SignalRaise/#ne",
            "text": "[Source]  fun box ne(\n  that: SignalRaise val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/signals-SignalRaise/#parameters_2",
            "text": "that:  SignalRaise  val",
            "title": "Parameters"
        },
        {
            "location": "/signals-SignalRaise/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/signals-SignalHandler/",
            "text": "SignalHandler\n\u00b6\n\n\n[Source]\n\n\nListen for a specific signal.\nIf the wait parameter is true, the program will not terminate until the SignalHandler's dispose method is called, or if the SignalNotify returns false, after handling the signal as this also disposes the SignalHandler and unsubscribes it.\n\n\nactor tag SignalHandler\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a signal handler.\n\n\nnew tag create(\n  notify: SignalNotify iso,\n  sig: U32 val,\n  wait: Bool val = seq)\n: SignalHandler tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: \nSignalNotify\n iso\n\n\nsig: \nU32\n val\n\n\nwait: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSignalHandler\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\nraise\n\u00b6\n\n\n[Source]\n\n\nRaise the signal.\n\n\nbe raise()\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nDispose of the signal handler.\n\n\nbe dispose()",
            "title": "actor SignalHandler"
        },
        {
            "location": "/signals-SignalHandler/#signalhandler",
            "text": "[Source]  Listen for a specific signal.\nIf the wait parameter is true, the program will not terminate until the SignalHandler's dispose method is called, or if the SignalNotify returns false, after handling the signal as this also disposes the SignalHandler and unsubscribes it.  actor tag SignalHandler",
            "title": "SignalHandler"
        },
        {
            "location": "/signals-SignalHandler/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/signals-SignalHandler/#create",
            "text": "[Source]  Create a signal handler.  new tag create(\n  notify: SignalNotify iso,\n  sig: U32 val,\n  wait: Bool val = seq)\n: SignalHandler tag^",
            "title": "create"
        },
        {
            "location": "/signals-SignalHandler/#parameters",
            "text": "notify:  SignalNotify  iso  sig:  U32  val  wait:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/signals-SignalHandler/#returns",
            "text": "SignalHandler  tag^",
            "title": "Returns"
        },
        {
            "location": "/signals-SignalHandler/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/signals-SignalHandler/#raise",
            "text": "[Source]  Raise the signal.  be raise()",
            "title": "raise"
        },
        {
            "location": "/signals-SignalHandler/#dispose",
            "text": "[Source]  Dispose of the signal handler.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/signals-Sig/",
            "text": "Sig\n\u00b6\n\n\n[Source]\n\n\nDefine the portable signal numbers. Other signals can be used, but they are\nnot guaranteed to be portable.\n\n\nprimitive val Sig\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Sig val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSig\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nhup\n\u00b6\n\n\n[Source]\n\n\nfun box hup()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nint\n\u00b6\n\n\n[Source]\n\n\nfun box int()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nquit\n\u00b6\n\n\n[Source]\n\n\nfun box quit()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nill\n\u00b6\n\n\n[Source]\n\n\nfun box ill()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ntrap\n\u00b6\n\n\n[Source]\n\n\nfun box trap()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nabrt\n\u00b6\n\n\n[Source]\n\n\nfun box abrt()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nemt\n\u00b6\n\n\n[Source]\n\n\nfun box emt()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nfpe\n\u00b6\n\n\n[Source]\n\n\nfun box fpe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nkill\n\u00b6\n\n\n[Source]\n\n\nfun box kill()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbus\n\u00b6\n\n\n[Source]\n\n\nfun box bus()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsegv\n\u00b6\n\n\n[Source]\n\n\nfun box segv()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsys\n\u00b6\n\n\n[Source]\n\n\nfun box sys()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\npipe\n\u00b6\n\n\n[Source]\n\n\nfun box pipe()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nalrm\n\u00b6\n\n\n[Source]\n\n\nfun box alrm()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nterm\n\u00b6\n\n\n[Source]\n\n\nfun box term()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nurg\n\u00b6\n\n\n[Source]\n\n\nfun box urg()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nstkflt\n\u00b6\n\n\n[Source]\n\n\nfun box stkflt()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nstop\n\u00b6\n\n\n[Source]\n\n\nfun box stop()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ntstp\n\u00b6\n\n\n[Source]\n\n\nfun box tstp()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ncont\n\u00b6\n\n\n[Source]\n\n\nfun box cont()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nchld\n\u00b6\n\n\n[Source]\n\n\nfun box chld()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nttin\n\u00b6\n\n\n[Source]\n\n\nfun box ttin()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nttou\n\u00b6\n\n\n[Source]\n\n\nfun box ttou()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nio\n\u00b6\n\n\n[Source]\n\n\nfun box io()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nxcpu\n\u00b6\n\n\n[Source]\n\n\nfun box xcpu()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nxfsz\n\u00b6\n\n\n[Source]\n\n\nfun box xfsz()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nvtalrm\n\u00b6\n\n\n[Source]\n\n\nfun box vtalrm()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nprof\n\u00b6\n\n\n[Source]\n\n\nfun box prof()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nwinch\n\u00b6\n\n\n[Source]\n\n\nfun box winch()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\ninfo\n\u00b6\n\n\n[Source]\n\n\nfun box info()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\npwr\n\u00b6\n\n\n[Source]\n\n\nfun box pwr()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nusr1\n\u00b6\n\n\n[Source]\n\n\nfun box usr1()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nusr2\n\u00b6\n\n\n[Source]\n\n\nfun box usr2()\n: U32 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val\n\n\n\n\n\n\nrt\n\u00b6\n\n\n[Source]\n\n\nfun box rt(\n  n: U32 val)\n: U32 val ?\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nU32\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Sig val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSig\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Sig val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nSig\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Sig"
        },
        {
            "location": "/signals-Sig/#sig",
            "text": "[Source]  Define the portable signal numbers. Other signals can be used, but they are\nnot guaranteed to be portable.  primitive val Sig",
            "title": "Sig"
        },
        {
            "location": "/signals-Sig/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/signals-Sig/#create",
            "text": "[Source]  new val create()\n: Sig val^",
            "title": "create"
        },
        {
            "location": "/signals-Sig/#returns",
            "text": "Sig  val^",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/signals-Sig/#hup",
            "text": "[Source]  fun box hup()\n: U32 val",
            "title": "hup"
        },
        {
            "location": "/signals-Sig/#returns_1",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#int",
            "text": "[Source]  fun box int()\n: U32 val",
            "title": "int"
        },
        {
            "location": "/signals-Sig/#returns_2",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#quit",
            "text": "[Source]  fun box quit()\n: U32 val",
            "title": "quit"
        },
        {
            "location": "/signals-Sig/#returns_3",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#ill",
            "text": "[Source]  fun box ill()\n: U32 val",
            "title": "ill"
        },
        {
            "location": "/signals-Sig/#returns_4",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#trap",
            "text": "[Source]  fun box trap()\n: U32 val",
            "title": "trap"
        },
        {
            "location": "/signals-Sig/#returns_5",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#abrt",
            "text": "[Source]  fun box abrt()\n: U32 val",
            "title": "abrt"
        },
        {
            "location": "/signals-Sig/#returns_6",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#emt",
            "text": "[Source]  fun box emt()\n: U32 val",
            "title": "emt"
        },
        {
            "location": "/signals-Sig/#returns_7",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#fpe",
            "text": "[Source]  fun box fpe()\n: U32 val",
            "title": "fpe"
        },
        {
            "location": "/signals-Sig/#returns_8",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#kill",
            "text": "[Source]  fun box kill()\n: U32 val",
            "title": "kill"
        },
        {
            "location": "/signals-Sig/#returns_9",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#bus",
            "text": "[Source]  fun box bus()\n: U32 val",
            "title": "bus"
        },
        {
            "location": "/signals-Sig/#returns_10",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#segv",
            "text": "[Source]  fun box segv()\n: U32 val",
            "title": "segv"
        },
        {
            "location": "/signals-Sig/#returns_11",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#sys",
            "text": "[Source]  fun box sys()\n: U32 val",
            "title": "sys"
        },
        {
            "location": "/signals-Sig/#returns_12",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#pipe",
            "text": "[Source]  fun box pipe()\n: U32 val",
            "title": "pipe"
        },
        {
            "location": "/signals-Sig/#returns_13",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#alrm",
            "text": "[Source]  fun box alrm()\n: U32 val",
            "title": "alrm"
        },
        {
            "location": "/signals-Sig/#returns_14",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#term",
            "text": "[Source]  fun box term()\n: U32 val",
            "title": "term"
        },
        {
            "location": "/signals-Sig/#returns_15",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#urg",
            "text": "[Source]  fun box urg()\n: U32 val",
            "title": "urg"
        },
        {
            "location": "/signals-Sig/#returns_16",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#stkflt",
            "text": "[Source]  fun box stkflt()\n: U32 val",
            "title": "stkflt"
        },
        {
            "location": "/signals-Sig/#returns_17",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#stop",
            "text": "[Source]  fun box stop()\n: U32 val",
            "title": "stop"
        },
        {
            "location": "/signals-Sig/#returns_18",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#tstp",
            "text": "[Source]  fun box tstp()\n: U32 val",
            "title": "tstp"
        },
        {
            "location": "/signals-Sig/#returns_19",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#cont",
            "text": "[Source]  fun box cont()\n: U32 val",
            "title": "cont"
        },
        {
            "location": "/signals-Sig/#returns_20",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#chld",
            "text": "[Source]  fun box chld()\n: U32 val",
            "title": "chld"
        },
        {
            "location": "/signals-Sig/#returns_21",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#ttin",
            "text": "[Source]  fun box ttin()\n: U32 val",
            "title": "ttin"
        },
        {
            "location": "/signals-Sig/#returns_22",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#ttou",
            "text": "[Source]  fun box ttou()\n: U32 val",
            "title": "ttou"
        },
        {
            "location": "/signals-Sig/#returns_23",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#io",
            "text": "[Source]  fun box io()\n: U32 val",
            "title": "io"
        },
        {
            "location": "/signals-Sig/#returns_24",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#xcpu",
            "text": "[Source]  fun box xcpu()\n: U32 val",
            "title": "xcpu"
        },
        {
            "location": "/signals-Sig/#returns_25",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#xfsz",
            "text": "[Source]  fun box xfsz()\n: U32 val",
            "title": "xfsz"
        },
        {
            "location": "/signals-Sig/#returns_26",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#vtalrm",
            "text": "[Source]  fun box vtalrm()\n: U32 val",
            "title": "vtalrm"
        },
        {
            "location": "/signals-Sig/#returns_27",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#prof",
            "text": "[Source]  fun box prof()\n: U32 val",
            "title": "prof"
        },
        {
            "location": "/signals-Sig/#returns_28",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#winch",
            "text": "[Source]  fun box winch()\n: U32 val",
            "title": "winch"
        },
        {
            "location": "/signals-Sig/#returns_29",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#info",
            "text": "[Source]  fun box info()\n: U32 val",
            "title": "info"
        },
        {
            "location": "/signals-Sig/#returns_30",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#pwr",
            "text": "[Source]  fun box pwr()\n: U32 val",
            "title": "pwr"
        },
        {
            "location": "/signals-Sig/#returns_31",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#usr1",
            "text": "[Source]  fun box usr1()\n: U32 val",
            "title": "usr1"
        },
        {
            "location": "/signals-Sig/#returns_32",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#usr2",
            "text": "[Source]  fun box usr2()\n: U32 val",
            "title": "usr2"
        },
        {
            "location": "/signals-Sig/#returns_33",
            "text": "U32  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#rt",
            "text": "[Source]  fun box rt(\n  n: U32 val)\n: U32 val ?",
            "title": "rt"
        },
        {
            "location": "/signals-Sig/#parameters",
            "text": "n:  U32  val",
            "title": "Parameters"
        },
        {
            "location": "/signals-Sig/#returns_34",
            "text": "U32  val ?",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#eq",
            "text": "[Source]  fun box eq(\n  that: Sig val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/signals-Sig/#parameters_1",
            "text": "that:  Sig  val",
            "title": "Parameters"
        },
        {
            "location": "/signals-Sig/#returns_35",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/signals-Sig/#ne",
            "text": "[Source]  fun box ne(\n  that: Sig val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/signals-Sig/#parameters_2",
            "text": "that:  Sig  val",
            "title": "Parameters"
        },
        {
            "location": "/signals-Sig/#returns_36",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/strings--index/",
            "text": "No package doc string provided for strings.\n\n\nPublic Types\n\u00b6\n\n\n\n\nprimitive CommonPrefix",
            "title": "Package"
        },
        {
            "location": "/strings--index/#public-types",
            "text": "primitive CommonPrefix",
            "title": "Public Types"
        },
        {
            "location": "/strings-CommonPrefix/",
            "text": "CommonPrefix\n\u00b6\n\n\n[Source]\n\n\nCreates a string that is the common prefix of the supplied strings, possibly\nempty.\n\n\nprimitive val CommonPrefix\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: CommonPrefix val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nCommonPrefix\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun box apply(\n  data: ReadSeq[Stringable box] box)\n: String iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nReadSeq\n[\nStringable\n box] box\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: CommonPrefix val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nCommonPrefix\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: CommonPrefix val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nCommonPrefix\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive CommonPrefix"
        },
        {
            "location": "/strings-CommonPrefix/#commonprefix",
            "text": "[Source]  Creates a string that is the common prefix of the supplied strings, possibly\nempty.  primitive val CommonPrefix",
            "title": "CommonPrefix"
        },
        {
            "location": "/strings-CommonPrefix/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/strings-CommonPrefix/#create",
            "text": "[Source]  new val create()\n: CommonPrefix val^",
            "title": "create"
        },
        {
            "location": "/strings-CommonPrefix/#returns",
            "text": "CommonPrefix  val^",
            "title": "Returns"
        },
        {
            "location": "/strings-CommonPrefix/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/strings-CommonPrefix/#apply",
            "text": "[Source]  fun box apply(\n  data: ReadSeq[Stringable box] box)\n: String iso^",
            "title": "apply"
        },
        {
            "location": "/strings-CommonPrefix/#parameters",
            "text": "data:  ReadSeq [ Stringable  box] box",
            "title": "Parameters"
        },
        {
            "location": "/strings-CommonPrefix/#returns_1",
            "text": "String  iso^",
            "title": "Returns"
        },
        {
            "location": "/strings-CommonPrefix/#eq",
            "text": "[Source]  fun box eq(\n  that: CommonPrefix val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/strings-CommonPrefix/#parameters_1",
            "text": "that:  CommonPrefix  val",
            "title": "Parameters"
        },
        {
            "location": "/strings-CommonPrefix/#returns_2",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/strings-CommonPrefix/#ne",
            "text": "[Source]  fun box ne(\n  that: CommonPrefix val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/strings-CommonPrefix/#parameters_2",
            "text": "that:  CommonPrefix  val",
            "title": "Parameters"
        },
        {
            "location": "/strings-CommonPrefix/#returns_3",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/term--index/",
            "text": "No package doc string provided for term.\n\n\nPublic Types\n\u00b6\n\n\n\n\ninterface ReadlineNotify\n\n\nclass Readline\n\n\nactor ANSITerm\n\n\ninterface ANSINotify\n\n\nprimitive ANSI",
            "title": "Package"
        },
        {
            "location": "/term--index/#public-types",
            "text": "interface ReadlineNotify  class Readline  actor ANSITerm  interface ANSINotify  primitive ANSI",
            "title": "Public Types"
        },
        {
            "location": "/term-ReadlineNotify/",
            "text": "ReadlineNotify\n\u00b6\n\n\n[Source]\n\n\nNotifier for readline.\n\n\ninterface ref ReadlineNotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReceives finished lines. The next prompt is set by fulfilling the promise.\nIf the promise is rejected, readline will stop handling input.\n\n\nfun ref apply(\n  line: String val,\n  prompt: Promise[String val] tag)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nline: \nString\n val\n\n\nprompt: \nPromise\n[\nString\n val] tag\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntab\n\u00b6\n\n\n[Source]\n\n\nReturn tab completion possibilities.\n\n\nfun ref tab(\n  line: String val)\n: Seq[String val] box\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nline: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nSeq\n[\nString\n val] box",
            "title": "interface ReadlineNotify"
        },
        {
            "location": "/term-ReadlineNotify/#readlinenotify",
            "text": "[Source]  Notifier for readline.  interface ref ReadlineNotify",
            "title": "ReadlineNotify"
        },
        {
            "location": "/term-ReadlineNotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/term-ReadlineNotify/#apply",
            "text": "[Source]  Receives finished lines. The next prompt is set by fulfilling the promise.\nIf the promise is rejected, readline will stop handling input.  fun ref apply(\n  line: String val,\n  prompt: Promise[String val] tag)\n: None val",
            "title": "apply"
        },
        {
            "location": "/term-ReadlineNotify/#parameters",
            "text": "line:  String  val  prompt:  Promise [ String  val] tag",
            "title": "Parameters"
        },
        {
            "location": "/term-ReadlineNotify/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ReadlineNotify/#tab",
            "text": "[Source]  Return tab completion possibilities.  fun ref tab(\n  line: String val)\n: Seq[String val] box",
            "title": "tab"
        },
        {
            "location": "/term-ReadlineNotify/#parameters_1",
            "text": "line:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ReadlineNotify/#returns_1",
            "text": "Seq [ String  val] box",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/",
            "text": "Readline\n\u00b6\n\n\n[Source]\n\n\nLine editing, history, and tab completion.\n\n\nclass ref Readline is\n  ANSINotify ref\n\n\n\n\nImplements\n\u00b6\n\n\n\n\nANSINotify\n ref\n\n\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a readline handler to be passed to stdin. It begins blocked. Set an\ninitial prompt on the ANSITerm to begin processing.\n\n\nnew iso create(\n  notify: ReadlineNotify iso,\n  out: OutStream tag,\n  path: (FilePath val | None val) = seq,\n  maxlen: USize val = seq)\n: Readline iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: \nReadlineNotify\n iso\n\n\nout: \nOutStream\n tag\n\n\npath: (\nFilePath\n val | \nNone\n val) = seq\n\n\nmaxlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nReadline\n iso^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReceives input.\n\n\nfun ref apply(\n  term: ANSITerm ref,\n  input: U8 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nterm: \nANSITerm\n ref\n\n\ninput: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nprompt\n\u00b6\n\n\n[Source]\n\n\nSet a new prompt, unblock, and handle the pending queue.\n\n\nfun ref prompt(\n  term: ANSITerm ref,\n  value: String val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nterm: \nANSITerm\n ref\n\n\nvalue: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\u00b6\n\n\n[Source]\n\n\nNo more input is available.\n\n\nfun ref closed()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nup\n\u00b6\n\n\n[Source]\n\n\nPrevious line.\n\n\nfun ref up(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndown\n\u00b6\n\n\n[Source]\n\n\nNext line.\n\n\nfun ref down(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nleft\n\u00b6\n\n\n[Source]\n\n\nMove left.\n\n\nfun ref left(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nright\n\u00b6\n\n\n[Source]\n\n\nMove right.\n\n\nfun ref right(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhome\n\u00b6\n\n\n[Source]\n\n\nBeginning of the line.\n\n\nfun ref home(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nend_key\n\u00b6\n\n\n[Source]\n\n\nEnd of the line.\n\n\nfun ref end_key(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndelete\n\u00b6\n\n\n[Source]\n\n\nForward delete.\n\n\nfun ref delete(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert\n\u00b6\n\n\nfun ref insert(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npage_up\n\u00b6\n\n\nfun ref page_up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npage_down\n\u00b6\n\n\nfun ref page_down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfn_key\n\u00b6\n\n\nfun ref fn_key(\n  i: U8 val,\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nU8\n val\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\u00b6\n\n\nfun ref size(\n  rows: U16 val,\n  cols: U16 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nrows: \nU16\n val\n\n\ncols: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "class Readline"
        },
        {
            "location": "/term-Readline/#readline",
            "text": "[Source]  Line editing, history, and tab completion.  class ref Readline is\n  ANSINotify ref",
            "title": "Readline"
        },
        {
            "location": "/term-Readline/#implements",
            "text": "ANSINotify  ref",
            "title": "Implements"
        },
        {
            "location": "/term-Readline/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/term-Readline/#create",
            "text": "[Source]  Create a readline handler to be passed to stdin. It begins blocked. Set an\ninitial prompt on the ANSITerm to begin processing.  new iso create(\n  notify: ReadlineNotify iso,\n  out: OutStream tag,\n  path: (FilePath val | None val) = seq,\n  maxlen: USize val = seq)\n: Readline iso^",
            "title": "create"
        },
        {
            "location": "/term-Readline/#parameters",
            "text": "notify:  ReadlineNotify  iso  out:  OutStream  tag  path: ( FilePath  val |  None  val) = seq  maxlen:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns",
            "text": "Readline  iso^",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/term-Readline/#apply",
            "text": "[Source]  Receives input.  fun ref apply(\n  term: ANSITerm ref,\n  input: U8 val)\n: None val",
            "title": "apply"
        },
        {
            "location": "/term-Readline/#parameters_1",
            "text": "term:  ANSITerm  ref  input:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#prompt",
            "text": "[Source]  Set a new prompt, unblock, and handle the pending queue.  fun ref prompt(\n  term: ANSITerm ref,\n  value: String val)\n: None val",
            "title": "prompt"
        },
        {
            "location": "/term-Readline/#parameters_2",
            "text": "term:  ANSITerm  ref  value:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#closed",
            "text": "[Source]  No more input is available.  fun ref closed()\n: None val",
            "title": "closed"
        },
        {
            "location": "/term-Readline/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#up",
            "text": "[Source]  Previous line.  fun ref up(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val",
            "title": "up"
        },
        {
            "location": "/term-Readline/#parameters_3",
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#down",
            "text": "[Source]  Next line.  fun ref down(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val",
            "title": "down"
        },
        {
            "location": "/term-Readline/#parameters_4",
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#left",
            "text": "[Source]  Move left.  fun ref left(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val",
            "title": "left"
        },
        {
            "location": "/term-Readline/#parameters_5",
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#right",
            "text": "[Source]  Move right.  fun ref right(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val",
            "title": "right"
        },
        {
            "location": "/term-Readline/#parameters_6",
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#home",
            "text": "[Source]  Beginning of the line.  fun ref home(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val",
            "title": "home"
        },
        {
            "location": "/term-Readline/#parameters_7",
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#end_key",
            "text": "[Source]  End of the line.  fun ref end_key(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val",
            "title": "end_key"
        },
        {
            "location": "/term-Readline/#parameters_8",
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#delete",
            "text": "[Source]  Forward delete.  fun ref delete(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val",
            "title": "delete"
        },
        {
            "location": "/term-Readline/#parameters_9",
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#insert",
            "text": "fun ref insert(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "insert"
        },
        {
            "location": "/term-Readline/#parameters_10",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#page_up",
            "text": "fun ref page_up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "page_up"
        },
        {
            "location": "/term-Readline/#parameters_11",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#page_down",
            "text": "fun ref page_down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "page_down"
        },
        {
            "location": "/term-Readline/#parameters_12",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#fn_key",
            "text": "fun ref fn_key(\n  i: U8 val,\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "fn_key"
        },
        {
            "location": "/term-Readline/#parameters_13",
            "text": "i:  U8  val  ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_14",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-Readline/#size",
            "text": "fun ref size(\n  rows: U16 val,\n  cols: U16 val)\n: None val",
            "title": "size"
        },
        {
            "location": "/term-Readline/#parameters_14",
            "text": "rows:  U16  val  cols:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/term-Readline/#returns_15",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSITerm/",
            "text": "ANSITerm\n\u00b6\n\n\n[Source]\n\n\nHandles ANSI escape codes from stdin.\n\n\nactor tag ANSITerm\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a new ANSI term.\n\n\nnew tag create(\n  notify: ANSINotify iso,\n  source: DisposableActor tag,\n  timers: Timers tag = seq)\n: ANSITerm tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: \nANSINotify\n iso\n\n\nsource: \nDisposableActor\n tag\n\n\ntimers: \nTimers\n tag = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nANSITerm\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nReceives input from stdin.\n\n\nbe apply(\n  data: Array[U8 val] iso)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\n\n\nprompt\n\u00b6\n\n\n[Source]\n\n\nPass a prompt along to the notifier.\n\n\nbe prompt(\n  value: String val)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nvalue: \nString\n val\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nbe size()\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nStop accepting input, inform the notifier we have closed, and dispose of\nour source.\n\n\nbe dispose()",
            "title": "actor ANSITerm"
        },
        {
            "location": "/term-ANSITerm/#ansiterm",
            "text": "[Source]  Handles ANSI escape codes from stdin.  actor tag ANSITerm",
            "title": "ANSITerm"
        },
        {
            "location": "/term-ANSITerm/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/term-ANSITerm/#create",
            "text": "[Source]  Create a new ANSI term.  new tag create(\n  notify: ANSINotify iso,\n  source: DisposableActor tag,\n  timers: Timers tag = seq)\n: ANSITerm tag^",
            "title": "create"
        },
        {
            "location": "/term-ANSITerm/#parameters",
            "text": "notify:  ANSINotify  iso  source:  DisposableActor  tag  timers:  Timers  tag = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSITerm/#returns",
            "text": "ANSITerm  tag^",
            "title": "Returns"
        },
        {
            "location": "/term-ANSITerm/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/term-ANSITerm/#apply",
            "text": "[Source]  Receives input from stdin.  be apply(\n  data: Array[U8 val] iso)",
            "title": "apply"
        },
        {
            "location": "/term-ANSITerm/#parameters_1",
            "text": "data:  Array [ U8  val] iso",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSITerm/#prompt",
            "text": "[Source]  Pass a prompt along to the notifier.  be prompt(\n  value: String val)",
            "title": "prompt"
        },
        {
            "location": "/term-ANSITerm/#parameters_2",
            "text": "value:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSITerm/#size",
            "text": "[Source]  be size()",
            "title": "size"
        },
        {
            "location": "/term-ANSITerm/#dispose",
            "text": "[Source]  Stop accepting input, inform the notifier we have closed, and dispose of\nour source.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/term-ANSINotify/",
            "text": "ANSINotify\n\u00b6\n\n\n[Source]\n\n\nReceive input from an ANSITerm.\n\n\ninterface ref ANSINotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nfun ref apply(\n  term: ANSITerm ref,\n  input: U8 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nterm: \nANSITerm\n ref\n\n\ninput: \nU8\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nup\n\u00b6\n\n\n[Source]\n\n\nfun ref up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndown\n\u00b6\n\n\n[Source]\n\n\nfun ref down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nleft\n\u00b6\n\n\n[Source]\n\n\nfun ref left(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nright\n\u00b6\n\n\n[Source]\n\n\nfun ref right(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndelete\n\u00b6\n\n\n[Source]\n\n\nfun ref delete(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert\n\u00b6\n\n\n[Source]\n\n\nfun ref insert(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhome\n\u00b6\n\n\n[Source]\n\n\nfun ref home(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nend_key\n\u00b6\n\n\n[Source]\n\n\nfun ref end_key(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npage_up\n\u00b6\n\n\n[Source]\n\n\nfun ref page_up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\npage_down\n\u00b6\n\n\n[Source]\n\n\nfun ref page_down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfn_key\n\u00b6\n\n\n[Source]\n\n\nfun ref fn_key(\n  i: U8 val,\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ni: \nU8\n val\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nprompt\n\u00b6\n\n\n[Source]\n\n\nfun ref prompt(\n  term: ANSITerm ref,\n  value: String val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nterm: \nANSITerm\n ref\n\n\nvalue: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\u00b6\n\n\n[Source]\n\n\nfun ref size(\n  rows: U16 val,\n  cols: U16 val)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nrows: \nU16\n val\n\n\ncols: \nU16\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\u00b6\n\n\n[Source]\n\n\nfun ref closed()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface ANSINotify"
        },
        {
            "location": "/term-ANSINotify/#ansinotify",
            "text": "[Source]  Receive input from an ANSITerm.  interface ref ANSINotify",
            "title": "ANSINotify"
        },
        {
            "location": "/term-ANSINotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/term-ANSINotify/#apply",
            "text": "[Source]  fun ref apply(\n  term: ANSITerm ref,\n  input: U8 val)\n: None val",
            "title": "apply"
        },
        {
            "location": "/term-ANSINotify/#parameters",
            "text": "term:  ANSITerm  ref  input:  U8  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#up",
            "text": "[Source]  fun ref up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "up"
        },
        {
            "location": "/term-ANSINotify/#parameters_1",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#down",
            "text": "[Source]  fun ref down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "down"
        },
        {
            "location": "/term-ANSINotify/#parameters_2",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#left",
            "text": "[Source]  fun ref left(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "left"
        },
        {
            "location": "/term-ANSINotify/#parameters_3",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_3",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#right",
            "text": "[Source]  fun ref right(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "right"
        },
        {
            "location": "/term-ANSINotify/#parameters_4",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_4",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#delete",
            "text": "[Source]  fun ref delete(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "delete"
        },
        {
            "location": "/term-ANSINotify/#parameters_5",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_5",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#insert",
            "text": "[Source]  fun ref insert(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "insert"
        },
        {
            "location": "/term-ANSINotify/#parameters_6",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_6",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#home",
            "text": "[Source]  fun ref home(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "home"
        },
        {
            "location": "/term-ANSINotify/#parameters_7",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_7",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#end_key",
            "text": "[Source]  fun ref end_key(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "end_key"
        },
        {
            "location": "/term-ANSINotify/#parameters_8",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_8",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#page_up",
            "text": "[Source]  fun ref page_up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "page_up"
        },
        {
            "location": "/term-ANSINotify/#parameters_9",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_9",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#page_down",
            "text": "[Source]  fun ref page_down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "page_down"
        },
        {
            "location": "/term-ANSINotify/#parameters_10",
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_10",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#fn_key",
            "text": "[Source]  fun ref fn_key(\n  i: U8 val,\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val",
            "title": "fn_key"
        },
        {
            "location": "/term-ANSINotify/#parameters_11",
            "text": "i:  U8  val  ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_11",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#prompt",
            "text": "[Source]  fun ref prompt(\n  term: ANSITerm ref,\n  value: String val)\n: None val",
            "title": "prompt"
        },
        {
            "location": "/term-ANSINotify/#parameters_12",
            "text": "term:  ANSITerm  ref  value:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_12",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#size",
            "text": "[Source]  fun ref size(\n  rows: U16 val,\n  cols: U16 val)\n: None val",
            "title": "size"
        },
        {
            "location": "/term-ANSINotify/#parameters_13",
            "text": "rows:  U16  val  cols:  U16  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSINotify/#returns_13",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSINotify/#closed",
            "text": "[Source]  fun ref closed()\n: None val",
            "title": "closed"
        },
        {
            "location": "/term-ANSINotify/#returns_14",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/",
            "text": "ANSI\n\u00b6\n\n\n[Source]\n\n\nThese strings can be embedded in text when writing to a StdStream to create\na text-based UI.\n\n\nprimitive val ANSI\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: ANSI val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nANSI\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nup\n\u00b6\n\n\n[Source]\n\n\nMove the cursor up n lines. 0 is the same as 1.\n\n\nfun box up(\n  n: U32 val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nU32\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ndown\n\u00b6\n\n\n[Source]\n\n\nMove the cursor down n lines. 0 is the same as 1.\n\n\nfun box down(\n  n: U32 val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nU32\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nright\n\u00b6\n\n\n[Source]\n\n\nMove the cursor right n columns. 0 is the same as 1.\n\n\nfun box right(\n  n: U32 val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nU32\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nleft\n\u00b6\n\n\n[Source]\n\n\nMove the cursor left n columns. 0 is the same as 1.\n\n\nfun box left(\n  n: U32 val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nn: \nU32\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ncursor\n\u00b6\n\n\n[Source]\n\n\nMove the cursor to line y, column x. 0 is the same as 1. This indexes from\nthe top left corner of the screen.\n\n\nfun box cursor(\n  x: U32 val = seq,\n  y: U32 val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nx: \nU32\n val = seq\n\n\ny: \nU32\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nclear\n\u00b6\n\n\n[Source]\n\n\nClear the screen and move the cursor to the top left corner.\n\n\nfun box clear()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nerase\n\u00b6\n\n\n[Source]\n\n\nErases everything to the left of the cursor on the line the cursor is on.\n\n\nfun box erase()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nreset\n\u00b6\n\n\n[Source]\n\n\nResets all colours and text styles to the default.\n\n\nfun box reset()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbold\n\u00b6\n\n\n[Source]\n\n\nBold text. Does nothing on Windows.\n\n\nfun box bold(\n  state: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nunderline\n\u00b6\n\n\n[Source]\n\n\nUnderlined text. Does nothing on Windows.\n\n\nfun box underline(\n  state: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nblink\n\u00b6\n\n\n[Source]\n\n\nBlinking text. Does nothing on Windows.\n\n\nfun box blink(\n  state: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nreverse\n\u00b6\n\n\n[Source]\n\n\nSwap foreground and background colour.\n\n\nfun box reverse(\n  state: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nstate: \nBool\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nblack\n\u00b6\n\n\n[Source]\n\n\nBlack text.\n\n\nfun box black()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nred\n\u00b6\n\n\n[Source]\n\n\nRed text.\n\n\nfun box red()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ngreen\n\u00b6\n\n\n[Source]\n\n\nGreen text.\n\n\nfun box green()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nyellow\n\u00b6\n\n\n[Source]\n\n\nYellow text.\n\n\nfun box yellow()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nblue\n\u00b6\n\n\n[Source]\n\n\nBlue text.\n\n\nfun box blue()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nmagenta\n\u00b6\n\n\n[Source]\n\n\nMagenta text.\n\n\nfun box magenta()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ncyan\n\u00b6\n\n\n[Source]\n\n\nCyan text.\n\n\nfun box cyan()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ngrey\n\u00b6\n\n\n[Source]\n\n\nGrey text.\n\n\nfun box grey()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nwhite\n\u00b6\n\n\n[Source]\n\n\nWhite text.\n\n\nfun box white()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_red\n\u00b6\n\n\n[Source]\n\n\nBright red text.\n\n\nfun box bright_red()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_green\n\u00b6\n\n\n[Source]\n\n\nBright green text.\n\n\nfun box bright_green()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_yellow\n\u00b6\n\n\n[Source]\n\n\nBright yellow text.\n\n\nfun box bright_yellow()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_blue\n\u00b6\n\n\n[Source]\n\n\nBright blue text.\n\n\nfun box bright_blue()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_magenta\n\u00b6\n\n\n[Source]\n\n\nBright magenta text.\n\n\nfun box bright_magenta()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_cyan\n\u00b6\n\n\n[Source]\n\n\nBright cyan text.\n\n\nfun box bright_cyan()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_grey\n\u00b6\n\n\n[Source]\n\n\nBright grey text.\n\n\nfun box bright_grey()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nblack_bg\n\u00b6\n\n\n[Source]\n\n\nBlack background.\n\n\nfun box black_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nred_bg\n\u00b6\n\n\n[Source]\n\n\nRed background.\n\n\nfun box red_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ngreen_bg\n\u00b6\n\n\n[Source]\n\n\nGreen background.\n\n\nfun box green_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nyellow_bg\n\u00b6\n\n\n[Source]\n\n\nYellow background.\n\n\nfun box yellow_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nblue_bg\n\u00b6\n\n\n[Source]\n\n\nBlue background.\n\n\nfun box blue_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nmagenta_bg\n\u00b6\n\n\n[Source]\n\n\nMagenta background.\n\n\nfun box magenta_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ncyan_bg\n\u00b6\n\n\n[Source]\n\n\nCyan background.\n\n\nfun box cyan_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\ngrey_bg\n\u00b6\n\n\n[Source]\n\n\nGrey background.\n\n\nfun box grey_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nwhite_bg\n\u00b6\n\n\n[Source]\n\n\nWhite background.\n\n\nfun box white_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_red_bg\n\u00b6\n\n\n[Source]\n\n\nBright red background.\n\n\nfun box bright_red_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_green_bg\n\u00b6\n\n\n[Source]\n\n\nBright green background.\n\n\nfun box bright_green_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_yellow_bg\n\u00b6\n\n\n[Source]\n\n\nBright yellow background.\n\n\nfun box bright_yellow_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_blue_bg\n\u00b6\n\n\n[Source]\n\n\nBright blue background.\n\n\nfun box bright_blue_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_magenta_bg\n\u00b6\n\n\n[Source]\n\n\nBright magenta background.\n\n\nfun box bright_magenta_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_cyan_bg\n\u00b6\n\n\n[Source]\n\n\nBright cyan background.\n\n\nfun box bright_cyan_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_grey_bg\n\u00b6\n\n\n[Source]\n\n\nBright grey background.\n\n\nfun box bright_grey_bg()\n: String val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: ANSI val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nANSI\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: ANSI val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nANSI\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive ANSI"
        },
        {
            "location": "/term-ANSI/#ansi",
            "text": "[Source]  These strings can be embedded in text when writing to a StdStream to create\na text-based UI.  primitive val ANSI",
            "title": "ANSI"
        },
        {
            "location": "/term-ANSI/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/term-ANSI/#create",
            "text": "[Source]  new val create()\n: ANSI val^",
            "title": "create"
        },
        {
            "location": "/term-ANSI/#returns",
            "text": "ANSI  val^",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/term-ANSI/#up",
            "text": "[Source]  Move the cursor up n lines. 0 is the same as 1.  fun box up(\n  n: U32 val = seq)\n: String val",
            "title": "up"
        },
        {
            "location": "/term-ANSI/#parameters",
            "text": "n:  U32  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSI/#returns_1",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#down",
            "text": "[Source]  Move the cursor down n lines. 0 is the same as 1.  fun box down(\n  n: U32 val = seq)\n: String val",
            "title": "down"
        },
        {
            "location": "/term-ANSI/#parameters_1",
            "text": "n:  U32  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSI/#returns_2",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#right",
            "text": "[Source]  Move the cursor right n columns. 0 is the same as 1.  fun box right(\n  n: U32 val = seq)\n: String val",
            "title": "right"
        },
        {
            "location": "/term-ANSI/#parameters_2",
            "text": "n:  U32  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSI/#returns_3",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#left",
            "text": "[Source]  Move the cursor left n columns. 0 is the same as 1.  fun box left(\n  n: U32 val = seq)\n: String val",
            "title": "left"
        },
        {
            "location": "/term-ANSI/#parameters_3",
            "text": "n:  U32  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSI/#returns_4",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#cursor",
            "text": "[Source]  Move the cursor to line y, column x. 0 is the same as 1. This indexes from\nthe top left corner of the screen.  fun box cursor(\n  x: U32 val = seq,\n  y: U32 val = seq)\n: String val",
            "title": "cursor"
        },
        {
            "location": "/term-ANSI/#parameters_4",
            "text": "x:  U32  val = seq  y:  U32  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSI/#returns_5",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#clear",
            "text": "[Source]  Clear the screen and move the cursor to the top left corner.  fun box clear()\n: String val",
            "title": "clear"
        },
        {
            "location": "/term-ANSI/#returns_6",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#erase",
            "text": "[Source]  Erases everything to the left of the cursor on the line the cursor is on.  fun box erase()\n: String val",
            "title": "erase"
        },
        {
            "location": "/term-ANSI/#returns_7",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#reset",
            "text": "[Source]  Resets all colours and text styles to the default.  fun box reset()\n: String val",
            "title": "reset"
        },
        {
            "location": "/term-ANSI/#returns_8",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bold",
            "text": "[Source]  Bold text. Does nothing on Windows.  fun box bold(\n  state: Bool val = seq)\n: String val",
            "title": "bold"
        },
        {
            "location": "/term-ANSI/#parameters_5",
            "text": "state:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSI/#returns_9",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#underline",
            "text": "[Source]  Underlined text. Does nothing on Windows.  fun box underline(\n  state: Bool val = seq)\n: String val",
            "title": "underline"
        },
        {
            "location": "/term-ANSI/#parameters_6",
            "text": "state:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSI/#returns_10",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#blink",
            "text": "[Source]  Blinking text. Does nothing on Windows.  fun box blink(\n  state: Bool val = seq)\n: String val",
            "title": "blink"
        },
        {
            "location": "/term-ANSI/#parameters_7",
            "text": "state:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSI/#returns_11",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#reverse",
            "text": "[Source]  Swap foreground and background colour.  fun box reverse(\n  state: Bool val = seq)\n: String val",
            "title": "reverse"
        },
        {
            "location": "/term-ANSI/#parameters_8",
            "text": "state:  Bool  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSI/#returns_12",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#black",
            "text": "[Source]  Black text.  fun box black()\n: String val",
            "title": "black"
        },
        {
            "location": "/term-ANSI/#returns_13",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#red",
            "text": "[Source]  Red text.  fun box red()\n: String val",
            "title": "red"
        },
        {
            "location": "/term-ANSI/#returns_14",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#green",
            "text": "[Source]  Green text.  fun box green()\n: String val",
            "title": "green"
        },
        {
            "location": "/term-ANSI/#returns_15",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#yellow",
            "text": "[Source]  Yellow text.  fun box yellow()\n: String val",
            "title": "yellow"
        },
        {
            "location": "/term-ANSI/#returns_16",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#blue",
            "text": "[Source]  Blue text.  fun box blue()\n: String val",
            "title": "blue"
        },
        {
            "location": "/term-ANSI/#returns_17",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#magenta",
            "text": "[Source]  Magenta text.  fun box magenta()\n: String val",
            "title": "magenta"
        },
        {
            "location": "/term-ANSI/#returns_18",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#cyan",
            "text": "[Source]  Cyan text.  fun box cyan()\n: String val",
            "title": "cyan"
        },
        {
            "location": "/term-ANSI/#returns_19",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#grey",
            "text": "[Source]  Grey text.  fun box grey()\n: String val",
            "title": "grey"
        },
        {
            "location": "/term-ANSI/#returns_20",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#white",
            "text": "[Source]  White text.  fun box white()\n: String val",
            "title": "white"
        },
        {
            "location": "/term-ANSI/#returns_21",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_red",
            "text": "[Source]  Bright red text.  fun box bright_red()\n: String val",
            "title": "bright_red"
        },
        {
            "location": "/term-ANSI/#returns_22",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_green",
            "text": "[Source]  Bright green text.  fun box bright_green()\n: String val",
            "title": "bright_green"
        },
        {
            "location": "/term-ANSI/#returns_23",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_yellow",
            "text": "[Source]  Bright yellow text.  fun box bright_yellow()\n: String val",
            "title": "bright_yellow"
        },
        {
            "location": "/term-ANSI/#returns_24",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_blue",
            "text": "[Source]  Bright blue text.  fun box bright_blue()\n: String val",
            "title": "bright_blue"
        },
        {
            "location": "/term-ANSI/#returns_25",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_magenta",
            "text": "[Source]  Bright magenta text.  fun box bright_magenta()\n: String val",
            "title": "bright_magenta"
        },
        {
            "location": "/term-ANSI/#returns_26",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_cyan",
            "text": "[Source]  Bright cyan text.  fun box bright_cyan()\n: String val",
            "title": "bright_cyan"
        },
        {
            "location": "/term-ANSI/#returns_27",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_grey",
            "text": "[Source]  Bright grey text.  fun box bright_grey()\n: String val",
            "title": "bright_grey"
        },
        {
            "location": "/term-ANSI/#returns_28",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#black_bg",
            "text": "[Source]  Black background.  fun box black_bg()\n: String val",
            "title": "black_bg"
        },
        {
            "location": "/term-ANSI/#returns_29",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#red_bg",
            "text": "[Source]  Red background.  fun box red_bg()\n: String val",
            "title": "red_bg"
        },
        {
            "location": "/term-ANSI/#returns_30",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#green_bg",
            "text": "[Source]  Green background.  fun box green_bg()\n: String val",
            "title": "green_bg"
        },
        {
            "location": "/term-ANSI/#returns_31",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#yellow_bg",
            "text": "[Source]  Yellow background.  fun box yellow_bg()\n: String val",
            "title": "yellow_bg"
        },
        {
            "location": "/term-ANSI/#returns_32",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#blue_bg",
            "text": "[Source]  Blue background.  fun box blue_bg()\n: String val",
            "title": "blue_bg"
        },
        {
            "location": "/term-ANSI/#returns_33",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#magenta_bg",
            "text": "[Source]  Magenta background.  fun box magenta_bg()\n: String val",
            "title": "magenta_bg"
        },
        {
            "location": "/term-ANSI/#returns_34",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#cyan_bg",
            "text": "[Source]  Cyan background.  fun box cyan_bg()\n: String val",
            "title": "cyan_bg"
        },
        {
            "location": "/term-ANSI/#returns_35",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#grey_bg",
            "text": "[Source]  Grey background.  fun box grey_bg()\n: String val",
            "title": "grey_bg"
        },
        {
            "location": "/term-ANSI/#returns_36",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#white_bg",
            "text": "[Source]  White background.  fun box white_bg()\n: String val",
            "title": "white_bg"
        },
        {
            "location": "/term-ANSI/#returns_37",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_red_bg",
            "text": "[Source]  Bright red background.  fun box bright_red_bg()\n: String val",
            "title": "bright_red_bg"
        },
        {
            "location": "/term-ANSI/#returns_38",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_green_bg",
            "text": "[Source]  Bright green background.  fun box bright_green_bg()\n: String val",
            "title": "bright_green_bg"
        },
        {
            "location": "/term-ANSI/#returns_39",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_yellow_bg",
            "text": "[Source]  Bright yellow background.  fun box bright_yellow_bg()\n: String val",
            "title": "bright_yellow_bg"
        },
        {
            "location": "/term-ANSI/#returns_40",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_blue_bg",
            "text": "[Source]  Bright blue background.  fun box bright_blue_bg()\n: String val",
            "title": "bright_blue_bg"
        },
        {
            "location": "/term-ANSI/#returns_41",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_magenta_bg",
            "text": "[Source]  Bright magenta background.  fun box bright_magenta_bg()\n: String val",
            "title": "bright_magenta_bg"
        },
        {
            "location": "/term-ANSI/#returns_42",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_cyan_bg",
            "text": "[Source]  Bright cyan background.  fun box bright_cyan_bg()\n: String val",
            "title": "bright_cyan_bg"
        },
        {
            "location": "/term-ANSI/#returns_43",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#bright_grey_bg",
            "text": "[Source]  Bright grey background.  fun box bright_grey_bg()\n: String val",
            "title": "bright_grey_bg"
        },
        {
            "location": "/term-ANSI/#returns_44",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#eq",
            "text": "[Source]  fun box eq(\n  that: ANSI val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/term-ANSI/#parameters_9",
            "text": "that:  ANSI  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSI/#returns_45",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/term-ANSI/#ne",
            "text": "[Source]  fun box ne(\n  that: ANSI val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/term-ANSI/#parameters_10",
            "text": "that:  ANSI  val",
            "title": "Parameters"
        },
        {
            "location": "/term-ANSI/#returns_46",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/time--index/",
            "text": "Time Package\n\u00b6\n\n\nThe Time Package provides classes and methods for timing operations,\ndealing with dates and times, and scheduling tasks.\n\n\nPublic Types\n\u00b6\n\n\n\n\nactor Timers\n\n\ninterface TimerNotify\n\n\nclass Timer\n\n\nprimitive Time\n\n\nclass PosixDate\n\n\nprimitive Nanos",
            "title": "Package"
        },
        {
            "location": "/time--index/#time-package",
            "text": "The Time Package provides classes and methods for timing operations,\ndealing with dates and times, and scheduling tasks.",
            "title": "Time Package"
        },
        {
            "location": "/time--index/#public-types",
            "text": "actor Timers  interface TimerNotify  class Timer  primitive Time  class PosixDate  primitive Nanos",
            "title": "Public Types"
        },
        {
            "location": "/time-Timers/",
            "text": "Timers\n\u00b6\n\n\n[Source]\n\n\nA hierarchical set of timing wheels.\n\n\nactor tag Timers\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a timer handler with the specified number of slop bits. No slop bits\nmeans trying for nanosecond resolution. 10 slop bits is approximately\nmicrosecond resolution, 20 slop bits is approximately millisecond\nresolution.\n\n\nnew tag create(\n  slop: USize val = seq)\n: Timers tag^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nslop: \nUSize\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTimers\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nSets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.\n\n\nbe apply(\n  timer: Timer iso)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n iso\n\n\n\n\n\n\ncancel\n\u00b6\n\n\n[Source]\n\n\nCancels a timer.\n\n\nbe cancel(\n  timer: Timer tag)\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n tag\n\n\n\n\n\n\ndispose\n\u00b6\n\n\n[Source]\n\n\nDispose of this set of timing wheels.\n\n\nbe dispose()",
            "title": "actor Timers"
        },
        {
            "location": "/time-Timers/#timers",
            "text": "[Source]  A hierarchical set of timing wheels.  actor tag Timers",
            "title": "Timers"
        },
        {
            "location": "/time-Timers/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Timers/#create",
            "text": "[Source]  Create a timer handler with the specified number of slop bits. No slop bits\nmeans trying for nanosecond resolution. 10 slop bits is approximately\nmicrosecond resolution, 20 slop bits is approximately millisecond\nresolution.  new tag create(\n  slop: USize val = seq)\n: Timers tag^",
            "title": "create"
        },
        {
            "location": "/time-Timers/#parameters",
            "text": "slop:  USize  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/time-Timers/#returns",
            "text": "Timers  tag^",
            "title": "Returns"
        },
        {
            "location": "/time-Timers/#public-behaviours",
            "text": "",
            "title": "Public Behaviours"
        },
        {
            "location": "/time-Timers/#apply",
            "text": "[Source]  Sets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.  be apply(\n  timer: Timer iso)",
            "title": "apply"
        },
        {
            "location": "/time-Timers/#parameters_1",
            "text": "timer:  Timer  iso",
            "title": "Parameters"
        },
        {
            "location": "/time-Timers/#cancel",
            "text": "[Source]  Cancels a timer.  be cancel(\n  timer: Timer tag)",
            "title": "cancel"
        },
        {
            "location": "/time-Timers/#parameters_2",
            "text": "timer:  Timer  tag",
            "title": "Parameters"
        },
        {
            "location": "/time-Timers/#dispose",
            "text": "[Source]  Dispose of this set of timing wheels.  be dispose()",
            "title": "dispose"
        },
        {
            "location": "/time-TimerNotify/",
            "text": "TimerNotify\n\u00b6\n\n\n[Source]\n\n\nNotifications for timer.\n\n\ninterface ref TimerNotify\n\n\n\n\nPublic Functions\n\u00b6\n\n\napply\n\u00b6\n\n\n[Source]\n\n\nCalled with the the number of times the timer has fired since this was last\ncalled. Usually, the value of \ncount\n will be 1. If it is not 1, it means\nthat the timer isn't firing on schedule.\n\n\nFor example, if your timer is set to fire every 10 milliseconds, and\n\ncount\n is 2, that means it has been between 20-29 milliseconds since the\nlast time your timer fired. Non 1 values for a timer are rare and indicate\na system under heavy load.\n\n\nReturn true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).\n\n\nfun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n ref\n\n\ncount: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncancel\n\u00b6\n\n\n[Source]\n\n\nCalled if the timer is cancelled. This is also called if the notifier\nreturns false from its \napply\n method.\n\n\nfun ref cancel(\n  timer: Timer ref)\n: None val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\ntimer: \nTimer\n ref\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val",
            "title": "interface TimerNotify"
        },
        {
            "location": "/time-TimerNotify/#timernotify",
            "text": "[Source]  Notifications for timer.  interface ref TimerNotify",
            "title": "TimerNotify"
        },
        {
            "location": "/time-TimerNotify/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/time-TimerNotify/#apply",
            "text": "[Source]  Called with the the number of times the timer has fired since this was last\ncalled. Usually, the value of  count  will be 1. If it is not 1, it means\nthat the timer isn't firing on schedule.  For example, if your timer is set to fire every 10 milliseconds, and count  is 2, that means it has been between 20-29 milliseconds since the\nlast time your timer fired. Non 1 values for a timer are rare and indicate\na system under heavy load.  Return true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).  fun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val",
            "title": "apply"
        },
        {
            "location": "/time-TimerNotify/#parameters",
            "text": "timer:  Timer  ref  count:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-TimerNotify/#returns",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/time-TimerNotify/#cancel",
            "text": "[Source]  Called if the timer is cancelled. This is also called if the notifier\nreturns false from its  apply  method.  fun ref cancel(\n  timer: Timer ref)\n: None val",
            "title": "cancel"
        },
        {
            "location": "/time-TimerNotify/#parameters_1",
            "text": "timer:  Timer  ref",
            "title": "Parameters"
        },
        {
            "location": "/time-TimerNotify/#returns_1",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/time-Timer/",
            "text": "Timer\n\u00b6\n\n\n[Source]\n\n\nThe \nTimer\n class represents a timer that fires after an expiration\ntime, and then fires at an interval. When a \nTimer\n fires, it calls\nthe \napply\n method of the \nTimerNotify\n object that was passed to it\nwhen it was created.\n\n\nThe following example waits 5 seconds and then fires every 2\nseconds, and when it fires the \nTimerNotify\n object prints how many\ntimes it has been called:\n\n\nuse \"time\"\n\nactor Main\n  new create(env: Env) =>\n    let timers = Timers\n    let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n    timers(consume timer)\n\nclass Notify is TimerNotify\n  let _env: Env\n  var _counter: U32 = 0\n  new iso create(env: Env) =>\n    _env = env\n  fun ref apply(timer: Timer, count: U64): Bool =>\n    _env.out.print(_counter.string())\n    _counter = _counter + 1\n    true\n\n\n\n\nclass ref Timer\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.\n\n\nnew iso create(\n  notify: TimerNotify iso,\n  expiration: U64 val,\n  interval: U64 val = seq)\n: Timer iso^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: \nTimerNotify\n iso\n\n\nexpiration: \nU64\n val\n\n\ninterval: \nU64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTimer\n iso^\n\n\n\n\n\n\nabs\n\u00b6\n\n\n[Source]\n\n\nCreates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.\n\n\nnew ref abs(\n  notify: TimerNotify ref,\n  expiration: (I64 val , I64 val),\n  interval: U64 val = seq)\n: Timer ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nnotify: \nTimerNotify\n ref\n\n\nexpiration: (\nI64\n val , \nI64\n val)\n\n\ninterval: \nU64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTimer\n ref^",
            "title": "class Timer"
        },
        {
            "location": "/time-Timer/#timer",
            "text": "[Source]  The  Timer  class represents a timer that fires after an expiration\ntime, and then fires at an interval. When a  Timer  fires, it calls\nthe  apply  method of the  TimerNotify  object that was passed to it\nwhen it was created.  The following example waits 5 seconds and then fires every 2\nseconds, and when it fires the  TimerNotify  object prints how many\ntimes it has been called:  use \"time\"\n\nactor Main\n  new create(env: Env) =>\n    let timers = Timers\n    let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n    timers(consume timer)\n\nclass Notify is TimerNotify\n  let _env: Env\n  var _counter: U32 = 0\n  new iso create(env: Env) =>\n    _env = env\n  fun ref apply(timer: Timer, count: U64): Bool =>\n    _env.out.print(_counter.string())\n    _counter = _counter + 1\n    true  class ref Timer",
            "title": "Timer"
        },
        {
            "location": "/time-Timer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Timer/#create",
            "text": "[Source]  Create a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.  new iso create(\n  notify: TimerNotify iso,\n  expiration: U64 val,\n  interval: U64 val = seq)\n: Timer iso^",
            "title": "create"
        },
        {
            "location": "/time-Timer/#parameters",
            "text": "notify:  TimerNotify  iso  expiration:  U64  val  interval:  U64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/time-Timer/#returns",
            "text": "Timer  iso^",
            "title": "Returns"
        },
        {
            "location": "/time-Timer/#abs",
            "text": "[Source]  Creates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.  new ref abs(\n  notify: TimerNotify ref,\n  expiration: (I64 val , I64 val),\n  interval: U64 val = seq)\n: Timer ref^",
            "title": "abs"
        },
        {
            "location": "/time-Timer/#parameters_1",
            "text": "notify:  TimerNotify  ref  expiration: ( I64  val ,  I64  val)  interval:  U64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/time-Timer/#returns_1",
            "text": "Timer  ref^",
            "title": "Returns"
        },
        {
            "location": "/time-Time/",
            "text": "Time\n\u00b6\n\n\n[Source]\n\n\nA collection of ways to fetch the current time.\n\n\nprimitive val Time\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Time val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nTime\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nnow\n\u00b6\n\n\n[Source]\n\n\nThe wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)\n\n\nfun box now()\n: (I64 val , I64 val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nseconds\n\u00b6\n\n\n[Source]\n\n\nThe wall-clock adjusted system time.\n\n\nfun box seconds()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmillis\n\u00b6\n\n\n[Source]\n\n\nMonotonic unadjusted milliseconds.\n\n\nfun box millis()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmicros\n\u00b6\n\n\n[Source]\n\n\nMonotonic unadjusted microseconds.\n\n\nfun box micros()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nnanos\n\u00b6\n\n\n[Source]\n\n\nMonotonic unadjusted nanoseconds.\n\n\nfun box nanos()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\ncycles\n\u00b6\n\n\n[Source]\n\n\nProcessor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.\n\n\nfun box cycles()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nperf_begin\n\u00b6\n\n\n[Source]\n\n\nGet a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.\n\n\nfun box perf_begin()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nperf_end\n\u00b6\n\n\n[Source]\n\n\nGet a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.\n\n\nfun box perf_end()\n: U64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Time val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTime\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Time val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nTime\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Time"
        },
        {
            "location": "/time-Time/#time",
            "text": "[Source]  A collection of ways to fetch the current time.  primitive val Time",
            "title": "Time"
        },
        {
            "location": "/time-Time/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Time/#create",
            "text": "[Source]  new val create()\n: Time val^",
            "title": "create"
        },
        {
            "location": "/time-Time/#returns",
            "text": "Time  val^",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/time-Time/#now",
            "text": "[Source]  The wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)  fun box now()\n: (I64 val , I64 val)",
            "title": "now"
        },
        {
            "location": "/time-Time/#returns_1",
            "text": "( I64  val ,  I64  val)",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#seconds",
            "text": "[Source]  The wall-clock adjusted system time.  fun box seconds()\n: I64 val",
            "title": "seconds"
        },
        {
            "location": "/time-Time/#returns_2",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#millis",
            "text": "[Source]  Monotonic unadjusted milliseconds.  fun box millis()\n: U64 val",
            "title": "millis"
        },
        {
            "location": "/time-Time/#returns_3",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#micros",
            "text": "[Source]  Monotonic unadjusted microseconds.  fun box micros()\n: U64 val",
            "title": "micros"
        },
        {
            "location": "/time-Time/#returns_4",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#nanos",
            "text": "[Source]  Monotonic unadjusted nanoseconds.  fun box nanos()\n: U64 val",
            "title": "nanos"
        },
        {
            "location": "/time-Time/#returns_5",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#cycles",
            "text": "[Source]  Processor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.  fun box cycles()\n: U64 val",
            "title": "cycles"
        },
        {
            "location": "/time-Time/#returns_6",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#perf_begin",
            "text": "[Source]  Get a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.  fun box perf_begin()\n: U64 val",
            "title": "perf_begin"
        },
        {
            "location": "/time-Time/#returns_7",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#perf_end",
            "text": "[Source]  Get a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.  fun box perf_end()\n: U64 val",
            "title": "perf_end"
        },
        {
            "location": "/time-Time/#returns_8",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#eq",
            "text": "[Source]  fun box eq(\n  that: Time val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/time-Time/#parameters",
            "text": "that:  Time  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Time/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/time-Time/#ne",
            "text": "[Source]  fun box ne(\n  that: Time val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/time-Time/#parameters_1",
            "text": "that:  Time  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Time/#returns_10",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/time-PosixDate/",
            "text": "PosixDate\n\u00b6\n\n\n[Source]\n\n\nRepresents a proleptic Gregorian date and time, without specifying a\ntime zone. The day of month, month, day of week, and day of year are all\nindexed from 1, i.e. January is 1, Monday is 1.\n\n\nclass ref PosixDate\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nCreate a date from a POSIX time. Negative arguments will be changed to zero.\n\n\nnew ref create(\n  seconds: I64 val = seq,\n  nanoseconds: I64 val = seq)\n: PosixDate ref^\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nseconds: \nI64\n val = seq\n\n\nnanoseconds: \nI64\n val = seq\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nPosixDate\n ref^\n\n\n\n\n\n\nPublic fields\n\u00b6\n\n\nvar nsec: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar sec: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar min: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar hour: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar day_of_month: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar month: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar year: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar day_of_week: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nvar day_of_year: \nI32\n val\n\u00b6\n\n\n[Source]\n\n\n\n\nPublic Functions\n\u00b6\n\n\ntime\n\u00b6\n\n\n[Source]\n\n\nReturn a POSIX time. Treats the date as UTC.\n\n\nfun box time()\n: I64 val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nI64\n val\n\n\n\n\n\n\nnormal\n\u00b6\n\n\n[Source]\n\n\nNormalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.\n\n\nfun ref normal()\n: None val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNone\n val\n\n\n\n\n\n\nformat\n\u00b6\n\n\n[Source]\n\n\nFormat the time as for strftime.\n\n\nfun box format(\n  fmt: String val)\n: String val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nfmt: \nString\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nString\n val",
            "title": "class PosixDate"
        },
        {
            "location": "/time-PosixDate/#posixdate",
            "text": "[Source]  Represents a proleptic Gregorian date and time, without specifying a\ntime zone. The day of month, month, day of week, and day of year are all\nindexed from 1, i.e. January is 1, Monday is 1.  class ref PosixDate",
            "title": "PosixDate"
        },
        {
            "location": "/time-PosixDate/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-PosixDate/#create",
            "text": "[Source]  Create a date from a POSIX time. Negative arguments will be changed to zero.  new ref create(\n  seconds: I64 val = seq,\n  nanoseconds: I64 val = seq)\n: PosixDate ref^",
            "title": "create"
        },
        {
            "location": "/time-PosixDate/#parameters",
            "text": "seconds:  I64  val = seq  nanoseconds:  I64  val = seq",
            "title": "Parameters"
        },
        {
            "location": "/time-PosixDate/#returns",
            "text": "PosixDate  ref^",
            "title": "Returns"
        },
        {
            "location": "/time-PosixDate/#public-fields",
            "text": "",
            "title": "Public fields"
        },
        {
            "location": "/time-PosixDate/#var-nsec-i32-val",
            "text": "[Source]",
            "title": "var nsec: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-sec-i32-val",
            "text": "[Source]",
            "title": "var sec: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-min-i32-val",
            "text": "[Source]",
            "title": "var min: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-hour-i32-val",
            "text": "[Source]",
            "title": "var hour: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-day_of_month-i32-val",
            "text": "[Source]",
            "title": "var day_of_month: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-month-i32-val",
            "text": "[Source]",
            "title": "var month: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-year-i32-val",
            "text": "[Source]",
            "title": "var year: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-day_of_week-i32-val",
            "text": "[Source]",
            "title": "var day_of_week: I32 val"
        },
        {
            "location": "/time-PosixDate/#var-day_of_year-i32-val",
            "text": "[Source]",
            "title": "var day_of_year: I32 val"
        },
        {
            "location": "/time-PosixDate/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/time-PosixDate/#time",
            "text": "[Source]  Return a POSIX time. Treats the date as UTC.  fun box time()\n: I64 val",
            "title": "time"
        },
        {
            "location": "/time-PosixDate/#returns_1",
            "text": "I64  val",
            "title": "Returns"
        },
        {
            "location": "/time-PosixDate/#normal",
            "text": "[Source]  Normalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.  fun ref normal()\n: None val",
            "title": "normal"
        },
        {
            "location": "/time-PosixDate/#returns_2",
            "text": "None  val",
            "title": "Returns"
        },
        {
            "location": "/time-PosixDate/#format",
            "text": "[Source]  Format the time as for strftime.  fun box format(\n  fmt: String val)\n: String val",
            "title": "format"
        },
        {
            "location": "/time-PosixDate/#parameters_1",
            "text": "fmt:  String  val",
            "title": "Parameters"
        },
        {
            "location": "/time-PosixDate/#returns_3",
            "text": "String  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/",
            "text": "Nanos\n\u00b6\n\n\n[Source]\n\n\nCollection of utility functions for converting various durations of time\nto nanoseconds, for passing to other functions in the time package.\n\n\nprimitive val Nanos\n\n\n\n\nConstructors\n\u00b6\n\n\ncreate\n\u00b6\n\n\n[Source]\n\n\nnew val create()\n: Nanos val^\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nNanos\n val^\n\n\n\n\n\n\nPublic Functions\n\u00b6\n\n\nfrom_seconds\n\u00b6\n\n\n[Source]\n\n\nfun box from_seconds(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_millis\n\u00b6\n\n\n[Source]\n\n\nfun box from_millis(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_micros\n\u00b6\n\n\n[Source]\n\n\nfun box from_micros(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_seconds_f\n\u00b6\n\n\n[Source]\n\n\nfun box from_seconds_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_millis_f\n\u00b6\n\n\n[Source]\n\n\nfun box from_millis_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_micros_f\n\u00b6\n\n\n[Source]\n\n\nfun box from_micros_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_wall_clock\n\u00b6\n\n\n[Source]\n\n\nfun box from_wall_clock(\n  wall: (I64 val , I64 val))\n: U64 val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nwall: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\u00b6\n\n\n[Source]\n\n\nfun box eq(\n  that: Nanos val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNanos\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\u00b6\n\n\n[Source]\n\n\nfun box ne(\n  that: Nanos val)\n: Bool val\n\n\n\n\nParameters\n\u00b6\n\n\n\n\nthat: \nNanos\n val\n\n\n\n\nReturns\n\u00b6\n\n\n\n\nBool\n val",
            "title": "primitive Nanos"
        },
        {
            "location": "/time-Nanos/#nanos",
            "text": "[Source]  Collection of utility functions for converting various durations of time\nto nanoseconds, for passing to other functions in the time package.  primitive val Nanos",
            "title": "Nanos"
        },
        {
            "location": "/time-Nanos/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Nanos/#create",
            "text": "[Source]  new val create()\n: Nanos val^",
            "title": "create"
        },
        {
            "location": "/time-Nanos/#returns",
            "text": "Nanos  val^",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#public-functions",
            "text": "",
            "title": "Public Functions"
        },
        {
            "location": "/time-Nanos/#from_seconds",
            "text": "[Source]  fun box from_seconds(\n  t: U64 val)\n: U64 val",
            "title": "from_seconds"
        },
        {
            "location": "/time-Nanos/#parameters",
            "text": "t:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_1",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_millis",
            "text": "[Source]  fun box from_millis(\n  t: U64 val)\n: U64 val",
            "title": "from_millis"
        },
        {
            "location": "/time-Nanos/#parameters_1",
            "text": "t:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_2",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_micros",
            "text": "[Source]  fun box from_micros(\n  t: U64 val)\n: U64 val",
            "title": "from_micros"
        },
        {
            "location": "/time-Nanos/#parameters_2",
            "text": "t:  U64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_3",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_seconds_f",
            "text": "[Source]  fun box from_seconds_f(\n  t: F64 val)\n: U64 val",
            "title": "from_seconds_f"
        },
        {
            "location": "/time-Nanos/#parameters_3",
            "text": "t:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_4",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_millis_f",
            "text": "[Source]  fun box from_millis_f(\n  t: F64 val)\n: U64 val",
            "title": "from_millis_f"
        },
        {
            "location": "/time-Nanos/#parameters_4",
            "text": "t:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_5",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_micros_f",
            "text": "[Source]  fun box from_micros_f(\n  t: F64 val)\n: U64 val",
            "title": "from_micros_f"
        },
        {
            "location": "/time-Nanos/#parameters_5",
            "text": "t:  F64  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_6",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#from_wall_clock",
            "text": "[Source]  fun box from_wall_clock(\n  wall: (I64 val , I64 val))\n: U64 val",
            "title": "from_wall_clock"
        },
        {
            "location": "/time-Nanos/#parameters_6",
            "text": "wall: ( I64  val ,  I64  val)",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_7",
            "text": "U64  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#eq",
            "text": "[Source]  fun box eq(\n  that: Nanos val)\n: Bool val",
            "title": "eq"
        },
        {
            "location": "/time-Nanos/#parameters_7",
            "text": "that:  Nanos  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_8",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/time-Nanos/#ne",
            "text": "[Source]  fun box ne(\n  that: Nanos val)\n: Bool val",
            "title": "ne"
        },
        {
            "location": "/time-Nanos/#parameters_8",
            "text": "that:  Nanos  val",
            "title": "Parameters"
        },
        {
            "location": "/time-Nanos/#returns_9",
            "text": "Bool  val",
            "title": "Returns"
        },
        {
            "location": "/src/http/url_encode/",
            "text": "primitive URLPartUser\nprimitive URLPartPassword\nprimitive URLPartHost\nprimitive URLPartPath\nprimitive URLPartQuery\nprimitive URLPartFragment\n\ntype URLPart is\n  ( URLPartUser\n  | URLPartPassword\n  | URLPartHost\n  | URLPartPath\n  | URLPartQuery\n  | URLPartFragment\n  )\n\n\nprimitive URLEncode\n  \"\"\"\n  Functions for checking, encoding, and decoding parts of URLs.\n  \"\"\"\n\n  fun encode(from: String, part: URLPart, percent_encoded: Bool = true)\n    : String ?\n  =>\n    \"\"\"\n    URL encode and normilase the given string.\n    The percent_encoded parameter indicates how '%' characters should be\n    interpretted.\n    true => given string is already at least partially encoded, so '%'s\n      indicate an encoded character.\n    false => given string is not yet encoded at all, so '%'s are just '%'s.\n    An error is raised on invalid existing encoding or illegal characters that\n    cannot be encoded.\n    \"\"\"\n    if _is_host_ipv6(from, part)? then\n      return from\n    end\n\n    let out = recover String(from.size()) end\n    var i = USize(0)\n\n    while i < from.size() do\n      var c = from(i)?\n      var should_encode = false\n\n      if (c == '%') and percent_encoded then\n        // Treat % as an encoded character.\n        // _unhex() will throw on bad / missing hex digit.\n        c = (_unhex(from(i + 1)?)? << 4) or _unhex(from(i + 2)?)?\n        should_encode = not _normal_decode(c, part)\n        i = i + 3\n      else\n        // Not an encoded character.\n        should_encode = not _is_char_legal(c, part)\n        i = i + 1\n      end\n\n      if should_encode then\n        out.push('%')\n        out.push(_hex(c >> 4)?)\n        out.push(_hex(c and 0xF)?)\n      else\n        out.push(c)\n      end\n    end\n\n    out\n\n  fun decode(from: String): String ? =>\n    \"\"\"\n    URL decode a string. Raise an error on invalid URL encoded.\n    \"\"\"\n    let out = recover String(from.size()) end\n    var i = USize(0)\n\n    while i < from.size() do\n      let c = from(i)?\n\n      if c == '%' then\n        // _unhex() will throw on bad / missing hex digit.\n        let value = (_unhex(from(i + 1)?)? << 4) or _unhex(from(i + 2)?)?\n        out.push(value)\n        i = i + 3\n      elseif c == '+' then\n        out.push(' ')\n        i = i + 1\n      else\n        out.push(c)\n        i = i + 1\n      end\n    end\n\n    out\n\n  fun check_scheme(scheme: String): Bool =>\n    \"\"\"\n    Check that the given string is a valid scheme.\n    \"\"\"\n    try\n      var i = USize(0)\n\n      while i < scheme.size() do\n        let c = scheme(i)?\n\n        if\n          ((c < 'a') or (c > 'z'))\n            and ((c < 'A') or (c > 'Z'))\n            and ((c < '0') or (c > '9'))\n            and (c != '-')\n            and (c != '+')\n            and (c != '.')\n        then\n          return false\n        end\n\n        i = i + 1\n      end\n    end\n\n    true\n\n  fun check(from: String, part: URLPart): Bool =>\n    \"\"\"\n    Check that the given string is valid to be the given URL part without\n    further encoding. Canonical form is not checked for, merely validity.\n    \"\"\"\n    try\n      if _is_host_ipv6(from, part)? then\n        return true\n      end\n    else\n      return false\n    end\n\n    try\n      var i = USize(0)\n\n      while i < from.size() do\n        let c = from(i)?\n\n        if c == '%' then\n          // Character is encoded.\n          // _unhex() will throw on bad / missing hex digit.\n          _unhex(from(i + 1)?)?\n          _unhex(from(i + 2)?)?\n          i = i + 3\n        elseif _is_char_legal(c, part) then\n          i = i + 1\n        else\n          return false\n        end\n      end\n      true\n    else\n      false\n    end\n\n  fun _is_char_legal(value: U8, part: URLPart): Bool =>\n    \"\"\"\n    Determine whether the given character is legal to appear in the specified\n    URL part.\n    \"\"\"\n    // The unreserved and sub-delim characters are always allowed.\n    if ((value >= 'a') and (value <= 'z')) or\n      ((value >= 'A') and (value <= 'Z')) or\n      ((value >= '0') and (value <= '9')) or\n      (value == '-') or (value == '.') or (value == '_') or (value == '~') or\n      (value == '!') or (value == '$') or (value == '&') or (value == '\\'') or\n      (value == '(') or (value == ')') or (value == '*') or (value == '+') or\n      (value == ',') or (value == ';') or (value == '=') then\n      return true\n    end\n\n    // Which general delims are allowed depends on the part.\n    match part\n    | URLPartPassword => (value == ':')\n    | URLPartPath => (value == ':') or (value == '@') or (value == '/')\n    | URLPartQuery =>\n      (value == ':') or (value == '@') or (value == '/') or (value == '?')\n    | URLPartFragment =>\n      (value == ':') or (value == '@') or (value == '/') or (value == '?')\n    else\n      false\n    end\n\n  fun _normal_decode(value: U8, part: URLPart): Bool =>\n    \"\"\"\n    Determine whether the given character should be decoded to give normal\n    form. Some characters, such as sub-delims, are valid to have either in\n    encoded or unencoded form. These should be left as they are when\n    normalising. This will return false for such characters.\n    \"\"\"\n    // The unreserved characters should always be decoded.\n    if\n      ((value >= 'a') and (value <= 'z'))\n        or ((value >= 'A') and (value <= 'Z'))\n        or ((value >= '0') and (value <= '9'))\n        or (value == '-')\n        or (value == '_')\n        or (value == '.')\n        or (value == '~')\n    then\n      return true\n    end\n\n    // Which general delims to decode depends on the part.\n    match part\n    | URLPartPassword => (value == ':')\n    | URLPartPath => (value == ':') or (value == '@') or (value == '/')\n    | URLPartQuery =>\n      (value == ':') or (value == '@') or (value == '/') or (value == '?')\n    | URLPartFragment =>\n      (value == ':') or (value == '@') or (value == '/') or (value == '?')\n    else\n      false\n    end\n\n  fun _is_host_ipv6(host: String, part: URLPart): Bool ? =>\n    \"\"\"\n    Check whether the given string is a valid IPv6 format host.\n    Returns:\n      true if string is a valid IPv6 format host.\n      false if string is not an IPv6 foramt host at all.\n      Raises an error if string is an invalid IPv6 format host.\n    \"\"\"\n    try\n      if (part isnt URLPartHost) or (host.size() == 0) or (host(0)? != '[') then\n        return false\n      end\n    end\n\n    // We are an IPv6 format host, ie a host starting with a '['.\n    var i = USize(1)\n\n    while i < (host.size() - 1) do\n      let c = host(i)?\n\n      // Only hex digits, ':' and '.' and allowed.\n      if\n        ((c < 'a') or (c > 'f'))\n          and ((c < 'A') or (c > 'F'))\n          and ((c < '0') or (c > '9'))\n          and (c != ':')\n          and (c != '.')\n      then\n        error\n      end\n\n      i = i + 1\n    end\n\n    // Must end with a ']'.\n    if host(host.size() - 1)? != ']' then error end\n    true\n\n  fun _hex(value: U8): U8 ? =>\n    \"\"\"\n    Turn 4 bits into a hex value.\n    \"\"\"\n    if value < 10 then\n      value + '0'\n    elseif value < 16 then\n      (value + 'A') - 10\n    else\n      error\n    end\n\n  fun _unhex(value: U8): U8 ? =>\n    \"\"\"\n    Turn a hex value into 4 bits.\n    \"\"\"\n    if (value >= '0') and (value <= '9') then\n      value - '0'\n    elseif (value >= 'A') and (value <= 'F') then\n      (value - 'A') + 10\n    elseif (value >= 'a') and (value <= 'f') then\n      (value - 'a') + 10\n    else\n      error\n    end",
            "title": "url_encode.pony"
        },
        {
            "location": "/src/http/url/",
            "text": "class val URL\n  \"\"\"\n  Holds the components of a URL. These are always stored as valid, URL-encoded\n  values.\n  \"\"\"\n  var scheme: String = \"\"\n    \"\"\"\n    URL scheme.\n\n    If the given URL does not provide a scheme, this will be the empty string.\n\n    See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.1).\n    \"\"\"\n\n  var user: String = \"\"\n    \"\"\"\n    URL user as part of the URLs authority component:\n\n    ```\n    authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]\n    ```\n\n    If the URL does not provide user information, this will be the empty string.\n\n    See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.1).\n    \"\"\"\n\n  var password: String = \"\"\n    \"\"\"\n    URL password as part of the URLs authority component:\n\n    ```\n    authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]\n    ```\n\n    If the URL does not provide a password, this will be the empty string.\n\n    See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.1).\n    \"\"\"\n\n  var host: String = \"\"\n    \"\"\"\n    URL host as part of the URLs authority component:\n\n    ```\n    authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]\n    ```\n\n    If the URL does not provide a host, this will be the empty string.\n\n    See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.2).\n    \"\"\"\n\n  var port: U16 = 0\n    \"\"\"\n    URL port as part of the URLs authority component:\n\n    ```\n    authority = [ user [ \":\" password ] \"@\" ] host [ \":\" port ]\n    ```\n\n    If the URL does not provide a port, this will be the empty string.\n\n    See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.2.3).\n    \"\"\"\n\n  var path: String = \"\"\n    \"\"\"\n    URL path component.\n\n    If the URL does not provide a path component, this will be the empty string.\n\n    See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.3).\n    \"\"\"\n\n  var query: String = \"\"\n    \"\"\"\n    URL query component.\n\n    If the URL does not provide a query component, this will be the empty string.\n\n    See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.4).\n    \"\"\"\n\n  var fragment: String = \"\"\n    \"\"\"\n    Url fragment identifier component.\n\n    If the URL does not provide a fragment identifier component, this will be the empty string.\n\n    See also [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3.5).\n    \"\"\"\n\n  new val create() =>\n    \"\"\"\n    Create an empty URL.\n    \"\"\"\n    None\n\n  new val build(from: String, percent_encoded: Bool = true) ? =>\n    \"\"\"\n    Parse the URL string into its components. If it isn't URL encoded, encode\n    it. If existing URL encoding is invalid, raise an error.\n    \"\"\"\n    _parse(from)?\n\n    if not URLEncode.check_scheme(scheme) then error end\n    user = URLEncode.encode(user, URLPartUser, percent_encoded)?\n    password = URLEncode.encode(password, URLPartPassword, percent_encoded)?\n    host = URLEncode.encode(host, URLPartHost, percent_encoded)?\n    path = URLEncode.encode(path, URLPartPath, percent_encoded)?\n    query = URLEncode.encode(query, URLPartQuery, percent_encoded)?\n    fragment = URLEncode.encode(fragment, URLPartFragment, percent_encoded)?\n\n  new val valid(from: String) ? =>\n    \"\"\"\n    Parse the URL string into its components. If it isn't URL encoded, raise an\n    error.\n    \"\"\"\n    _parse(from)?\n\n    if not is_valid() then\n      error\n    end\n\n  fun is_valid(): Bool =>\n    \"\"\"\n    Return true if all elements are correctly URL encoded.\n    \"\"\"\n    URLEncode.check_scheme(scheme) and\n      URLEncode.check(user, URLPartUser) and\n      URLEncode.check(password, URLPartPassword) and\n      URLEncode.check(host, URLPartHost) and\n      URLEncode.check(path, URLPartPath) and\n      URLEncode.check(query, URLPartQuery) and\n      URLEncode.check(fragment, URLPartFragment)\n\n  fun string(): String iso^ =>\n    \"\"\"\n    Combine the components into a string.\n    \"\"\"\n    let len =\n      scheme.size() + 3 + user.size() + 1 + password.size() + 1 + host.size()\n        + 6 + path.size() + 1 + query.size() + 1 + fragment.size()\n    let s = recover String(len) end\n\n    if scheme.size() > 0 then\n      s.append(scheme)\n      s.append(\":\")\n    end\n\n    if (user.size() > 0) or (host.size() > 0) then\n      s.append(\"//\")\n    end\n\n    if user.size() > 0 then\n      s.append(user)\n\n      if password.size() > 0 then\n        s.append(\":\")\n        s.append(password)\n      end\n\n      s.append(\"@\")\n    end\n\n    if host.size() > 0 then\n      s.append(host)\n\n      // Do not output port if it's the scheme default.\n      if port != default_port() then\n        s.append(\":\")\n        s.append(port.string())\n      end\n    end\n\n    s.append(path)\n\n    if query.size() > 0 then\n      s.append(\"?\")\n      s.append(query)\n    end\n\n    if fragment.size() > 0 then\n      s.append(\"#\")\n      s.append(fragment)\n    end\n\n    consume s\n\n  fun val join(that: URL): URL =>\n    \"\"\"\n    Using this as a base URL, concatenate with another, possibly relative, URL\n    in the same way a browser does for a link.\n    \"\"\"\n    // TODO:\n    this\n\n  fun default_port(): U16 =>\n    \"\"\"\n    Report the default port for our scheme.\n    Returns 0 for unrecognised schemes.\n    \"\"\"\n    match scheme\n    | \"http\" => 80\n    | \"https\" => 443\n    else 0\n    end\n\n  fun ref _parse(from: String) ? =>\n    \"\"\"\n    Parse the given string as a URL.\n    Raises an error on invalid port number.\n    \"\"\"\n    (var offset, scheme) = _parse_scheme(from)\n    (offset, let authority) = _parse_part(from, \"//\", \"/?#\", offset)\n    (offset, path) = _parse_part(from, \"\", \"?#\", offset)\n    (offset, query) = _parse_part(from, \"?\", \"#\", offset)\n    (offset, fragment) = _parse_part(from, \"#\", \"\", offset)\n\n    if path.size() == 0 then\n      // An empty path is a root path.\n      path = \"/\"\n    end\n\n    (var userinfo, var hostport) = _split(authority, '@')\n\n    if hostport.size() == 0 then\n      // No '@' found, hostport is whole of authority.\n      hostport = userinfo = \"\"\n    end\n\n    (user, password) = _split(userinfo, ':')\n    (host, var port_str) = _parse_hostport(hostport)\n\n    port =\n      if port_str.size() > 0 then\n        port_str.u16()?\n      else\n        default_port()\n      end\n\n  fun _parse_scheme(from: String): (/*offset*/ISize, /*scheme*/String) =>\n    \"\"\"\n    Find the scheme, if any, at the start of the given string.\n    The offset of the part following the scheme is returned.\n    \"\"\"\n    // We have a scheme only if we have a ':' before any of \"/?#\".\n    try\n      var i = USize(0)\n\n      while i < from.size() do\n        let c = from(i)?\n\n        if c == ':' then\n          // Scheme found.\n          return ((i + 1).isize(), from.substring(0, i.isize()))\n        end\n\n        if (c == '/') or (c == '?') or (c == '#') then\n          // No scheme.\n          return (0, \"\")\n        end\n\n        i = i + 1\n      end\n    end\n\n    // End of string reached without finding any relevant terminators.\n    (0, \"\")\n\n  fun _parse_part(\n    from: String,\n    prefix: String,\n    terminators: String,\n    offset: ISize)\n    : (/*offset*/ISize, /*part*/String)\n  =>\n    \"\"\"\n    Attempt to parse the specified part out of the given string. Only attempt\n    the parse if the given prefix is found first. Pass \"\" if no prefix is\n    needed. The part ends when any one of the given terminator characters is\n    found, or the end of the input is reached. The offset of the terminator is\n    returned, if one is found.\n    \"\"\"\n    if (prefix.size() > 0) and (not from.at(prefix, offset)) then\n      // Prefix not found.\n      return (offset, \"\")\n    end\n\n    let start = offset + prefix.size().isize()\n\n    try\n      var i = start.usize()\n\n      while i < from.size() do\n        let c = from(i)?\n\n        var j = USize(0)\n        while j < terminators.size() do\n          if terminators(j)? == c then\n            // Terminator found.\n            return (i.isize(), from.substring(start, i.isize()))\n          end\n\n          j = j + 1\n        end\n\n        i = i + 1\n      end\n    end\n\n    // No terminator found, take whole string.\n    (from.size().isize(), from.substring(start))\n\n  fun _split(src: String, separator: U8): (String, String) =>\n    \"\"\"\n    Split the given string in 2 around the first instance of the specified\n    separator. If the string does not contain the separator then the first\n    resulting string is the whole src and the second is empty.\n    \"\"\"\n    try\n      var i = USize(0)\n\n      while i < src.size() do\n        if src(i)? == separator then\n          // Separator found.\n          return (src.substring(0, i.isize()), src.substring((i + 1).isize()))\n        end\n\n        i = i + 1\n      end\n    end\n\n    // Separator not found.\n    (src, \"\")\n\n  fun _parse_hostport(hostport: String): (/*host*/String, /*port*/String) =>\n    \"\"\"\n    Split the given \"host and port\" string into the host and port parts.\n    \"\"\"\n    try\n      if (hostport.size() == 0) or (hostport(0)? != '[') then\n        // This is not an IPv6 format host, just split at the first ':'.\n        return _split(hostport, ':')\n      end\n\n      // This is an IPv6 format host, need to find the ']'\n      var i = USize(0)\n      var terminator = U8(']')\n\n      while i < hostport.size() do\n        if hostport(i)? == terminator then\n          if terminator == ':' then\n            // ':' found, now we can separate the host and port\n            return (hostport.substring(0, i.isize()),\n              hostport.substring((i + 1).isize()))\n          end\n\n          // ']' found, now find ':'\n          terminator = ':'\n        end\n\n        i = i + 1\n      end\n    end\n\n    // ':' not found, we have no port.\n    (hostport, \"\")",
            "title": "url.pony"
        },
        {
            "location": "/src/http/status/",
            "text": "trait val Status\n  fun apply(): U16\n  fun string(): String\n\nprimitive StatusContinue is Status\n  fun apply(): U16 => 100\n  fun string(): String => \"100 Continue\"\nprimitive StatusSwitchingProtocols is Status\n  fun apply(): U16 => 101\n  fun string(): String => \"101 Switching Protocols\"\n\nprimitive StatusOK is Status\n  fun apply(): U16 => 200\n  fun string(): String => \"200 OK\"\nprimitive StatusCreated is Status\n  fun apply(): U16 => 201\n  fun string(): String => \"201 Created\"\nprimitive StatusAccepted is Status\n  fun apply(): U16 => 202\n  fun string(): String => \"202 Accepted\"\nprimitive StatusNonAuthoritativeInfo is Status\n  fun apply(): U16 => 203\n  fun string(): String => \"203 Non-Authoritative Information\"\nprimitive StatusNoContent is Status\n  fun apply(): U16 => 204\n  fun string(): String => \"204 No Content\"\nprimitive StatusResetContent is Status\n  fun apply(): U16 => 205\n  fun string(): String => \"205 Reset Content\"\nprimitive StatusPartialContent is Status\n  fun apply(): U16 => 206\n  fun string(): String => \"206 Partial Content\"\n\nprimitive StatusMultipleChoices is Status\n  fun apply(): U16 => 300\n  fun string(): String => \"300 Multiple Choices\"\nprimitive StatusMovedPermanently is Status\n  fun apply(): U16 => 301\n  fun string(): String => \"301 Moved Permanently\"\nprimitive StatusFound is Status\n  fun apply(): U16 => 302\n  fun string(): String => \"302 Found\"\nprimitive StatusSeeOther is Status\n  fun apply(): U16 => 303\n  fun string(): String => \"303 See Other\"\nprimitive StatusNotModified is Status\n  fun apply(): U16 => 304\n  fun string(): String => \"304 Not Modified\"\nprimitive StatusUseProxy is Status\n  fun apply(): U16 => 305\n  fun string(): String => \"305 Use Proxy\"\nprimitive StatusTemporaryRedirect is Status\n  fun apply(): U16 => 307\n  fun string(): String => \"307 Temporary Redirect\"\n\nprimitive StatusBadRequest is Status\n  fun apply(): U16 => 400\n  fun string(): String => \"400 Bad Request\"\nprimitive StatusUnauthorized is Status\n  fun apply(): U16 => 401\n  fun string(): String => \"401 Unauthorized\"\nprimitive StatusPaymentRequired is Status\n  fun apply(): U16 => 402\n  fun string(): String => \"402 Payment Required\"\nprimitive StatusForbidden is Status\n  fun apply(): U16 => 403\n  fun string(): String => \"403 Forbidden\"\nprimitive StatusNotFound is Status\n  fun apply(): U16 => 404\n  fun string(): String => \"404 Not Found\"\nprimitive StatusMethodNotAllowed is Status\n  fun apply(): U16 => 405\n  fun string(): String => \"405 Method Not Allowed\"\nprimitive StatusNotAcceptable is Status\n  fun apply(): U16 => 406\n  fun string(): String => \"406 Not Acceptable\"\nprimitive StatusProxyAuthRequired is Status\n  fun apply(): U16 => 407\n  fun string(): String => \"407 Proxy Authentication Required\"\nprimitive StatusRequestTimeout is Status\n  fun apply(): U16 => 408\n  fun string(): String => \"408 Request Timeout\"\nprimitive StatusConflict is Status\n  fun apply(): U16 => 409\n  fun string(): String => \"409 Conflict\"\nprimitive StatusGone is Status\n  fun apply(): U16 => 410\n  fun string(): String => \"410 Gone\"\nprimitive StatusLengthRequired is Status\n  fun apply(): U16 => 411\n  fun string(): String => \"411 Length Required\"\nprimitive StatusPreconditionFailed is Status\n  fun apply(): U16 => 412\n  fun string(): String => \"412 Precondition Failed\"\nprimitive StatusRequestEntityTooLarge is Status\n  fun apply(): U16 => 413\n  fun string(): String => \"413 Request Entity Too Large\"\nprimitive StatusRequestURITooLong is Status\n  fun apply(): U16 => 414\n  fun string(): String => \"414 Request URI Too Long\"\nprimitive StatusUnsupportedMediaType is Status\n  fun apply(): U16 => 415\n  fun string(): String => \"415 Unsupported Media Type\"\nprimitive StatusRequestedRangeNotSatisfiable is Status\n  fun apply(): U16 => 416\n  fun string(): String => \"416 Requested Range Not Satisfiable\"\nprimitive StatusExpectationFailed is Status\n  fun apply(): U16 => 417\n  fun string(): String => \"417 Expectation Failed\"\nprimitive StatusTeapot is Status\n  fun apply(): U16 => 418\n  fun string(): String => \"418 I'm a teapot\"\nprimitive StatusPreconditionRequired is Status\n  fun apply(): U16 => 428\n  fun string(): String => \"428 Precondition Required\"\nprimitive StatusTooManyRequests is Status\n  fun apply(): U16 => 429\n  fun string(): String => \"429 Too Many Requests\"\nprimitive StatusRequestHeaderFieldsTooLarge is Status\n  fun apply(): U16 => 431\n  fun string(): String => \"431 Request Header Fields Too Large\"\nprimitive StatusUnavailableForLegalReasons is Status\n  fun apply(): U16 => 451\n  fun string(): String => \"451 Unavailable For Legal Reasons\"\n\nprimitive StatusInternalServerError is Status\n  fun apply(): U16 => 500\n  fun string(): String => \"500 Internal Server Error\"\nprimitive StatusNotImplemented is Status\n  fun apply(): U16 => 501\n  fun string(): String => \"501 Not Implemented\"\nprimitive StatusBadGateway is Status\n  fun apply(): U16 => 502\n  fun string(): String => \"502 Bad Gateway\"\nprimitive StatusServiceUnavailable is Status\n  fun apply(): U16 => 503\n  fun string(): String => \"503 Service Unavailable\"\nprimitive StatusGatewayTimeout is Status\n  fun apply(): U16 => 504\n  fun string(): String => \"504 Gateway Timeout\"\nprimitive StatusHTTPVersionNotSupported is Status\n  fun apply(): U16 => 505\n  fun string(): String => \"505 HTTP Version Not Supported\"\nprimitive StatusNetworkAuthenticationRequired is Status\n  fun apply(): U16 => 511\n  fun string(): String => \"511 Network Authentication Required\"",
            "title": "status.pony"
        },
        {
            "location": "/src/http/server_notify/",
            "text": "interface val Logger\n  \"\"\"\n  Handles logging request/response pairs.\n  \"\"\"\n  fun val apply(\n    ip: String,\n    body_size: USize,\n    request: Payload val,\n    response: Payload val)\n    : Any\n  =>\n    \"\"\"\n    Called after the server has handled a request.\n    \"\"\"\n\ninterface ServerNotify\n  \"\"\"\n  Notifications about the creation and closing of `TCPConnection`s\n  within HTTP servers.\n  \"\"\"\n  fun ref listening(server: HTTPServer ref) =>\n    \"\"\"\n    Called when we are listening.\n    \"\"\"\n    None\n\n  fun ref not_listening(server: HTTPServer ref) =>\n    \"\"\"\n    Called when we fail to listen.\n    \"\"\"\n    None\n\n  fun ref closed(server: HTTPServer ref) =>\n    \"\"\"\n    Called when we stop listening.\n    \"\"\"\n    None",
            "title": "server_notify.pony"
        },
        {
            "location": "/src/http/server/",
            "text": "use \"collections\"\nuse \"net\"\nuse \"net/ssl\"\n\nactor HTTPServer\n  \"\"\"\n  Runs an HTTP server.\n\n  ### Server operation\n\n  Information flow into the Server is as follows:\n\n  1. `Server` listens for incoming TCP connections.\n\n  2. `RequestBuilder` is the notification class for new connections. It creates\n  a `ServerConnection` actor and receives all the raw data from TCP. It uses\n  the `HTTPParser` to assemble complete `Payload` objects which are passed off\n  to the `ServerConnection`.\n\n  3. The `ServerConnection` actor deals with *completely formed* requests\n  that have been parsed by the `HTTPParser`. This is where requests get\n  dispatched to the caller-provided Handler.\n\n  With streaming content, dispatch to the application's back end Handler\n  has to happen *before* all of the body has been received. This has to be\n  carefully choreographed because a `Payload` is an `iso` object and can only\n  belong to one actor at a time, yet the `RequestBuilder` is running within\n  the `TCPConnection` actor while the `RequestHandler` is running under the\n  `ServerConnection` actor. Each incoming bufferful of body data, a\n  `ByteSeq val`, is handed off to `ServerConnection`, to be passed on to the\n  back end Handler.\n\n  1. It turns out that the issues in sending a request and a response are the\n  same, as are the issues in receiving them. Therefore the same notification\n  interface, `HTTPHandler` is used on both ends, and the same sending\n  interface `HTTPSession` is used. This makes the code easier to read as well.\n\n  1. `HTTPHandler.apply()` will be the way the client/server is informed of a\n  new response/request message. All of the headers will be present so that the\n  request can be dispatched for correct processing. Subsequent calls to a new\n  function `HTTPHandler.chunk` will provide the body data, if any. This\n  stream will be terminated by a call to the new function\n  `HTTPHandler.finished`.\n\n  2. Pipelining of requests is to optimize the transmission of requests over\n  slow links (such as over satellites), not to cause simultaneous execution\n  on the server within one session. Multiple received simple requests (`GET`,\n  `HEAD`, and `OPTIONS`) are queued in the server and passed to the back end\n  application one at a time. If a client wants true parallel execution of\n  requests, it should use multiple sessions (which many browsers actually\n  do already).\n\n  Since processing of a streaming response can take a relatively long time,\n  acting on additional requests in the meantime does nothing but use up memory\n  since responses would have to be queued. And if the server is being used to\n  stream media, it is possible that these additional requests will themselves\n  generate large responses.  Instead we will just let the requests queue up\n  until a maximum queue length is reached (a small number) at which point we\n  will back-pressure the inbound TCP stream.\n  \"\"\"\n  let _notify: ServerNotify\n  var _handler_maker: HandlerFactory val\n  var _logger: Logger\n  let _reversedns: (DNSLookupAuth | None)\n  let _sslctx: (SSLContext | None)\n  let _listen: TCPListener\n  var _address: NetAddress\n  var _dirty_routes: Bool = false\n  let _sessions: SetIs[TCPConnection tag] = SetIs[TCPConnection tag]\n\n  new create(auth: TCPListenerAuth, notify: ServerNotify iso,\n    handler: HandlerFactory val, logger: Logger = DiscardLog,\n    host: String = \"\", service: String = \"0\", limit: USize = 0,\n    sslctx: (SSLContext | None) = None,\n    reversedns: (DNSLookupAuth | None) = None)\n  =>\n    \"\"\"\n    Create a server bound to the given host and service. To do this we\n    listen for incoming TCP connections, with a notification handler\n    that will create a server session actor for each one.\n    \"\"\"\n    _notify = consume notify\n    _handler_maker = handler\n    _logger = logger\n    _reversedns = reversedns\n    _sslctx = sslctx\n\n    _listen = TCPListener(auth,\n        _ServerListener(this, sslctx, _handler_maker, _logger, _reversedns),\n        host, service, limit)\n\n    _address = recover NetAddress end\n\n  be register_session(conn: TCPConnection) =>\n    _sessions.set(conn)\n\n  be unregister_session(conn: TCPConnection) =>\n    _sessions.unset(conn)\n\n  be set_handler(handler: HandlerFactory val) =>\n    \"\"\"\n    Replace the request handler.\n    \"\"\"\n    _handler_maker = handler\n    _listen.set_notify(\n      _ServerListener(this, _sslctx, _handler_maker, _logger, _reversedns))\n\n  be set_logger(logger: Logger) =>\n    \"\"\"\n    Replace the logger.\n    \"\"\"\n    _logger = logger\n    _listen.set_notify(\n      _ServerListener(this, _sslctx, _handler_maker, _logger, _reversedns))\n\n  be dispose() =>\n    \"\"\"\n    Shut down the server gracefully. To do this we have to eliminate\n    and source of further inputs. So we stop listening for new incoming\n    TCP connections, and close any that still exist.\n    \"\"\"\n    _listen.dispose()\n    for conn in _sessions.values() do\n      conn.dispose()\n    end\n\n  fun local_address(): NetAddress =>\n    \"\"\"\n    Returns the locally bound address.\n    \"\"\"\n    _address\n\n  be _listening(address: NetAddress) =>\n    \"\"\"\n    Called when we are listening.\n    \"\"\"\n    _address = address\n    _notify.listening(this)\n\n  be _not_listening() =>\n    \"\"\"\n    Called when we fail to listen.\n    \"\"\"\n    _notify.not_listening(this)\n\n  be _closed() =>\n    \"\"\"\n    Called when we stop listening.\n    \"\"\"\n    _notify.closed(this)",
            "title": "server.pony"
        },
        {
            "location": "/src/http/payload/",
            "text": "use \"collections\"\nuse \"net\"\nuse \"format\"\n\nprimitive ChunkedTransfer\nprimitive StreamTransfer\nprimitive OneshotTransfer\n\ntype TransferMode is (ChunkedTransfer | StreamTransfer | OneshotTransfer)\n\nclass trn Payload\n  \"\"\"\n  This class represent a single HTTP message, which can be either a\n  `request` or a `response`.\n\n  ### Transfer Modes\n\n  HTTP provides two ways to encode the transmission of a message 'body',\n  of any size. This package supports both of them:\n\n  2. **StreamTransfer**. This is used for payload bodies where the exact\n    length is known in advance, including most transfers of files. It is\n    selected by calling `Payload.set_length` with an integer bytecount.\n    Appication buffer sizes determine how much data is fed to the TCP\n    connection at once, but the total amount must match this size.\n\n  3. **ChunkedTransfer**. This is used when the payload length can not be\n    known in advance, but can be large. It is selected by calling\n    `Payload.set_length` with a parameter of `None`. On the TCP link this mode\n    can be detected because there is no `Content-Length` header at all, being\n    replaced by the `Transfer-Encoding: chunked` header. In addition, the\n    message body is separated into chunks, each with its own bytecount. As with\n    `StreamTransfer` mode, transmission can be spread out over time with the\n    difference that it is the original data source that determines the chunk\n    size.\n\n    If `Payload.set_length` is never called at all, a variation on\n    `StreamTransfer` called `OneshotTransfer` is used. In this case, all of\n    the message body is placed into the message at once, using\n    `Payload.add_chunk` calls. The size will be determined when the message is\n    submitted for transmission. Care must be taken not to consume too much\n    memory, especially on a server where there can be multiple messages in\n    transit at once.\n\n    The type of transfer being used by an incoming message can be determined\n    from its `transfer_mode` field, which will be one of the\n    [TransferMode](http-TransferMode) types.\n\n  ### Sequence\n\n  For example, to send a message of possibly large size:\n\n  1. Create the message with a call to `Payload.request` or `Payload.response`.\n  2. Set the `session` field of the message.\n  2. Call `Payload.set_length` to indicate the length of the body.\n  3. Add any additional headers that may be required, such as `Content-type`.\n  4. Submit the message for transmission by calling the either the\n  `HTTPSession.apply` method (in servers) or the `HTTPCLient.apply` method\n  in clients.\n  5. Wait for the `send_body` notification.\n  6. Make any number of calls to `Payload.send_chunk`.\n  7. Call `Payload.finish`.\n\n  To send a message of small, reasonable size (say, under 20KB), this\n  simplified method can be used instead:\n\n  1. Create the message with a call to `Payload.request` or `Payload.response`.\n  2. Set the `session` field of the message.\n  3. Add any additional headers that may be required, such as `Content-type`.\n  4. Call `add_chunk` one or more times to add body data.\n  4. Submit the message for transmission by calling the either the\n  [HTTPSession](http-HTTPSession)`.apply` method (in servers) or the\n  [HTTPClient](http-HTTPClient)`.apply` method in clients.\n  \"\"\"\n  var proto: String = \"HTTP/1.1\"\n    \"\"\"The HTTP protocol string\"\"\"\n\n  var status: U16\n    \"\"\"\n    Internal representation of the response [Status](http-Status).\n\n    Will be `0` for HTTP requests.\n    \"\"\"\n\n  var method: String\n    \"\"\"\n    The HTTP Method.\n\n    `GET`, `POST`, `DELETE`, `OPTIONS`, ...\n\n    For HTTP responses this will be the status string,\n    for a `200` status this will be `200 OK`, for `404`, `404 Not Found` etc..\n    \"\"\"\n\n  var url: URL\n    \"\"\"\n    The HTTP request [URL](http-URL).\n    It will be used for the HTTP path and the `Host` header.\n    The `user` and `password` fields are ignored.\n\n    For HTTP responses this will be an empty [URL](http-URL).\n    \"\"\"\n  var _body_length: USize = 0\n  var transfer_mode: TransferMode = OneshotTransfer\n    \"\"\"\n    Determines the transfer mode of this message.\n\n    In case of outgoing requests or responses,\n    use `set_length` to control the transfer mode.\n\n    In case of incoming requests, this field determines\n    how the request is transferred.\n    \"\"\"\n  var session: (HTTPSession | None) = None\n\n  embed _headers: Map[String, String] = _headers.create()\n  embed _body: Array[ByteSeq val] = _body.create()\n  let _response: Bool\n  var username: String = \"\"\n    \"\"\"\n    The username extracted from an `Authentication` header of an HTTP request\n    received via [HTTPServer](http-HTTPServer).\n\n    This is not used and not sent using [HTTPClient](http-HTTPClient),\n    use `update` to set an `Authentication` header instead.\n    \"\"\"\n  var password: String = \"\"\n    \"\"\"\n    The password extracted from an `Authentication` header of an HTTP request\n    received via [HTTPServer](http-HTTPServer).\n\n    This is not used and not sent using [HTTPClient](http-HTTPClient),\n    use `update` to set an `Authentication` header instead.\n    \"\"\"\n\n  new iso request(method': String = \"GET\", url': URL = URL) =>\n    \"\"\"\n    Create an HTTP `request` message.\n    \"\"\"\n    status = 0\n    method = method'\n    url = url'\n    _response = false\n\n  new iso response(status': Status = StatusOK) =>\n    \"\"\"\n    Create an HTTP `response` message.\n    \"\"\"\n    status = status'()\n    method = status'.string()\n    url = URL\n    _response = true\n\n  new iso _empty(response': Bool = true) =>\n    \"\"\"\n    Create an empty HTTP payload.\n    \"\"\"\n    status = 0\n    method = \"\"\n    url = URL\n    _response = response'\n\n  fun apply(key: String): String ? =>\n    \"\"\"\n    Get a header.\n    \"\"\"\n    _headers(key)?\n\n  fun is_safe(): Bool =>\n    \"\"\"\n    A request method is \"safe\" if it does not modify state in the resource.\n    These methods can be guaranteed not to have any body data.\n    Return true for a safe request method, false otherwise.\n    \"\"\"\n    match method\n    | \"GET\"\n    | \"HEAD\"\n    | \"OPTIONS\" =>\n      true\n    else\n      false\n    end\n\n  fun body(): this->Array[ByteSeq] ? =>\n    \"\"\"\n    Get the body in `OneshotTransfer` mode.\n    In the other modes it raises an error.\n    \"\"\"\n    match transfer_mode\n    | OneshotTransfer => _body\n    else error\n    end\n\n  fun ref set_length(bytecount: (USize | None)) =>\n    \"\"\"\n    Set the body length when known in advance. This determines the\n    transfer mode that will be used. A parameter of 'None' will use\n    Chunked Transfer Encoding. A numeric value will use Streamed\n    transfer. Not calling this function at all will\n    use Oneshot transfer.\n    \"\"\"\n    match bytecount\n    | None  =>\n      transfer_mode = ChunkedTransfer\n      _headers(\"Transfer-Encoding\") = \"chunked\"\n    | let n: USize =>\n      try not _headers.contains(\"Content-Length\") then\n        _headers(\"Content-Length\") = n.string()\n      end\n      _body_length = n\n      transfer_mode = StreamTransfer\n    end\n\n  fun ref update(key: String, value: String): Payload ref^ =>\n    \"\"\"\n    Set any header. If we've already received the header, append the value as a\n    comma separated list, as per RFC 2616 section 4.2.\n    \"\"\"\n    match _headers(key) = value\n    | let prev: String =>\n      _headers(key) = prev + \",\" + value\n    end\n    this\n\n  fun headers(): this->Map[String, String] =>\n    \"\"\"\n    Get all the headers.\n    \"\"\"\n    _headers\n\n  fun body_size(): (USize | None) =>\n    \"\"\"\n    Get the total intended size of the body.\n    `ServerConnection` accumulates actual size transferred for logging.\n    \"\"\"\n    match transfer_mode\n    | ChunkedTransfer => None\n    else _body_length\n    end\n\n  fun ref add_chunk(data: ByteSeq val): Payload ref^ =>\n    \"\"\"\n    This is how application code adds data to the body in\n    `OneshotTransfer` mode. For large bodies, call `set_length`\n    and use `send_chunk` instead.\n    \"\"\"\n    _body.push(data)\n    _body_length = _body_length + data.size()\n\n    this\n\n  fun box send_chunk(data: ByteSeq val) =>\n    \"\"\"\n    This is how application code sends body data in `StreamTransfer` and\n    `ChunkedTransfer` modes. For smaller body lengths, `add_chunk` in\n    `Oneshot` mode can be used instead.\n    \"\"\"\n    match session\n    | let s: HTTPSession =>\n      match transfer_mode\n      | ChunkedTransfer =>\n        // Wrap some body data in the Chunked Transfer Encoding format,\n        // which is the length in hex, the data, and a CRLF. It is\n        // important to never send a chunk of length zero, as that is\n        // how the end of the body is signalled.\n        s.write(Format.int[USize](data.size(), FormatHexBare))\n        s.write(\"\\r\\n\")\n        s.write(data)\n        s.write(\"\\r\\n\")\n      | StreamTransfer =>\n        // In stream mode just send the data. Its length should have\n        // already been accounted for by `set_length`.\n        s.write(data)\n      end\n    end\n\n  fun val finish() =>\n    \"\"\"\n    Mark the end of body transmission. This does not do anything,\n    and is unnecessary, in Oneshot mode.\n    \"\"\"\n    match session\n    | let s: HTTPSession =>\n      match transfer_mode\n      | ChunkedTransfer =>\n        s.write(\"0\\r\\n\\r\\n\")\n        s.finish()\n      | StreamTransfer =>\n        s.finish()\n      end\n    end\n\n  fun val respond(response': Payload) =>\n    \"\"\"\n    Start sending a response from the server to the client.\n    \"\"\"\n    try\n      (session as HTTPSession)(consume response')\n    end\n\n  fun val _client_fail() =>\n    \"\"\"\n    Start sending an error response.\n    \"\"\"\n    None\n    /* Not sure if we need this. Nobody calls it. But something like:\n    try\n      (session as HTTPSession)(\n        Payload.response(StatusInternalServerError))\n    end\n    */\n\n  fun val _write(keepalive: Bool = true, conn: TCPConnection tag) =>\n    \"\"\"\n    Writes the payload to an HTTPSession. Requests and Responses differ\n    only in the first line of text - everything after that is the same format.\n    \"\"\"\n    if _response then\n      _write_response(keepalive, conn)\n    else\n      _write_request(keepalive, conn)\n    end\n\n    _write_common(conn)\n\n  fun val _write_request(keepalive: Bool, conn: TCPConnection tag) =>\n    \"\"\"\n    Writes the 'request' parts of an HTTP message.\n    \"\"\"\n    conn.write(method + \" \" + url.path)\n\n    if url.query.size() > 0 then\n      conn.write(\"?\" + url.query)\n      end\n\n    if url.fragment.size() > 0 then\n      conn.write(\"#\" + url.fragment)\n      end\n\n    conn.write(\" \" + proto + \"\\r\\n\")\n\n    if not keepalive then\n      conn.write(\"Connection: close\\r\\n\")\n    end\n\n    conn.write(\"Host: \" + url.host + \":\" + url.port.string() + \"\\r\\n\")\n\n  fun val _write_common(conn: TCPConnection tag) =>\n    \"\"\"\n    Writes the parts of an HTTP message common to both requests and\n    responses.\n    \"\"\"\n    _write_headers(conn)\n\n    // In oneshot mode we send the entire stored body.\n    if transfer_mode is OneshotTransfer then\n      for piece in _body.values() do\n        conn.write(piece)\n      end\n    end\n\n  fun val _write_response(keepalive: Bool, conn: TCPConnection tag) =>\n    \"\"\"\n    Write the response-specific parts of an HTTP message. This is the\n    status line, consisting of the protocol name, the status value,\n    and a string representation of the status (carried in the `method`\n    field). Since writing it out is an actor behavior call, we go to\n    the trouble of packaging it into a single string before sending.\n    \"\"\"\n    let statusline =\n      recover\n        String(proto.size() + status.string().size() + method.size() + 4)\n      end\n\n    statusline\n      .> append(proto)\n      .> append(\" \")\n      .> append(status.string())\n      .> append(\" \")\n      .> append(method)\n      .> append(\"\\r\\n\")\n    conn.write(consume statusline)\n\n    if keepalive then\n      conn.write(\"Connection: keep-alive\\r\\n\")\n    end\n\n  fun _write_headers(conn: TCPConnection tag) =>\n    \"\"\"\n    Write all of the HTTP headers to the comm link.\n    \"\"\"\n    var saw_length: Bool = false\n    for (k, v) in _headers.pairs() do\n      if (k != \"Host\") then\n        if k == \"Content-Length\" then saw_length = true end\n        conn.write(k + \": \" + v + \"\\r\\n\")\n      end\n    end\n\n    if (not saw_length) and (transfer_mode is OneshotTransfer) then\n      conn.write(\"Content-Length: \" + _body_length.string() + \"\\r\\n\")\n    end\n\n    // Blank line before the body.\n    conn.write(\"\\r\\n\")\n\n  fun box has_body(): Bool =>\n    \"\"\"\n    Determines whether a message has a body portion.\n    \"\"\"\n    if _response then\n      // Errors never have bodies.\n      if\n        (status == 204) // no content\n          or (status == 304) // not modified\n          or ((status > 0) and (status < 200))\n          or (status > 400)\n      then\n        false\n      else\n        true\n      end\n    else\n      match transfer_mode\n      | ChunkedTransfer => true\n      else (_body_length > 0)\n      end\n    end",
            "title": "payload.pony"
        },
        {
            "location": "/src/http/mimetypes/",
            "text": "primitive MimeTypes\n  \"\"\"\n  Provide mapping from file names to MIME types.\n  TODO load from /etc/mime.types\n  \"\"\"\n\n  fun apply(name: String): String val^ =>\n    \"\"\"\n    Mapping is based on the file type, following the last period in the name.\n    \"\"\"\n    try\n      // This will fail if no period is found.\n      let dotpos = (name.rfind(\".\", -1, 0)? + 1).usize()\n\n      match name.trim(dotpos).lower()\n      | \"html\" => \"text/html\"\n      | \"jpg\" => \"image/jpeg\"\n      | \"jpeg\" => \"image/jpeg\"\n      | \"png\" => \"image/png\"\n      | \"css\" => \"text/css\"\n      | \"ico\" => \"image/x-icon\"\n      | \"js\" => \"application/javascript\"\n      | \"mp3\" => \"audio/mpeg3\"\n      | \"m3u\" => \"audio/mpegurl\"\n      | \"ogg\" => \"audio/ogg\"\n      | \"doc\" => \"application/msword\"\n      | \"gif\" => \"image/gif\"\n      | \"txt\" => \"text/plain\"\n      | \"wav\" => \"audio/wav\"\n      else\n        \"application/octet-stream\" // None of the above\n      end\n    else\n      \"application/octet-stream\" // No filetype\n    end",
            "title": "mimetypes.pony"
        },
        {
            "location": "/src/http/http_session/",
            "text": "interface tag HTTPSession\n  \"\"\"\n  An HTTP Session is the external API to the communication link\n  between client and server. A session can only transfer one message\n  at a time in each direction. The client and server each have their\n  own ways of implementing this interface, but to application code (either\n  in the client or in the server 'back end') this interface provides a\n  common view of how information is passed *into* the `http` package.\n  \"\"\"\n  be apply(payload: Payload val)\n    \"\"\"\n    Start sending a request or response. The `Payload` must have all its\n    essential fields filled in at this point, because ownership is being\n    transferred to the session actor. This begins an outbound message.\n    \"\"\"\n\n  be finish()\n    \"\"\"\n    Indicate that all *outbound* `add_chunk` calls have been made and\n    submission of the HTTP message is complete.\n    \"\"\"\n\n  be dispose()\n    \"\"\"\n    Close the connection from this end.\n    \"\"\"\n\n  be write(data: ByteSeq val)\n    \"\"\"\n    Write raw byte stream to the outbound TCP connection.\n    \"\"\"\n\n  be _mute()\n    \"\"\"\n    Stop delivering *incoming* data to the handler. This may not\n    be effective instantly.\n    \"\"\"\n\n  be _unmute()\n    \"\"\"\n    Resume delivering incoming data to the handler.\n    \"\"\"\n\n  be cancel(msg: Payload val)\n    \"\"\"\n    Tell the session to stop sending an *outbound* message.\n    \"\"\"\n\n  be _deliver(payload: Payload val)\n    \"\"\"\n    The appropriate Payload Builder will call this from the `TCPConnection`\n    actor to start delivery of a new *inbound* message. If the `Payload`s\n    `transfer_mode` is `OneshotTransfer`, this is the only notification \n    that will happen for the message. Otherwise there will be one or more\n    `_chunk` calls followed by a `_finish` call.\n    \"\"\"\n\n  be _chunk(data: ByteSeq val)\n    \"\"\"\n    Deliver a piece of *inbound* body data to the application `HTTPHandler`\n    This is called by the PayloadBuilder.\n    \"\"\"\n\n  be _finish()\n    \"\"\"\n    Inidcates that the last *inbound* body chunk has been sent to\n    `_chunk`. This is called by the PayloadBuilder.\n    \"\"\"",
            "title": "http_session.pony"
        },
        {
            "location": "/src/http/http_handler/",
            "text": "\"\"\"\nThis package includes all the support functions necessary to build client\nand server applications for the HTTP protocol.\n\nThe important interfaces an application needs to deal with are:\n\n* [HTTPSession](http-HTTPSession), the API to an HTTP connection.\n\n* [HTTPHandler](http-HTTPHandler), the interface to a handler you\nneed to write that will receive notifications from the `HTTPSession`.\n\n* [HandlerFactory](http-HandlerFactory), the interface to a class you\nneed to write that creates instances of your `HTTPHandler`.\n\n* [Payload](http-Payload), the class that represents a single HTTP\nmessage, with its headers.\n\nIf you are writing a client, you will need to deal with the\n[HTTPClient](http-HTTPClient) class.\n\nIf you are writing a server, you will need to deal with the\n[HTTPServer](http-HTTPServer) class.\n\n\"\"\"\n\ninterface HTTPHandler\n  \"\"\"\n  This is the interface through which HTTP messages are delivered *to*\n  application code. On the server, this will be HTTP Requests (GET,\n  HEAD, DELETE, POST, etc) sent from a client. On the client, this will\n  be the HTTP Responses coming back from the server. The protocol is largely\n  symmetrical and the same interface definition is used, though what\n  processing happens behind the interface will of course vary.\n\n  This interface delivers asynchronous events when receiving an HTTP\n  message (called a `Payload`). Calls to these methods are made in\n  the context of the `HTTPSession` actor so most of them should be\n  passing data on to a processing actor.\n\n  Each `HTTPSession` must have a unique instance of the handler. The\n  application code does not necessarily know when an `HTTPSession` is created,\n  so the application must provide an instance of `HandlerFactory` that\n  will be called at the appropriate time.\n  \"\"\"\n  fun ref apply(payload: Payload val): Any => None\n    \"\"\"\n    Notification of an incoming message. On the client, these will\n    be responses coming from the server. On the server these will be requests\n    coming from the client. The `Payload` object carries HTTP headers\n    and the method, URL, and status codes.\n\n    Only one HTTP message will be processed at a time, and that starts\n    with a call to this method. This would be a good time to create\n    an actor to deal with subsequent information pertaining to this\n    message.\n    \"\"\"\n\n  fun ref chunk(data: ByteSeq val) => None\n    \"\"\"\n    Notification of incoming body data. The body belongs to the most\n    recent `Payload` delivered by an `apply` notification.\n    \"\"\"\n\n  fun ref finished() => None\n    \"\"\"\n    Notification that no more body chunks are coming. Delivery of this HTTP\n    message is complete.\n    \"\"\"\n\n  fun ref cancelled() => None\n    \"\"\"\n    Notification that the communication link has broken in the middle of\n    transferring the payload. Everything received so far should\n    be discarded. Any transmissions should be terminated.\n    \"\"\"\n\n  fun ref throttled() => None\n    \"\"\"\n    Notification that the session temporarily can not accept more data.\n    \"\"\"\n\n  fun ref unthrottled() => None\n    \"\"\"\n    Notification that the session can resume accepting data.\n    \"\"\"\n\n  fun ref need_body() => None\n    \"\"\"\n    Notification that the HTTPSession is ready for Stream or Chunked\n    body data.\n    \"\"\"\n\ninterface HandlerFactory\n  \"\"\"\n  The TCP connections that underlie HTTP sessions get created within\n  the `http` package at times that the application code can not\n  predict. Yet, the application code has to provide custom hooks into\n  these connections as they are created. To accomplish this, the\n  application code provides an instance of a `class` that implements\n  this interface.\n\n  The `HandlerFactory.apply` method will be called when a new\n  `HTTPSession` is created, giving the application a chance to create\n  an instance of its own `HTTPHandler`. This happens on both\n  client and server ends.\n  \"\"\"\n\n  fun apply(session: HTTPSession): HTTPHandler ref^\n    \"\"\"\n    Called by the `HTTPSession` when it needs a new instance of the\n    application's `HTTPHandler`. It is suggested that the\n    `session` value be passed to the constructor for the new\n    `HTTPHandler` so that it is available for making\n    `throttle` and `unthrottle` calls.\n    \"\"\"",
            "title": "http_handler.pony"
        },
        {
            "location": "/src/http/discard_log/",
            "text": "primitive DiscardLog\n  \"\"\"\n  Doesn't log anything.\n  \"\"\"\n  fun val apply(\n    ip: String,\n    body_size: USize,\n    request: Payload val,\n    response: Payload val)\n  =>\n    None",
            "title": "discard_log.pony"
        },
        {
            "location": "/src/http/contents_log/",
            "text": "class ContentsLog is Logger\n  \"\"\"\n  Logs the contents of HTTP requests and responses.\n  \"\"\"\n  let _out: OutStream\n\n  new val create(out: OutStream) =>\n    _out = out\n\n  fun val apply(\n    ip: String,\n    body_size: USize,\n    request: Payload val,\n    response: Payload val)\n  =>\n    let list = recover Array[ByteSeq] end\n\n    list.push(\"REQUEST\\n\")\n    list.push(request.method)\n    list.push(\" \")\n    list.push(request.url.path)\n\n    if request.url.query.size() > 0 then\n      list.push(\"?\")\n      list.push(request.url.query)\n    end\n\n    if request.url.fragment.size() > 0 then\n      list.push(\"#\")\n      list.push(request.url.fragment)\n    end\n\n    list.push(\" \")\n    list.push(request.proto)\n    list.push(\"\\n\")\n\n    for (k, v) in request.headers().pairs() do\n      list.push(k)\n      list.push(\": \")\n      list.push(v)\n      list.push(\"\\n\")\n    end\n\n    try list.append(request.body()?) end\n\n    list.push(\"\\n\")\n\n    list.push(\"RESPONSE\\n\")\n    list.push(response.proto)\n    list.push(\" \")\n    list.push(response.status.string())\n    list.push(\" \")\n    list.push(response.method)\n    list.push(\"\\n\")\n\n    for (k, v) in response.headers().pairs() do\n      list.push(k)\n      list.push(\": \")\n      list.push(v)\n      list.push(\"\\n\")\n    end\n\n    try list.append(response.body()?) end\n\n    list.push(\"\\n\\n\")\n    _out.writev(consume list)",
            "title": "contents_log.pony"
        },
        {
            "location": "/src/http/common_log/",
            "text": "use \"time\"\n\nclass CommonLog is Logger\n  \"\"\"\n  Logs HTTP requests in the common log format.\n  \"\"\"\n  let _out: OutStream\n\n  new val create(out: OutStream) =>\n    _out = out\n\n  fun val apply(\n    ip: String,\n    body_size: USize,\n    request: Payload val,\n    response: Payload val)\n  =>\n\n    let list = recover Array[String](24) end\n\n    list.push(ip)\n    list.push(\" - \")\n    list.push(_entry(request.url.user))\n\n    let time = PosixDate(Time.seconds()).format(\"%d/%b/%Y:%H:%M:%S +0000\")\n    list.push(\" [\")\n    list.push(time)\n    list.push(\"] \\\"\")\n\n    list.push(request.method)\n    list.push(\" \")\n    list.push(request.url.path)\n\n    if request.url.query.size() > 0 then\n      list.push(\"?\")\n      list.push(request.url.query)\n    end\n\n    if request.url.fragment.size() > 0 then\n      list.push(\"#\")\n      list.push(request.url.fragment)\n    end\n\n    list.push(\" \")\n    list.push(request.proto)\n    list.push(\"\\\" \")\n    list.push(response.status.string())\n    list.push(\" \")\n    list.push(body_size.string())\n\n    list.push(\" \\\"\")\n    try list.push(request(\"Referrer\")?) end\n    list.push(\"\\\" \\\"\")\n    try list.push(request(\"User-Agent\")?) end\n    list.push(\"\\\"\\n\")\n\n    _out.writev(consume list)\n\n  fun _entry(s: String): String =>\n    if s.size() > 0 then s else \"-\" end",
            "title": "common_log.pony"
        },
        {
            "location": "/src/http/client/",
            "text": "use \"collections\"\nuse \"net\"\nuse \"net/ssl\"\n\nclass HTTPClient\n  \"\"\"\n  Manages a group of HTTP connections on behalf of a client application.\n  A client should create one instance of this class.\n  \"\"\"\n  let _auth: TCPConnectionAuth\n  let _sslctx: SSLContext\n  let _pipeline: Bool\n  let _sessions: Map[_HostService, _ClientConnection] = _sessions.create()\n\n  new create(\n    auth: TCPConnectionAuth,\n    sslctx: (SSLContext | None) = None,\n    pipeline: Bool = true)\n  =>\n    \"\"\"\n    Create the context in which all HTTP sessions will originate.\n    \"\"\"\n    _auth = auth\n\n    _sslctx = try\n      sslctx as SSLContext\n    else\n      recover\n        let newssl = SSLContext\n        newssl.set_client_verify(false)\n        newssl\n        end\n    end\n\n    _pipeline = pipeline\n\n  fun ref apply(\n    request: Payload trn,\n    handlermaker: HandlerFactory val)\n    : Payload val ?\n  =>\n    \"\"\"\n    Schedule a request on an HTTP session. If a new connection is created,\n    a new instance of the application's Receive Handler will be created\n    for it. A `val` copy of the `Payload` is returned, and it can not be\n    modified after this point.\n    This is useful in Stream and Chunked transfer modes, so that the\n    application can follow up with calls to `Client.send_body`.\n    \"\"\"\n    let session = _get_session(request.url, handlermaker)?\n    let mode = request.transfer_mode\n    request.session = session\n    let valrequest: Payload val = consume request\n    session(valrequest)\n    valrequest\n\n  fun ref dispose() =>\n    \"\"\"\n    Disposes the sessions and cancels all pending requests.\n    \"\"\"\n    for s in _sessions.values() do\n      s.dispose()\n    end\n    _sessions.clear()\n\n/*\n  fun ref cancel(request: Payload val) =>\n    \"\"\"\n    Cancel a request.\n    \"\"\"\n    match request.session\n    | let s _ClientConnection tag => s.cancel(request)\n    end\n*/\n\n  fun ref _get_session(\n    url: URL,\n    handlermaker: HandlerFactory val)\n    : _ClientConnection ?\n  =>\n    \"\"\"\n    Gets or creates an HTTP Session for the given URL. If a new session\n    is created, a new Receive Handler instance is created too.\n    \"\"\"\n    let hs = _HostService(url.scheme, url.host, url.port.string())\n\n    try\n      // Look for an existing session\n      _sessions(hs)?\n    else\n      // or create a new session of the correct type.\n      let session =\n        match url.scheme\n        | \"http\" =>\n          _ClientConnection(_auth, hs.host, hs.service,\n            None, _pipeline, handlermaker)\n        | \"https\" =>\n          _ClientConnection(_auth, hs.host, hs.service,\n            _sslctx, _pipeline, handlermaker)\n        else\n          error\n        end\n      _sessions(hs) = session\n      session\n    end\n\n  fun ref send_body(data: ByteSeq val, session: HTTPSession) =>\n    session.write(data)\n\nclass _SessionGuard\n  \"\"\"\n  Enforces the rule that an 'unsafe' request monopolizes the\n  HTTPSession. A 'safe' request does not modify a resource state on\n  the server, and such a request has no body.\n  \"\"\"\n  let _session: HTTPSession\n  let _sent: List[Payload val] = List[Payload val]\n  var _lastreqsafe: Bool = true\n  var current: (Payload val | None) = None\n\n  new iso create(session: HTTPSession) =>\n    _session = session\n\n  fun ref submit(request: Payload val) ? =>\n    \"\"\"\n    Accept a request for transmission to the server. This will fail if\n    the request is not \"safe\" and the HTTPSession is busy. Due to the\n    possibly large body size, these requests can not be queued.\n    \"\"\"\n    let thisreqsafe = request.is_safe()\n\n    // If the channel is idle, just send this request.\n    if _sent.size() == 0 then\n      _lastreqsafe = thisreqsafe\n      current = request\n      _session(request)\n      return\n    end\n\n    // Channel is not idle. But we can send it anyway if\n    // both the last request and this one are safe.\n    if _lastreqsafe and thisreqsafe then\n      _sent.push(request)\n      _session(request)\n      return\n    end\n\n    // Channel can not accept another request now.\n    error",
            "title": "client.pony"
        },
        {
            "location": "/src/assert/assert/",
            "text": "\"\"\"\n# Assert package\n\nContains runtime assertions. If you are looking for assertion that only run\nwhen your code was compiled with the `debug` flag, check out `Assert`. For\nassertions that are always enabled, check out `Fact`.\n\"\"\"\n\nprimitive Assert\n  \"\"\"\n  This is a debug only assertion. If the test is false, it will print any\n  supplied error message to stderr and raise an error.\n  \"\"\"\n  fun apply(test: Bool, msg: String = \"\") ? =>\n    ifdef debug then\n      Fact(test, msg)?\n    end\n\nprimitive Fact\n  \"\"\"\n  This is an assertion that is always enabled. If the test is false, it will\n  print any supplied error message to stderr and raise an error.\n  \"\"\"\n  fun apply(test: Bool, msg: String = \"\") ? =>\n    if not test then\n      if msg.size() > 0 then\n        @fprintf[I32](@pony_os_stderr[Pointer[U8]](), \"%s\\n\".cstring(),\n          msg.cstring())\n      end\n      error\n    end",
            "title": "assert.pony"
        },
        {
            "location": "/src/buffered/writer/",
            "text": "class Writer\n  \"\"\"\n  A buffer for building messages.\n\n  `Writer` provides an way to create byte sequences using common\n  data encodings. The `Writer` manages the underlying arrays and\n  sizes. It is useful for encoding data to send over a network or\n  store in a file. Once a message has been built you can call `done()`\n  to get the message's `ByteSeq`s, and you can then reuse the\n  `Writer` for creating a new message.\n\n  For example, suppose we have a TCP-based network data protocol where\n  messages consist of the following:\n\n  * `message_length` - the number of bytes in the message as a\n    big-endian 32-bit integer\n  * `list_size` - the number of items in the following list of items\n    as a big-endian 32-bit integer\n  * zero or more items of the following data:\n    * a big-endian 64-bit floating point number\n    * a string that starts with a big-endian 32-bit integer that\n      specifies the length of the string, followed by a number of\n      bytes that represent the string\n\n  A message would be something like this:\n\n  ```\n  [message_length][list_size][float1][string1][float2][string2]...\n  ```\n\n  The following program uses a write buffer to encode an array of\n  tuples as a message of this type:\n\n  ```pony\n  use \"buffered\"\n\n  actor Main\n    new create(env: Env) =>\n      let wb = Writer\n      let messages = [[(F32(3597.82), \"Anderson\"); (F32(-7979.3), \"Graham\")]\n                      [(F32(3.14159), \"Hopper\"); (F32(-83.83), \"Jones\")]]\n      for items in messages.values() do\n        wb.i32_be((items.size() / 2).i32())\n        for (f, s) in items.values() do\n          wb.f32_be(f)\n          wb.i32_be(s.size().i32())\n          wb.write(s.array())\n        end\n        let wb_msg = Writer\n        wb_msg.i32_be(wb.size().i32())\n        wb_msg.writev(wb.done())\n        env.out.writev(wb_msg.done())\n      end\n  ```\n  \"\"\"\n  var _chunks: Array[ByteSeq] iso = recover Array[ByteSeq] end\n  var _current: Array[U8] iso = recover Array[U8] end\n  var _offset: USize = 0\n  var _size: USize = 0\n\n  fun ref reserve_chunks(size': USize) =>\n    \"\"\"\n    Reserve space for size' chunks.\n\n    This needs to be recalled after every call to `done`\n    as `done` resets the chunks.\n    \"\"\"\n    _chunks.reserve(size')\n\n  fun ref reserve_current(size': USize) =>\n    \"\"\"\n    Reserve space for size bytes in `_current`.\n    \"\"\"\n    _check(size')\n\n  fun size(): USize =>\n    _size\n\n  fun ref u8(data: U8) =>\n    \"\"\"\n    Write a byte to the buffer.\n    \"\"\"\n    _check(1)\n    _byte(data)\n\n  fun ref u16_le(data: U16) =>\n    \"\"\"\n    Write a U16 to the buffer in little-endian byte order.\n    \"\"\"\n    _check(2)\n    _byte(data.u8())\n    _byte((data >> 8).u8())\n\n  fun ref u16_be(data: U16) =>\n    \"\"\"\n    Write a U16 to the buffer in big-endian byte order.\n    \"\"\"\n    _check(2)\n    _byte((data >> 8).u8())\n    _byte(data.u8())\n\n  fun ref i16_le(data: I16) =>\n    \"\"\"\n    Write an I16 to the buffer in little-endian byte order.\n    \"\"\"\n    u16_le(data.u16())\n\n  fun ref i16_be(data: I16) =>\n    \"\"\"\n    Write an I16 to the buffer in big-endian byte order.\n    \"\"\"\n    u16_be(data.u16())\n\n  fun ref u32_le(data: U32) =>\n    \"\"\"\n    Write a U32 to the buffer in little-endian byte order.\n    \"\"\"\n    _check(4)\n    _byte(data.u8())\n    _byte((data >> 8).u8())\n    _byte((data >> 16).u8())\n    _byte((data >> 24).u8())\n\n  fun ref u32_be(data: U32) =>\n    \"\"\"\n    Write a U32 to the buffer in big-endian byte order.\n    \"\"\"\n    _check(4)\n    _byte((data >> 24).u8())\n    _byte((data >> 16).u8())\n    _byte((data >> 8).u8())\n    _byte(data.u8())\n\n  fun ref i32_le(data: I32) =>\n    \"\"\"\n    Write an I32 to the buffer in little-endian byte order.\n    \"\"\"\n    u32_le(data.u32())\n\n  fun ref i32_be(data: I32) =>\n    \"\"\"\n    Write an I32 to the buffer in big-endian byte order.\n    \"\"\"\n    u32_be(data.u32())\n\n  fun ref f32_le(data: F32) =>\n    \"\"\"\n    Write an F32 to the buffer in little-endian byte order.\n    \"\"\"\n    u32_le(data.bits())\n\n  fun ref f32_be(data: F32) =>\n    \"\"\"\n    Write an F32 to the buffer in big-endian byte order.\n    \"\"\"\n    u32_be(data.bits())\n\n  fun ref u64_le(data: U64) =>\n    \"\"\"\n    Write a U64 to the buffer in little-endian byte order.\n    \"\"\"\n    _check(8)\n    _byte(data.u8())\n    _byte((data >> 8).u8())\n    _byte((data >> 16).u8())\n    _byte((data >> 24).u8())\n    _byte((data >> 32).u8())\n    _byte((data >> 40).u8())\n    _byte((data >> 48).u8())\n    _byte((data >> 56).u8())\n\n  fun ref u64_be(data: U64) =>\n    \"\"\"\n    Write a U64 to the buffer in big-endian byte order.\n    \"\"\"\n    _check(8)\n    _byte((data >> 56).u8())\n    _byte((data >> 48).u8())\n    _byte((data >> 40).u8())\n    _byte((data >> 32).u8())\n    _byte((data >> 24).u8())\n    _byte((data >> 16).u8())\n    _byte((data >> 8).u8())\n    _byte(data.u8())\n\n  fun ref i64_le(data: I64) =>\n    \"\"\"\n    Write an I64 to the buffer in little-endian byte order.\n    \"\"\"\n    u64_le(data.u64())\n\n  fun ref i64_be(data: I64) =>\n    \"\"\"\n    Write an I64 to the buffer in big-endian byte order.\n    \"\"\"\n    u64_be(data.u64())\n\n  fun ref f64_le(data: F64) =>\n    \"\"\"\n    Write an F64 to the buffer in little-endian byte order.\n    \"\"\"\n    u64_le(data.bits())\n\n  fun ref f64_be(data: F64) =>\n    \"\"\"\n    Write an F64 to the buffer in big-endian byte order.\n    \"\"\"\n    u64_be(data.bits())\n\n  fun ref u128_le(data: U128) =>\n    \"\"\"\n    Write a U128 to the buffer in little-endian byte order.\n    \"\"\"\n    _check(16)\n    _byte(data.u8())\n    _byte((data >> 8).u8())\n    _byte((data >> 16).u8())\n    _byte((data >> 24).u8())\n    _byte((data >> 32).u8())\n    _byte((data >> 40).u8())\n    _byte((data >> 48).u8())\n    _byte((data >> 56).u8())\n    _byte((data >> 64).u8())\n    _byte((data >> 72).u8())\n    _byte((data >> 80).u8())\n    _byte((data >> 88).u8())\n    _byte((data >> 96).u8())\n    _byte((data >> 104).u8())\n    _byte((data >> 112).u8())\n    _byte((data >> 120).u8())\n\n  fun ref u128_be(data: U128) =>\n    \"\"\"\n    Write a U128 to the buffer in big-endian byte order.\n    \"\"\"\n    _check(16)\n    _byte((data >> 120).u8())\n    _byte((data >> 112).u8())\n    _byte((data >> 104).u8())\n    _byte((data >> 96).u8())\n    _byte((data >> 88).u8())\n    _byte((data >> 80).u8())\n    _byte((data >> 72).u8())\n    _byte((data >> 64).u8())\n    _byte((data >> 56).u8())\n    _byte((data >> 48).u8())\n    _byte((data >> 40).u8())\n    _byte((data >> 32).u8())\n    _byte((data >> 24).u8())\n    _byte((data >> 16).u8())\n    _byte((data >> 8).u8())\n    _byte(data.u8())\n\n  fun ref i128_le(data: I128) =>\n    \"\"\"\n    Write an I128 to the buffer in little-endian byte order.\n    \"\"\"\n    u128_le(data.u128())\n\n  fun ref i128_be(data: I128) =>\n    \"\"\"\n    Write an I128 to the buffer in big-endian byte order.\n    \"\"\"\n    u128_be(data.u128())\n\n  fun ref write(data: ByteSeq) =>\n    \"\"\"\n    Write a ByteSeq to the buffer.\n    \"\"\"\n    _append_current()\n    _chunks.push(data)\n    _size = _size + data.size()\n\n  fun ref writev(data: ByteSeqIter) =>\n    \"\"\"\n    Write ByteSeqs to the buffer.\n    \"\"\"\n    _append_current()\n    for chunk in data.values() do\n      _chunks.push(chunk)\n      _size = _size + chunk.size()\n    end\n\n  fun ref done(): Array[ByteSeq] iso^ =>\n    \"\"\"\n    Return an array of buffered ByteSeqs and reset the Writer's buffer.\n    \"\"\"\n    _append_current()\n    _size = 0\n    _chunks = recover Array[ByteSeq] end\n\n  fun ref _append_current() =>\n    if _offset > 0 then\n      _current.truncate(_offset)\n      _offset = 0\n      _chunks.push(_current = recover Array[U8] end)\n    end\n\n  fun ref _check(size': USize) =>\n    if (_current.size() - _offset) < size' then\n      _current.undefined(_offset + size')\n    end\n\n  fun ref _byte(data: U8) =>\n    try\n      _current(_offset)? = data\n      _offset = _offset + 1\n      _size = _size + 1\n    end",
            "title": "writer.pony"
        },
        {
            "location": "/src/buffered/reader/",
            "text": "use \"collections\"\n\nclass Reader\n  \"\"\"\n  Store network data and provide a parsing interface.\n\n  `Reader` provides a way to extract typed data from a sequence of\n  bytes. The `Reader` manages the underlying data structures to\n  provide a read cursor over a contiguous sequence of bytes. It is\n  useful for decoding data that is received over a network or stored\n  in a file. Chunk of bytes are added to the `Reader` using the\n  `append` method, and typed data is extracted using the getter\n  methods.\n\n  For example, suppose we have a UDP-based network data protocol where\n  messages consist of the following:\n\n  * `list_size` - the number of items in the following list of items\n    as a big-endian 32-bit integer\n  * zero or more items of the following data:\n    * a big-endian 64-bit floating point number\n    * a string that starts with a big-endian 32-bit integer that\n      specifies the length of the string, followed by a number of\n      bytes that represent the string\n\n  A message would be something like this:\n\n  ```\n  [message_length][list_size][float1][string1][float2][string2]...\n  ```\n\n  The following program uses a `Reader` to decode a message of\n  this type and print them:\n\n  ```pony\n  use \"buffered\"\n  use \"collections\"\n\n  class Notify is InputNotify\n    let _env: Env\n    new create(env: Env) =>\n      _env = env\n    fun ref apply(data: Array[U8] iso) =>\n      let rb = Reader\n      rb.append(consume data)\n      try\n        while true do\n          let len = rb.i32_be()?\n          let items = rb.i32_be()?.usize()\n          for range in Range(0, items) do\n            let f = rb.f32_be()?\n            let str_len = rb.i32_be()?.usize()\n            let str = String.from_array(rb.block(str_len)?)\n            _env.out.print(\"[(\" + f.string() + \"), (\" + str + \")]\")\n          end\n        end\n      end\n\n  actor Main\n    new create(env: Env) =>\n      env.input(recover Notify(env) end, 1024)\n  ```\n  \"\"\"\n  embed _chunks: List[(Array[U8] val, USize)] = _chunks.create()\n  var _available: USize = 0\n  var _search_node: (ListNode[(Array[U8] val, USize)] | None) = None\n  var _search_len: USize = 0\n\n  fun size(): USize =>\n    \"\"\"\n    Return the number of available bytes.\n    \"\"\"\n    _available\n\n  fun ref clear() =>\n    \"\"\"\n    Discard all pending data.\n    \"\"\"\n    _chunks.clear()\n    _available = 0\n\n  fun ref append(data: ByteSeq) =>\n    \"\"\"\n    Add a chunk of data.\n    \"\"\"\n    let data_array =\n      match data\n      | let data': Array[U8] val => data'\n      | let data': String => data'.array()\n      end\n\n    _available = _available + data_array.size()\n    _chunks.push((data_array, 0))\n\n  fun ref skip(n: USize) ? =>\n    \"\"\"\n    Skip n bytes.\n    \"\"\"\n    if _available >= n then\n      _available = _available - n\n      var rem = n\n\n      while rem > 0 do\n        let node = _chunks.head()?\n        (var data, var offset) = node()?\n        let avail = data.size() - offset\n\n        if avail > rem then\n          node()? = (data, offset + rem)\n          break\n        end\n\n        rem = rem - avail\n        _chunks.shift()?\n      end\n\n    else\n      error\n    end\n\n  fun ref block(len: USize): Array[U8] iso^ ? =>\n    \"\"\"\n    Return a block as a contiguous chunk of memory.\n    Will throw an error if you request a block larger than what is currently\n    stored in the `Reader`.\n    \"\"\"\n    if _available < len then\n      error\n    end\n\n    _available = _available - len\n    var out = recover Array[U8] .> undefined(len) end\n    var i = USize(0)\n\n    while i < len do\n      let node = _chunks.head()?\n      (let data, let offset) = node()?\n\n      let avail = data.size() - offset\n      let need = len - i\n      let copy_len = need.min(avail)\n\n      out = recover\n        let r = consume ref out\n        data.copy_to(r, offset, i, copy_len)\n        consume r\n      end\n\n      if avail > need then\n        node()? = (data, offset + need)\n        break\n      end\n\n      i = i + copy_len\n      _chunks.shift()?\n    end\n\n    out\n\n\n  fun ref read_until(separator: U8): Array[U8] iso^ ? =>\n    \"\"\"\n    Find the first occurrence of the separator and return the block of bytes\n    before its position. The separator is not included in the returned array,\n    but it is removed from the buffer. To read a line of text, prefer line()\n    that handles \\n and \\r\\n.\n    \"\"\"\n    let b = block(_distance_of(separator)? - 1)?\n    u8()?\n    b\n\n  fun ref line(): String iso^ ? =>\n    \"\"\"\n    Return a \\n or \\r\\n terminated line as a string. The newline is not\n    included in the returned string, but it is removed from the network buffer.\n    \"\"\"\n    let len = _search_length()?\n\n    _available = _available - len\n    var out = recover String(len) end\n    var i = USize(0)\n\n    while i < len do\n      let node = _chunks.head()?\n      (let data, let offset) = node()?\n\n      let avail = data.size() - offset\n      let need = len - i\n      let copy_len = need.min(avail)\n\n      out.append(data, offset, copy_len)\n\n      if avail > need then\n        node()? = (data, offset + need)\n        break\n      end\n\n      i = i + copy_len\n      _chunks.shift()?\n    end\n\n    out.truncate(len -\n      if (len >= 2) and (out.at_offset(-2)? == '\\r') then 2 else 1 end)\n\n    consume out\n\n  fun ref u8(): U8 ? =>\n    \"\"\"\n    Get a U8. Raise an error if there isn't enough data.\n    \"\"\"\n    if _available >= 1 then\n      _byte()?\n    else\n      error\n    end\n\n  fun ref i8(): I8 ? =>\n    \"\"\"\n    Get an I8.\n    \"\"\"\n    u8()?.i8()\n\n  fun ref u16_be(): U16 ? =>\n    \"\"\"\n    Get a big-endian U16.\n    \"\"\"\n    if _available >= 2 then\n      (u8()?.u16() << 8) or u8()?.u16()\n    else\n      error\n    end\n\n  fun ref u16_le(): U16 ? =>\n    \"\"\"\n    Get a little-endian U16.\n    \"\"\"\n    if _available >= 2 then\n      u8()?.u16() or (u8()?.u16() << 8)\n    else\n      error\n    end\n\n  fun ref i16_be(): I16 ? =>\n    \"\"\"\n    Get a big-endian I16.\n    \"\"\"\n    u16_be()?.i16()\n\n  fun ref i16_le(): I16 ? =>\n    \"\"\"\n    Get a little-endian I16.\n    \"\"\"\n    u16_le()?.i16()\n\n  fun ref u32_be(): U32 ? =>\n    \"\"\"\n    Get a big-endian U32.\n    \"\"\"\n    if _available >= 4 then\n      (u16_be()?.u32() << 16) or u16_be()?.u32()\n    else\n      error\n    end\n\n  fun ref u32_le(): U32 ? =>\n    \"\"\"\n    Get a little-endian U32.\n    \"\"\"\n    if _available >= 4 then\n      u16_le()?.u32() or (u16_le()?.u32() << 16)\n    else\n      error\n    end\n\n  fun ref i32_be(): I32 ? =>\n    \"\"\"\n    Get a big-endian I32.\n    \"\"\"\n    u32_be()?.i32()\n\n  fun ref i32_le(): I32 ? =>\n    \"\"\"\n    Get a little-endian I32.\n    \"\"\"\n    u32_le()?.i32()\n\n  fun ref u64_be(): U64 ? =>\n    \"\"\"\n    Get a big-endian U64.\n    \"\"\"\n    if _available >= 8 then\n      (u32_be()?.u64() << 32) or u32_be()?.u64()\n    else\n      error\n    end\n\n  fun ref u64_le(): U64 ? =>\n    \"\"\"\n    Get a little-endian U64.\n    \"\"\"\n    if _available >= 8 then\n      u32_le()?.u64() or (u32_le()?.u64() << 32)\n    else\n      error\n    end\n\n  fun ref i64_be(): I64 ? =>\n    \"\"\"\n    Get a big-endian I64.\n    \"\"\"\n    u64_be()?.i64()\n\n  fun ref i64_le(): I64 ? =>\n    \"\"\"\n    Get a little-endian I64.\n    \"\"\"\n    u64_le()?.i64()\n\n  fun ref u128_be(): U128 ? =>\n    \"\"\"\n    Get a big-endian U128.\n    \"\"\"\n    if _available >= 16 then\n      (u64_be()?.u128() << 64) or u64_be()?.u128()\n    else\n      error\n    end\n\n  fun ref u128_le(): U128 ? =>\n    \"\"\"\n    Get a little-endian U128.\n    \"\"\"\n    if _available >= 16 then\n      u64_le()?.u128() or (u64_le()?.u128() << 64)\n    else\n      error\n    end\n\n  fun ref i128_be(): I128 ? =>\n    \"\"\"\n    Get a big-endian I129.\n    \"\"\"\n    u128_be()?.i128()\n\n  fun ref i128_le(): I128 ? =>\n    \"\"\"\n    Get a little-endian I128.\n    \"\"\"\n    u128_le()?.i128()\n\n  fun ref f32_be(): F32 ? =>\n    \"\"\"\n    Get a big-endian F32.\n    \"\"\"\n    F32.from_bits(u32_be()?)\n\n  fun ref f32_le(): F32 ? =>\n    \"\"\"\n    Get a little-endian F32.\n    \"\"\"\n    F32.from_bits(u32_le()?)\n\n  fun ref f64_be(): F64 ? =>\n    \"\"\"\n    Get a big-endian F64.\n    \"\"\"\n    F64.from_bits(u64_be()?)\n\n  fun ref f64_le(): F64 ? =>\n    \"\"\"\n    Get a little-endian F64.\n    \"\"\"\n    F64.from_bits(u64_le()?)\n\n  fun ref _byte(): U8 ? =>\n    \"\"\"\n    Get a single byte.\n    \"\"\"\n    let node = _chunks.head()?\n    (var data, var offset) = node()?\n    let r = data(offset)?\n\n    offset = offset + 1\n    _available = _available - 1\n\n    if offset < data.size() then\n      node()? = (data, offset)\n    else\n      _chunks.shift()?\n    end\n    r\n\n  fun box peek_u8(offset: USize = 0): U8 ? =>\n    \"\"\"\n    Peek at a U8 at the given offset. Raise an error if there isn't enough\n    data.\n    \"\"\"\n    _peek_byte(offset)?\n\n  fun box peek_i8(offset: USize = 0): I8 ? =>\n    \"\"\"\n    Peek at an I8.\n    \"\"\"\n    peek_u8(offset)?.i8()\n\n  fun box peek_u16_be(offset: USize = 0): U16 ? =>\n    \"\"\"\n    Peek at a big-endian U16.\n    \"\"\"\n    (peek_u8(offset)?.u16() << 8) or peek_u8(offset + 1)?.u16()\n\n  fun box peek_u16_le(offset: USize = 0): U16 ? =>\n    \"\"\"\n    Peek at a little-endian U16.\n    \"\"\"\n    peek_u8(offset)?.u16() or (peek_u8(offset + 1)?.u16() << 8)\n\n  fun box peek_i16_be(offset: USize = 0): I16 ? =>\n    \"\"\"\n    Peek at a big-endian I16.\n    \"\"\"\n    peek_u16_be(offset)?.i16()\n\n  fun box peek_i16_le(offset: USize = 0): I16 ? =>\n    \"\"\"\n    Peek at a little-endian I16.\n    \"\"\"\n    peek_u16_le(offset)?.i16()\n\n  fun box peek_u32_be(offset: USize = 0): U32 ? =>\n    \"\"\"\n    Peek at a big-endian U32.\n    \"\"\"\n    (peek_u16_be(offset)?.u32() << 16) or peek_u16_be(offset + 2)?.u32()\n\n  fun box peek_u32_le(offset: USize = 0): U32 ? =>\n    \"\"\"\n    Peek at a little-endian U32.\n    \"\"\"\n    peek_u16_le(offset)?.u32() or (peek_u16_le(offset + 2)?.u32() << 16)\n\n  fun box peek_i32_be(offset: USize = 0): I32 ? =>\n    \"\"\"\n    Peek at a big-endian I32.\n    \"\"\"\n    peek_u32_be(offset)?.i32()\n\n  fun box peek_i32_le(offset: USize = 0): I32 ? =>\n    \"\"\"\n    Peek at a little-endian I32.\n    \"\"\"\n    peek_u32_le(offset)?.i32()\n\n  fun box peek_u64_be(offset: USize = 0): U64 ? =>\n    \"\"\"\n    Peek at a big-endian U64.\n    \"\"\"\n    (peek_u32_be(offset)?.u64() << 32) or peek_u32_be(offset + 4)?.u64()\n\n  fun box peek_u64_le(offset: USize = 0): U64 ? =>\n    \"\"\"\n    Peek at a little-endian U64.\n    \"\"\"\n    peek_u32_le(offset)?.u64() or (peek_u32_le(offset + 4)?.u64() << 32)\n\n  fun box peek_i64_be(offset: USize = 0): I64 ? =>\n    \"\"\"\n    Peek at a big-endian I64.\n    \"\"\"\n    peek_u64_be(offset)?.i64()\n\n  fun box peek_i64_le(offset: USize = 0): I64 ? =>\n    \"\"\"\n    Peek at a little-endian I64.\n    \"\"\"\n    peek_u64_le(offset)?.i64()\n\n  fun box peek_u128_be(offset: USize = 0): U128 ? =>\n    \"\"\"\n    Peek at a big-endian U128.\n    \"\"\"\n    (peek_u64_be(offset)?.u128() << 64) or peek_u64_be(offset + 8)?.u128()\n\n  fun box peek_u128_le(offset: USize = 0): U128 ? =>\n    \"\"\"\n    Peek at a little-endian U128.\n    \"\"\"\n    peek_u64_le(offset)?.u128() or (peek_u64_le(offset + 8)?.u128() << 64)\n\n  fun box peek_i128_be(offset: USize = 0): I128 ? =>\n    \"\"\"\n    Peek at a big-endian I129.\n    \"\"\"\n    peek_u128_be(offset)?.i128()\n\n  fun box peek_i128_le(offset: USize = 0): I128 ? =>\n    \"\"\"\n    Peek at a little-endian I128.\n    \"\"\"\n    peek_u128_le(offset)?.i128()\n\n  fun box peek_f32_be(offset: USize = 0): F32 ? =>\n    \"\"\"\n    Peek at a big-endian F32.\n    \"\"\"\n    F32.from_bits(peek_u32_be(offset)?)\n\n  fun box peek_f32_le(offset: USize = 0): F32 ? =>\n    \"\"\"\n    Peek at a little-endian F32.\n    \"\"\"\n    F32.from_bits(peek_u32_le(offset)?)\n\n  fun box peek_f64_be(offset: USize = 0): F64 ? =>\n    \"\"\"\n    Peek at a big-endian F64.\n    \"\"\"\n    F64.from_bits(peek_u64_be(offset)?)\n\n  fun box peek_f64_le(offset: USize = 0): F64 ? =>\n    \"\"\"\n    Peek at a little-endian F64.\n    \"\"\"\n    F64.from_bits(peek_u64_le(offset)?)\n\n  fun box _peek_byte(offset: USize = 0): U8 ? =>\n    \"\"\"\n    Get the byte at the given offset without moving the cursor forward.\n    Raise an error if the given offset is not yet available.\n    \"\"\"\n    var offset' = offset\n    var iter = _chunks.nodes()\n\n    while true do\n      let node = iter.next()?\n      (var data, var node_offset) = node()?\n      offset' = offset' + node_offset\n\n      let data_size = data.size()\n      if offset' >= data_size then\n        offset' = offset' - data_size\n      else\n        return data(offset')?\n      end\n    end\n\n    error\n\n  fun ref _distance_of(byte: U8): USize ? =>\n    \"\"\"\n    Get the distance to the first occurrence of the given byte\n    \"\"\"\n    if _chunks.size() == 0 then\n      error\n    end\n\n    var node = if _search_len > 0 then\n      let prev = _search_node as ListNode[(Array[U8] val, USize)]\n\n      if not prev.has_next() then\n        error\n      end\n\n      prev.next() as ListNode[(Array[U8] val, USize)]\n    else\n      _chunks.head()?\n    end\n\n    while true do\n      (var data, var offset) = node()?\n\n      try\n        let len = (_search_len + data.find(byte, offset)? + 1) - offset\n        _search_node = None\n        _search_len = 0\n        return len\n      end\n\n      _search_len = _search_len + (data.size() - offset)\n\n      if not node.has_next() then\n        break\n      end\n\n      node = node.next() as ListNode[(Array[U8] val, USize)]\n    end\n\n    _search_node = node\n    error\n\n  fun ref _search_length(): USize ? =>\n    \"\"\"\n    Get the length of a pending line. Raise an error if there is no pending\n    line.\n    \"\"\"\n    _distance_of('\\n')?",
            "title": "reader.pony"
        },
        {
            "location": "/src/builtin/unsigned/",
            "text": "primitive U8 is _UnsignedInteger[U8]\n  new create(value: U8) => value\n  new from[B: (Number & Real[B] val)](a: B) => a.u8()\n\n  new min_value() => 0\n  new max_value() => 0xFF\n\n  fun next_pow2(): U8 =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): U8 => this\n  fun bit_reverse(): U8 => @\"llvm.bitreverse.i8\"[U8](this)\n  fun bswap(): U8 => this\n  fun popcount(): U8 => @\"llvm.ctpop.i8\"[U8](this)\n  fun clz(): U8 => @\"llvm.ctlz.i8\"[U8](this, false)\n  fun ctz(): U8 => @\"llvm.cttz.i8\"[U8](this, false)\n\n  fun clz_unsafe(): U8 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i8\"[U8](this, true)\n\n  fun ctz_unsafe(): U8 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i8\"[U8](this, true)\n\n  fun bitwidth(): U8 => 8\n  fun min(y: U8): U8 => if this < y then this else y end\n  fun max(y: U8): U8 => if this > y then this else y end\n\n  fun addc(y: U8): (U8, Bool) =>\n    @\"llvm.uadd.with.overflow.i8\"[(U8, Bool)](this, y)\n\n  fun subc(y: U8): (U8, Bool) =>\n    @\"llvm.usub.with.overflow.i8\"[(U8, Bool)](this, y)\n\n  fun mulc(y: U8): (U8, Bool) =>\n    @\"llvm.umul.with.overflow.i8\"[(U8, Bool)](this, y)\n\nprimitive U16 is _UnsignedInteger[U16]\n  new create(value: U16) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.u16()\n\n  new min_value() => 0\n  new max_value() => 0xFFFF\n\n  fun next_pow2(): U16 =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): U16 => this\n  fun bit_reverse(): U16 => @\"llvm.bitreverse.i16\"[U16](this)\n  fun bswap(): U16 => @\"llvm.bswap.i16\"[U16](this)\n  fun popcount(): U16 => @\"llvm.ctpop.i16\"[U16](this)\n  fun clz(): U16 => @\"llvm.ctlz.i16\"[U16](this, false)\n  fun ctz(): U16 => @\"llvm.cttz.i16\"[U16](this, false)\n\n  fun clz_unsafe(): U16 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i16\"[U16](this, true)\n\n  fun ctz_unsafe(): U16 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i16\"[U16](this, true)\n\n  fun bitwidth(): U16 => 16\n  fun min(y: U16): U16 => if this < y then this else y end\n  fun max(y: U16): U16 => if this > y then this else y end\n\n  fun addc(y: U16): (U16, Bool) =>\n    @\"llvm.uadd.with.overflow.i16\"[(U16, Bool)](this, y)\n\n  fun subc(y: U16): (U16, Bool) =>\n    @\"llvm.usub.with.overflow.i16\"[(U16, Bool)](this, y)\n\n  fun mulc(y: U16): (U16, Bool) =>\n    @\"llvm.umul.with.overflow.i16\"[(U16, Bool)](this, y)\n\nprimitive U32 is _UnsignedInteger[U32]\n  new create(value: U32) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.u32()\n\n  new min_value() => 0\n  new max_value() => 0xFFFF_FFFF\n\n  fun next_pow2(): U32 =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): U32 => this\n  fun bit_reverse(): U32 => @\"llvm.bitreverse.i32\"[U32](this)\n  fun bswap(): U32 => @\"llvm.bswap.i32\"[U32](this)\n  fun popcount(): U32 => @\"llvm.ctpop.i32\"[U32](this)\n  fun clz(): U32 => @\"llvm.ctlz.i32\"[U32](this, false)\n  fun ctz(): U32 => @\"llvm.cttz.i32\"[U32](this, false)\n\n  fun clz_unsafe(): U32 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i32\"[U32](this, true)\n\n  fun ctz_unsafe(): U32 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i32\"[U32](this, true)\n\n  fun bitwidth(): U32 => 32\n  fun min(y: U32): U32 => if this < y then this else y end\n  fun max(y: U32): U32 => if this > y then this else y end\n\n  fun addc(y: U32): (U32, Bool) =>\n    @\"llvm.uadd.with.overflow.i32\"[(U32, Bool)](this, y)\n\n  fun subc(y: U32): (U32, Bool) =>\n    @\"llvm.usub.with.overflow.i32\"[(U32, Bool)](this, y)\n\n  fun mulc(y: U32): (U32, Bool) =>\n    @\"llvm.umul.with.overflow.i32\"[(U32, Bool)](this, y)\n\nprimitive U64 is _UnsignedInteger[U64]\n  new create(value: U64) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.u64()\n\n  new min_value() => 0\n  new max_value() => 0xFFFF_FFFF_FFFF_FFFF\n\n  fun next_pow2(): U64 =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): U64 => this\n  fun bit_reverse(): U64 => @\"llvm.bitreverse.i64\"[U64](this)\n  fun bswap(): U64 => @\"llvm.bswap.i64\"[U64](this)\n  fun popcount(): U64 => @\"llvm.ctpop.i64\"[U64](this)\n  fun clz(): U64 => @\"llvm.ctlz.i64\"[U64](this, false)\n  fun ctz(): U64 => @\"llvm.cttz.i64\"[U64](this, false)\n\n  fun clz_unsafe(): U64 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i64\"[U64](this, true)\n\n  fun ctz_unsafe(): U64 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i64\"[U64](this, true)\n\n  fun bitwidth(): U64 => 64\n  fun min(y: U64): U64 => if this < y then this else y end\n  fun max(y: U64): U64 => if this > y then this else y end\n\n  fun hash(): USize =>\n    ifdef ilp32 then\n      ((this >> 32).u32() xor this.u32()).hash()\n    else\n      usize().hash()\n    end\n\n  fun addc(y: U64): (U64, Bool) =>\n    @\"llvm.uadd.with.overflow.i64\"[(U64, Bool)](this, y)\n\n  fun subc(y: U64): (U64, Bool) =>\n    @\"llvm.usub.with.overflow.i64\"[(U64, Bool)](this, y)\n\n  fun mulc(y: U64): (U64, Bool) =>\n    @\"llvm.umul.with.overflow.i64\"[(U64, Bool)](this, y)\n\nprimitive ULong is _UnsignedInteger[ULong]\n  new create(value: ULong) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.ulong()\n\n  new min_value() => 0\n\n  new max_value() =>\n    ifdef ilp32 or llp64 then\n      0xFFFF_FFFF\n    else\n      0xFFFF_FFFF_FFFF_FFFF\n    end\n\n  fun next_pow2(): ULong =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): ULong => this\n\n  fun bit_reverse(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.bitreverse.i32\"[ULong](this)\n    else\n      @\"llvm.bitreverse.i64\"[ULong](this)\n    end\n\n  fun bswap(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.bswap.i32\"[ULong](this)\n    else\n      @\"llvm.bswap.i64\"[ULong](this)\n    end\n\n  fun popcount(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctpop.i32\"[ULong](this)\n    else\n      @\"llvm.ctpop.i64\"[ULong](this)\n    end\n\n  fun clz(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctlz.i32\"[ULong](this, false)\n    else\n      @\"llvm.ctlz.i64\"[ULong](this, false)\n    end\n\n  fun ctz(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.cttz.i32\"[ULong](this, false)\n    else\n      @\"llvm.cttz.i64\"[ULong](this, false)\n    end\n\n  fun clz_unsafe(): ULong =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctlz.i32\"[ULong](this, true)\n    else\n      @\"llvm.ctlz.i64\"[ULong](this, true)\n    end\n\n  fun ctz_unsafe(): ULong =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    ifdef ilp32 or llp64 then\n      @\"llvm.cttz.i32\"[ULong](this, false)\n    else\n      @\"llvm.cttz.i64\"[ULong](this, true)\n    end\n\n  fun bitwidth(): ULong => ifdef ilp32 or llp64 then 32 else 64 end\n  fun min(y: ULong): ULong => if this < y then this else y end\n  fun max(y: ULong): ULong => if this > y then this else y end\n\n  fun hash(): USize =>\n    ifdef ilp32 or llp64 then\n      u32().hash()\n    else\n      u64().hash()\n    end\n\n  fun addc(y: ULong): (ULong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.uadd.with.overflow.i32\"[(ULong, Bool)](this, y)\n    else\n      @\"llvm.uadd.with.overflow.i64\"[(ULong, Bool)](this, y)\n    end\n\n  fun subc(y: ULong): (ULong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.usub.with.overflow.i32\"[(ULong, Bool)](this, y)\n    else\n      @\"llvm.usub.with.overflow.i64\"[(ULong, Bool)](this, y)\n    end\n\n  fun mulc(y: ULong): (ULong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.umul.with.overflow.i32\"[(ULong, Bool)](this, y)\n    else\n      @\"llvm.umul.with.overflow.i64\"[(ULong, Bool)](this, y)\n    end\n\nprimitive USize is _UnsignedInteger[USize]\n  new create(value: USize) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.usize()\n\n  new min_value() => 0\n\n  new max_value() =>\n    ifdef ilp32 then\n      0xFFFF_FFFF\n    else\n      0xFFFF_FFFF_FFFF_FFFF\n    end\n\n  fun next_pow2(): USize =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): USize => this\n\n  fun bit_reverse(): USize =>\n    ifdef ilp32 then\n      @\"llvm.bitreverse.i32\"[USize](this)\n    else\n      @\"llvm.bitreverse.i64\"[USize](this)\n    end\n\n  fun bswap(): USize =>\n    ifdef ilp32 then\n      @\"llvm.bswap.i32\"[USize](this)\n    else\n      @\"llvm.bswap.i64\"[USize](this)\n    end\n\n  fun popcount(): USize =>\n    ifdef ilp32 then\n      @\"llvm.ctpop.i32\"[USize](this)\n    else\n      @\"llvm.ctpop.i64\"[USize](this)\n    end\n\n  fun clz(): USize =>\n    ifdef ilp32 then\n      @\"llvm.ctlz.i32\"[USize](this, false)\n    else\n      @\"llvm.ctlz.i64\"[USize](this, false)\n    end\n\n  fun ctz(): USize =>\n    ifdef ilp32 then\n      @\"llvm.cttz.i32\"[USize](this, false)\n    else\n      @\"llvm.cttz.i64\"[USize](this, false)\n    end\n\n  fun clz_unsafe(): USize =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    ifdef ilp32 then\n      @\"llvm.ctlz.i32\"[USize](this, true)\n    else\n      @\"llvm.ctlz.i64\"[USize](this, true)\n    end\n\n  fun ctz_unsafe(): USize =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    ifdef ilp32 then\n      @\"llvm.cttz.i32\"[USize](this, true)\n    else\n      @\"llvm.cttz.i64\"[USize](this, true)\n    end\n\n  fun bitwidth(): USize => ifdef ilp32 then 32 else 64 end\n  fun min(y: USize): USize => if this < y then this else y end\n  fun max(y: USize): USize => if this > y then this else y end\n\n  fun addc(y: USize): (USize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.uadd.with.overflow.i32\"[(USize, Bool)](this, y)\n    else\n      @\"llvm.uadd.with.overflow.i64\"[(USize, Bool)](this, y)\n    end\n\n  fun subc(y: USize): (USize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.usub.with.overflow.i32\"[(USize, Bool)](this, y)\n    else\n      @\"llvm.usub.with.overflow.i64\"[(USize, Bool)](this, y)\n    end\n\n  fun mulc(y: USize): (USize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.umul.with.overflow.i32\"[(USize, Bool)](this, y)\n    else\n      @\"llvm.umul.with.overflow.i64\"[(USize, Bool)](this, y)\n    end\n\nprimitive U128 is _UnsignedInteger[U128]\n  new create(value: U128) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.u128()\n\n  new min_value() => 0\n  new max_value() => 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF\n\n  fun next_pow2(): U128 =>\n    let x = (this - 1).clz()\n    1 << (if x == 0 then 0 else bitwidth() - x end)\n\n  fun abs(): U128 => this\n  fun bit_reverse(): U128 => @\"llvm.bitreverse.i128\"[U128](this)\n  fun bswap(): U128 => @\"llvm.bswap.i128\"[U128](this)\n  fun popcount(): U128 => @\"llvm.ctpop.i128\"[U128](this)\n  fun clz(): U128 => @\"llvm.ctlz.i128\"[U128](this, false)\n  fun ctz(): U128 => @\"llvm.cttz.i128\"[U128](this, false)\n\n  fun clz_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i128\"[U128](this, true)\n\n  fun ctz_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i128\"[U128](this, true)\n\n  fun bitwidth(): U128 => 128\n  fun min(y: U128): U128 => if this < y then this else y end\n  fun max(y: U128): U128 => if this > y then this else y end\n\n  fun hash(): USize =>\n    ifdef ilp32 then\n      ((this >> 96).u32() xor\n      (this >> 64).u32() xor\n      (this >> 32).u32() xor\n      this.u32()).hash()\n    else\n      ((this >> 64).u64() xor this.u64()).hash()\n    end\n\n  fun hash64(): U64 =>\n    ((this >> 64).u64() xor this.u64()).hash64()\n\n  fun string(): String iso^ =>\n    _ToString._u128(this, false)\n\n  fun mul(y: U128): U128 =>\n    ifdef native128 then\n      this * y\n    else\n      let x_hi = (this >> 64).u64()\n      let x_lo = this.u64()\n      let y_hi = (y >> 64).u64()\n      let y_lo = y.u64()\n\n      let mask = U64(0x00000000FFFFFFFF)\n\n      var lo = (x_lo and mask) * (y_lo and mask)\n      var t = lo >> 32\n      lo = lo and mask\n      t = t + ((x_lo >> 32) * (y_lo and mask))\n      lo = lo + ((t and mask) << 32)\n\n      var hi = t >> 32\n      t = lo >> 32\n      lo = lo and mask\n      t = t + ((y_lo >> 32) * (x_lo and mask))\n      lo = lo + ((t and mask) << 32)\n      hi = hi + (t >> 32)\n      hi = hi + ((x_lo >> 32) * (y_lo >> 32))\n      hi = hi + (x_hi * y_lo) + (x_lo * y_hi)\n\n      (hi.u128() << 64) or lo.u128()\n    end\n\n  fun divmod(y: U128): (U128, U128) =>\n    ifdef native128 then\n      (this / y, this % y)\n    else\n      if y == 0 then\n        return (0, 0)\n      end\n\n      var quot: U128 = 0\n      var qbit: U128 = 1\n      var num = this\n      var den = y\n\n      while den.i128() >= 0 do\n        den = den << 1\n        qbit = qbit << 1\n      end\n\n      while qbit != 0 do\n        if den <= num then\n          num = num - den\n          quot = quot + qbit\n        end\n\n        den = den >> 1\n        qbit = qbit >> 1\n      end\n      (quot, num)\n    end\n\n  fun div(y: U128): U128 =>\n    ifdef native128 then\n      this / y\n    else\n      (let q, let r) = divmod(y)\n      q\n    end\n\n  fun mod(y: U128): U128 =>\n    ifdef native128 then\n      this % y\n    else\n      (let q, let r) = divmod(y)\n      r\n    end\n\n  fun mul_unsafe(y: U128): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this *~ y\n    else\n      this * y\n    end\n\n  fun divmod_unsafe(y: U128): (U128, U128) =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      (this *~ y, this /~ y)\n    else\n      divmod(y)\n    end\n\n  fun div_unsafe(y: U128): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this /~ y\n    else\n      this / y\n    end\n\n  fun mod_unsafe(y: U128): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this %~ y\n    else\n      this % y\n    end\n\n  fun f32(): F32 =>\n    let v = f64()\n    if v > F32.max_value().f64() then\n      F32._inf(false)\n    else\n      v.f32()\n    end\n\n  fun f64(): F64 =>\n    if this == 0 then\n      return 0\n    end\n\n    var a = this\n    let sd = bitwidth() - clz()\n    var e = (sd - 1).u64()\n\n    if sd > 53 then\n      match sd\n      | 54 => a = a << 1\n      | 55 => None\n      else\n        a = (a >> (sd - 55)) or\n          if (a and (-1 >> ((bitwidth() + 55) - sd))) != 0 then 1 else 0 end\n      end\n\n      if (a and 4) != 0 then\n        a = a or 1\n      end\n\n      a = (a + 1) >> 2\n\n      if (a and (1 << 53)) != 0 then\n        a = a >> 1\n        e = e + 1\n      end\n    else\n      a = a << (53 - sd)\n    end\n\n    F64.from_bits(((e + 1023) << 52) or (a.u64() and 0xF_FFFF_FFFF_FFFF))\n\n  fun f32_unsafe(): F32 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64_unsafe().f32_unsafe()\n\n  fun f64_unsafe(): F64 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64()\n\n  fun addc(y: U128): (U128, Bool) =>\n    ifdef native128 then\n      @\"llvm.uadd.with.overflow.i128\"[(U128, Bool)](this, y)\n    else\n      let overflow = this > (max_value() - y)\n      (this + y, overflow)\n    end\n\n  fun subc(y: U128): (U128, Bool) =>\n    ifdef native128 then\n      @\"llvm.usub.with.overflow.i128\"[(U128, Bool)](this, y)\n    else\n      let overflow = this < y\n      (this - y, overflow)\n    end\n\n  fun mulc(y: U128): (U128, Bool) =>\n    ifdef native128 then\n      @\"llvm.umul.with.overflow.i128\"[(U128, Bool)](this, y)\n    else\n      let result = this * y\n      let overflow = (this != 0) and ((result / this) != y)\n      (result, overflow)\n    end\n\ntype Unsigned is (U8 | U16 | U32 | U64 | U128 | ULong | USize)",
            "title": "unsigned.pony"
        },
        {
            "location": "/src/builtin/stringable/",
            "text": "interface box Stringable\n  \"\"\"\n  Things that can be turned into a String.\n  \"\"\"\n  fun string(): String iso^\n    \"\"\"\n    Generate a string representation of this object.\n    \"\"\"",
            "title": "stringable.pony"
        },
        {
            "location": "/src/builtin/string/",
            "text": "use @memcmp[I32](dst: Pointer[U8] box, src: Pointer[U8] box, len: USize)\nuse @memset[Pointer[None]](dst: Pointer[None], set: U32, len: USize)\nuse @memmove[Pointer[None]](dst: Pointer[None], src: Pointer[None], len: USize)\nuse @strtof[F32](nptr: Pointer[U8] box, endptr: USize)\nuse @strtod[F64](nptr: Pointer[U8] box, endptr: USize)\n\nclass val String is (Seq[U8] & Comparable[String box] & Stringable)\n  \"\"\"\n  A String is an ordered collection of characters.\n\n  Strings don't specify an encoding.\n\n  Example usage of some common String methods:\n\n```pony\nactor Main\n  new create(env: Env) =>\n    try\n      // construct a new string\n      let str = \"Hello\"\n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add \" world\" to the end of our original string\n      let str_new = str.add(\" world\")\n\n      // count occurrences of letter \"l\"\n      let count = str_new.count(\"l\")\n\n      // find first occurrence of letter \"w\"\n      let first_w = str_new.find(\"w\")\n      // find first occurrence of letter \"d\"\n      let first_d = str_new.find(\"d\")\n\n      // get substring capturing \"world\"\n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end\n```\n  \"\"\"\n  var _size: USize\n  var _alloc: USize\n  var _ptr: Pointer[U8]\n\n  new create(len: USize = 0) =>\n    \"\"\"\n    An empty string. Enough space for len bytes is reserved.\n    \"\"\"\n    _size = 0\n    _alloc = len.min(len.max_value() - 1) + 1\n    _ptr = Pointer[U8]._alloc(_alloc)\n    _set(0, 0)\n\n  new val from_array(data: Array[U8] val) =>\n    \"\"\"\n    Create a string from an array, reusing the underlying data pointer.\n    \"\"\"\n    _size = data.size()\n    _alloc = data.space()\n    _ptr = data.cpointer()._unsafe()\n\n  new iso from_iso_array(data: Array[U8] iso) =>\n    \"\"\"\n    Create a string from an array, reusing the underlying data pointer\n    \"\"\"\n    _size = data.size()\n    _alloc = data.space()\n    _ptr = (consume data).cpointer()._unsafe()\n    if _alloc > _size then\n      _set(_size, 0)\n    end\n\n  new from_cpointer(str: Pointer[U8], len: USize, alloc: USize = 0) =>\n    \"\"\"\n    Return a string from binary pointer data without making a\n    copy. This must be done only with C-FFI functions that return\n    pony_alloc'd character arrays. If a null pointer is given then an\n    empty string is returned.\n    \"\"\"\n    if str.is_null() then\n      _size = 0\n      _alloc = 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      _set(0, 0)\n    else\n      _size = len\n      _alloc = alloc.max(_size.min(len.max_value() - 1))\n      _ptr = str\n    end\n\n  new from_cstring(str: Pointer[U8]) =>\n    \"\"\"\n    Return a string from a pointer to a null-terminated cstring\n    without making a copy. The data is not copied. This must be done\n    only with C-FFI functions that return pony_alloc'd character\n    arrays. The pointer is scanned for the first null byte, which will\n    be interpreted as the null terminator. Note that the scan is\n    unbounded; the pointed to data must be null-terminated within\n    the allocated array to preserve memory safety. If a null pointer\n    is given then an empty string is returned.\n    \"\"\"\n    if str.is_null() then\n      _size = 0\n      _alloc = 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      _set(0, 0)\n    else\n      var i: USize = 0\n\n      while str._apply(i) != 0 do\n        i = i + 1\n      end\n\n      _size = i\n      _alloc = i + 1\n      _ptr = str\n    end\n\n  new copy_cpointer(str: Pointer[U8] box, len: USize) =>\n    \"\"\"\n    Create a string by copying a fixed number of bytes from a pointer.\n    \"\"\"\n    if str.is_null() then\n      _size = 0\n      _alloc = 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      _set(0, 0)\n    else\n      _size = len\n      _alloc = _size + 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      str._copy_to(_ptr, _alloc)\n    end\n\n  new copy_cstring(str: Pointer[U8] box) =>\n    \"\"\"\n    Create a string by copying a null-terminated C string. Note that\n    the scan is unbounded; the pointed to data must be null-terminated\n    within the allocated array to preserve memory safety. If a null\n    pointer is given then an empty string is returned.\n    \"\"\"\n    if str.is_null() then\n      _size = 0\n      _alloc = 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      _set(0, 0)\n    else\n      var i: USize = 0\n\n      while str._apply(i) != 0 do\n        i = i + 1\n      end\n\n      _size = i\n      _alloc = i + 1\n      _ptr = Pointer[U8]._alloc(_alloc)\n      str._copy_to(_ptr, _alloc)\n    end\n\n  new from_utf32(value: U32) =>\n    \"\"\"\n    Create a UTF-8 string from a single UTF-32 code point.\n    \"\"\"\n    let encoded = _UTF32Encoder.encode(value)\n    _size = encoded._1\n    _alloc = _size + 1\n    _ptr = Pointer[U8]._alloc(_alloc)\n    _set(0, encoded._2)\n    if encoded._1 > 1 then\n      _set(1, encoded._3)\n      if encoded._1 > 2 then\n        _set(2, encoded._4)\n        if encoded._1 > 3 then\n          _set(3, encoded._5)\n        end\n      end\n    end\n    _set(_size, 0)\n\n  fun ref push_utf32(value: U32) =>\n    \"\"\"\n    Push a UTF-32 code point.\n    \"\"\"\n    let encoded = _UTF32Encoder.encode(value)\n    let i = _size\n    _size = _size + encoded._1\n    reserve(_size)\n    _set(i, encoded._2)\n    if encoded._1 > 1 then\n      _set(i + 1, encoded._3)\n      if encoded._1 > 2 then\n        _set(i + 2, encoded._4)\n        if encoded._1 > 3 then\n          _set(i + 3, encoded._5)\n        end\n      end\n    end\n    _set(_size, 0)\n\n  fun box _copy_to(ptr: Pointer[U8] ref, copy_len: USize,\n    from_offset: USize = 0, to_offset: USize = 0) =>\n    \"\"\"\n    Copy copy_len characters from this to that at specified offsets.\n    \"\"\"\n    _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len)\n\n  fun cpointer(offset: USize = 0): Pointer[U8] tag =>\n    \"\"\"\n    Returns a C compatible pointer to the underlying string allocation.\n    \"\"\"\n    _ptr._offset(offset)\n\n  fun cstring(): Pointer[U8] tag =>\n    \"\"\"\n    Returns a C compatible pointer to a null-terminated version of the\n    string, safe to pass to an FFI function that doesn't accept a size\n    argument, expecting a null-terminator. If the underlying string\n    is already null terminated, this is returned; otherwise the string\n    is copied into a new, null-terminated allocation.\n    \"\"\"\n    if is_null_terminated() then\n      return _ptr\n    end\n\n    let ptr = Pointer[U8]._alloc(_size + 1)\n    _ptr._copy_to(ptr._unsafe(), _size)\n    ptr._update(_size, 0)\n    ptr\n\n  fun val array(): Array[U8] val =>\n    \"\"\"\n    Returns an Array[U8] that that reuses the underlying data pointer.\n    \"\"\"\n    recover\n      Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc)\n    end\n\n  fun size(): USize =>\n    \"\"\"\n    Returns the length of the string data in bytes.\n    \"\"\"\n    _size\n\n  fun codepoints(from: ISize = 0, to: ISize = ISize.max_value()): USize =>\n    \"\"\"\n    Returns the number of unicode code points in the string between the two\n    offsets. Index range [`from` .. `to`) is half-open.\n    \"\"\"\n    if _size == 0 then\n      return 0\n    end\n\n    var i = offset_to_index(from)\n    let j = offset_to_index(to).min(_size)\n    var n = USize(0)\n\n    while i < j do\n      if (_ptr._apply(i) and 0xC0) != 0x80 then\n        n = n + 1\n      end\n\n      i = i + 1\n    end\n\n    n\n\n  fun space(): USize =>\n    \"\"\"\n    Returns the space available for data, not including the null terminator.\n    \"\"\"\n    if is_null_terminated() then _alloc - 1 else _alloc end\n\n  fun ref reserve(len: USize) =>\n    \"\"\"\n    Reserve space for len bytes. An additional byte will be reserved for the\n    null terminator.\n    \"\"\"\n    if _alloc <= len then\n      let max = len.max_value() - 1\n      let min_alloc = len.min(max) + 1\n      if min_alloc <= (max / 2) then\n        _alloc = min_alloc.next_pow2()\n      else\n        _alloc = min_alloc.min(max)\n      end\n      _ptr = _ptr._realloc(_alloc)\n    end\n\n  fun ref compact() =>\n    \"\"\"\n    Try to remove unused space, making it available for garbage collection. The\n    request may be ignored. The string is returned to allow call chaining.\n    \"\"\"\n    if (_size + 1) <= 512 then\n      if (_size + 1).next_pow2() != _alloc.next_pow2() then\n        _alloc = (_size + 1).next_pow2()\n        let old_ptr = _ptr = Pointer[U8]._alloc(_alloc)\n        old_ptr._copy_to(_ptr, _size)\n        _set(_size, 0)\n      end\n    elseif (_size + 1) < _alloc then\n      _alloc = (_size + 1)\n      let old_ptr = _ptr = Pointer[U8]._alloc(_alloc)\n      old_ptr._copy_to(_ptr, _size)\n      _set(_size, 0)\n    end\n\n  fun ref recalc() =>\n    \"\"\"\n    Recalculates the string length. This is only needed if the string is\n    changed via an FFI call. If a null terminator byte is not found within the\n    allocated length, the size will not be changed.\n    \"\"\"\n    var s: USize = 0\n\n    while (s < _alloc) and (_ptr._apply(s) > 0) do\n      s = s + 1\n    end\n\n    if s != _alloc then\n      _size = s\n    end\n\n  fun ref truncate(len: USize) =>\n    \"\"\"\n    Truncates the string at the minimum of len and space. Ensures there is a\n    null terminator. Does not check for null terminators inside the string.\n\n    Note that memory is not freed by this operation.\n    \"\"\"\n    if len >= _alloc then\n      _size = len.min(_alloc)\n      reserve(_alloc + 1)\n    else\n      _size = len.min(_alloc - 1)\n    end\n\n    _set(_size, 0)\n\n  fun ref trim_in_place(from: USize = 0, to: USize = -1) =>\n    \"\"\"\n    Trim the string to a portion of itself, covering `from` until `to`.\n    Unlike slice, the operation does not allocate a new string nor copy\n    elements.\n    \"\"\"\n    let last = _size.min(to)\n    let offset = last.min(from)\n    let size' = last - offset\n\n    // use the new size' for alloc if we're not including the last used byte\n    // from the original data and only include the extra allocated bytes if\n    // we're including the last byte.\n    _alloc = if last == _size then _alloc - offset else size' end\n\n    _size = size'\n    _ptr = _ptr._offset(offset)\n\n  fun val trim(from: USize = 0, to: USize = -1): String val =>\n    \"\"\"\n    Return a shared portion of this string, covering `from` until `to`.\n    Both the original and the new string are immutable, as they share memory.\n    The operation does not allocate a new string pointer nor copy elements.\n    \"\"\"\n    let last = _size.min(to)\n    let offset = last.min(from)\n\n    recover\n      let size' = last - offset\n\n      // use the new size' for alloc if we're not including the last used byte\n      // from the original data and only include the extra allocated bytes if\n      // we're including the last byte.\n      let alloc = if last == _size then _alloc - offset else size' end\n\n      if size' > 0 then\n        from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc)\n      else\n        create()\n      end\n    end\n\n  fun iso chop(split_point: USize): (String iso^, String iso^) =>\n    \"\"\"\n    Chops the string in half at the split point requested and returns both\n    the left and right portions. The original string is trimmed in place and\n    returned as the right portion. If the split point is larger than the\n    string, the left portion is the original string and the right portion\n    is a new empty string.\n    Both strings are isolated and mutable, as they do not share memory.\n    The operation does not allocate a new string pointer nor copy elements.\n    \"\"\"\n    let start_ptr = _ptr\n    let size' = _size.min(split_point)\n    let alloc = if size' == _size then _alloc else split_point end\n\n    trim_in_place(split_point)\n\n    let left = recover\n      if size' > 0 then\n        from_cpointer(start_ptr._unsafe(), size', alloc)\n      else\n        create()\n      end\n    end\n\n    (consume left, consume this)\n\n  fun is_null_terminated(): Bool =>\n    \"\"\"\n    Return true if the string is null-terminated and safe to pass to an FFI\n    function that doesn't accept a size argument, expecting a null-terminator.\n    This method checks that there is a null byte just after the final position\n    of populated bytes in the string, but does not check for other null bytes\n    which may be present earlier in the content of the string.\n    If you need a null-terminated copy of this string, use the clone method.\n    \"\"\"\n    (_alloc > 0) and (_alloc != _size) and (_ptr._apply(_size) == 0)\n\n  fun utf32(offset: ISize): (U32, U8) ? =>\n    \"\"\"\n    Return a UTF32 representation of the character at the given offset and the\n    number of bytes needed to encode that character. If the offset does not\n    point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\n    replacement character) and a length of one. Raise an error if the offset is\n    out of bounds.\n    \"\"\"\n    let i = offset_to_index(offset)\n    let err: (U32, U8) = (0xFFFD, 1)\n\n    if i >= _size then error end\n    let c = _ptr._apply(i)\n\n    if c < 0x80 then\n      // 1-byte\n      (c.u32(), 1)\n    elseif c < 0xC2 then\n      // Stray continuation.\n      err\n    elseif c < 0xE0 then\n      // 2-byte\n      if (i + 1) >= _size then\n        // Not enough bytes.\n        err\n      else\n        let c2 = _ptr._apply(i + 1)\n        if (c2 and 0xC0) != 0x80 then\n          // Not a continuation byte.\n          err\n        else\n          (((c.u32() << 6) + c2.u32()) - 0x3080, 2)\n        end\n      end\n    elseif c < 0xF0 then\n      // 3-byte.\n      if (i + 2) >= _size then\n        // Not enough bytes.\n        err\n      else\n        let c2 = _ptr._apply(i + 1)\n        let c3 = _ptr._apply(i + 2)\n        if\n          // Not continuation bytes.\n          ((c2 and 0xC0) != 0x80) or\n          ((c3 and 0xC0) != 0x80) or\n          // Overlong encoding.\n          ((c == 0xE0) and (c2 < 0xA0))\n        then\n          err\n        else\n          (((c.u32() << 12) + (c2.u32() << 6) + c3.u32()) - 0xE2080, 3)\n        end\n      end\n    elseif c < 0xF5 then\n      // 4-byte.\n      if (i + 3) >= _size then\n        // Not enough bytes.\n        err\n      else\n        let c2 = _ptr._apply(i + 1)\n        let c3 = _ptr._apply(i + 2)\n        let c4 = _ptr._apply(i + 3)\n        if\n          // Not continuation bytes.\n          ((c2 and 0xC0) != 0x80) or\n          ((c3 and 0xC0) != 0x80) or\n          ((c4 and 0xC0) != 0x80) or\n          // Overlong encoding.\n          ((c == 0xF0) and (c2 < 0x90)) or\n          // UTF32 would be > 0x10FFFF.\n          ((c == 0xF4) and (c2 >= 0x90))\n        then\n          err\n        else\n          (((c.u32() << 18) +\n            (c2.u32() << 12) +\n            (c3.u32() << 6) +\n            c4.u32()) - 0x3C82080, 4)\n        end\n      end\n    else\n      // UTF32 would be > 0x10FFFF.\n      err\n    end\n\n  fun apply(i: USize): U8 ? =>\n    \"\"\"\n    Returns the i-th byte. Raise an error if the index is out of bounds.\n    \"\"\"\n    if i < _size then _ptr._apply(i) else error end\n\n  fun ref update(i: USize, value: U8): U8 ? =>\n    \"\"\"\n    Change the i-th byte. Raise an error if the index is out of bounds.\n    \"\"\"\n    if i < _size then\n      _set(i, value)\n    else\n      error\n    end\n\n  fun at_offset(offset: ISize): U8 ? =>\n    \"\"\"\n    Returns the byte at the given offset. Raise an error if the offset is out\n    of bounds.\n    \"\"\"\n    this(offset_to_index(offset))?\n\n  fun ref update_offset(offset: ISize, value: U8): U8 ? =>\n    \"\"\"\n    Changes a byte in the string, returning the previous byte at that offset.\n    Raise an error if the offset is out of bounds.\n    \"\"\"\n    this(offset_to_index(offset))? = value\n\n  fun clone(): String iso^ =>\n    \"\"\"\n    Returns a copy of the string. The resulting string is\n    null-terminated even if the original is not.\n    \"\"\"\n    let len = _size\n    let str = recover String(len) end\n    _ptr._copy_to(str._ptr._unsafe(), len)\n    str._size = len\n    str._set(len, 0)\n    str\n\n  fun find(s: String box, offset: ISize = 0, nth: USize = 0): ISize ? =>\n    \"\"\"\n    Return the index of the n-th instance of s in the string starting from the\n    beginning. Raise an error if there is no n-th occurrence of s or s is empty.\n    \"\"\"\n    var i = offset_to_index(offset)\n    var steps = nth + 1\n\n    while i < _size do\n      var j: USize = 0\n\n      let same = while j < s._size do\n        if _ptr._apply(i + j) != s._ptr._apply(j) then\n          break false\n        end\n        j = j + 1\n        true\n      else\n        false\n      end\n\n      if same and ((steps = steps - 1) == 1) then\n        return i.isize()\n      end\n\n      i = i + 1\n    end\n    error\n\n  fun rfind(s: String box, offset: ISize = -1, nth: USize = 0): ISize ? =>\n    \"\"\"\n    Return the index of n-th instance of `s` in the string starting from the\n    end. The `offset` represents the highest index to included in the search.\n    Raise an error if there is no n-th occurrence of `s` or `s` is empty.\n    \"\"\"\n    var i = (offset_to_index(offset) + 1) - s._size\n\n    var steps = nth + 1\n\n    while i < _size do\n      var j: USize = 0\n\n      let same = while j < s._size do\n        if _ptr._apply(i + j) != s._ptr._apply(j) then\n          break false\n        end\n        j = j + 1\n        true\n      else\n        false\n      end\n\n      if same and ((steps = steps - 1) == 1) then\n        return i.isize()\n      end\n\n      i = i - 1\n    end\n    error\n\n  fun contains(s: String box, offset: ISize = 0, nth: USize = 0): Bool =>\n    \"\"\"\n    Returns true if contains s as a substring, false otherwise.\n    \"\"\"\n    var i = offset_to_index(offset)\n    var steps = nth + 1\n\n    while i < _size do\n      var j: USize = 0\n\n      let same = while j < s._size do\n        if _ptr._apply(i + j) != s._ptr._apply(j) then\n          break false\n        end\n        j = j + 1\n        true\n      else\n        false\n      end\n\n      if same and ((steps = steps - 1) == 1) then\n        return true\n      end\n\n      i = i + 1\n    end\n    false\n\n  fun count(s: String box, offset: ISize = 0): USize =>\n    \"\"\"\n    Counts the non-overlapping occurrences of s in the string.\n    \"\"\"\n    let j: ISize = (_size - s.size()).isize()\n    var i: USize = 0\n    var k = offset\n\n    if j < 0 then\n      return 0\n    elseif (j == 0) and (this == s) then\n      return 1\n    end\n\n    try\n      while k <= j do\n        k = find(s, k)? + s.size().isize()\n        i = i + 1\n      end\n    end\n\n    i\n\n  fun at(s: String box, offset: ISize = 0): Bool =>\n    \"\"\"\n    Returns true if the substring s is present at the given offset.\n    \"\"\"\n    let i = offset_to_index(offset)\n\n    if (i + s.size()) <= _size then\n      @memcmp(_ptr._offset(i), s._ptr, s._size) == 0\n    else\n      false\n    end\n\n  fun ref delete(offset: ISize, len: USize = 1) =>\n    \"\"\"\n    Delete len bytes at the supplied offset, compacting the string in place.\n    \"\"\"\n    let i = offset_to_index(offset)\n\n    if i < _size then\n      let n = len.min(_size - i)\n      _size = _size - n\n      _ptr._offset(i)._delete(n, _size - i)\n      _set(_size, 0)\n    end\n\n  fun substring(from: ISize, to: ISize = ISize.max_value()): String iso^ =>\n    \"\"\"\n    Returns a substring. Index range [`from` .. `to`) is half-open.\n    Returns an empty string if nothing is in the range.\n\n    Note that this operation allocates a new string to be returned. For\n    similar operations that don't allocate a new string, see `trim` and\n    `trim_in_place`.\n    \"\"\"\n    let start = offset_to_index(from)\n    let finish = offset_to_index(to).min(_size)\n\n    if (start < _size) and (start < finish) then\n      let len = finish - start\n      let str = recover String(len) end\n      _ptr._offset(start)._copy_to(str._ptr._unsafe(), len)\n      str._size = len\n      str._set(len, 0)\n      str\n    else\n      recover String end\n    end\n\n  fun lower(): String iso^ =>\n    \"\"\"\n    Returns a lower case version of the string.\n    \"\"\"\n    let s = clone()\n    s.lower_in_place()\n    s\n\n  fun ref lower_in_place() =>\n    \"\"\"\n    Transforms the string to lower case. Currently only knows ASCII case.\n    \"\"\"\n    var i: USize = 0\n\n    while i < _size do\n      let c = _ptr._apply(i)\n\n      if (c >= 0x41) and (c <= 0x5A) then\n        _set(i, c + 0x20)\n      end\n\n      i = i + 1\n    end\n\n  fun upper(): String iso^ =>\n    \"\"\"\n    Returns an upper case version of the string. Currently only knows ASCII\n    case.\n    \"\"\"\n    let s = clone()\n    s.upper_in_place()\n    s\n\n  fun ref upper_in_place() =>\n    \"\"\"\n    Transforms the string to upper case.\n    \"\"\"\n    var i: USize = 0\n\n    while i < _size do\n      let c = _ptr._apply(i)\n\n      if (c >= 0x61) and (c <= 0x7A) then\n        _set(i, c - 0x20)\n      end\n\n      i = i + 1\n    end\n\n  fun reverse(): String iso^ =>\n    \"\"\"\n    Returns a reversed version of the string.\n    \"\"\"\n    let s = clone()\n    s.reverse_in_place()\n    s\n\n  fun ref reverse_in_place() =>\n    \"\"\"\n    Reverses the byte order in the string. This needs to be changed to handle\n    UTF-8 correctly.\n    \"\"\"\n    if _size > 1 then\n      var i: USize = 0\n      var j = _size - 1\n\n      while i < j do\n        let x = _ptr._apply(i)\n        _set(i, _ptr._apply(j))\n        _set(j, x)\n        i = i + 1\n        j = j - 1\n      end\n    end\n\n  fun ref push(value: U8) =>\n    \"\"\"\n    Add a byte to the end of the string.\n    \"\"\"\n    reserve(_size + 1)\n    _set(_size, value)\n    _size = _size + 1\n    _set(_size, 0)\n\n  fun ref pop(): U8 ? =>\n    \"\"\"\n    Remove a byte from the end of the string.\n    \"\"\"\n    if _size > 0 then\n      _size = _size - 1\n      _ptr._offset(_size)._delete(1, 0)\n    else\n      error\n    end\n\n  fun ref unshift(value: U8) =>\n    \"\"\"\n    Adds a byte to the beginning of the string.\n    \"\"\"\n    if value != 0 then\n      reserve(_size + 1)\n      @memmove(_ptr.usize() + 1, _ptr.usize(), _size + 1)\n      _set(0, value)\n      _size = _size + 1\n    else\n      _set(0, 0)\n      _size = 0\n    end\n\n  fun ref shift(): U8 ? =>\n    \"\"\"\n    Removes a byte from the beginning of the string.\n    \"\"\"\n    if _size > 0 then\n      let value = _ptr._apply(0)\n      @memmove(_ptr.usize(), _ptr.usize() + 1, _size)\n      _size = _size - 1\n      value\n    else\n      error\n    end\n\n  fun ref append(seq: ReadSeq[U8], offset: USize = 0, len: USize = -1) =>\n    \"\"\"\n    Append the elements from a sequence, starting from the given offset.\n    \"\"\"\n    if offset >= seq.size() then\n      return\n    end\n\n    let copy_len = len.min(seq.size() - offset)\n    reserve(_size + copy_len)\n\n    match seq\n    | let s: (String box | Array[U8] box) =>\n      s._copy_to(_ptr, copy_len, offset, _size)\n      _size = _size + copy_len\n      _set(_size, 0)\n    else\n      let cap = copy_len + offset\n      var i = offset\n\n      try\n        while i < cap do\n          push(seq(i)?)\n          i = i + 1\n        end\n      end\n    end\n\n  fun ref concat(iter: Iterator[U8], offset: USize = 0, len: USize = -1) =>\n    \"\"\"\n    Add len iterated bytes to the end of the string, starting from the given\n    offset.\n    \"\"\"\n    try\n      var n = USize(0)\n\n      while n < offset do\n        if iter.has_next() then\n          iter.next()?\n        else\n          return\n        end\n\n        n = n + 1\n      end\n\n      n = 0\n\n      while n < len do\n        if iter.has_next() then\n          push(iter.next()?)\n        else\n          return\n        end\n\n        n = n + 1\n      end\n    end\n\n  fun ref clear() =>\n    \"\"\"\n    Truncate the string to zero length.\n    \"\"\"\n    _set(0, 0)\n    _size = 0\n\n  fun insert(offset: ISize, that: String): String iso^ =>\n    \"\"\"\n    Returns a version of the string with the given string inserted at the given\n    offset.\n    \"\"\"\n    let s = clone()\n    s.insert_in_place(offset, that)\n    s\n\n  fun ref insert_in_place(offset: ISize, that: String box) =>\n    \"\"\"\n    Inserts the given string at the given offset. Appends the string if the\n    offset is out of bounds.\n    \"\"\"\n    reserve(_size + that._size)\n    let index = offset_to_index(offset).min(_size)\n    @memmove(_ptr.usize() + index + that._size,\n      _ptr.usize() + index, _size - index)\n    that._ptr._copy_to(_ptr._offset(index), that._size)\n    _size = _size + that._size\n    _set(_size, 0)\n\n  fun ref insert_byte(offset: ISize, value: U8) =>\n    \"\"\"\n    Inserts a byte at the given offset. Appends if the offset is out of bounds.\n    \"\"\"\n    reserve(_size + 1)\n    let index = offset_to_index(offset).min(_size)\n    @memmove(_ptr.usize() + index + 1, _ptr.usize() + index,\n      _size - index)\n    _set(index, value)\n    _size = _size + 1\n    _set(_size, 0)\n\n  fun cut(from: ISize, to: ISize = ISize.max_value()): String iso^ =>\n    \"\"\"\n    Returns a version of the string with the given range deleted.\n    Index range [`from` .. `to`) is half-open.\n    \"\"\"\n    let s = clone()\n    s.cut_in_place(from, to)\n    s\n\n  fun ref cut_in_place(from: ISize, to: ISize = ISize.max_value()) =>\n    \"\"\"\n    Cuts the given range out of the string.\n    Index range [`from` .. `to`) is half-open.\n    \"\"\"\n    let start = offset_to_index(from)\n    let finish = offset_to_index(to).min(_size)\n\n    if (start < _size) and (start < finish) and (finish <= _size) then\n      let fragment_len = finish - start\n      let new_size = _size - fragment_len\n      var i = start\n\n      while i < new_size do\n        _set(i, _ptr._apply(i + fragment_len))\n        i = i + 1\n      end\n\n      _size = _size - fragment_len\n      _set(_size, 0)\n    end\n\n  fun ref remove(s: String box): USize =>\n    \"\"\"\n    Remove all instances of s from the string. Returns the count of removed\n    instances.\n    \"\"\"\n    var i: ISize = 0\n    var n: USize = 0\n\n    try\n      while true do\n        i = find(s, i)?\n        cut_in_place(i, i + s.size().isize())\n        n = n + 1\n      end\n    end\n    n\n\n  fun ref replace(from: String box, to: String box, n: USize = 0): USize =>\n    \"\"\"\n    Replace up to n occurrences of `from` in `this` with `to`. If n is 0, all\n    occurrences will be replaced. Returns the count of replaced occurrences.\n    \"\"\"\n    let from_len = from.size().isize()\n    let to_len = to.size().isize()\n    var offset = ISize(0)\n    var occur = USize(0)\n\n    try\n      while true do\n        offset = find(from, offset)?\n        cut_in_place(offset, offset + from_len)\n        insert_in_place(offset, to)\n        offset = offset + to_len\n        occur = occur + 1\n\n        if (n > 0) and (occur >= n) then\n          break\n        end\n      end\n    end\n    occur\n\n  fun split_by(\n    delim: String,\n    n: USize = USize.max_value())\n    : Array[String] iso^\n  =>\n    \"\"\"\n    Split the string into an array of strings that are delimited by `delim` in\n    the original string. If `n > 0`, then the split count is limited to n.\n\n    Adjacent delimiters result in a zero length entry in the array. For\n    example, `\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]`.\n\n    An empty delimiter results in an array that contains a single element equal\n    to the whole string.\n    \"\"\"\n    let delim_size = ISize.from[USize](delim.size())\n    let total_size = ISize.from[USize](size())\n\n    let result = recover Array[String] end\n    var current = ISize(0)\n\n    while ((result.size() + 1) < n) and (current < total_size) do\n      try\n        let delim_start = find(delim where offset = current)?\n        result.push(substring(current, delim_start))\n        current = delim_start + delim_size\n      else break end\n    end\n    result.push(substring(current))\n    consume result\n\n  fun split(delim: String = \" \\t\\v\\f\\r\\n\", n: USize = 0): Array[String] iso^ =>\n    \"\"\"\n    Split the string into an array of strings. Any character in the delimiter\n    string is accepted as a delimiter. If `n > 0`, then the split count is\n    limited to n.\n\n    Adjacent delimiters result in a zero length entry in the array. For\n    example, `\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]`.\n    \"\"\"\n    let result = recover Array[String] end\n\n    if _size > 0 then\n      let chars = Array[U32](delim.size())\n\n      for rune in delim.runes() do\n        chars.push(rune)\n      end\n\n      var cur = recover String end\n      var i = USize(0)\n      var occur = USize(0)\n\n      try\n        while i < _size do\n          (let c, let len) = utf32(i.isize())?\n\n          if chars.contains(c) then\n            // If we find a delimiter, add the current string to the array.\n            occur = occur + 1\n\n            if (n > 0) and (occur >= n) then\n              break\n            end\n\n            result.push(cur = recover String end)\n          else\n            // Add bytes to the current string.\n            var j = U8(0)\n\n            while j < len do\n              cur.push(_ptr._apply(i + j.usize()))\n              j = j + 1\n            end\n          end\n\n          i = i + len.usize()\n        end\n      end\n\n      // Add all remaining bytes to the current string.\n      while i < _size do\n        cur.push(_ptr._apply(i))\n        i = i + 1\n      end\n\n      result.push(consume cur)\n    end\n\n    consume result\n\n  fun ref strip(s: String box = \" \\t\\v\\f\\r\\n\") =>\n    \"\"\"\n    Remove all leading and trailing characters from the string that are in s.\n    \"\"\"\n    this .> lstrip(s) .> rstrip(s)\n\n  fun ref rstrip(s: String box = \" \\t\\v\\f\\r\\n\") =>\n    \"\"\"\n    Remove all trailing characters within the string that are in s. By default,\n    trailing whitespace is removed.\n    \"\"\"\n    if _size > 0 then\n      let chars = Array[U32](s.size())\n      var i = _size - 1\n      var truncate_at = _size\n\n      for rune in s.runes() do\n        chars.push(rune)\n      end\n\n      repeat\n        try\n          match utf32(i.isize())?\n          | (0xFFFD, 1) => None\n          | (let c: U32, _) =>\n            if not chars.contains(c) then\n              break\n            end\n        truncate_at = i\n          end\n        else\n          break\n        end\n      until (i = i - 1) == 0 end\n\n      truncate(truncate_at)\n    end\n\n  fun ref lstrip(s: String box = \" \\t\\v\\f\\r\\n\") =>\n    \"\"\"\n    Remove all leading characters within the string that are in s. By default,\n    leading whitespace is removed.\n    \"\"\"\n    if _size > 0 then\n      let chars = Array[U32](s.size())\n      var i = USize(0)\n\n      for rune in s.runes() do\n        chars.push(rune)\n      end\n\n      while i < _size do\n        try\n          (let c, let len) = utf32(i.isize())?\n          if not chars.contains(c) then\n            break\n          end\n          i = i + len.usize()\n        else\n          break\n        end\n      end\n\n      if i > 0 then\n        delete(0, i)\n      end\n    end\n\n  fun iso _append(s: String box): String iso^ =>\n    let len = _size + s._size\n    reserve(len)\n    if s.is_null_terminated() then\n      s._copy_to(_ptr._unsafe(), s._size + 1, 0, _size)\n    else\n      s._copy_to(_ptr._unsafe(), s._size, 0, _size)\n    end\n    _size = len\n    consume this\n\n  fun add(that: String box): String =>\n    \"\"\"\n    Return a string that is a concatenation of this and that.\n    \"\"\"\n    let len = _size + that._size\n    let s = recover String(len) end\n    (consume s)._append(this)._append(that)\n\n  fun join(data: Iterator[Stringable]): String iso^ =>\n    \"\"\"\n    Return a string that is a concatenation of the strings in data, using this\n    as a separator.\n    \"\"\"\n    var buf = recover String end\n    var first = true\n    for v in data do\n      if first then\n        first = false\n      else\n        buf = (consume buf)._append(this)\n      end\n      buf.append(v.string())\n    end\n    buf\n\n  fun compare(that: String box): Compare =>\n    \"\"\"\n    Lexically compare two strings.\n    \"\"\"\n    compare_sub(that, _size.max(that._size))\n\n  fun compare_sub(\n    that: String box,\n    n: USize,\n    offset: ISize = 0,\n    that_offset: ISize = 0,\n    ignore_case: Bool = false)\n    : Compare\n  =>\n    \"\"\"\n    Lexically compare at most `n` bytes of the substring of `this` starting at\n    `offset` with the substring of `that` starting at `that_offset`. The\n    comparison is case sensitive unless `ignore_case` is `true`.\n\n    If the substring of `this` is a proper prefix of the substring of `that`,\n    then `this` is `Less` than `that`. Likewise, if `that` is a proper prefix of\n    `this`, then `this` is `Greater` than `that`.\n\n    Both `offset` and `that_offset` can be negative, in which case the offsets\n    are computed from the end of the string.\n\n    If `n + offset` is greater than the length of `this`, or `n + that_offset`\n    is greater than the length of `that`, then the number of positions compared\n    will be reduced to the length of the longest substring.\n\n    Needs to be made UTF-8 safe.\n    \"\"\"\n    var j: USize = offset_to_index(offset)\n    var k: USize = that.offset_to_index(that_offset)\n    var i = n.min((_size - j).max(that._size - k))\n\n    while i > 0 do\n      // this and that are equal up to this point\n      if j >= _size then\n        // this is shorter\n        return Less\n      elseif k >= that._size then\n        // that is shorter\n        return Greater\n      end\n\n      let c1 = _ptr._apply(j)\n      let c2 = that._ptr._apply(k)\n      if\n        not ((c1 == c2) or\n          (ignore_case and ((c1 or 0x20) == (c2 or 0x20)) and\n            ((c1 or 0x20) >= 'a') and ((c1 or 0x20) <= 'z')))\n      then\n        // this and that differ here\n        return if c1.i32() > c2.i32() then Greater else Less end\n      end\n\n      j = j + 1\n      k = k + 1\n      i = i - 1\n    end\n    Equal\n\n  fun eq(that: String box): Bool =>\n    \"\"\"\n    Returns true if the two strings have the same contents.\n    \"\"\"\n    if _size == that._size then\n      @memcmp(_ptr, that._ptr, _size) == 0\n    else\n      false\n    end\n\n  fun lt(that: String box): Bool =>\n    \"\"\"\n    Returns true if this is lexically less than that. Needs to be made UTF-8\n    safe.\n    \"\"\"\n    let len = _size.min(that._size)\n    var i: USize = 0\n\n    while i < len do\n      if _ptr._apply(i) < that._ptr._apply(i) then\n        return true\n      elseif _ptr._apply(i) > that._ptr._apply(i) then\n        return false\n      end\n      i = i + 1\n    end\n    _size < that._size\n\n  fun le(that: String box): Bool =>\n    \"\"\"\n    Returns true if this is lexically less than or equal to that. Needs to be\n    made UTF-8 safe.\n    \"\"\"\n    let len = _size.min(that._size)\n    var i: USize = 0\n\n    while i < len do\n      if _ptr._apply(i) < that._ptr._apply(i) then\n        return true\n      elseif _ptr._apply(i) > that._ptr._apply(i) then\n        return false\n      end\n      i = i + 1\n    end\n    _size <= that._size\n\n  fun offset_to_index(i: ISize): USize =>\n    if i < 0 then i.usize() + _size else i.usize() end\n\n  fun bool(): Bool ? =>\n    match lower()\n    | \"true\" => true\n    | \"false\" => false\n    else\n      error\n    end\n\n  fun i8(base: U8 = 0): I8 ? => _to_int[I8](base)?\n  fun i16(base: U8 = 0): I16 ? => _to_int[I16](base)?\n  fun i32(base: U8 = 0): I32 ? => _to_int[I32](base)?\n  fun i64(base: U8 = 0): I64 ? => _to_int[I64](base)?\n  fun i128(base: U8 = 0): I128 ? => _to_int[I128](base)?\n  fun ilong(base: U8 = 0): ILong ? => _to_int[ILong](base)?\n  fun isize(base: U8 = 0): ISize ? => _to_int[ISize](base)?\n  fun u8(base: U8 = 0): U8 ? => _to_int[U8](base)?\n  fun u16(base: U8 = 0): U16 ? => _to_int[U16](base)?\n  fun u32(base: U8 = 0): U32 ? => _to_int[U32](base)?\n  fun u64(base: U8 = 0): U64 ? => _to_int[U64](base)?\n  fun u128(base: U8 = 0): U128 ? => _to_int[U128](base)?\n  fun ulong(base: U8 = 0): ULong ? => _to_int[ULong](base)?\n  fun usize(base: U8 = 0): USize ? => _to_int[USize](base)?\n\n  fun _to_int[A: ((Signed | Unsigned) & Integer[A] val)](base: U8): A ? =>\n    \"\"\"\n    Convert the *whole* string to the specified type.\n    If there are any other characters in the string, or the integer found is\n    out of range for the target type then an error is thrown.\n    \"\"\"\n    (let v, let d) = read_int[A](0, base)?\n    // Check the whole string is used\n    if (d == 0) or (d.usize() != _size) then error end\n    v\n\n  fun read_int[A: ((Signed | Unsigned) & Integer[A] val)](\n    offset: ISize = 0,\n    base: U8 = 0)\n    : (A, USize /* chars used */) ?\n  =>\n    \"\"\"\n    Read an integer from the specified location in this string. The integer\n    value read and the number of characters consumed are reported.\n    The base parameter specifies the base to use, 0 indicates using the prefix,\n    if any, to detect base 2, 10 or 16.\n    If no integer is found at the specified location, then (0, 0) is returned,\n    since no characters have been used.\n    An integer out of range for the target type throws an error.\n    A leading minus is allowed for signed integer types.\n    Underscore characters are allowed throughout the integer and are ignored.\n    \"\"\"\n    let start_index = offset_to_index(offset)\n    var index = start_index\n    var value: A = 0\n    var had_digit = false\n\n    // Check for leading minus\n    let minus = (index < _size) and (_ptr._apply(index) == '-')\n    if minus then\n      if A(-1) > A(0) then\n        // We're reading an unsigned type, negative not allowed, int not found\n        return (0, 0)\n      end\n\n      index = index + 1\n    end\n\n    (let base', let base_chars) = _read_int_base[A](base, index)\n    index = index + base_chars\n\n    // Process characters\n    while index < _size do\n      let char: A = A(0).from[U8](_ptr._apply(index))\n      if char == '_' then\n        index = index + 1\n        continue\n      end\n\n      let digit =\n        if (char >= '0') and (char <= '9') then\n          char - '0'\n        elseif (char >= 'A') and (char <= 'Z') then\n          (char - 'A') + 10\n        elseif (char >= 'a') and (char <= 'z') then\n          (char - 'a') + 10\n        else\n          break\n        end\n\n      if digit >= base' then\n        break\n      end\n\n      let new_value: A = if minus then\n        (value * base') - digit\n      else\n        (value * base') + digit\n      end\n\n      if (new_value / base') != value then\n        // Overflow\n        error\n      end\n\n      value = new_value\n      had_digit = true\n      index = index + 1\n    end\n\n    // Check result\n    if not had_digit then\n      // No integer found\n      return (0, 0)\n    end\n\n    // Success\n    (value, index - start_index)\n\n  fun _read_int_base[A: ((Signed | Unsigned) & Integer[A] val)](\n    base: U8,\n    index: USize)\n    : (A, USize /* chars used */)\n  =>\n    \"\"\"\n    Determine the base of an integer starting at the specified index.\n    If a non-0 base is given use that. If given base is 0 read the base\n    specifying prefix, if any, to detect base 2 or 16.\n    If no base is specified and no prefix is found default to decimal.\n    Note that a leading 0 does NOT imply octal.\n    Report the base found and the number of characters in the prefix.\n    \"\"\"\n    if base > 0 then\n      return (A(0).from[U8](base), 0)\n    end\n\n    // Determine base from prefix\n    if (index + 2) >= _size then\n      // Not enough characters, must be decimal\n      return (10, 0)\n    end\n\n    let lead_char = _ptr._apply(index)\n    let base_char = _ptr._apply(index + 1) and not 0x20\n\n    if (lead_char == '0') and (base_char == 'B') then\n      return (2, 2)\n    end\n\n    if (lead_char == '0') and (base_char == 'X') then\n      return (16, 2)\n    end\n\n    // No base specified, default to decimal\n    (10, 0)\n\n  fun f32(offset: ISize = 0): F32 =>\n    let index = offset_to_index(offset)\n\n    if index < _size then\n      @strtof(_ptr._offset(index), 0)\n    else\n      F32(0)\n    end\n\n  fun f64(offset: ISize = 0): F64 =>\n    let index = offset_to_index(offset)\n\n    if index < _size then\n      @strtod(_ptr._offset(index), 0)\n    else\n      F64(0)\n    end\n\n  fun hash(): USize =>\n    @ponyint_hash_block[USize](_ptr, _size)\n\n  fun hash64(): U64 =>\n    @ponyint_hash_block64[U64](_ptr, _size)\n\n  fun string(): String iso^ =>\n    clone()\n\n  fun values(): StringBytes^ =>\n    \"\"\"\n    Return an iterator over the bytes in the string.\n    \"\"\"\n    StringBytes(this)\n\n  fun runes(): StringRunes^ =>\n    \"\"\"\n    Return an iterator over the codepoints in the string.\n    \"\"\"\n    StringRunes(this)\n\n  fun ref _set(i: USize, value: U8): U8 =>\n    \"\"\"\n    Unsafe update, used internally.\n    \"\"\"\n    _ptr._update(i, value)\n\nclass StringBytes is Iterator[U8]\n  let _string: String box\n  var _i: USize\n\n  new create(string: String box) =>\n    _string = string\n    _i = 0\n\n  fun has_next(): Bool =>\n    _i < _string.size()\n\n  fun ref next(): U8 ? =>\n    _string(_i = _i + 1)?\n\nclass StringRunes is Iterator[U32]\n  let _string: String box\n  var _i: USize\n\n  new create(string: String box) =>\n    _string = string\n    _i = 0\n\n  fun has_next(): Bool =>\n    _i < _string.size()\n\n  fun ref next(): U32 ? =>\n    (let rune, let len) = _string.utf32(_i.isize())?\n    _i = _i + len.usize()\n    rune\n\nprimitive _UTF32Encoder\n  fun encode(value: U32): (USize, U8, U8, U8, U8) =>\n    \"\"\"\n    Encode the code point into UTF-8. It returns a tuple with the size of the\n    encoded data and then the data.\n    \"\"\"\n    if value < 0x80 then\n      (1, value.u8(), 0, 0, 0)\n    elseif value < 0x800 then\n      ( 2,\n        ((value >> 6) or 0xC0).u8(),\n        ((value and 0x3F) or 0x80).u8(),\n        0,\n        0\n      )\n    elseif value < 0xD800 then\n      ( 3,\n        ((value >> 12) or 0xE0).u8(),\n        (((value >> 6) and 0x3F) or 0x80).u8(),\n        ((value and 0x3F) or 0x80).u8(),\n        0\n      )\n    elseif value < 0xE000 then\n      // UTF-16 surrogate pairs are not allowed.\n      (3, 0xEF, 0xBF, 0xBD, 0)\n    elseif value < 0x10000 then\n      ( 3,\n        ((value >> 12) or 0xE0).u8(),\n        (((value >> 6) and 0x3F) or 0x80).u8(),\n        ((value and 0x3F) or 0x80).u8(),\n        0\n      )\n    elseif value < 0x110000 then\n      ( 4,\n        ((value >> 18) or 0xF0).u8(),\n        (((value >> 12) and 0x3F) or 0x80).u8(),\n        (((value >> 6) and 0x3F) or 0x80).u8(),\n        ((value and 0x3F) or 0x80).u8()\n      )\n    else\n      // Code points beyond 0x10FFFF are not allowed.\n      (3, 0xEF, 0xBF, 0xBD, 0)\n    end",
            "title": "string.pony"
        },
        {
            "location": "/src/builtin/stdin/",
            "text": "use @pony_asio_event_create[AsioEventID](\n  owner: AsioEventNotify,\n  fd: U32,\n  flags: U32,\n  nsec: U64,\n  noisy: Bool)\n\nuse @pony_asio_event_unsubscribe[None](event: AsioEventID)\nuse @pony_asio_event_destroy[None](event: AsioEventID)\n\ninterface InputNotify\n  \"\"\"\n  Notification for data arriving via an input stream.\n  \"\"\"\n  fun ref apply(data: Array[U8] iso) =>\n    \"\"\"\n    Called when data is available on the stream.\n    \"\"\"\n    None\n\n  fun ref dispose() =>\n    \"\"\"\n    Called when no more data will arrive on the stream.\n    \"\"\"\n    None\n\ninterface tag DisposableActor\n  \"\"\"\n  An interface used to asynchronously dispose of an actor.\n  \"\"\"\n  be dispose()\n\ninterface tag InputStream\n  \"\"\"\n  Asynchronous access to some input stream.\n  \"\"\"\n  be apply(notify: (InputNotify iso | None), chunk_size: USize = 32)\n    \"\"\"\n    Set the notifier. Optionally, also sets the chunk size, dictating the\n    maximum number of bytes of each chunk that will be passed to the notifier.\n    \"\"\"\n\n  be dispose() =>\n    \"\"\"\n    Clear the notifier in order to shut down input.\n    \"\"\"\n    None\n\nactor Stdin\n  \"\"\"\n  Asynchronous access to stdin. The constructor is private to ensure that\n  access is provided only via an environment.\n\n  Reading from stdin is done by registering an `InputNotify`:\n\n  ```pony\n  actor Main\n    new create(env: Env) =>\n      // do not forget to call `env.input.dispose` at some point\n      env.input(\n        object iso is InputNotify\n          fun ref apply(data: Array[U8] iso) =>\n            env.out.write(String.from_iso_array(consume data))\n\n          fun ref dispose() =>\n            env.out.print(\"Done.\")\n        end,\n        512)\n  ```\n\n  **Note:** For reading user input from a terminal, use the [readline](readline--index) package.\n  \"\"\"\n  var _notify: (InputNotify | None) = None\n  var _chunk_size: USize = 32\n  var _event: AsioEventID = AsioEvent.none()\n  let _use_event: Bool\n\n  new _create(use_event: Bool) =>\n    \"\"\"\n    Create an asynchronous stdin provider.\n    \"\"\"\n    _use_event = use_event\n\n  be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) =>\n    \"\"\"\n    Set the notifier. Optionally, also sets the chunk size, dictating the\n    maximum number of bytes of each chunk that will be passed to the notifier.\n    \"\"\"\n    _set_notify(consume notify)\n    _chunk_size = chunk_size\n\n  be dispose() =>\n    \"\"\"\n    Clear the notifier in order to shut down input.\n    \"\"\"\n    _set_notify(None)\n\n  fun ref _set_notify(notify: (InputNotify iso | None)) =>\n    \"\"\"\n    Set the notifier.\n    \"\"\"\n    if notify is None then\n      if _use_event and not _event.is_null() then\n        // Unsubscribe the event.\n        @pony_asio_event_unsubscribe(_event)\n        _event = AsioEvent.none()\n      end\n    elseif _notify is None then\n      if _use_event then\n        // Create a new event.\n        _event = @pony_asio_event_create(this, 0, AsioEvent.read(), 0, true)\n      else\n        // Start the read loop.\n        _loop_read()\n      end\n    end\n\n    try (_notify as InputNotify).dispose() end\n    _notify = consume notify\n\n  be _loop_read() =>\n    \"\"\"\n    If we are able to read from stdin, schedule another read.\n    \"\"\"\n    if _read() then\n      _loop_read()\n    end\n\n  be _event_notify(event: AsioEventID, flags: U32, arg: U32) =>\n    \"\"\"\n    When the event fires, read from stdin.\n    \"\"\"\n    if AsioEvent.disposable(flags) then\n      @pony_asio_event_destroy(event)\n    elseif (_event is event) and AsioEvent.readable(flags) then\n      _read()\n    end\n\n  be _read_again() =>\n    \"\"\"\n    Resume reading.\n    \"\"\"\n    _read()\n\n  fun ref _read(): Bool =>\n    \"\"\"\n    Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send\n    ourself a resume message and stop reading to avoid starving other actors.\n    \"\"\"\n    try\n      let notify = _notify as InputNotify\n      var sum: USize = 0\n\n      while true do\n        let chunk_size = _chunk_size\n        var data = recover Array[U8] .> undefined(chunk_size) end\n        var again: Bool = false\n\n        let len =\n          @pony_os_stdin_read[USize](data.cpointer(), data.space(),\n            addressof again)\n\n        match len\n        | -1 =>\n          // Error, possibly would block. Try again.\n          return true\n        | 0 =>\n          // EOF. Close everything, stop reading.\n          _close_event()\n          notify.dispose()\n          _notify = None\n          return false\n        end\n\n        data.truncate(len)\n        notify(consume data)\n\n        if not again then\n          // Not allowed to call pony_os_stdin_read again yet, exit loop.\n          return true\n        end\n\n        sum = sum + len\n\n        if sum > (1 << 12) then\n          if _use_event then\n            _read_again()\n          end\n\n          break\n        end\n      end\n      true\n    else\n      // No notifier. Stop reading.\n      _close_event()\n      false\n    end\n\n    fun ref _close_event() =>\n      \"\"\"\n      Close the event.\n      \"\"\"\n      if not _event.is_null() then\n        @pony_asio_event_unsubscribe(_event)\n        _event = AsioEvent.none()\n      end",
            "title": "stdin.pony"
        },
        {
            "location": "/src/builtin/std_stream/",
            "text": "type ByteSeq is (String | Array[U8] val)\n\ninterface val ByteSeqIter\n  \"\"\"\n  Accept an iterable collection of String or Array[U8] val.\n  \"\"\"\n  fun values(): Iterator[this->ByteSeq box]\n\ninterface tag OutStream\n  \"\"\"\n  Asnychronous access to some output stream.\n  \"\"\"\n  be print(data: ByteSeq)\n    \"\"\"\n    Print some bytes and insert a newline afterwards.\n    \"\"\"\n\n  be write(data: ByteSeq)\n    \"\"\"\n    Print some bytes without inserting a newline afterwards.\n    \"\"\"\n\n  be printv(data: ByteSeqIter)\n    \"\"\"\n    Print an iterable collection of ByteSeqs.\n    \"\"\"\n\n  be writev(data: ByteSeqIter)\n    \"\"\"\n    Write an iterable collection of ByteSeqs.\n    \"\"\"\n\nactor StdStream\n  \"\"\"\n  Asynchronous access to stdout and stderr. The constructors are private to\n  ensure that access is provided only via an environment.\n  \"\"\"\n  var _stream: Pointer[None]\n\n  new _out() =>\n    \"\"\"\n    Create an async stream for stdout.\n    \"\"\"\n    _stream = @pony_os_stdout[Pointer[None]]()\n\n  new _err() =>\n    \"\"\"\n    Create an async stream for stderr.\n    \"\"\"\n    _stream = @pony_os_stderr[Pointer[None]]()\n\n  be print(data: ByteSeq) =>\n    \"\"\"\n    Print some bytes and insert a newline afterwards.\n    \"\"\"\n    _print(data)\n\n  be write(data: ByteSeq) =>\n    \"\"\"\n    Print some bytes without inserting a newline afterwards.\n    \"\"\"\n    _write(data)\n\n  be printv(data: ByteSeqIter) =>\n    \"\"\"\n    Print an iterable collection of ByteSeqs.\n    \"\"\"\n    for bytes in data.values() do\n      _print(bytes)\n    end\n\n  be writev(data: ByteSeqIter) =>\n    \"\"\"\n    Write an iterable collection of ByteSeqs.\n    \"\"\"\n    for bytes in data.values() do\n      _write(bytes)\n    end\n\n  fun ref _write(data: ByteSeq) =>\n    \"\"\"\n    Write the bytes without explicitly flushing.\n    \"\"\"\n    @pony_os_std_write[None](_stream, data.cpointer(), data.size())\n\n  fun ref _print(data: ByteSeq) =>\n    \"\"\"\n    Write the bytes and a newline without explicitly flushing.\n    \"\"\"\n    @pony_os_std_print[None](_stream, data.cpointer(), data.size())",
            "title": "std_stream.pony"
        },
        {
            "location": "/src/builtin/source_loc/",
            "text": "interface val SourceLoc\n  \"\"\"\n  Represents a location in a Pony source file, as reported by `__loc`.\n  \"\"\"\n  fun file(): String\n    \"\"\"\n    Name and path of source file.\n    \"\"\"\n\n  fun type_name(): String\n    \"\"\"\n    Name of nearest class, actor, primitive, struct, interface, or trait.\n    \"\"\"\n\n  fun method_name(): String\n    \"\"\"\n    Name of containing method.\n    \"\"\"\n\n  fun line(): USize\n    \"\"\"\n    Line number within file.\n    Line numbers start at 1.\n    \"\"\"\n\n  fun pos(): USize\n    \"\"\"\n    Character position on line.\n    Character positions start at 1.\n    \"\"\"",
            "title": "source_loc.pony"
        },
        {
            "location": "/src/builtin/signed/",
            "text": "primitive I8 is _SignedInteger[I8, U8]\n  new create(value: I8) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.i8()\n\n  new min_value() => -0x80\n  new max_value() => 0x7F\n\n  fun abs(): U8 => if this < 0 then (-this).u8() else this.u8() end\n  fun bit_reverse(): I8 => @\"llvm.bitreverse.i8\"[I8](this)\n  fun bswap(): I8 => this\n  fun popcount(): U8 => @\"llvm.ctpop.i8\"[U8](this)\n  fun clz(): U8 => @\"llvm.ctlz.i8\"[U8](this, false)\n  fun ctz(): U8 => @\"llvm.cttz.i8\"[U8](this, false)\n\n  fun clz_unsafe(): U8 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i8\"[U8](this, true)\n\n  fun ctz_unsafe(): U8 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i8\"[U8](this, true)\n\n  fun bitwidth(): U8 => 8\n\n  fun min(y: I8): I8 => if this < y then this else y end\n  fun max(y: I8): I8 => if this > y then this else y end\n\n  fun addc(y: I8): (I8, Bool) =>\n    @\"llvm.sadd.with.overflow.i8\"[(I8, Bool)](this, y)\n\n  fun subc(y: I8): (I8, Bool) =>\n    @\"llvm.ssub.with.overflow.i8\"[(I8, Bool)](this, y)\n\n  fun mulc(y: I8): (I8, Bool) =>\n    @\"llvm.smul.with.overflow.i8\"[(I8, Bool)](this, y)\n\nprimitive I16 is _SignedInteger[I16, U16]\n  new create(value: I16) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.i16()\n\n  new min_value() => -0x8000\n  new max_value() => 0x7FFF\n\n  fun abs(): U16 => if this < 0 then (-this).u16() else this.u16() end\n  fun bit_reverse(): I16 => @\"llvm.bitreverse.i16\"[I16](this)\n  fun bswap(): I16 => @\"llvm.bswap.i16\"[I16](this)\n  fun popcount(): U16 => @\"llvm.ctpop.i16\"[U16](this)\n  fun clz(): U16 => @\"llvm.ctlz.i16\"[U16](this, false)\n  fun ctz(): U16 => @\"llvm.cttz.i16\"[U16](this, false)\n\n  fun clz_unsafe(): U16 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i16\"[U16](this, true)\n\n  fun ctz_unsafe(): U16 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i16\"[U16](this, true)\n\n  fun bitwidth(): U16 => 16\n\n  fun min(y: I16): I16 => if this < y then this else y end\n  fun max(y: I16): I16 => if this > y then this else y end\n\n  fun addc(y: I16): (I16, Bool) =>\n    @\"llvm.sadd.with.overflow.i16\"[(I16, Bool)](this, y)\n\n  fun subc(y: I16): (I16, Bool) =>\n    @\"llvm.ssub.with.overflow.i16\"[(I16, Bool)](this, y)\n\n  fun mulc(y: I16): (I16, Bool) =>\n    @\"llvm.smul.with.overflow.i16\"[(I16, Bool)](this, y)\n\nprimitive I32 is _SignedInteger[I32, U32]\n  new create(value: I32) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.i32()\n\n  new min_value() => -0x8000_0000\n  new max_value() => 0x7FFF_FFFF\n\n  fun abs(): U32 => if this < 0 then (-this).u32() else this.u32() end\n  fun bit_reverse(): I32 => @\"llvm.bitreverse.i32\"[I32](this)\n  fun bswap(): I32 => @\"llvm.bswap.i32\"[I32](this)\n  fun popcount(): U32 => @\"llvm.ctpop.i32\"[U32](this)\n  fun clz(): U32 => @\"llvm.ctlz.i32\"[U32](this, false)\n  fun ctz(): U32 => @\"llvm.cttz.i32\"[U32](this, false)\n\n  fun clz_unsafe(): U32 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i32\"[U32](this, true)\n\n  fun ctz_unsafe(): U32 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i32\"[U32](this, true)\n\n  fun bitwidth(): U32 => 32\n\n  fun min(y: I32): I32 => if this < y then this else y end\n  fun max(y: I32): I32 => if this > y then this else y end\n\n  fun addc(y: I32): (I32, Bool) =>\n    @\"llvm.sadd.with.overflow.i32\"[(I32, Bool)](this, y)\n\n  fun subc(y: I32): (I32, Bool) =>\n    @\"llvm.ssub.with.overflow.i32\"[(I32, Bool)](this, y)\n\n  fun mulc(y: I32): (I32, Bool) =>\n    @\"llvm.smul.with.overflow.i32\"[(I32, Bool)](this, y)\n\nprimitive I64 is _SignedInteger[I64, U64]\n  new create(value: I64) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.i64()\n\n  new min_value() => -0x8000_0000_0000_0000\n  new max_value() => 0x7FFF_FFFF_FFFF_FFFF\n\n  fun abs(): U64 => if this < 0 then (-this).u64() else this.u64() end\n  fun bit_reverse(): I64 => @\"llvm.bitreverse.i64\"[I64](this)\n  fun bswap(): I64 => @\"llvm.bswap.i64\"[I64](this)\n  fun popcount(): U64 => @\"llvm.ctpop.i64\"[U64](this)\n  fun clz(): U64 => @\"llvm.ctlz.i64\"[U64](this, false)\n  fun ctz(): U64 => @\"llvm.cttz.i64\"[U64](this, false)\n\n  fun clz_unsafe(): U64 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i64\"[U64](this, true)\n\n  fun ctz_unsafe(): U64 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i64\"[U64](this, true)\n\n  fun bitwidth(): U64 => 64\n\n  fun min(y: I64): I64 => if this < y then this else y end\n  fun max(y: I64): I64 => if this > y then this else y end\n  fun hash(): USize => u64().hash()\n\n  fun addc(y: I64): (I64, Bool) =>\n    @\"llvm.sadd.with.overflow.i64\"[(I64, Bool)](this, y)\n\n  fun subc(y: I64): (I64, Bool) =>\n    @\"llvm.ssub.with.overflow.i64\"[(I64, Bool)](this, y)\n\n  fun mulc(y: I64): (I64, Bool) =>\n    _SignedCheckedArithmetic._mulc[U64, I64](this, y)\n\n\nprimitive ILong is _SignedInteger[ILong, ULong]\n  new create(value: ILong) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.ilong()\n\n  new min_value() =>\n    ifdef ilp32 or llp64 then\n      -0x8000_0000\n    else\n      -0x8000_0000_0000_0000\n    end\n\n  new max_value() =>\n    ifdef ilp32 or llp64 then\n      0x7FFF_FFFF\n    else\n      0x7FFF_FFFF_FFFF_FFFF\n    end\n\n  fun abs(): ULong => if this < 0 then (-this).ulong() else this.ulong() end\n\n  fun bit_reverse(): ILong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.bitreverse.i32\"[ILong](this)\n    else\n      @\"llvm.bitreverse.i64\"[ILong](this)\n    end\n\n  fun bswap(): ILong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.bswap.i32\"[ILong](this)\n    else\n      @\"llvm.bswap.i64\"[ILong](this)\n    end\n\n  fun popcount(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctpop.i32\"[ULong](this)\n    else\n      @\"llvm.ctpop.i64\"[ULong](this)\n    end\n\n  fun clz(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctlz.i32\"[ULong](this, false)\n    else\n      @\"llvm.ctlz.i64\"[ULong](this, false)\n    end\n\n  fun ctz(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.cttz.i32\"[ULong](this, false)\n    else\n      @\"llvm.cttz.i64\"[ULong](this, false)\n    end\n\n  fun clz_unsafe(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ctlz.i32\"[ULong](this, true)\n    else\n      @\"llvm.ctlz.i64\"[ULong](this, true)\n    end\n\n  fun ctz_unsafe(): ULong =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.cttz.i32\"[ULong](this, false)\n    else\n      @\"llvm.cttz.i64\"[ULong](this, true)\n    end\n\n  fun bitwidth(): ULong => ifdef ilp32 or llp64 then 32 else 64 end\n  fun min(y: ILong): ILong => if this < y then this else y end\n  fun max(y: ILong): ILong => if this > y then this else y end\n  fun hash(): USize => ulong().hash()\n\n  fun addc(y: ILong): (ILong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.sadd.with.overflow.i32\"[(ILong, Bool)](this, y)\n    else\n      @\"llvm.sadd.with.overflow.i64\"[(ILong, Bool)](this, y)\n    end\n\n  fun subc(y: ILong): (ILong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.ssub.with.overflow.i32\"[(ILong, Bool)](this, y)\n    else\n      @\"llvm.ssub.with.overflow.i64\"[(ILong, Bool)](this, y)\n    end\n\n  fun mulc(y: ILong): (ILong, Bool) =>\n    ifdef ilp32 or llp64 then\n      @\"llvm.smul.with.overflow.i32\"[(ILong, Bool)](this, y)\n    else\n      _SignedCheckedArithmetic._mulc[ULong, ILong](this, y)\n    end\n\nprimitive ISize is _SignedInteger[ISize, USize]\n  new create(value: ISize) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.isize()\n\n  new min_value() =>\n    ifdef ilp32 then\n      -0x8000_0000\n    else\n      -0x8000_0000_0000_0000\n    end\n\n  new max_value() =>\n    ifdef ilp32 then\n      0x7FFF_FFFF\n    else\n      0x7FFF_FFFF_FFFF_FFFF\n    end\n\n  fun abs(): USize => if this < 0 then (-this).usize() else this.usize() end\n\n  fun bit_reverse(): ISize =>\n    ifdef ilp32 then\n      @\"llvm.bitreverse.i32\"[ISize](this)\n    else\n      @\"llvm.bitreverse.i64\"[ISize](this)\n    end\n\n  fun bswap(): ISize =>\n    ifdef ilp32 then\n      @\"llvm.bswap.i32\"[ISize](this)\n    else\n      @\"llvm.bswap.i64\"[ISize](this)\n    end\n\n  fun popcount(): USize =>\n    ifdef ilp32 then\n      @\"llvm.ctpop.i32\"[USize](this)\n    else\n      @\"llvm.ctpop.i64\"[USize](this)\n    end\n\n  fun clz(): USize =>\n    ifdef ilp32 then\n      @\"llvm.ctlz.i32\"[USize](this, false)\n    else\n      @\"llvm.ctlz.i64\"[USize](this, false)\n    end\n\n  fun ctz(): USize =>\n    ifdef ilp32 then\n      @\"llvm.cttz.i32\"[USize](this, false)\n    else\n      @\"llvm.cttz.i64\"[USize](this, false)\n    end\n\n  fun clz_unsafe(): USize =>\n    ifdef ilp32 then\n      @\"llvm.ctlz.i32\"[USize](this, true)\n    else\n      @\"llvm.ctlz.i64\"[USize](this, true)\n    end\n\n  fun ctz_unsafe(): USize =>\n    ifdef ilp32 then\n      @\"llvm.cttz.i32\"[USize](this, true)\n    else\n      @\"llvm.cttz.i64\"[USize](this, true)\n    end\n\n  fun bitwidth(): USize => ifdef ilp32 then 32 else 64 end\n  fun min(y: ISize): ISize => if this < y then this else y end\n  fun max(y: ISize): ISize => if this > y then this else y end\n\n  fun addc(y: ISize): (ISize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.sadd.with.overflow.i32\"[(ISize, Bool)](this, y)\n    else\n      @\"llvm.sadd.with.overflow.i64\"[(ISize, Bool)](this, y)\n    end\n\n  fun subc(y: ISize): (ISize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.ssub.with.overflow.i32\"[(ISize, Bool)](this, y)\n    else\n      @\"llvm.ssub.with.overflow.i64\"[(ISize, Bool)](this, y)\n    end\n\n  fun mulc(y: ISize): (ISize, Bool) =>\n    ifdef ilp32 then\n      @\"llvm.smul.with.overflow.i32\"[(ISize, Bool)](this, y)\n    else\n      _SignedCheckedArithmetic._mulc[USize, ISize](this, y)\n    end\n\nprimitive I128 is _SignedInteger[I128, U128]\n  new create(value: I128) => value\n  new from[A: (Number & Real[A] val)](a: A) => a.i128()\n\n  new min_value() => -0x8000_0000_0000_0000_0000_0000_0000_0000\n  new max_value() => 0x7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF\n\n  fun abs(): U128 => if this < 0 then (-this).u128() else this.u128() end\n  fun bit_reverse(): I128 => @\"llvm.bitreverse.i128\"[I128](this)\n  fun bswap(): I128 => @\"llvm.bswap.i128\"[I128](this)\n  fun popcount(): U128 => @\"llvm.ctpop.i128\"[U128](this)\n  fun clz(): U128 => @\"llvm.ctlz.i128\"[U128](this, false)\n  fun ctz(): U128 => @\"llvm.cttz.i128\"[U128](this, false)\n\n  fun clz_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.ctlz.i128\"[U128](this, true)\n\n  fun ctz_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n    @\"llvm.cttz.i128\"[U128](this, true)\n\n  fun bitwidth(): U128 => 128\n  fun min(y: I128): I128 => if this < y then this else y end\n  fun max(y: I128): I128 => if this > y then this else y end\n  fun hash(): USize => u128().hash()\n  fun hash64(): U64 => u128().hash64()\n\n  fun string(): String iso^ =>\n    _ToString._u128(abs().u128(), this < 0)\n\n  fun mul(y: I128): I128 =>\n    (u128() * y.u128()).i128()\n\n  fun divmod(y: I128): (I128, I128) =>\n    ifdef native128 then\n      (this / y, this % y)\n    else\n      if y == 0 then\n        return (0, 0)\n      end\n\n      var num: I128 = if this >= 0 then this else -this end\n      var den: I128 = if y >= 0 then y else -y end\n\n      (let q, let r) = num.u128().divmod(den.u128())\n      (var q', var r') = (q.i128(), r.i128())\n\n      if this < 0 then\n        r' = -r'\n\n        if y > 0 then\n          q' = -q'\n        end\n      elseif y < 0 then\n        q' = -q'\n      end\n\n      (q', r')\n    end\n\n  fun div(y: I128): I128 =>\n    ifdef native128 then\n      this / y\n    else\n      (let q, let r) = divmod(y)\n      q\n    end\n\n  fun mod(y: I128): I128 =>\n    ifdef native128 then\n      this % y\n    else\n      (let q, let r) = divmod(y)\n      r\n    end\n\n  fun mul_unsafe(y: I128): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this *~ y\n    else\n      this * y\n    end\n\n  fun divmod_unsafe(y: I128): (I128, I128) =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      (this *~ y, this /~ y)\n    else\n      divmod(y)\n    end\n\n  fun div_unsafe(y: I128): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this /~ y\n    else\n      this / y\n    end\n\n  fun mod_unsafe(y: I128): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    ifdef native128 then\n      this %~ y\n    else\n      this % y\n    end\n\n  fun f32(): F32 =>\n    f64().f32()\n\n  fun f64(): F64 =>\n    if this < 0 then\n      -(-u128()).f64()\n    else\n      u128().f64()\n    end\n\n  fun f32_unsafe(): F32 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64_unsafe().f32_unsafe()\n\n  fun f64_unsafe(): F64 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64()\n\n  fun addc(y: I128): (I128, Bool) =>\n    ifdef native128 then\n      @\"llvm.sadd.with.overflow.i128\"[(I128, Bool)](this, y)\n    else\n      let overflow =\n        if y > 0 then\n          (this > (max_value() - y))\n        else\n          (this < (min_value() - y))\n        end\n\n      (this + y, overflow)\n    end\n\n  fun subc(y: I128): (I128, Bool) =>\n    ifdef native128 then\n      @\"llvm.ssub.with.overflow.i128\"[(I128, Bool)](this, y)\n    else\n      let overflow =\n        if y > 0 then\n          (this < (min_value() + y))\n        else\n          (this > (max_value() + y))\n        end\n\n      (this - y, overflow)\n    end\n\n  fun mulc(y: I128): (I128, Bool) =>\n    // using llvm.smul.with.overflow.i128 would require to link\n    // llvm compiler-rt where the function implementing it lives: https://github.com/llvm-mirror/compiler-rt/blob/master/lib/builtins/muloti4.c\n    // See this bug for reference:\n    // the following implementation is more or less exactly was __muloti4 is\n    // doing\n    _SignedCheckedArithmetic._mulc[U128, I128](this, y)\n\ntype Signed is (I8 | I16 | I32 | I64 | I128 | ILong | ISize)\n\n\nprimitive _SignedCheckedArithmetic\n  fun _mulc[U: _UnsignedInteger[U] val, T: (Signed & _SignedInteger[T, U] val)](x: T, y: T): (T, Bool) =>\n    \"\"\"\n    basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing\n    and roughly as fast as these.\n\n    Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available.\n    So we shouldn't use: `@\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y)`\n\n    Also see https://bugs.llvm.org/show_bug.cgi?id=14469\n\n    That's basically why we rolled our own.\n    \"\"\"\n    let result = x * y\n    if x == T.min_value() then\n      return (result, (y != T.from[I8](0)) and (y != T.from[I8](1)))\n    end\n    if y == T.min_value() then\n      return (result, (x != T.from[I8](0)) and (x != T.from[I8](1)))\n    end\n    let x_neg = x >> (x.bitwidth() - U.from[U8](1))\n    let x_abs = (x xor x_neg) - x_neg\n    let y_neg = y >> (x.bitwidth() - U.from[U8](1))\n    let y_abs = (y xor y_neg) - y_neg\n\n    if ((x_abs < T.from[I8](2)) or (y_abs < T.from[I8](2))) then\n      return (result, false)\n    end\n    if (x_neg == y_neg) then\n      (result, (x_abs > (T.max_value() / y_abs)))\n    else\n      (result, (x_abs > (T.min_value() / -y_abs)))\n    end",
            "title": "signed.pony"
        },
        {
            "location": "/src/builtin/seq/",
            "text": "interface Seq[A]\n  \"\"\"\n  A sequence of elements.\n  \"\"\"\n  new create(len: USize = 0)\n    \"\"\"\n    Create a sequence, reserving space for len elements.\n    \"\"\"\n\n  fun ref reserve(len: USize)\n    \"\"\"\n    Reserve space for len elements.\n    \"\"\"\n\n  fun size(): USize\n    \"\"\"\n    Returns the number of elements in the sequence.\n    \"\"\"\n\n  fun apply(i: USize): this->A ?\n    \"\"\"\n    Returns the i-th element of the sequence. Raises an error if the index\n    is out of bounds.\n    \"\"\"\n\n  fun ref update(i: USize, value: A): A^ ?\n    \"\"\"\n    Replaces the i-th element of the sequence. Returns the previous value.\n    Raises an error if the index is out of bounds.\n    \"\"\"\n\n  fun ref clear()\n    \"\"\"\n    Removes all elements from the sequence.\n    \"\"\"\n\n  fun ref push(value: A)\n    \"\"\"\n    Adds an element to the end of the sequence.\n    \"\"\"\n\n  fun ref pop(): A^ ?\n    \"\"\"\n    Removes an element from the end of the sequence.\n    \"\"\"\n\n  fun ref unshift(value: A)\n    \"\"\"\n    Adds an element to the beginning of the sequence.\n    \"\"\"\n\n  fun ref shift(): A^ ?\n    \"\"\"\n    Removes an element from the beginning of the sequence.\n    \"\"\"\n\n  fun ref append(\n    seq: (ReadSeq[A] & ReadElement[A^]),\n    offset: USize = 0,\n    len: USize = -1)\n    \"\"\"\n    Add len elements to the end of the list, starting from the given\n    offset.\n    \"\"\"\n\n  fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1)\n    \"\"\"\n    Add len iterated elements to the end of the list, starting from the given\n    offset.\n    \"\"\"\n\n  fun ref truncate(len: USize)\n    \"\"\"\n    Truncate the sequence to the given length, discarding excess elements.\n    If the sequence is already smaller than len, do nothing.\n    \"\"\"\n\n  fun values(): Iterator[this->A]^\n    \"\"\"\n    Returns an iterator over the elements of the sequence.\n    \"\"\"",
            "title": "seq.pony"
        },
        {
            "location": "/src/builtin/real/",
            "text": "trait val _ArithmeticConvertible\n  fun i8(): I8 => compile_intrinsic\n  fun i16(): I16 => compile_intrinsic\n  fun i32(): I32 => compile_intrinsic\n  fun i64(): I64 => compile_intrinsic\n  fun i128(): I128 => compile_intrinsic\n  fun ilong(): ILong => compile_intrinsic\n  fun isize(): ISize => compile_intrinsic\n\n  fun u8(): U8 => compile_intrinsic\n  fun u16(): U16 => compile_intrinsic\n  fun u32(): U32 => compile_intrinsic\n  fun u64(): U64 => compile_intrinsic\n  fun u128(): U128 => compile_intrinsic\n  fun ulong(): ULong => compile_intrinsic\n  fun usize(): USize => compile_intrinsic\n\n  fun f32(): F32 => compile_intrinsic\n  fun f64(): F64 => compile_intrinsic\n\n  fun i8_unsafe(): I8 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun i16_unsafe(): I16 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun i32_unsafe(): I32 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun i64_unsafe(): I64 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun i128_unsafe(): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun ilong_unsafe(): ILong =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun isize_unsafe(): ISize =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun u8_unsafe(): U8 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun u16_unsafe(): U16 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun u32_unsafe(): U32 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun u64_unsafe(): U64 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun u128_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun ulong_unsafe(): ULong =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun usize_unsafe(): USize =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun f32_unsafe(): F32 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\n  fun f64_unsafe(): F64 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    compile_intrinsic\n\ntrait val Real[A: Real[A] val] is\n  (Stringable & _ArithmeticConvertible & Comparable[A])\n  new val create(value: A)\n\n  new val from[B: (Number & Real[B] val)](a: B)\n  new val min_value()\n  new val max_value()\n\n  fun add(y: A): A => this + y\n  fun sub(y: A): A => this - y\n  fun mul(y: A): A => this * y\n  fun div(y: A): A => this / y\n  fun divmod(y: A): (A, A) => (this / y, this % y)\n  fun mod(y: A): A => this % y\n  fun neg(): A => -this\n\n  fun eq(y: box->A): Bool => this == y\n  fun ne(y: box->A): Bool => this != y\n  fun lt(y: box->A): Bool => this < y\n  fun le(y: box->A): Bool => this <= y\n  fun ge(y: box->A): Bool => this >= y\n  fun gt(y: box->A): Bool => this > y\n\n  fun min(y: A): A\n  fun max(y: A): A\n\n  fun hash(): USize =>\n    var x = usize()\n\n    ifdef ilp32 then\n      x = (not x) + (x << 15)\n      x = x xor (x >> 12)\n      x = x + (x << 2)\n      x = x xor (x >> 4)\n      x = (x + (x << 3)) + (x << 11)\n      x = x xor (x >> 16)\n\n      x\n    else\n      hash64().usize()\n    end\n\n  fun hash64(): U64 =>\n    var x = u64()\n\n    x = (not x) + (x << 21)\n    x = x xor (x >> 24)\n    x = (x + (x << 3)) + (x << 8)\n    x = x xor (x >> 14)\n    x = (x + (x << 2)) + (x << 4)\n    x = x xor (x >> 28)\n    x = x + (x << 31)\n\n    x\n\n  fun _value(): A => compile_intrinsic\n\ntrait val Integer[A: Integer[A] val] is Real[A]\n  fun add_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    this +~ y\n\n  fun sub_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    this -~ y\n\n  fun mul_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    this *~ y\n\n  fun div_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    this /~ y\n\n  fun divmod_unsafe(y: A): (A, A) =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    (this /~ y, this %~ y)\n\n  fun mod_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If y is 0, the result is undefined.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    this %~ y\n\n  fun neg_unsafe(): A =>\n    \"\"\"\n    Unsafe operation.\n    If the operation overflows, the result is undefined.\n    \"\"\"\n    -~this\n\n  fun addc(y: A): (A, Bool)\n    \"\"\"\n    Add `y` to this integer and return the result and a flag indicating overflow.\n    \"\"\"\n  fun subc(y: A): (A, Bool)\n    \"\"\"\n    Subtract `y` from this integer and return the result and a flag indicating overflow.\n    \"\"\"\n  fun mulc(y: A): (A, Bool)\n    \"\"\"\n    Multiply `y` with this integer and return the result and a flag indicating overflow.\n    \"\"\"\n  fun op_and(y: A): A => this and y\n  fun op_or(y: A): A => this or y\n  fun op_xor(y: A): A => this xor y\n  fun op_not(): A => not this\n\n  fun bit_reverse(): A\n    \"\"\"\n    Reverse the order of the bits within the integer.\n    For example, 0b11101101 (237) would return 0b10110111 (183).\n    \"\"\"\n\n  fun bswap(): A\n\ntrait val _SignedInteger[A: _SignedInteger[A, B] val,\n    B: _UnsignedInteger[B] val] is Integer[A]\n  fun abs(): B\n\n  fun shl(y: B): A => this << y\n  fun shr(y: B): A => this >> y\n\n  fun shl_unsafe(y: B): A =>\n    \"\"\"\n    Unsafe operation.\n    If bits differing from the final sign bit are shifted-out, the result is\n    undefined.\n    \"\"\"\n    this <<~ y\n\n  fun shr_unsafe(y: B): A =>\n    \"\"\"\n    Unsafe operation.\n    If non-zero bits are shifted-out, the result is undefined.\n    \"\"\"\n    this >>~ y\n\n  fun popcount(): B\n  fun clz(): B\n  fun ctz(): B\n\n  fun clz_unsafe(): B\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n\n  fun ctz_unsafe(): B\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n\n  fun bitwidth(): B\n\n  fun string(): String iso^ =>\n    _ToString._u64(abs().u64(), i64() < 0)\n\ntrait val _UnsignedInteger[A: _UnsignedInteger[A] val] is Integer[A]\n  fun abs(): A\n\n  fun shl(y: A): A => this << y\n  fun shr(y: A): A => this >> y\n\n  fun shl_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If non-zero bits are shifted-out, the result is undefined.\n    \"\"\"\n    this <<~ y\n\n  fun shr_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If non-zero bits are shifted-out, the result is undefined.\n    \"\"\"\n    this >>~ y\n\n  fun rotl(y: A): A =>\n    let y' = y % bitwidth()\n    if y' == y'.min_value() then\n      this._value()\n    else\n      (this << y') or (this >> (bitwidth() - y'))\n    end\n\n  fun rotr(y: A): A =>\n    let y' = y % bitwidth()\n    if y' == y'.min_value() then\n      this._value()\n    else\n      (this >> y') or (this << (bitwidth() - y'))\n    end\n\n  fun popcount(): A\n  fun clz(): A\n  fun ctz(): A\n\n  fun clz_unsafe(): A\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n\n  fun ctz_unsafe(): A\n    \"\"\"\n    Unsafe operation.\n    If this is 0, the result is undefined.\n    \"\"\"\n\n  fun bitwidth(): A\n\n  fun string(): String iso^ =>\n    _ToString._u64(u64(), false)\n\ntrait val FloatingPoint[A: FloatingPoint[A] val] is Real[A]\n  new val min_normalised()\n  new val epsilon()\n  fun tag radix(): U8\n  fun tag precision2(): U8\n  fun tag precision10(): U8\n  fun tag min_exp2(): I16\n  fun tag min_exp10(): I16\n  fun tag max_exp2(): I16\n  fun tag max_exp10(): I16\n\n  fun add_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this +~ y\n\n  fun sub_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this -~ y\n\n  fun mul_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this *~ y\n\n  fun div_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this /~ y\n\n  fun divmod_unsafe(y: A): (A, A) =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    (this /~ y, this %~ y)\n\n  fun mod_unsafe(y: A): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this %~ y\n\n  fun neg_unsafe(): A =>\n    \"\"\"\n    Unsafe operation.\n    If any input or output of the operation is +/- infinity or NaN, the result\n    is undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    -~this\n\n  fun eq_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this ==~ y\n\n  fun ne_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this !=~ y\n\n  fun lt_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this <~ y\n\n  fun le_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this <=~ y\n\n  fun ge_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this >=~ y\n\n  fun gt_unsafe(y: box->A): Bool =>\n    \"\"\"\n    Unsafe operation.\n    If any input of the operation is +/- infinity or NaN, the result is\n    undefined.\n    The operation isn't required to fully comply to IEEE 754 semantics.\n    \"\"\"\n    this >~ y\n\n  fun abs(): A\n  fun ceil(): A\n  fun floor(): A\n  fun round(): A\n  fun trunc(): A\n\n  fun finite(): Bool\n  fun infinite(): Bool\n  fun nan(): Bool\n\n  fun ldexp(x: A, exponent: I32): A\n  fun frexp(): (A, U32)\n  fun log(): A\n  fun log2(): A\n  fun log10(): A\n  fun logb(): A\n\n  fun pow(y: A): A\n  fun powi(y: I32): A\n\n  fun sqrt(): A\n\n  fun sqrt_unsafe(): A\n    \"\"\"\n    Unsafe operation.\n    If this is negative, the result is undefined.\n    \"\"\"\n\n  fun cbrt(): A\n  fun exp(): A\n  fun exp2(): A\n\n  fun cos(): A\n  fun sin(): A\n  fun tan(): A\n\n  fun cosh(): A\n  fun sinh(): A\n  fun tanh(): A\n\n  fun acos(): A\n  fun asin(): A\n  fun atan(): A\n  fun atan2(y: A): A\n\n  fun acosh(): A\n  fun asinh(): A\n  fun atanh(): A\n\n  fun copysign(sign: A): A\n\n  fun string(): String iso^ =>\n    _ToString._f64(f64())\n\ntype Number is (Int | Float)\n\ntype Int is (Signed | Unsigned)",
            "title": "real.pony"
        },
        {
            "location": "/src/builtin/read_seq/",
            "text": "interface box ReadSeq[A]\n  \"\"\"\n  The readable interface of a sequence.\n  \"\"\"\n  fun size(): USize\n    \"\"\"\n    Returns the number of elements in the sequence.\n    \"\"\"\n\n  fun apply(i: USize): this->A ?\n    \"\"\"\n    Returns the i-th element of the sequence. Raises an error if the index\n    is out of bounds. Note that this returns this->A, not A.\n    \"\"\"\n\n  fun values(): Iterator[this->A]^\n    \"\"\"\n    Returns an iterator over the elements of the sequence. Note that this\n    iterates over this->A, not A.\n    \"\"\"\n\ninterface box ReadElement[A]\n  \"\"\"\n  Used to show that a ReadSeq can return an element of a specific unmodified\n  type.\n  \"\"\"\n  fun apply(i: USize): A ?",
            "title": "read_seq.pony"
        },
        {
            "location": "/src/builtin/pointer/",
            "text": "struct Pointer[A]\n  \"\"\"\n  A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\n  included in a union or intersection, or be a subtype of any interface. Most\n  functions on a Pointer[A] are private to maintain memory safety.\n  \"\"\"\n  new create() =>\n    \"\"\"\n    A null pointer.\n    \"\"\"\n    compile_intrinsic\n\n  new _alloc(len: USize) =>\n    \"\"\"\n    Space for len instances of A.\n    \"\"\"\n    compile_intrinsic\n\n  fun ref _realloc(len: USize): Pointer[A] =>\n    \"\"\"\n    Keep the contents, but reserve space for len instances of A.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag _unsafe(): Pointer[A] ref =>\n    \"\"\"\n    Unsafe change in reference capability.\n    \"\"\"\n    compile_intrinsic\n\n  fun _convert[B](): this->Pointer[B] =>\n    \"\"\"\n    Convert from Pointer[A] to Pointer[B].\n    \"\"\"\n    compile_intrinsic\n\n  fun _apply(i: USize): this->A =>\n    \"\"\"\n    Retrieve index i.\n    \"\"\"\n    compile_intrinsic\n\n  fun ref _update(i: USize, value: A!): A^ =>\n    \"\"\"\n    Set index i and return the previous value.\n    \"\"\"\n    compile_intrinsic\n\n  fun _offset(n: USize): this->Pointer[A] =>\n    \"\"\"\n    Return a pointer to the n-th element.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag _element_size(): USize =>\n    \"\"\"\n    Return the size of a single element in an array of type A.\n    \"\"\"\n    compile_intrinsic\n\n  fun ref _insert(n: USize, len: USize): Pointer[A] =>\n    \"\"\"\n    Creates space for n new elements at the head, moving following elements.\n    The array length before this should be len, and the available space should\n    be at least n + len.\n    \"\"\"\n    compile_intrinsic\n\n  fun ref _delete(n: USize, len: USize): A^ =>\n    \"\"\"\n    Delete n elements from the head of pointer, compact remaining elements of\n    the underlying array. The array length before this should be n + len.\n    Returns the first deleted element.\n    \"\"\"\n    compile_intrinsic\n\n  fun _copy_to(that: Pointer[this->A!], n: USize): this->Pointer[A] =>\n    \"\"\"\n    Copy n elements from this to that.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag usize(): USize =>\n    \"\"\"\n    Convert the pointer into an integer.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag is_null(): Bool =>\n    \"\"\"\n    Return true for a null pointer, false for anything else.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag eq(that: Pointer[A] tag): Bool =>\n    \"\"\"\n    Return true if this address is that address.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag lt(that: Pointer[A] tag): Bool =>\n    \"\"\"\n    Return true if this address is less than that address.\n    \"\"\"\n    compile_intrinsic\n\n  fun tag ne(that: Pointer[A] tag): Bool => not eq(that)\n  fun tag le(that: Pointer[A] tag): Bool => lt(that) or eq(that)\n  fun tag ge(that: Pointer[A] tag): Bool => not lt(that)\n  fun tag gt(that: Pointer[A] tag): Bool => not le(that)\n\n  fun tag hash(): USize =>\n    \"\"\"\n    Returns a hash of the address.\n    \"\"\"\n    usize().hash()\n\n  fun tag hash64(): U64 =>\n    \"\"\"\n    Returns a 64-bit hash of the address.\n    \"\"\"\n    usize().hash64()",
            "title": "pointer.pony"
        },
        {
            "location": "/src/builtin/platform/",
            "text": "primitive Platform\n  fun bsd(): Bool => freebsd() or dragonfly()\n  fun freebsd(): Bool => compile_intrinsic\n  fun dragonfly(): Bool => compile_intrinsic\n  fun linux(): Bool => compile_intrinsic\n  fun osx(): Bool => compile_intrinsic\n  fun posix(): Bool => bsd() or linux() or osx()\n  fun windows(): Bool => compile_intrinsic\n\n  fun x86(): Bool => compile_intrinsic\n  fun arm(): Bool => compile_intrinsic\n\n  fun lp64(): Bool => compile_intrinsic\n  fun llp64(): Bool => compile_intrinsic\n  fun ilp32(): Bool => compile_intrinsic\n\n  fun bigendian(): Bool => compile_intrinsic\n  fun littleendian(): Bool => compile_intrinsic\n\n  fun native128(): Bool => compile_intrinsic\n  fun debug(): Bool => compile_intrinsic",
            "title": "platform.pony"
        },
        {
            "location": "/src/builtin/none/",
            "text": "primitive None is Stringable\n  fun string(): String iso^ =>\n    \"None\".string()",
            "title": "none.pony"
        },
        {
            "location": "/src/builtin/maybe_pointer/",
            "text": "struct MaybePointer[A]\n  \"\"\"\n  A MaybePointer[A] is used to encode a possibly-null type. It should\n  _only_ be used for structs that need to be passed to and from the C FFI.\n\n  An optional type for anything that isn't a struct should be encoded as a\n  union type, for example (A | None).\n  \"\"\"\n  new create(that: A) =>\n    \"\"\"\n    This re-encodes the type of `that` from A to MaybePointer[A], allowing\n    `that` to be assigned to a field or variable of type MaybePointer[A]. It\n    doesn't allocate a wrapper object: there is no containing object for `that`.\n    \"\"\"\n    compile_intrinsic\n\n  new none() =>\n    \"\"\"\n    This returns a null pointer typed as a MaybePointer[A].\n    \"\"\"\n    compile_intrinsic\n\n  fun apply(): this->A ? =>\n    \"\"\"\n    This re-encodes the type of `this` from MaybePointer[A] to A, allowing\n    `this` to be assigned to a field of variable of type A. If `this` is a null\n    pointer, an error is raised.\n    \"\"\"\n    compile_intrinsic\n\n  fun is_none(): Bool =>\n    \"\"\"\n    Returns true if `this` is null (ie apply would raise an error).\n    \"\"\"\n    compile_intrinsic",
            "title": "maybe_pointer.pony"
        },
        {
            "location": "/src/builtin/iterator/",
            "text": "interface Iterator[A]\n  \"\"\"\n\n  Iterators generate a series of values, one value at a time on each call to `next()`.\n\n  An Iterator is considered exhausted, once its `has_next()` method returns `false`.\n  Thus every call to `next()` should be preceeded with a call to `has_next()` to\n  check for exhaustiveness.\n\n  ## Usage\n\n  Given the rules for using Iterators mentioned above, basic usage\n  of an iterator looks like this:\n\n  ```pony\n  while iterator.has_next() do\n    let elem = iterator.next()?\n    // do something with elem\n  end\n  ```\n\n  The `For`-loop provides a more concise way of iteration:\n\n  ```pony\n  for elem in iterator do\n    // do something with elem\n  end\n  ```\n\n  Iteration using `While` is more flexible as it allows to continue iterating if a call to `next()` errors.\n  The `For`-loop does not allow this.\n\n  ## Implementing Iterators\n\n  Iterator implementations need to adhere to the following rules to be considered well-behaved:\n\n  * If the Iterator is exhausted, `has_next()` needs to return `false`.\n  * Once `has_next()` returned `false` it is not allowed to switch back to `true`\n    (Unless the Iterator supports rewinding)\n  * `has_next()` does not change its returned value if `next()` has not been called.\n    That means, that between two calls to `next()` any number of calls to `has_next()`\n    need to return the same value. (Unless the Iterator supports rewinding)\n  * A call to `next()` erroring does not necessarily denote exhaustiveness.\n\n  ### Example\n\n  ```pony\n  // Generates values from `from` to 0\n  class ref Countdown is Iterator[USize]\n    var _cur: USize\n    var _has_next: Bool = true\n\n    new ref create(from: USize) =>\n      _cur = from\n\n    fun ref has_next(): Bool =>\n      _has_next\n\n    fun ref next(): USize =>\n      let elem = _cur = _cur - 1\n      if elem == 0 then\n        _has_next = false\n      end\n      elem\n  ```\n\n  \"\"\"\n\n  fun ref has_next(): Bool\n    \"\"\"\n    Returns `true` if this Iterator is not yet exhausted.\n    That means that a value returned from a subsequent call to `next()`\n    is a valid part of this iterator.\n\n    Returns `false` if this Iterator is exhausted.\n\n    The behavior of `next()` after this function returned `false` is undefined,\n    it might throw an error or return values which are not part of this Iterator.\n    \"\"\"\n\n  fun ref next(): A ?\n    \"\"\"\n    Generate the next value.\n\n    This might error, which does not necessarily mean that the Iterator is exhausted.\n    \"\"\"",
            "title": "iterator.pony"
        },
        {
            "location": "/src/builtin/float/",
            "text": "primitive F32 is FloatingPoint[F32]\n  new create(value: F32 = 0) => value\n  new pi() => 3.14159265358979323846\n  new e() => 2.71828182845904523536\n\n  new _nan() => compile_intrinsic\n  new _inf(negative: Bool) => compile_intrinsic\n\n  new from_bits(i: U32) => compile_intrinsic\n  fun bits(): U32 => compile_intrinsic\n  new from[B: (Number & Real[B] val)](a: B) => a.f32()\n\n  new min_value() =>\n    \"\"\"\n    Minimum negative value representable.\n    \"\"\"\n    from_bits(0xFF7FFFFF)\n\n  new max_value() =>\n    \"\"\"\n    Maximum positive value representable.\n    \"\"\"\n    from_bits(0x7F7FFFFF)\n\n  new min_normalised() =>\n    \"\"\"\n    Minimum positive value representable at full precision (ie a normalised\n    number).\n    \"\"\"\n    from_bits(0x00800000)\n\n  new epsilon() =>\n    \"\"\"\n    Minimum positive value such that (1 + epsilon) != 1.\n    \"\"\"\n    from_bits(0x34000000)\n\n  fun tag radix(): U8 =>\n    \"\"\"\n    Exponent radix.\n    \"\"\"\n    2\n\n  fun tag precision2(): U8 =>\n    \"\"\"\n    Mantissa precision in bits.\n    \"\"\"\n    24\n\n  fun tag precision10(): U8 =>\n    \"\"\"\n    Mantissa precision in decimal digits.\n    \"\"\"\n    6\n\n  fun tag min_exp2(): I16 =>\n    \"\"\"\n    Minimum exponent value such that (2^exponent) - 1 is representable at full\n    precision (ie a normalised number).\n    \"\"\"\n    -125\n\n  fun tag min_exp10(): I16 =>\n    \"\"\"\n    Minimum exponent value such that (10^exponent) - 1 is representable at full\n    precision (ie a normalised number).\n    \"\"\"\n    -37\n\n  fun tag max_exp2(): I16 =>\n    \"\"\"\n    Maximum exponent value such that (2^exponent) - 1 is representable.\n    \"\"\"\n    128\n\n  fun tag max_exp10(): I16 =>\n    \"\"\"\n    Maximum exponent value such that (10^exponent) - 1 is representable.\n    \"\"\"\n    38\n\n  fun abs(): F32 => @\"llvm.fabs.f32\"[F32](this)\n  fun ceil(): F32 => @\"llvm.ceil.f32\"[F32](this)\n  fun floor(): F32 => @\"llvm.floor.f32\"[F32](this)\n  fun round(): F32 => @\"llvm.round.f32\"[F32](this)\n  fun trunc(): F32 => @\"llvm.trunc.f32\"[F32](this)\n\n  fun min(y: F32): F32 => if this < y then this else y end\n  fun max(y: F32): F32 => if this > y then this else y end\n\n  fun finite(): Bool =>\n    \"\"\"\n    Check whether this number is finite, ie not +/-infinity and not NaN.\n    \"\"\"\n    // True if exponent is not all 1s\n    (bits() and 0x7F800000) != 0x7F800000\n\n  fun infinite(): Bool =>\n    \"\"\"\n    Check whether this number is +/-infinity\n    \"\"\"\n    // True if exponent is all 1s and mantissa is 0\n    ((bits() and 0x7F800000) == 0x7F800000) and  // exp\n    ((bits() and 0x007FFFFF) == 0)  // mantissa\n\n  fun nan(): Bool =>\n    \"\"\"\n    Check whether this number is NaN.\n    \"\"\"\n    // True if exponent is all 1s and mantissa is non-0\n    ((bits() and 0x7F800000) == 0x7F800000) and  // exp\n    ((bits() and 0x007FFFFF) != 0)  // mantissa\n\n  fun ldexp(x: F32, exponent: I32): F32 =>\n    @ldexpf[F32](x, exponent)\n\n  fun frexp(): (F32, U32) =>\n    var exponent: U32 = 0\n    var mantissa = @frexp[F64](f64(), addressof exponent)\n    (mantissa.f32(), exponent)\n\n  fun log(): F32 => @\"llvm.log.f32\"[F32](this)\n  fun log2(): F32 => @\"llvm.log2.f32\"[F32](this)\n  fun log10(): F32 => @\"llvm.log10.f32\"[F32](this)\n  fun logb(): F32 => @logbf[F32](this)\n\n  fun pow(y: F32): F32 => @\"llvm.pow.f32\"[F32](this, y)\n  fun powi(y: I32): F32 =>\n    ifdef windows then\n      pow(y.f32())\n    else\n      @\"llvm.powi.f32\"[F32](this, y)\n    end\n\n  fun sqrt(): F32 =>\n    if this < 0.0 then\n      _nan()\n    else\n      @\"llvm.sqrt.f32\"[F32](this)\n    end\n\n  fun sqrt_unsafe(): F32 =>\n    \"\"\"\n    Unsafe operation.\n    If this is negative, the result is undefined.\n    \"\"\"\n    @\"llvm.sqrt.f32\"[F32](this)\n\n  fun cbrt(): F32 => @cbrtf[F32](this)\n  fun exp(): F32 => @\"llvm.exp.f32\"[F32](this)\n  fun exp2(): F32 => @\"llvm.exp2.f32\"[F32](this)\n\n  fun cos(): F32 => @\"llvm.cos.f32\"[F32](this)\n  fun sin(): F32 => @\"llvm.sin.f32\"[F32](this)\n  fun tan(): F32 => @tanf[F32](this)\n\n  fun cosh(): F32 => @coshf[F32](this)\n  fun sinh(): F32 => @sinhf[F32](this)\n  fun tanh(): F32 => @tanhf[F32](this)\n\n  fun acos(): F32 => @acosf[F32](this)\n  fun asin(): F32 => @asinf[F32](this)\n  fun atan(): F32 => @atanf[F32](this)\n  fun atan2(y: F32): F32 => @atan2f[F32](this, y)\n\n  fun acosh(): F32 => @acoshf[F32](this)\n  fun asinh(): F32 => @asinhf[F32](this)\n  fun atanh(): F32 => @atanhf[F32](this)\n\n  fun copysign(sign: F32): F32 => @\"llvm.copysign.f32\"[F32](this, sign)\n\n  fun hash(): USize => bits().hash()\n  fun hash64(): U64 => bits().hash64()\n\n  fun i128(): I128 => f64().i128()\n  fun u128(): U128 => f64().u128()\n\n  fun i128_unsafe(): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64_unsafe().i128_unsafe()\n\n  fun u128_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    f64_unsafe().u128_unsafe()\n\nprimitive F64 is FloatingPoint[F64]\n  new create(value: F64 = 0) => value\n  new pi() => 3.14159265358979323846\n  new e() => 2.71828182845904523536\n\n  new _nan() => compile_intrinsic\n  new _inf(negative: Bool) => compile_intrinsic\n\n  new from_bits(i: U64) => compile_intrinsic\n  fun bits(): U64 => compile_intrinsic\n  new from[B: (Number & Real[B] val)](a: B) => a.f64()\n\n  new min_value() =>\n    \"\"\"\n    Minimum negative value representable.\n    \"\"\"\n    from_bits(0xFFEF_FFFF_FFFF_FFFF)\n\n  new max_value() =>\n    \"\"\"\n    Maximum positive value representable.\n    \"\"\"\n    from_bits(0x7FEF_FFFF_FFFF_FFFF)\n\n  new min_normalised() =>\n    \"\"\"\n    Minimum positive value representable at full precision (ie a normalised\n    number).\n    \"\"\"\n    from_bits(0x0010_0000_0000_0000)\n\n  new epsilon() =>\n    \"\"\"\n    Minimum positive value such that (1 + epsilon) != 1.\n    \"\"\"\n    from_bits(0x3CB0_0000_0000_0000)\n\n  fun tag radix(): U8 =>\n    \"\"\"\n    Exponent radix.\n    \"\"\"\n    2\n\n  fun tag precision2(): U8 =>\n    \"\"\"\n    Mantissa precision in bits.\n    \"\"\"\n    53\n\n  fun tag precision10(): U8 =>\n    \"\"\"\n    Mantissa precision in decimal digits.\n    \"\"\"\n    15\n\n  fun tag min_exp2(): I16 =>\n    \"\"\"\n    Minimum exponent value such that (2^exponent) - 1 is representable at full\n    precision (ie a normalised number).\n    \"\"\"\n    -1021\n\n  fun tag min_exp10(): I16 =>\n    \"\"\"\n    Minimum exponent value such that (10^exponent) - 1 is representable at full\n    precision (ie a normalised number).\n    \"\"\"\n    -307\n\n  fun tag max_exp2(): I16 =>\n    \"\"\"\n    Maximum exponent value such that (2^exponent) - 1 is representable.\n    \"\"\"\n    1024\n\n  fun tag max_exp10(): I16 =>\n    \"\"\"\n    Maximum exponent value such that (10^exponent) - 1 is representable.\n    \"\"\"\n    308\n\n  fun abs(): F64 => @\"llvm.fabs.f64\"[F64](this)\n  fun ceil(): F64 => @\"llvm.ceil.f64\"[F64](this)\n  fun floor(): F64 => @\"llvm.floor.f64\"[F64](this)\n  fun round(): F64 => @\"llvm.round.f64\"[F64](this)\n  fun trunc(): F64 => @\"llvm.trunc.f64\"[F64](this)\n\n  fun min(y: F64): F64 => if this < y then this else y end\n  fun max(y: F64): F64 => if this > y then this else y end\n\n  fun finite(): Bool =>\n    \"\"\"\n    Check whether this number is finite, ie not +/-infinity and not NaN.\n    \"\"\"\n    // True if exponent is not all 1s\n    (bits() and 0x7FF0_0000_0000_0000) != 0x7FF0_0000_0000_0000\n\n  fun infinite(): Bool =>\n    \"\"\"\n    Check whether this number is +/-infinity\n    \"\"\"\n    // True if exponent is all 1s and mantissa is 0\n    ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and  // exp\n    ((bits() and 0x000F_FFFF_FFFF_FFFF) == 0)  // mantissa\n\n  fun nan(): Bool =>\n    \"\"\"\n    Check whether this number is NaN.\n    \"\"\"\n    // True if exponent is all 1s and mantissa is non-0\n    ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and  // exp\n    ((bits() and 0x000F_FFFF_FFFF_FFFF) != 0)  // mantissa\n\n  fun ldexp(x: F64, exponent: I32): F64 =>\n    @ldexp[F64](x, exponent)\n\n  fun frexp(): (F64, U32) =>\n    var exponent: U32 = 0\n    var mantissa = @frexp[F64](this, addressof exponent)\n    (mantissa, exponent)\n\n  fun log(): F64 => @\"llvm.log.f64\"[F64](this)\n  fun log2(): F64 => @\"llvm.log2.f64\"[F64](this)\n  fun log10(): F64 => @\"llvm.log10.f64\"[F64](this)\n  fun logb(): F64 => @logb[F64](this)\n\n  fun pow(y: F64): F64 => @\"llvm.pow.f64\"[F64](this, y)\n  fun powi(y: I32): F64 =>\n    ifdef windows then\n      pow(y.f64())\n    else\n      @\"llvm.powi.f64\"[F64](this, y)\n    end\n\n  fun sqrt(): F64 =>\n    if this < 0.0 then\n      _nan()\n    else\n      @\"llvm.sqrt.f64\"[F64](this)\n    end\n\n  fun sqrt_unsafe(): F64 =>\n    \"\"\"\n    Unsafe operation.\n    If this is negative, the result is undefined.\n    \"\"\"\n    @\"llvm.sqrt.f64\"[F64](this)\n\n  fun cbrt(): F64 => @cbrt[F64](this)\n  fun exp(): F64 => @\"llvm.exp.f64\"[F64](this)\n  fun exp2(): F64 => @\"llvm.exp2.f64\"[F64](this)\n\n  fun cos(): F64 => @\"llvm.cos.f64\"[F64](this)\n  fun sin(): F64 => @\"llvm.sin.f64\"[F64](this)\n  fun tan(): F64 => @tan[F64](this)\n\n  fun cosh(): F64 => @cosh[F64](this)\n  fun sinh(): F64 => @sinh[F64](this)\n  fun tanh(): F64 => @tanh[F64](this)\n\n  fun acos(): F64 => @acos[F64](this)\n  fun asin(): F64 => @asin[F64](this)\n  fun atan(): F64 => @atan[F64](this)\n  fun atan2(y: F64): F64 => @atan2[F64](this, y)\n\n  fun acosh(): F64 => @acosh[F64](this)\n  fun asinh(): F64 => @asinh[F64](this)\n  fun atanh(): F64 => @atanh[F64](this)\n\n  fun copysign(sign: F64): F64 => @\"llvm.copysign.f64\"[F64](this, sign)\n\n  fun hash(): USize => bits().hash()\n  fun hash64(): U64 => bits().hash64()\n\n  fun i128(): I128 =>\n    if this > I128.max_value().f64() then\n      return I128.max_value()\n    elseif this < I128.min_value().f64() then\n      return I128.min_value()\n    end\n\n    let bit = bits()\n    let high = (bit >> 32).u32()\n    let ex = ((high and 0x7FF00000) >> 20) - 1023\n\n    if ex < 0 then\n      return 0\n    end\n\n    let s = ((high and 0x80000000) >> 31).i128()\n    var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).i128()\n    let ex' = ex.u128()\n\n    if ex' > 52 then\n      r = r << (ex' - 52)\n    else\n      r = r >> (52 - ex')\n    end\n\n    (r xor s) - s\n\n  fun u128(): U128 =>\n    if this > U128.max_value().f64() then\n      return U128.max_value()\n    elseif this < U128.min_value().f64() then\n      return U128.min_value()\n    end\n\n    let bit = bits()\n    let high = (bit >> 32).u32()\n    let ex = ((high and 0x7FF00000) >> 20) - 1023\n\n    if (ex < 0) or ((high and 0x80000000) != 0) then\n      return 0\n    end\n\n    var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).u128()\n    let ex' = ex.u128()\n\n    if ex' > 52 then\n      r = r << (ex' - 52)\n    else\n      r = r >> (52 - ex')\n    end\n\n    r.u128()\n\n  fun i128_unsafe(): I128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    i128()\n\n  fun u128_unsafe(): U128 =>\n    \"\"\"\n    Unsafe operation.\n    If the value doesn't fit in the destination type, the result is undefined.\n    \"\"\"\n    u128()\n\ntype Float is (F32 | F64)",
            "title": "float.pony"
        },
        {
            "location": "/src/builtin/env/",
            "text": "class val Env\n  \"\"\"\n  An environment holds the command line and other values injected into the\n  program by default by the runtime.\n  \"\"\"\n  let root: (AmbientAuth | None)\n    \"\"\"\n    The root capability.\n\n    Can be `None` for artificially constructed `Env` instances.\n    \"\"\"\n\n  let input: InputStream\n    \"\"\"\n    Stdin represented as an actor.\n    \"\"\"\n\n  let out: OutStream\n    \"\"\"Stdout\"\"\"\n\n  let err: OutStream\n    \"\"\"Stderr\"\"\"\n\n  let args: Array[String] val\n    \"\"\"The command line used to start the program.\"\"\"\n\n  let vars: Array[String] val\n    \"\"\"The program's environment variables.\"\"\"\n\n  let exitcode: {(I32)} val\n    \"\"\"\n    Sets the environment's exit code. The exit code of the root environment will\n    be the exit code of the application, which defaults to 0.\n    \"\"\"\n\n  new _create(\n    argc: U32,\n    argv: Pointer[Pointer[U8]] val,\n    envp: Pointer[Pointer[U8]] val)\n  =>\n    \"\"\"\n    Builds an environment from the command line. This is done before the Main\n    actor is created.\n    \"\"\"\n    root = AmbientAuth._create()\n    @pony_os_stdout_setup[None]()\n\n    input = Stdin._create(@pony_os_stdin_setup[Bool]())\n    out = StdStream._out()\n    err = StdStream._err()\n\n    args = _strings_from_pointers(argv, argc.usize())\n    vars = _strings_from_pointers(envp, _count_strings(envp))\n\n    exitcode = {(code: I32) => @pony_exitcode[None](code) }\n\n  new val create(\n    root': (AmbientAuth | None),\n    input': InputStream, out': OutStream,\n    err': OutStream, args': Array[String] val,\n    vars': Array[String] val,\n    exitcode': {(I32)} val)\n  =>\n    \"\"\"\n    Build an artificial environment. A root capability may be supplied.\n    \"\"\"\n    root = root'\n    input = input'\n    out = out'\n    err = err'\n    args = args'\n    vars = vars'\n    exitcode = exitcode'\n\n  fun tag _count_strings(data: Pointer[Pointer[U8]] val): USize =>\n    if data.is_null() then\n      return 0\n    end\n\n    var i: USize = 0\n\n    while\n      let entry = data._apply(i)\n      not entry.is_null()\n    do\n      i = i + 1\n    end\n    i\n\n  fun tag _strings_from_pointers(\n    data: Pointer[Pointer[U8]] val,\n    len: USize)\n    : Array[String] iso^\n  =>\n    let array = recover Array[String](len) end\n    var i: USize = 0\n\n    while i < len do\n      let entry = data._apply(i = i + 1)\n      array.push(recover String.copy_cstring(entry) end)\n    end\n\n    array",
            "title": "env.pony"
        },
        {
            "location": "/src/builtin/do_not_optimise/",
            "text": "primitive DoNotOptimise\n  \"\"\"\n  Contains functions preventing some compiler optimisations, namely dead code\n  removal. This is useful for benchmarking purposes.\n  \"\"\"\n\n  fun apply[A](obj: A) =>\n    \"\"\"\n    Prevent the compiler from optimising out obj and any computation it is\n    derived from. This doesn't prevent constant propagation.\n    \"\"\"\n    compile_intrinsic\n\n  fun observe() =>\n    \"\"\"\n    Prevent the compiler from optimising out writes to an object marked by\n    the apply function.\n    \"\"\"\n    compile_intrinsic",
            "title": "do_not_optimise.pony"
        },
        {
            "location": "/src/builtin/compare/",
            "text": "primitive Less is Equatable[Compare]\n  fun string(): String iso^ =>\n    \"Less\".string()\n\nprimitive Equal is Equatable[Compare]\n  fun string(): String iso^ =>\n    \"Equal\".string()\n\nprimitive Greater is Equatable[Compare]\n  fun string(): String iso^ =>\n    \"Greater\".string()\n\ntype Compare is (Less | Equal | Greater)\n\ninterface HasEq[A]\n  fun eq(that: box->A): Bool\n\ninterface Equatable[A: Equatable[A] #read]\n  fun eq(that: box->A): Bool => this is that\n  fun ne(that: box->A): Bool => not eq(that)\n\ninterface Comparable[A: Comparable[A] #read] is Equatable[A]\n  fun lt(that: box->A): Bool\n  fun le(that: box->A): Bool => lt(that) or eq(that)\n  fun ge(that: box->A): Bool => not lt(that)\n  fun gt(that: box->A): Bool => not le(that)\n\n  fun compare(that: box->A): Compare =>\n    if eq(that) then\n      Equal\n    elseif lt(that) then\n      Less\n    else\n      Greater\n    end",
            "title": "compare.pony"
        },
        {
            "location": "/src/builtin/bool/",
            "text": "primitive Bool is Stringable\n  new create(from: Bool) => from\n\n  fun eq(y: Bool): Bool => this == y\n  fun ne(y: Bool): Bool => this != y\n  fun op_and(y: Bool): Bool => this and y\n  fun op_or(y: Bool): Bool => this or y\n  fun op_xor(y: Bool): Bool => this xor y\n  fun op_not(): Bool => not this\n\n  fun string(): String iso^ =>\n    (if this then \"true\" else \"false\" end).string()",
            "title": "bool.pony"
        },
        {
            "location": "/src/builtin/asio_event/",
            "text": "type AsioEventID is Pointer[AsioEvent] tag\n\ninterface tag AsioEventNotify\n  be _event_notify(event: AsioEventID, flags: U32, arg: U32)\n\nprimitive AsioEvent\n  \"\"\"\n  Functions for asynchronous event notification.\n  \"\"\"\n  fun none(): AsioEventID =>\n    \"\"\"\n    An empty event.\n    \"\"\"\n    AsioEventID\n\n  fun readable(flags: U32): Bool =>\n    \"\"\"\n    Returns true if the flags contain the readable flag.\n    \"\"\"\n    (flags and (1 << 0)) != 0\n\n  fun writeable(flags: U32): Bool =>\n    \"\"\"\n    Returns true if the flags contain the writeable flag.\n    \"\"\"\n    (flags and (1 << 1)) != 0\n\n  fun disposable(flags: U32): Bool =>\n    \"\"\"\n    Returns true if the event should be disposed of.\n    \"\"\"\n    flags == 0\n\n  fun dispose(): U32 => 0\n\n  fun read(): U32 => 1 << 0\n\n  fun write(): U32 => 1 << 1\n\n  fun timer(): U32 => 1 << 2\n\n  fun signal(): U32 => 1 << 3\n\n  fun read_write(): U32 => read() or write()\n\n  fun oneshot(): U32 => 1 << 8\n\n  fun read_write_oneshot(): U32 => read() or write() or oneshot()",
            "title": "asio_event.pony"
        },
        {
            "location": "/src/builtin/array/",
            "text": "class Array[A] is Seq[A]\n  \"\"\"\n  Contiguous, resizable memory to store elements of type A.\n\n  ## Usage\n\n  Creating an Array of String.\n  ```pony\n    let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n    // array.size() == 3\n    // array.space() >= 3\n  ```\n\n  Creating an empty Array of String, which may hold at least 10 elements before\n  requesting more space.\n  ```pony\n    let array = Array(10)\n    // array.size() == 0\n    // array.space() >= 10\n  ```\n\n  Accessing elements can be done via the `apply(i: USize): this->A ?` method.\n  The provided index might be out of bounds so `apply` is partial and has to be\n  called within a try-catch block or inside another partial method.\n  ```pony\n    let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"]\n    let is_second_element_wobat = try\n      // indexes start from 0, so 1 is the second element\n      array(1)? == \"wombat\"\n    else\n      false\n    end\n  ```\n\n  Adding and removing elements to and from the end of the Array can be done via\n  `push` and `pop` methods. You could treat the array as a FIFO queue using\n  those methods.\n  ```pony\n    while (array.size() > 0) do\n      let elem = array.pop()?\n      // do something with element\n    end\n  ```\n\n  Modifying the Array can be done via `update`, `insert` and `delete` methods\n  which alter the Array at an arbitrary index, moving elements left (when\n  deleting) or right (when inserting) as necessary.\n\n  Iterating over the elements of an Array can be done using the `values` method.\n  ```pony\n    for element in array.values() do\n        // do something with element\n    end\n  ```\n\n  ## Memory allocation\n  Array allocates contiguous memory. It always allocates at least enough memory\n  space to hold all of its elements. Space is the number of elements the Array\n  can hold without allocating more memory. The `space()` method returns the\n  number of elements an Array can hold. The `size()` method returns the number\n  of elements the Array holds.\n\n  Different data types require different amounts of memory. Array[U64] with size\n  of 6 will take more memory than an Array[U8] of the same size.\n\n  When creating an Array or adding more elements will calculate the next power\n  of 2 of the requested number of elements and allocate that much space, with a\n  lower bound of space for 8 elements.\n\n  Here's a few examples of the space allocated when initialising an Array with\n  various number of elements:\n\n  | size | space |\n  |------|-------|\n  | 0    | 0     |\n  | 1    | 8     |\n  | 8    | 8     |\n  | 9    | 16    |\n  | 16   | 16    |\n  | 17   | 32    |\n\n  Call the `compact()` method to ask the GC to reclaim unused space. There are\n  no guarantees that the GC will actually reclaim any space.\n  \"\"\"\n  var _size: USize\n  var _alloc: USize\n  var _ptr: Pointer[A]\n\n  new create(len: USize = 0) =>\n    \"\"\"\n    Create an array with zero elements, but space for len elements.\n    \"\"\"\n    _size = 0\n\n    if len > 0 then\n      _alloc = len.next_pow2().max(len).max(8)\n      _ptr = Pointer[A]._alloc(_alloc)\n    else\n      _alloc = 0\n      _ptr = Pointer[A]\n    end\n\n  new init(from: A^, len: USize) =>\n    \"\"\"\n    Create an array of len elements, all initialised to the given value.\n    \"\"\"\n    _size = len\n\n    if len > 0 then\n      _alloc = len.next_pow2().max(len).max(8)\n      _ptr = Pointer[A]._alloc(_alloc)\n\n      var i: USize = 0\n\n      while i < len do\n        _ptr._update(i, from)\n        i = i + 1\n      end\n    else\n      _alloc = 0\n      _ptr = Pointer[A]\n    end\n\n  new from_cpointer(ptr: Pointer[A], len: USize, alloc: USize = 0) =>\n    \"\"\"\n    Create an array from a C-style pointer and length. The contents are not\n    copied.\n    \"\"\"\n    _size = len\n\n    if alloc > len then\n      _alloc = alloc\n    else\n      _alloc = len\n    end\n\n    _ptr = ptr\n\n  fun _copy_to(\n    ptr: Pointer[this->A!],\n    copy_len: USize,\n    from_offset: USize = 0,\n    to_offset: USize = 0)\n  =>\n    \"\"\"\n    Copy copy_len elements from this to that at specified offsets.\n    \"\"\"\n    _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len)\n\n  fun cpointer(offset: USize = 0): Pointer[A] tag =>\n    \"\"\"\n    Return the underlying C-style pointer.\n    \"\"\"\n    _ptr._offset(offset)\n\n  fun size(): USize =>\n    \"\"\"\n    The number of elements in the array.\n    \"\"\"\n    _size\n\n  fun space(): USize =>\n    \"\"\"\n    The available space in the array.\n    \"\"\"\n    _alloc\n\n  fun ref reserve(len: USize) =>\n    \"\"\"\n    Reserve space for len elements, including whatever elements are already in\n    the array. Array space grows geometrically.\n    \"\"\"\n    if _alloc < len then\n      _alloc = len.next_pow2().max(len).max(8)\n      _ptr = _ptr._realloc(_alloc)\n    end\n\n  fun ref compact() =>\n    \"\"\"\n    Try to remove unused space, making it available for garbage collection. The\n    request may be ignored.\n    \"\"\"\n    if _size <= (512 / _ptr._element_size()) then\n      if _size.next_pow2() != _alloc.next_pow2() then\n        _alloc = _size.next_pow2()\n        let old_ptr = _ptr = Pointer[A]._alloc(_alloc)\n        old_ptr._copy_to(_ptr._convert[A!](), _size)\n      end\n    elseif _size < _alloc then\n      _alloc = _size\n      let old_ptr = _ptr = Pointer[A]._alloc(_alloc)\n      old_ptr._copy_to(_ptr._convert[A!](), _size)\n    end\n\n  fun ref undefined[B: (A & Real[B] val & Number) = A](len: USize) =>\n    \"\"\"\n    Resize to len elements, populating previously empty elements with random\n    memory. This is only allowed for an array of numbers.\n    \"\"\"\n    reserve(len)\n    _size = len\n\n  fun apply(i: USize): this->A ? =>\n    \"\"\"\n    Get the i-th element, raising an error if the index is out of bounds.\n    \"\"\"\n    if i < _size then\n      _ptr._apply(i)\n    else\n      error\n    end\n\n  fun ref update(i: USize, value: A): A^ ? =>\n    \"\"\"\n    Change the i-th element, raising an error if the index is out of bounds.\n    \"\"\"\n    if i < _size then\n      _ptr._update(i, consume value)\n    else\n      error\n    end\n\n  fun ref insert(i: USize, value: A) ? =>\n    \"\"\"\n    Insert an element into the array. Elements after this are moved up by one\n    index, extending the array.\n    An out of bounds index raises an error.\n    \"\"\"\n    if i <= _size then\n      reserve(_size + 1)\n      _ptr._offset(i)._insert(1, _size - i)\n      _ptr._update(i, consume value)\n      _size = _size + 1\n    else\n      error\n    end\n\n  fun ref delete(i: USize): A^ ? =>\n    \"\"\"\n    Delete an element from the array. Elements after this are moved down by one\n    index, compacting the array.\n    An out of bounds index raises an error.\n    The deleted element is returned.\n    \"\"\"\n    if i < _size then\n      _size = _size - 1\n      _ptr._offset(i)._delete(1, _size - i)\n    else\n      error\n    end\n\n  fun ref truncate(len: USize) =>\n    \"\"\"\n    Truncate an array to the given length, discarding excess elements. If the\n    array is already smaller than len, do nothing.\n    \"\"\"\n    _size = _size.min(len)\n\n  fun ref trim_in_place(from: USize = 0, to: USize = -1) =>\n    \"\"\"\n    Trim the array to a portion of itself, covering `from` until `to`.\n    Unlike slice, the operation does not allocate a new array nor copy elements.\n    \"\"\"\n    let last = _size.min(to)\n    let offset = last.min(from)\n    let size' = last - offset\n\n    // use the new size' for alloc if we're not including the last used byte\n    // from the original data and only include the extra allocated bytes if\n    // we're including the last byte.\n    _alloc = if last == _size then _alloc - offset else size' end\n\n    _size = size'\n    _ptr = _ptr._offset(offset)\n\n  fun val trim(from: USize = 0, to: USize = -1): Array[A] val =>\n    \"\"\"\n    Return a shared portion of this array, covering `from` until `to`.\n    Both the original and the new array are immutable, as they share memory.\n    The operation does not allocate a new array pointer nor copy elements.\n    \"\"\"\n    let last = _size.min(to)\n    let offset = last.min(from)\n\n    recover\n      let size' = last - offset\n\n      // use the new size' for alloc if we're not including the last used byte\n      // from the original data and only include the extra allocated bytes if\n      // we're including the last byte.\n      let alloc = if last == _size then _alloc - offset else size' end\n\n      if size' > 0 then\n        from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc)\n      else\n        create()\n      end\n    end\n\n  fun iso chop(split_point: USize): (Array[A] iso^, Array[A] iso^) =>\n    \"\"\"\n    Chops the array in half at the split point requested and returns both\n    the left and right portions. The original array is trimmed in place and\n    returned as the right portion. If the split point is larger than the\n    array, the left portion is the original array and the right portion\n    is a new empty array.\n    Both arrays are isolated and mutable, as they do not share memory.\n    The operation does not allocate a new array pointer nor copy elements.\n    \"\"\"\n    let start_ptr = _ptr\n    let size' = _size.min(split_point)\n    let alloc = if size' == _size then _alloc else split_point end\n\n    trim_in_place(split_point)\n\n    let left = recover\n      if size' > 0 then\n        from_cpointer(start_ptr._unsafe(), size', alloc)\n      else\n        create()\n      end\n    end\n\n    (consume left, consume this)\n\n  fun copy_to(\n    dst: Array[this->A!],\n    src_idx: USize,\n    dst_idx: USize,\n    len: USize)\n  =>\n    \"\"\"\n    Copy len elements from this(src_idx) to dst(dst_idx).\n    \"\"\"\n    dst.reserve(dst_idx + len)\n    _ptr._offset(src_idx)._copy_to(dst._ptr._offset(dst_idx), len)\n\n    if dst._size < (dst_idx + len) then\n      dst._size = dst_idx + len\n    end\n\n  fun ref remove(i: USize, n: USize) =>\n    \"\"\"\n    Remove n elements from the array, beginning at index i.\n    \"\"\"\n    if i < _size then\n      let count = n.min(_size - i)\n      _size = _size - count\n      _ptr._offset(i)._delete(count, _size - i)\n    end\n\n  fun ref clear() =>\n    \"\"\"\n    Remove all elements from the array.\n    \"\"\"\n    _size = 0\n\n  fun ref push(value: A) =>\n    \"\"\"\n    Add an element to the end of the array.\n    \"\"\"\n    reserve(_size + 1)\n    _ptr._update(_size, consume value)\n    _size = _size + 1\n\n  fun ref pop(): A^ ? =>\n    \"\"\"\n    Remove an element from the end of the array.\n    The removed element is returned.\n    \"\"\"\n    delete(_size - 1)?\n\n  fun ref unshift(value: A) =>\n    \"\"\"\n    Add an element to the beginning of the array.\n    \"\"\"\n    try\n      insert(0, consume value)?\n    end\n\n  fun ref shift(): A^ ? =>\n    \"\"\"\n    Remove an element from the beginning of the array.\n    The removed element is returned.\n    \"\"\"\n    delete(0)?\n\n  fun ref append(\n    seq: (ReadSeq[A] & ReadElement[A^]),\n    offset: USize = 0,\n    len: USize = -1)\n  =>\n    \"\"\"\n    Append the elements from a sequence, starting from the given offset.\n    \"\"\"\n    if offset >= seq.size() then\n      return\n    end\n\n    let copy_len = len.min(seq.size() - offset)\n    reserve(_size + copy_len)\n\n    var n = USize(0)\n\n    try\n      while n < copy_len do\n        _ptr._update(_size + n, seq(offset + n)?)\n\n        n = n + 1\n      end\n    end\n\n    _size = _size + n\n\n  fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) =>\n    \"\"\"\n    Add len iterated elements to the end of the array, starting from the given\n    offset.\n    \"\"\"\n\n    var n = USize(0)\n\n    try\n      while n < offset do\n        if iter.has_next() then\n          iter.next()?\n        else\n          return\n        end\n\n        n = n + 1\n      end\n    end\n\n    n = 0\n\n    // If a concrete len is specified, we take the caller at their word\n    // and reserve that much space, even though we can't verify that the\n    // iterator actually has that many elements available. Reserving ahead\n    // of time lets us take a fast path of direct pointer access.\n    if len != -1 then\n      reserve(_size + len)\n\n      try\n        while n < len do\n          if iter.has_next() then\n            _ptr._update(_size + n, iter.next()?)\n          else\n            break\n          end\n\n          n = n + 1\n        end\n      end\n\n      _size = _size + n\n    else\n      try\n        while n < len do\n          if iter.has_next() then\n            push(iter.next()?)\n          else\n            break\n          end\n\n          n = n + 1\n        end\n      end\n    end\n\n  fun find(\n    value: A!,\n    offset: USize = 0,\n    nth: USize = 0,\n    predicate: {(box->A!, box->A!): Bool} val = {(l, r) => l is r })\n    : USize ?\n  =>\n    \"\"\"\n    Find the `nth` appearance of `value` from the beginning of the array,\n    starting at `offset` and examining higher indices, and using the supplied\n    `predicate` for comparisons. Returns the index of the value, or raise an\n    error if the value isn't present.\n\n    By default, the search starts at the first element of the array, returns\n    the first instance of `value` found, and uses object identity for\n    comparison.\n    \"\"\"\n    var i = offset\n    var n = USize(0)\n\n    while i < _size do\n      if predicate(_ptr._apply(i), value) then\n        if n == nth then\n          return i\n        end\n\n        n = n + 1\n      end\n\n      i = i + 1\n    end\n\n    error\n\n  fun contains(\n    value: A!,\n    predicate: {(box->A!, box->A!): Bool} val =\n      {(l: box->A!, r: box->A!): Bool => l is r })\n    : Bool\n  =>\n    \"\"\"\n    Returns true if the array contains `value`, false otherwise.\n    \"\"\"\n    var i = USize(0)\n\n    while i < _size do\n      if predicate(_ptr._apply(i), value) then\n        return true\n      end\n\n      i = i + 1\n    end\n    false\n\n  fun rfind(\n    value: A!,\n    offset: USize = -1,\n    nth: USize = 0,\n    predicate: {(box->A!, box->A!): Bool} val =\n      {(l: box->A!, r: box->A!): Bool => l is r })\n    : USize ?\n  =>\n    \"\"\"\n    Find the `nth` appearance of `value` from the end of the array, starting at\n    `offset` and examining lower indices, and using the supplied `predicate` for\n    comparisons. Returns the index of the value, or raise an error if the value\n    isn't present.\n\n    By default, the search starts at the last element of the array, returns the\n    first instance of `value` found, and uses object identity for comparison.\n    \"\"\"\n    if _size > 0 then\n      var i = if offset >= _size then _size - 1 else offset end\n      var n = USize(0)\n\n      repeat\n        if predicate(_ptr._apply(i), value) then\n          if n == nth then\n            return i\n          end\n\n          n = n + 1\n        end\n      until (i = i - 1) == 0\n      end\n    end\n\n    error\n\n  fun clone(): Array[this->A!]^ =>\n    \"\"\"\n    Clone the array.\n    The new array contains references to the same elements that the old array\n    contains, the elements themselves are not cloned.\n    \"\"\"\n    let out = Array[this->A!](_size)\n    _ptr._copy_to(out._ptr, _size)\n    out._size = _size\n    out\n\n  fun slice(\n    from: USize = 0,\n    to: USize = -1,\n    step: USize = 1)\n    : Array[this->A!]^\n  =>\n    \"\"\"\n    Create a new array that is a clone of a portion of this array. The range is\n    exclusive and saturated.\n    The new array contains references to the same elements that the old array\n    contains, the elements themselves are not cloned.\n    \"\"\"\n    let out = Array[this->A!]\n    let last = _size.min(to)\n    let len = last - from\n\n    if (last > from) and (step > 0) then\n      out.reserve((len + (step - 1)) / step)\n\n      if step == 1 then\n        copy_to(out, from, 0, len)\n      else\n        try\n          var i = from\n\n          while i < last do\n            out.push(this(i)?)\n            i = i + step\n          end\n        end\n      end\n    end\n\n    out\n\n  fun permute(indices: Iterator[USize]): Array[this->A!]^ ? =>\n    \"\"\"\n    Create a new array with the elements permuted.\n    Permute to an arbitrary order that may include duplicates. An out of bounds\n    index raises an error.\n    The new array contains references to the same elements that the old array\n    contains, the elements themselves are not copied.\n    \"\"\"\n    let out = Array[this->A!]\n    for i in indices do\n      out.push(this(i)?)\n    end\n    out\n\n  fun reverse(): Array[this->A!]^ =>\n    \"\"\"\n    Create a new array with the elements in reverse order.\n    The new array contains references to the same elements that the old array\n    contains, the elements themselves are not copied.\n    \"\"\"\n    clone() .> reverse_in_place()\n\n  fun ref reverse_in_place() =>\n    \"\"\"\n    Reverse the array in place.\n    \"\"\"\n    if _size > 1 then\n      var i: USize = 0\n      var j = _size - 1\n\n      while i < j do\n        let x = _ptr._apply(i)\n        _ptr._update(i, _ptr._apply(j))\n        _ptr._update(j, x)\n        i = i + 1\n        j = j - 1\n      end\n    end\n\n  fun ref swap_elements(i: USize, j: USize) ? =>\n    \"\"\"\n    Swap the element at index i with the element at index j.\n    If either i or j are out of bounds, an error is raised.\n    \"\"\"\n    if (i >= _size) or (j >= _size) then error end\n\n    let x = _ptr._apply(i)\n    _ptr._update(i, _ptr._apply(j))\n    _ptr._update(j, consume x)\n\n  fun keys(): ArrayKeys[A, this->Array[A]]^ =>\n    \"\"\"\n    Return an iterator over the indices in the array.\n    \"\"\"\n    ArrayKeys[A, this->Array[A]](this)\n\n  fun values(): ArrayValues[A, this->Array[A]]^ =>\n    \"\"\"\n    Return an iterator over the values in the array.\n    \"\"\"\n    ArrayValues[A, this->Array[A]](this)\n\n  fun pairs(): ArrayPairs[A, this->Array[A]]^ =>\n    \"\"\"\n    Return an iterator over the (index, value) pairs in the array.\n    \"\"\"\n    ArrayPairs[A, this->Array[A]](this)\n\nclass ArrayKeys[A, B: Array[A] #read] is Iterator[USize]\n  let _array: B\n  var _i: USize\n\n  new create(array: B) =>\n    _array = array\n    _i = 0\n\n  fun has_next(): Bool =>\n    _i < _array.size()\n\n  fun ref next(): USize =>\n    if _i < _array.size() then\n      _i = _i + 1\n    else\n      _i\n    end\n\nclass ArrayValues[A, B: Array[A] #read] is Iterator[B->A]\n  let _array: B\n  var _i: USize\n\n  new create(array: B) =>\n    _array = array\n    _i = 0\n\n  fun has_next(): Bool =>\n    _i < _array.size()\n\n  fun ref next(): B->A ? =>\n    _array(_i = _i + 1)?\n\n  fun ref rewind(): ArrayValues[A, B] =>\n    _i = 0\n    this\n\nclass ArrayPairs[A, B: Array[A] #read] is Iterator[(USize, B->A)]\n  let _array: B\n  var _i: USize\n\n  new create(array: B) =>\n    _array = array\n    _i = 0\n\n  fun has_next(): Bool =>\n    _i < _array.size()\n\n  fun ref next(): (USize, B->A) ? =>\n    (_i, _array(_i = _i + 1)?)",
            "title": "array.pony"
        },
        {
            "location": "/src/builtin/any/",
            "text": "interface tag Any",
            "title": "any.pony"
        },
        {
            "location": "/src/builtin/ambient_auth/",
            "text": "primitive AmbientAuth\n  \"\"\"\n  This type represents the root capability. When a Pony program starts, the\n  Env passed to the Main actor contains an instance of the root capability.\n\n  Ambient access to the root capability is denied outside of the builtin\n  package. Inside the builtin package, only Env creates a Root.\n\n  The root capability can be used by any package that wants to establish a\n  principle of least authority. A typical usage is to have a parameter on a\n  constructor for some resource that expects a limiting capability specific to\n  the package, but will also accept the root capability as representing\n  unlimited access.\n  \"\"\"\n  new _create() =>\n    None",
            "title": "ambient_auth.pony"
        },
        {
            "location": "/src/capsicum/cap_rights/",
            "text": "use \"files\"\n\ntype CapRights is CapRights0\n\nclass CapRights0\n  \"\"\"\n  Version 0 of the capsicum cap_rights_t structure.\n  \"\"\"\n  var _r0: U64 = 0\n  var _r1: U64 = 0\n\n  new create() =>\n    \"\"\"\n    Initialises with no rights.\n    \"\"\"\n    clear()\n\n  new from(caps: FileCaps box) =>\n    \"\"\"\n    Initialises with the rights from a FileCaps.\n    \"\"\"\n    clear()\n\n    if caps(FileCreate) then set(Cap.creat()) end\n    if caps(FileChmod) then set(Cap.fchmod()) end\n    if caps(FileChown) then set(Cap.fchown()) end\n\n    if caps(FileLink) then\n      set(Cap.linkat())\n      set(Cap.symlinkat())\n    end\n\n    if caps(FileLookup) then set(Cap.lookup()) end\n    if caps(FileMkdir) then set(Cap.mkdirat()) end\n    if caps(FileRead) then set(Cap.read()) end\n    if caps(FileRemove) then set(Cap.unlinkat()) end\n    if caps(FileRename) then set(Cap.renameat()) end\n    if caps(FileSeek) then set(Cap.seek()) end\n\n    if caps(FileStat) then\n      set(Cap.fstat())\n      set(Cap.fstatfs())\n      set(Cap.fcntl())\n    end\n\n    if caps(FileSync) then set(Cap.fsync()) end\n    if caps(FileTime) then set(Cap.futimes()) end\n    if caps(FileTruncate) then set(Cap.ftruncate()) end\n    if caps(FileWrite) then set(Cap.write()) end\n    if caps(FileExec) then set(Cap.fexecve()) end\n\n  new descriptor(fd: I32) =>\n    \"\"\"\n    Initialises with the rights on the given file descriptor.\n    \"\"\"\n    ifdef freebsd or \"capsicum\" then\n      @__cap_rights_get[I32](_version(), fd, addressof _r0)\n    end\n\n  fun ref set(cap: U64) =>\n    ifdef freebsd or \"capsicum\" then\n      @__cap_rights_set[None](addressof _r0, cap, U64(0))\n    end\n\n  fun ref unset(cap: U64) =>\n    ifdef freebsd or \"capsicum\" then\n      @__cap_rights_clear[None](addressof _r0, cap, U64(0))\n    end\n\n  fun limit(fd: I32): Bool =>\n    \"\"\"\n    Limits the fd to the encoded rights.\n    \"\"\"\n    ifdef freebsd or \"capsicum\" then\n      @cap_rights_limit[I32](fd, addressof _r0) == 0\n    else\n      true\n    end\n\n  fun ref merge(that: CapRights0) =>\n    \"\"\"\n    Merge the rights in that into this.\n    \"\"\"\n    ifdef freebsd or \"capsicum\" then\n      @cap_rights_merge[None](addressof _r0, addressof that._r0)\n    end\n\n  fun ref remove(that: CapRights0) =>\n    \"\"\"\n    Remove the rights in that from this.\n    \"\"\"\n    ifdef freebsd or \"capsicum\" then\n      @cap_rights_remove[None](addressof _r0, addressof that._r0)\n    end\n\n  fun ref clear() =>\n    \"\"\"\n    Clear all rights.\n    \"\"\"\n    ifdef freebsd or \"capsicum\" then\n      @__cap_rights_init[Pointer[U64]](I32(0), addressof _r0, U64(0))\n    end\n\n  fun contains(that: CapRights0): Bool =>\n    \"\"\"\n    Check that this is a superset of the rights in that.\n    \"\"\"\n    ifdef freebsd or \"capsicum\" then\n      @cap_rights_contains[Bool](addressof _r0, addressof that._r0)\n    else\n      true\n    end\n\n  fun _version(): I32 => 0",
            "title": "cap_rights.pony"
        },
        {
            "location": "/src/capsicum/cap/",
            "text": "primitive Cap\n  \"\"\"\n  The Capsicum rights.\n  \"\"\"\n  fun enter(): Bool =>\n    \"\"\"\n    This places the current process into capability mode, a mode of execution\n    in which processes may only issue system calls operating on file\n    descriptors or reading limited global system state. Access to global name\n    spaces, such as file system or IPC name spaces, is prevented.\n    \"\"\"\n    ifdef freebsd or \"capsicum\" then\n      @cap_enter[I32]() == 0\n    else\n      false\n    end\n\n  fun read(): U64 => _id(0, 1 << 0)\n  fun write(): U64 => _id(0, 1 << 1)\n  fun seek_tell(): U64 => _id(0, 1 << 2)\n  fun seek(): U64 => _id(0, 1 << 3) or seek_tell()\n  fun pread(): U64 => seek() or read()\n  fun pwrite(): U64 => seek() or write()\n\n  fun mmap(): U64 => _id(0, 1 << 4)\n  fun mmap_r(): U64 => mmap() or seek() or read()\n  fun mmap_w(): U64 => mmap() or seek() or write()\n  fun mmap_x(): U64 => mmap() or seek() or _id(0, 1 << 5)\n  fun mmap_rw(): U64 => mmap_r() or mmap_w()\n  fun mmap_rx(): U64 => mmap_r() or mmap_x()\n  fun mmap_wx(): U64 => mmap_w() or mmap_x()\n  fun mmap_rwx(): U64 => mmap_r() or mmap_w() or mmap_x()\n\n  fun creat(): U64 => _id(0, 1 << 6)\n  fun fexecve(): U64 => _id(0, 1 << 7)\n  fun fsync(): U64 => _id(0, 1 << 8)\n  fun ftruncate(): U64 => _id(0, 1 << 9)\n  fun lookup(): U64 => _id(0, 1 << 10)\n  fun fchdir(): U64 => _id(0, 1 << 11)\n  fun fchflags(): U64 => _id(0, 1 << 12)\n  fun chflagsat(): U64 => fchflags() or lookup()\n  fun fchmod(): U64 => _id(0, 1 << 13)\n  fun fchmodat(): U64 => fchmod() or lookup()\n  fun fchown(): U64 => _id(0, 1 << 14)\n  fun fchownat(): U64 => fchown() or lookup()\n  fun fcntl(): U64 => _id(0, 1 << 15)\n  fun flock(): U64 => _id(0, 1 << 16)\n  fun fpathconf(): U64 => _id(0, 1 << 17)\n  fun fsck(): U64 => _id(0, 1 << 18)\n  fun fstat(): U64 => _id(0, 1 << 19)\n  fun fstatat(): U64 => fstat() or lookup()\n  fun fstatfs(): U64 => _id(0, 1 << 20)\n  fun futimes(): U64 => _id(0, 1 << 21)\n  fun futimesat(): U64 => futimes() or lookup()\n\n  fun linkat(): U64 => _id(0, 1 << 22) or lookup()\n  fun mkdirat(): U64 => _id(0, 1 << 23) or lookup()\n  fun mkfifoat(): U64 => _id(0, 1 << 24) or lookup()\n  fun mknodat(): U64 => _id(0, 1 << 25) or lookup()\n  fun renameat(): U64 => _id(0, 1 << 26) or lookup()\n  fun symlinkat(): U64 => _id(0, 1 << 27) or lookup()\n  fun unlinkat(): U64 => _id(0, 1 << 28) or lookup()\n\n  fun accept(): U64 => _id(0, 1 << 29)\n  fun bind(): U64 => _id(0, 1 << 30)\n  fun connect(): U64 => _id(0, 1 << 31)\n  fun getpeername(): U64 => _id(0, 1 << 32)\n  fun getsockname(): U64 => _id(0, 1 << 33)\n  fun getsockopt(): U64 => _id(0, 1 << 34)\n  fun listen(): U64 => _id(0, 1 << 35)\n  fun peeloff(): U64 => _id(0, 1 << 36)\n  fun recv(): U64 => read()\n  fun send(): U64 => write()\n  fun setsockopt(): U64 => _id(0, 1 << 37)\n  fun shutdown(): U64 => _id(0, 1 << 38)\n  fun bindat(): U64 => _id(0, 1 << 39) or lookup()\n  fun connectat(): U64 => _id(0, 1 << 40) or lookup()\n\n  fun sock_client(): U64 =>\n    connect() or getpeername() or getsockname() or getsockopt() or peeloff() or\n      recv() or send() or setsockopt() or shutdown()\n\n  fun sock_server(): U64 =>\n    accept() or bind() or getpeername() or getsockname() or getsockopt() or\n      listen() or peeloff() or recv() or send() or setsockopt() or shutdown()\n\n  fun mac_get(): U64 => _id(1, 1 << 0)\n  fun mac_set(): U64 => _id(1, 1 << 1)\n\n  fun sem_getvalue(): U64 => _id(1, 1 << 2)\n  fun sem_post(): U64 => _id(1, 1 << 3)\n  fun sem_wait(): U64 => _id(1, 1 << 4)\n\n  fun event(): U64 => _id(1, 1 << 5)\n  fun kqueue_event(): U64 => _id(1, 1 << 6)\n  fun ioctl(): U64 => _id(1, 1 << 7)\n  fun ttyhook(): U64 => _id(1, 1 << 8)\n\n  fun pdgetpid(): U64 => _id(1, 1 << 9)\n  fun pdwait(): U64 => _id(1, 1 << 10)\n  fun pdkill(): U64 => _id(1, 1 << 11)\n\n  fun exattr_delete(): U64 => _id(1, 1 << 12)\n  fun exattr_get(): U64 => _id(1, 1 << 13)\n  fun exattr_list(): U64 => _id(1, 1 << 14)\n  fun exattr_set(): U64 => _id(1, 1 << 15)\n\n  fun acl_check(): U64 => _id(1, 1 << 16)\n  fun acl_delete(): U64 => _id(1, 1 << 17)\n  fun acl_get(): U64 => _id(1, 1 << 18)\n  fun acl_set(): U64 => _id(1, 1 << 19)\n\n  fun kqueue_change(): U64 => _id(1, 1 << 20)\n  fun kqueue(): U64 => kqueue_event() or kqueue_change()\n\n  fun _id(idx: U64, bit: U64): U64 =>\n    \"\"\"\n    Build a Capsicum ID from an index and a bit position.\n    \"\"\"\n    (1 << (57 + idx)) or bit",
            "title": "cap.pony"
        },
        {
            "location": "/src/collections/sort/",
            "text": "primitive Sort[A: Seq[B] ref, B: Comparable[B] #read]\n  \"\"\"\n  Implementation of dual-pivot quicksort.\n  \"\"\"\n  fun apply(a: A): A^ =>\n    \"\"\"\n    Sort the given seq.\n    \"\"\"\n    try _sort(a, 0, a.size().isize() - 1)? end\n    a\n\n  fun _sort(a: A, lo: ISize, hi: ISize) ? =>\n    if hi <= lo then return end\n    // choose outermost elements as pivots\n    if a(lo.usize())? > a(hi.usize())? then _swap(a, lo, hi)? end\n    (var p, var q) = (a(lo.usize())?, a(hi.usize())?)\n    // partition according to invariant\n    (var l, var g) = (lo + 1, hi - 1)\n    var k = l\n    while k <= g do\n      if a(k.usize())? < p then\n        _swap(a, k, l)?\n        l = l + 1\n      elseif a(k.usize())? >= q then\n        while (a(g.usize())? > q) and (k < g) do g = g - 1 end\n        _swap(a, k, g)?\n        g = g - 1\n        if a(k.usize())? < p then\n          _swap(a, k, l)?\n          l = l + 1\n        end\n      end\n      k = k + 1\n    end\n    (l, g) = (l - 1, g + 1)\n    // swap pivots to final positions\n    _swap(a, lo, l)?\n    _swap(a, hi, g)?\n    // recursively sort 3 partitions\n    _sort(a, lo, l - 1)?\n    _sort(a, l + 1, g - 1)?\n    _sort(a, g + 1, hi)?\n\n  fun _swap(a: A, i: ISize, j: ISize) ? =>\n    a(j.usize())? = a(i.usize())? = a(j.usize())?",
            "title": "sort.pony"
        },
        {
            "location": "/src/collections/set/",
            "text": "type Set[A: (Hashable #read & Equatable[A] #read)] is HashSet[A, HashEq[A]]\n\ntype SetIs[A] is HashSet[A, HashIs[A!]]\n\nclass HashSet[A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box]\n  \"\"\"\n  A set, built on top of a HashMap. This is implemented as map of an alias of\n  a type to itself\n  \"\"\"\n  embed _map: HashMap[A!, A, H]\n\n  new create(prealloc: USize = 8) =>\n    \"\"\"\n    Defaults to a prealloc of 8.\n    \"\"\"\n    _map = _map.create(prealloc)\n\n  fun size(): USize =>\n    \"\"\"\n    The number of items in the set.\n    \"\"\"\n    _map.size()\n\n  fun space(): USize =>\n    \"\"\"\n    The available space in the set.\n    \"\"\"\n    _map.space()\n\n  fun apply(value: box->A!): this->A ? =>\n    \"\"\"\n    Return the value if its in the set, otherwise raise an error.\n    \"\"\"\n    _map(value)?\n\n  fun contains(value: box->A!): Bool =>\n    \"\"\"\n    Checks whether the set contains the value.\n    \"\"\"\n    _map.contains(value)\n\n  fun ref clear() =>\n    \"\"\"\n    Remove all elements from the set.\n    \"\"\"\n    _map.clear()\n\n  fun ref set(value: A) =>\n    \"\"\"\n    Add a value to the set.\n    \"\"\"\n    _map(value) = consume value\n\n  fun ref unset(value: box->A!) =>\n    \"\"\"\n    Remove a value from the set.\n    \"\"\"\n    try _map.remove(value)? end\n\n  fun ref extract(value: box->A!): A^ ? =>\n    \"\"\"\n    Remove a value from the set and return it. Raises an error if the value\n    wasn't in the set.\n    \"\"\"\n    _map.remove(value)?._2\n\n  fun ref union(that: Iterator[A^]) =>\n    \"\"\"\n    Add everything in that to the set.\n    \"\"\"\n    for value in that do\n      set(consume value)\n    end\n\n  fun ref intersect[K: HashFunction[box->A!] val = H](\n    that: HashSet[box->A!, K])\n  =>\n    \"\"\"\n    Remove everything that isn't in that.\n    \"\"\"\n    let start_size = _map.size()\n    var seen: USize = 0\n    var i: USize = -1\n\n    while seen < start_size do\n      try\n        i = next_index(i)?\n        if not that.contains(index(i)?) then\n          unset(index(i)?)\n        end\n      end\n      seen = seen + 1\n    end\n\n  fun ref difference(that: Iterator[A^]) =>\n    \"\"\"\n    Remove elements in this which are also in that. Add elements in that which\n    are not in this.\n    \"\"\"\n    for value in that do\n      try\n        extract(value)?\n      else\n        set(consume value)\n      end\n    end\n\n  fun ref remove(that: Iterator[box->A!]) =>\n    \"\"\"\n    Remove everything that is in that.\n    \"\"\"\n    for value in that do\n      unset(value)\n    end\n\n  fun add[K: HashFunction[this->A!] val = H](\n    value: this->A!)\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Add a value to the set.\n    \"\"\"\n    clone[K]() .> set(value)\n\n  fun sub[K: HashFunction[this->A!] val = H](\n    value: box->this->A!)\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Remove a value from the set.\n    \"\"\"\n    clone[K]() .> unset(value)\n\n  fun op_or[K: HashFunction[this->A!] val = H](\n    that: this->HashSet[A, H])\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Create a set with the elements of both this and that.\n    \"\"\"\n    let r = clone[K]()\n\n    for value in that.values() do\n      r.set(value)\n    end\n    r\n\n  fun op_and[K: HashFunction[this->A!] val = H](\n    that: this->HashSet[A, H])\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Create a set with the elements that are in both this and that.\n    \"\"\"\n    let r = HashSet[this->A!, K](size().min(that.size()))\n\n    for value in values() do\n      try\n        that(value)?\n        r.set(value)\n      end\n    end\n    r\n\n  fun op_xor[K: HashFunction[this->A!] val = H](\n    that: this->HashSet[A, H])\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Create a set with the elements that are in either set but not both.\n    \"\"\"\n    let r = HashSet[this->A!, K](size().max(that.size()))\n\n    for value in values() do\n      try\n        that(value)?\n      else\n        r.set(value)\n      end\n    end\n\n    for value in that.values() do\n      try\n        this(value)?\n      else\n        r.set(value)\n      end\n    end\n    r\n\n  fun without[K: HashFunction[this->A!] val = H](\n    that: this->HashSet[A, H])\n    : HashSet[this->A!, K]^\n  =>\n    \"\"\"\n    Create a set with the elements of this that are not in that.\n    \"\"\"\n    let r = HashSet[this->A!, K](size())\n\n    for value in values() do\n      try\n        that(value)?\n      else\n        r.set(value)\n      end\n    end\n    r\n\n  fun clone[K: HashFunction[this->A!] val = H](): HashSet[this->A!, K]^ =>\n    \"\"\"\n    Create a clone. The element type may be different due to aliasing and\n    viewpoint adaptation.\n    \"\"\"\n    let r = HashSet[this->A!, K](size())\n\n    for value in values() do\n      r.set(value)\n    end\n    r\n\n  fun eq(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns true if the sets contain the same elements.\n    \"\"\"\n    (size() == that.size()) and (this <= that)\n\n  fun ne(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns false if the sets contain the same elements.\n    \"\"\"\n    not (this == that)\n\n  fun lt(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns true if every element in this is also in that, and this has fewer\n    elements than that.\n    \"\"\"\n    (size() < that.size()) and (this <= that)\n\n  fun le(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns true if every element in this is also in that.\n    \"\"\"\n    try\n      for value in values() do\n        that(value)?\n      end\n      true\n    else\n      false\n    end\n\n  fun gt(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns true if every element in that is also in this, and this has more\n    elements than that.\n    \"\"\"\n    (size() > that.size()) and (that <= this)\n\n  fun ge(that: HashSet[A, H] box): Bool =>\n    \"\"\"\n    Returns true if every element in that is also in this.\n    \"\"\"\n    that <= this\n\n  fun next_index(prev: USize = -1): USize ? =>\n    \"\"\"\n    Given an index, return the next index that has a populated value. Raise an\n    error if there is no next populated index.\n    \"\"\"\n    _map.next_index(prev)?\n\n  fun index(i: USize): this->A ? =>\n    \"\"\"\n    Returns the value at a given index. Raise an error if the index is not\n    populated.\n    \"\"\"\n    _map.index(i)?._2\n\n  fun values(): SetValues[A, H, this->HashSet[A, H]]^ =>\n    \"\"\"\n    Return an iterator over the values.\n    \"\"\"\n    SetValues[A, H, this->HashSet[A, H]](this)\n\nclass SetValues[A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is\n  Iterator[S->A]\n  \"\"\"\n  An iterator over the values in a set.\n  \"\"\"\n  let _set: S\n  var _i: USize = -1\n  var _count: USize = 0\n\n  new create(set: S) =>\n    \"\"\"\n    Creates an iterator for the given set.\n    \"\"\"\n    _set = set\n\n  fun has_next(): Bool =>\n    \"\"\"\n    True if it believes there are remaining entries. May not be right if values\n    were added or removed from the set.\n    \"\"\"\n    _count < _set.size()\n\n  fun ref next(): S->A ? =>\n    \"\"\"\n    Returns the next value, or raises an error if there isn't one. If values\n    are added during iteration, this may not return all values.\n    \"\"\"\n    _i = _set.next_index(_i)?\n    _count = _count + 1\n    _set.index(_i)?",
            "title": "set.pony"
        },
        {
            "location": "/src/collections/ring_buffer/",
            "text": "class RingBuffer[A]\n  \"\"\"\n  A ring buffer.\n  \"\"\"\n  embed _array: Array[A]\n  let _mod: USize\n  var _write: USize = 0\n\n  new create(len: USize) =>\n    \"\"\"\n    Create a ring buffer with a fixed size. The size will be rounded up to the\n    next power of 2.\n    \"\"\"\n    let n = len.max(2).next_pow2()\n    _mod = n - 1\n    _array = Array[A](n)\n\n  fun head(): USize ? =>\n    \"\"\"\n    The first read that will succeed. If nothing has been written to the ring,\n    this will raise an error.\n    \"\"\"\n    if _write > 0 then\n      if _write > space() then\n        _write - space()\n      else\n        0\n      end\n    else\n      error\n    end\n\n  fun size(): USize =>\n    \"\"\"\n    The number of elements that have been added to the ring.\n    \"\"\"\n    _write\n\n  fun space(): USize =>\n    \"\"\"\n    The available space in the ring.\n    \"\"\"\n    _mod + 1\n\n  fun apply(i: USize): this->A ? =>\n    \"\"\"\n    Get the i-th element from the ring. If the i-th element has not yet been\n    added or is no longer available, this will raise an error.\n    \"\"\"\n    if (i >= _write) or ((_write - i) > space()) then\n      error\n    end\n\n    _array(i and _mod)?\n\n  fun ref push(value: A): Bool =>\n    \"\"\"\n    Add an element to the ring. If the ring is full, this will drop the oldest\n    element in the ring. Returns true if an element was dropped.\n    \"\"\"\n    var full = false\n\n    if _write < space() then\n      _array.push(consume value)\n    else\n      try _array(_write and _mod)? = consume value end\n      full = true\n    end\n\n    _write = _write + 1\n    full\n\n  fun ref clear() =>\n    \"\"\"\n    Clear the queue.\n    \"\"\"\n    _array.clear()\n    _write = 0",
            "title": "ring_buffer.pony"
        },
        {
            "location": "/src/collections/reverse/",
            "text": "class Reverse[A: (Real[A] val & Number) = USize] is Iterator[A]\n  \"\"\"\n  Produces [max, min].\n  \"\"\"\n  let _min: A\n  let _max: A\n  let _dec: A\n  var _idx: A\n\n  new create(max: A, min: A, dec: A = 1) =>\n    _min = min\n    _max = max\n    _dec = dec\n    _idx = max\n\n  fun has_next(): Bool =>\n    (_idx >= _min) and (_idx <= _max)\n\n  fun ref next(): A =>\n    if has_next() then\n      _idx = _idx - _dec\n    else\n      _idx + _dec\n    end\n\n  fun ref rewind() =>\n    _idx = _max",
            "title": "reverse.pony"
        },
        {
            "location": "/src/collections/range/",
            "text": "class Range[A: (Real[A] val & Number) = USize] is Iterator[A]\n  \"\"\"\n  Produces `[min, max)` with a step of `inc` for any `Number` type.\n\n  ```pony\n  // iterating with for-loop\n  for i in Range(0, 10) do\n    env.out.print(i.string())\n  end\n\n  // iterating over Range of U8 with while-loop\n  let range = Range[U8](5, 100, 5)\n  while range.has_next() do\n    handle_u8(range.next())\n  end\n  ```\n\n  Supports `min` being smaller than `max` with negative `inc`\n  but only for signed integer types and floats:\n\n  ```pony\n  var previous = 11\n  for left in Range[I64](10, -5, -1) do\n    if not (left < previous) then\n      error\n    end\n    previous = left\n  end\n  ```\n\n  If the `step` is not moving `min` towards `max` or if it is `0`,\n  the Range is considered infinite and iterating over it\n  will never terminate:\n\n  ```pony\n  let infinite_range1 = Range(0, 1, 0)\n  infinite_range1.is_infinite() == true\n\n  let infinite_range2 = Range[I8](0, 10, -1)\n  for _ in infinite_range2 do\n    env.out.print(\"will this ever end?\")\n    env.err.print(\"no, never!\")\n  end\n  ```\n\n  When using `Range` with  floating point types (`F32` and `F64`)\n  `inc` steps < 1.0 are possible. If any of the arguments contains\n  `NaN`, `+Inf` or `-Inf` the range is considered infinite as operations on\n  any of them won't move `min` towards `max`.\n  The actual values produced by such a `Range` are determined by what IEEE 754\n  defines as the result of `min` + `inc`:\n\n  ```pony\n  for and_a_half in Range[F64](0.5, 100) do\n    handle_half(and_a_half)\n  end\n\n  // this Range will produce 0 at first, then infinitely NaN\n  let nan: F64 = F64(0) / F64(0)\n  for what_am_i in Range[F64](0, 1000, nan) do\n    wild_guess(what_am_i)\n  end\n  ```\n\n  \"\"\"\n  let _min: A\n  let _max: A\n  let _inc: A\n  let _forward: Bool\n  let _infinite: Bool\n  var _idx: A\n\n  new create(min: A, max: A, inc: A = 1) =>\n    _min = min\n    _max = max\n    _inc = inc\n    _idx = min\n    _forward = (_min < _max) and (_inc > 0)\n    let is_float_infinite =\n      iftype A <: FloatingPoint[A] then\n        _min.nan() or _min.infinite()\n          or _max.nan() or _max.infinite()\n          or _inc.nan() or _inc.infinite()\n      else\n        false\n      end\n    _infinite =\n      is_float_infinite\n        or ((_inc == 0) and (min != max))    // no progress\n        or ((_min < _max) and (_inc < 0)) // progress into other directions\n        or ((_min > _max) and (_inc > 0))\n\n  fun has_next(): Bool =>\n    if _forward then\n      _idx < _max\n    else\n      _idx > _max\n    end\n\n  fun ref next(): A =>\n    if has_next() then\n      _idx = _idx + _inc\n    else\n      _idx\n    end\n\n  fun ref rewind() =>\n    _idx = _min\n\n  fun is_infinite(): Bool =>\n    _infinite",
            "title": "range.pony"
        },
        {
            "location": "/src/collections/map/",
            "text": "primitive _MapEmpty\nprimitive _MapDeleted\n\ntype Map[K: (Hashable #read & Equatable[K] #read), V] is\n  HashMap[K, V, HashEq[K]]\n  \"\"\"\n  This is a map that uses structural equality on the key.\n  \"\"\"\n\ntype MapIs[K, V] is HashMap[K, V, HashIs[K]]\n  \"\"\"\n  This is a map that uses identity comparison on the key.\n  \"\"\"\n\nclass HashMap[K, V, H: HashFunction[K] val]\n  \"\"\"\n  A quadratic probing hash map. Resize occurs at a load factor of 0.75. A\n  resized map has 2 times the space. The hash function can be plugged in to the\n  type to create different kinds of maps.\n  \"\"\"\n  var _size: USize = 0\n  var _array: Array[((K, V) | _MapEmpty | _MapDeleted)]\n\n  new create(prealloc: USize = 6) =>\n    \"\"\"\n    Create an array with space for prealloc elements without triggering a\n    resize. Defaults to 6.\n    \"\"\"\n    let len = (prealloc * 4) / 3\n    let n = len.max(8).next_pow2()\n    _array = _array.init(_MapEmpty, n)\n\n  fun size(): USize =>\n    \"\"\"\n    The number of items in the map.\n    \"\"\"\n    _size\n\n  fun space(): USize =>\n    \"\"\"\n    The available space in the map. Resize will happen when\n    size / space >= 0.75.\n    \"\"\"\n    _array.space()\n\n  fun apply(key: box->K!): this->V ? =>\n    \"\"\"\n    Gets a value from the map. Raises an error if no such item exists.\n    \"\"\"\n    (let i, let found) = _search(key)\n\n    if found then\n      _array(i)? as (_, this->V)\n    else\n      error\n    end\n\n  fun ref update(key: K, value: V): (V^ | None) =>\n    \"\"\"\n    Sets a value in the map. Returns the old value if there was one, otherwise\n    returns None. If there was no previous value, this may trigger a resize.\n    \"\"\"\n    try\n      (let i, let found) = _search(key)\n\n      let k = if found then\n        _array(i)? as (K^, _)\n      else\n        consume key\n      end\n      match _array(i)? = (consume k, consume value)\n      | (_, let v: V) =>\n        return consume v\n      else\n        _size = _size + 1\n\n        if (_size * 4) > (_array.size() * 3) then\n          _resize(_array.size() * 2)\n        end\n      end\n    end\n\n  fun ref upsert(key: K, value: V, f: {(V, V): V^} box): V ? =>\n    \"\"\"\n    Combines a provided value with the current value for the provided key\n    using the provided function. If the provided key has not been added to\n    the map yet, it sets its value to the provided value.\n\n    As a simple example, say we had a map with I64 values and we wanted to\n    add 4 to the current value for key \"test\", which let's say is currently 2.\n    We call\n\n    m.upsert(\"test\", 4, {(x, y) => x - y })\n\n    This changes the value associated with \"test\" to -2.\n\n    If we have not yet added the key \"new-key\" to the map and we call\n\n    m.upsert(\"new-key\", 4, {(x, y) => x - y })\n\n    then \"new-key\" is added to the map with a value of -4.\n\n    Returns the value that we set the key to\n    \"\"\"\n\n    (let i, let found) = _search(key)\n\n    try\n      if found then\n        (let pkey, let pvalue) = (_array(i)? = _MapEmpty) as (K^, V^)\n        _array(i)? = (consume pkey, f(consume pvalue, consume value))\n      else\n        let key' = key\n        _array(i)? = (consume key, consume value)\n        _size = _size + 1\n\n        if (_size * 4) > (_array.size() * 3) then\n          _resize(_array.size() * 2)\n          return this(key')?\n        end\n      end\n\n      return _array(i)? as (_, V)\n    else\n      error\n    end\n\n  fun ref insert(key: K, value: V): V ? =>\n    \"\"\"\n    Set a value in the map. Returns the new value, allowing reuse.\n    \"\"\"\n    try\n      (let i, let found) = _search(key)\n      let key' = key\n      _array(i)? = (consume key, consume value)\n\n      if not found then\n        _size = _size + 1\n\n        if (_size * 4) > (_array.size() * 3) then\n          _resize(_array.size() * 2)\n          return this(key')?\n        end\n      end\n\n      _array(i)? as (_, V)\n    else\n      // This is unreachable, since index will never be out-of-bounds.\n      error\n    end\n\n  fun ref insert_if_absent(key: K, value: V): V ? =>\n    \"\"\"\n    Set a value in the map if the key doesn't already exist in the Map.\n    Saves an extra lookup when doing a pattern like:\n\n    ```pony\n    if not my_map.contains(my_key) then\n      my_map(my_key) = my_value\n    end\n    ```\n\n    Returns the value, the same as `insert`, allowing 'insert_if_absent'\n    to be used as a drop-in replacement for `insert`.\n    \"\"\"\n    try\n      (let i, let found) = _search(key)\n      let key' = key\n\n      if not found then\n        _array(i)? = (consume key, consume value)\n\n        _size = _size + 1\n\n        if (_size * 4) > (_array.size() * 3) then\n          _resize(_array.size() * 2)\n          return this(key')?\n        end\n      end\n\n      _array(i)? as (_, V)\n    else\n      // This is unreachable, since index will never be out-of-bounds.\n      error\n    end\n\n  fun ref remove(key: box->K!): (K^, V^) ? =>\n    \"\"\"\n    Delete a value from the map and return it. Raises an error if there was no\n    value for the given key.\n    \"\"\"\n    try\n      (let i, let found) = _search(key)\n\n      if found then\n        _size = _size - 1\n\n        match _array(i)? = _MapDeleted\n        | (let k: K, let v: V) =>\n          return (consume k, consume v)\n        end\n      end\n    end\n    error\n\n  fun get_or_else(key: box->K!, alt: this->V): this->V =>\n    \"\"\"\n    Get the value associated with provided key if present. Otherwise,\n    return the provided alternate value.\n    \"\"\"\n    (let i, let found) = _search(key)\n\n    if found then\n      try\n        _array(i)? as (_, this->V)\n      else\n        // This should never happen as we have already\n        // proven that _array(i) exists\n        consume alt\n      end\n    else\n      consume alt\n    end\n\n  fun contains(k: box->K!): Bool =>\n    \"\"\"\n    Checks whether the map contains the key k\n    \"\"\"\n    (_, let found) = _search(k)\n    found\n\n  fun ref concat(iter: Iterator[(K^, V^)]) =>\n    \"\"\"\n    Add K, V pairs from the iterator to the map.\n    \"\"\"\n    for (k, v) in iter do\n      this(consume k) = consume v\n    end\n\n  fun add[H2: HashFunction[this->K!] val = H](\n    key: this->K!,\n    value: this->V!)\n    : HashMap[this->K!, this->V!, H2]^\n  =>\n    \"\"\"\n    This with the new (key, value) mapping.\n    \"\"\"\n    let r = clone[H2]()\n    r(key) = value\n    r\n\n  fun sub[H2: HashFunction[this->K!] val = H](\n    key: this->K!,\n    value: this->V!)\n    : HashMap[this->K!, this->V!, H2]^\n  =>\n    \"\"\"\n    This without the given key.\n    \"\"\"\n    let r = clone[H2]()\n    try r.remove(key)? end\n    r\n\n  fun next_index(prev: USize = -1): USize ? =>\n    \"\"\"\n    Given an index, return the next index that has a populated key and value.\n    Raise an error if there is no next populated index.\n    \"\"\"\n    for i in Range(prev + 1, _array.size()) do\n      match _array(i)?\n      | (_, _) => return i\n      end\n    end\n    error\n\n  fun index(i: USize): (this->K, this->V) ? =>\n    \"\"\"\n    Returns the key and value at a given index.\n    Raise an error if the index is not populated.\n    \"\"\"\n    _array(i)? as (this->K, this->V)\n\n  fun ref compact() =>\n    \"\"\"\n    Minimise the memory used for the map.\n    \"\"\"\n    _resize(((_size * 4) / 3).next_pow2().max(8))\n\n  fun clone[H2: HashFunction[this->K!] val = H]()\n    : HashMap[this->K!, this->V!, H2]^\n  =>\n    \"\"\"\n    Create a clone. The key and value types may be different due to aliasing\n    and viewpoint adaptation.\n    \"\"\"\n    let r = HashMap[this->K!, this->V!, H2](_size)\n\n    for (k, v) in pairs() do\n      r(k) = v\n    end\n    r\n\n  fun ref clear() =>\n    \"\"\"\n    Remove all entries.\n    \"\"\"\n    _size = 0\n    // Our default prealloc of 6 corresponds to an array alloc size of 8.\n    let n: USize = 8\n    _array = _array.init(_MapEmpty, n)\n\n  fun _search(key: box->K!): (USize, Bool) =>\n    \"\"\"\n    Return a slot number and whether or not it's currently occupied.\n    \"\"\"\n    var idx_del = _array.size()\n    let mask = idx_del - 1\n    let h = H.hash(key).usize()\n    var idx = h and mask\n\n    try\n      for i in Range(0, _array.size()) do\n        let entry = _array(idx)?\n\n        match entry\n        | (let k: this->K!, _) =>\n          if H.eq(k, key) then\n            return (idx, true)\n          end\n        | _MapEmpty =>\n          if idx_del <= mask then\n            return (idx_del, false)\n          else\n            return (idx, false)\n          end\n        | _MapDeleted =>\n          if idx_del > mask then\n            idx_del = idx\n          end\n        end\n\n        idx = (h + ((i + (i * i)) / 2)) and mask\n      end\n    end\n\n    (idx_del, false)\n\n  fun ref _resize(len: USize) =>\n    \"\"\"\n    Change the available space.\n    \"\"\"\n    let old = _array\n    let old_len = old.size()\n\n    _array = _array.init(_MapEmpty, len)\n    _size = 0\n\n    try\n      for i in Range(0, old_len) do\n        match old(i)? = _MapDeleted\n        | (let k: K, let v: V) =>\n          this(consume k) = consume v\n        end\n      end\n    end\n\n  fun keys(): MapKeys[K, V, H, this->HashMap[K, V, H]]^ =>\n    \"\"\"\n    Return an iterator over the keys.\n    \"\"\"\n    MapKeys[K, V, H, this->HashMap[K, V, H]](this)\n\n  fun values(): MapValues[K, V, H, this->HashMap[K, V, H]]^ =>\n    \"\"\"\n    Return an iterator over the values.\n    \"\"\"\n    MapValues[K, V, H, this->HashMap[K, V, H]](this)\n\n  fun pairs(): MapPairs[K, V, H, this->HashMap[K, V, H]]^ =>\n    \"\"\"\n    Return an iterator over the keys and values.\n    \"\"\"\n    MapPairs[K, V, H, this->HashMap[K, V, H]](this)\n\nclass MapKeys[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->K]\n  \"\"\"\n  An iterator over the keys in a map.\n  \"\"\"\n  let _map: M\n  var _i: USize = -1\n  var _count: USize = 0\n\n  new create(map: M) =>\n    \"\"\"\n    Creates an iterator for the given map.\n    \"\"\"\n    _map = map\n\n  fun has_next(): Bool =>\n    \"\"\"\n    True if it believes there are remaining entries. May not be right if values\n    were added or removed from the map.\n    \"\"\"\n    _count < _map.size()\n\n  fun ref next(): M->K ? =>\n    \"\"\"\n    Returns the next key, or raises an error if there isn't one. If keys are\n    added during iteration, this may not return all keys.\n    \"\"\"\n    _i = _map.next_index(_i)?\n    _count = _count + 1\n    _map.index(_i)?._1\n\nclass MapValues[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M->V]\n  \"\"\"\n  An iterator over the values in a map.\n  \"\"\"\n  let _map: M\n  var _i: USize = -1\n  var _count: USize = 0\n\n  new create(map: M) =>\n    \"\"\"\n    Creates an iterator for the given map.\n    \"\"\"\n    _map = map\n\n  fun has_next(): Bool =>\n    \"\"\"\n    True if it believes there are remaining entries. May not be right if values\n    were added or removed from the map.\n    \"\"\"\n    _count < _map.size()\n\n  fun ref next(): M->V ? =>\n    \"\"\"\n    Returns the next value, or raises an error if there isn't one. If values\n    are added during iteration, this may not return all values.\n    \"\"\"\n    _i = _map.next_index(_i)?\n    _count = _count + 1\n    _map.index(_i)?._2\n\nclass MapPairs[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[(M->K, M->V)]\n  \"\"\"\n  An iterator over the keys and values in a map.\n  \"\"\"\n  let _map: M\n  var _i: USize = -1\n  var _count: USize = 0\n\n  new create(map: M) =>\n    \"\"\"\n    Creates an iterator for the given map.\n    \"\"\"\n    _map = map\n\n  fun has_next(): Bool =>\n    \"\"\"\n    True if it believes there are remaining entries. May not be right if values\n    were added or removed from the map.\n    \"\"\"\n    _count < _map.size()\n\n  fun ref next(): (M->K, M->V) ? =>\n    \"\"\"\n    Returns the next entry, or raises an error if there isn't one. If entries\n    are added during iteration, this may not return all entries.\n    \"\"\"\n    _i = _map.next_index(_i)?\n    _count = _count + 1\n    _map.index(_i)?",
            "title": "map.pony"
        },
        {
            "location": "/src/collections/list_node/",
            "text": "class ListNode[A]\n  \"\"\"\n  A node in a list.\n  \"\"\"\n  var _item: (A | None)\n  var _list: (List[A] | None) = None\n  var _prev: (ListNode[A] | None) = None\n  var _next: (ListNode[A] | None) = None\n\n  new create(item: (A | None) = None) =>\n    \"\"\"\n    Create a node. Initially, it is not in any list.\n    \"\"\"\n    _item = consume item\n\n  fun apply(): this->A ? =>\n    \"\"\"\n    Return the item, if we have one, otherwise raise an error.\n    \"\"\"\n    _item as this->A\n\n  fun ref update(value: (A | None)): A^ ? =>\n    \"\"\"\n    Replace the item and return the previous one. Raise an error if we have no\n    previous value.\n    \"\"\"\n    (_item = consume value) as A^\n\n  fun ref pop(): A^ ? =>\n    \"\"\"\n    Remove the item from the node, if we have one, otherwise raise an error.\n    \"\"\"\n    (_item = None) as A^\n\n  fun ref prepend(that: ListNode[A]): Bool =>\n    \"\"\"\n    Prepend a node to this one. If `that` is already in a list, it is removed\n    before it is prepended. Returns true if `that` was removed from another\n    list.\n    \"\"\"\n    if (_prev is that) or (this is that) then\n      return false\n    end\n\n    var in_list = false\n\n    match _list\n    | let list': List[A] =>\n      in_list = that._list isnt None\n      that.remove()\n\n      match _prev\n      | let  prev': ListNode[A] =>\n        prev'._next = that\n      else\n        list'._set_head(that)\n      end\n\n      that._list = list'\n      that._prev = _prev\n      that._next = this\n      _prev = that\n      list'._increment()\n    end\n    in_list\n\n  fun ref append(that: ListNode[A]): Bool =>\n    \"\"\"\n    Append a node to this one. If `that` is already in a list, it is removed\n    before it is appended. Returns true if `that` was removed from another\n    list.\n    \"\"\"\n    if (_next is that) or (this is that) then\n      return false\n    end\n\n    var in_list = false\n\n    match _list\n    | let list': List[A] =>\n      in_list = that._list isnt None\n      that.remove()\n\n      match _next\n      | let  next': ListNode[A] =>\n        next'._prev = that\n      else\n        list'._set_tail(that)\n      end\n\n      that._list = list'\n      that._prev = this\n      that._next = _next\n      _next = that\n      list'._increment()\n    end\n    in_list\n\n  fun ref remove() =>\n    \"\"\"\n    Remove a node from a list.\n    \"\"\"\n    match _list\n    | let list': List[A] =>\n      match (_prev, _next)\n      | (let prev': ListNode[A], let next': ListNode[A]) =>\n        // We're in the middle of the list.\n        prev'._next = _next\n        next'._prev = _prev\n        _prev = None\n        _next = None\n      | (let prev': ListNode[A], None) =>\n        // We're the tail.\n        prev'._next = None\n        list'._set_tail(prev')\n        _prev = None\n      | (None, let next': ListNode[A]) =>\n        // We're the head.\n        next'._prev = None\n        list'._set_head(next')\n        _next = None\n      | (None, None) =>\n        // We're the only member\n        list'._set_head(None)\n        list'._set_tail(None)\n      end\n\n      list'._decrement()\n      _list = None\n    end\n\n  fun has_prev(): Bool =>\n    \"\"\"\n    Return true if there is a previous node.\n    \"\"\"\n    _prev isnt None\n\n  fun has_next(): Bool =>\n    \"\"\"\n    Return true if there is a next node.\n    \"\"\"\n    _next isnt None\n\n  fun prev(): (this->ListNode[A] | None) =>\n    \"\"\"\n    Return the previous node.\n    \"\"\"\n    _prev\n\n  fun next(): (this->ListNode[A] | None) =>\n    \"\"\"\n    Return the next node.\n    \"\"\"\n    _next\n\n  fun ref _set_list(list: List[A]): ListNode[A]^ =>\n    \"\"\"\n    Make this node the only node on the given list.\n    \"\"\"\n    remove()\n    _list = list\n    this",
            "title": "list_node.pony"
        },
        {
            "location": "/src/collections/list/",
            "text": "class List[A] is Seq[A]\n  \"\"\"\n  A doubly linked list.\n  \"\"\"\n  var _head: (ListNode[A] | None) = None\n  var _tail: (ListNode[A] | None) = None\n  var _size: USize = 0\n\n  new create(len: USize = 0) =>\n    \"\"\"\n    Do nothing, but be compatible with Seq.\n    \"\"\"\n    None\n\n  new unit(a: A) =>\n    \"\"\"\n    Builds a new list from an element.\n    \"\"\"\n    push(consume a)\n\n  new from(seq: Array[A^]) =>\n    \"\"\"\n    Builds a new list from the sequence passed in.\n    \"\"\"\n    for value in seq.values() do\n      push(consume value)\n    end\n\n  fun ref reserve(len: USize) =>\n    \"\"\"\n    Do nothing, but be compatible with Seq.\n    \"\"\"\n    None\n\n  fun size(): USize =>\n    \"\"\"\n    Returns the number of items in the list.\n    \"\"\"\n    _size\n\n  fun apply(i: USize = 0): this->A ? =>\n    \"\"\"\n    Get the i-th element, raising an error if the index is out of bounds.\n    \"\"\"\n    index(i)?()?\n\n  fun ref update(i: USize, value: A): A^ ? =>\n    \"\"\"\n    Change the i-th element, raising an error if the index is out of bounds.\n    Returns the previous value, which may be None if the node has been popped\n    but left on the list.\n    \"\"\"\n    index(i)?()? = consume value\n\n  fun index(i: USize): this->ListNode[A] ? =>\n    \"\"\"\n    Gets the i-th node, raising an error if the index is out of bounds.\n    \"\"\"\n    if i >= _size then\n      error\n    end\n\n    var node = _head as this->ListNode[A]\n    var j = USize(0)\n\n    while j < i do\n      node = node.next() as this->ListNode[A]\n      j = j + 1\n    end\n\n    node\n\n  fun ref remove(i: USize): ListNode[A] ? =>\n    \"\"\"\n    Remove the i-th node, raising an error if the index is out of bounds.\n    The removed node is returned.\n    \"\"\"\n    index(i)? .> remove()\n\n  fun ref clear() =>\n    \"\"\"\n    Empties the list.\n    \"\"\"\n    _head = None\n    _tail = None\n    _size = 0\n\n  fun head(): this->ListNode[A] ? =>\n    \"\"\"\n    Get the head of the list.\n    \"\"\"\n    _head as this->ListNode[A]\n\n  fun tail(): this->ListNode[A] ? =>\n    \"\"\"\n    Get the tail of the list.\n    \"\"\"\n    _tail as this->ListNode[A]\n\n  fun ref prepend_node(node: ListNode[A]) =>\n    \"\"\"\n    Adds a node to the head of the list.\n    \"\"\"\n    match _head\n    | let head': ListNode[A] =>\n      head'.prepend(node)\n    else\n      _set_both(node)\n    end\n\n  fun ref append_node(node: ListNode[A]) =>\n    \"\"\"\n    Adds a node to the tail of the list.\n    \"\"\"\n    match _tail\n    | let tail': ListNode[A] =>\n      tail'.append(node)\n    else\n      _set_both(node)\n    end\n\n  fun ref append_list(that: List[A]) =>\n    \"\"\"\n    Remove all nodes from that and append them to this.\n    \"\"\"\n    if this isnt that then\n      while that._size > 0 do\n        try append_node(that.head()?) end\n      end\n    end\n\n  fun ref prepend_list(that: List[A]) =>\n    \"\"\"\n    Remove all nodes from that and prepend them to this.\n    \"\"\"\n    if this isnt that then\n      while that._size > 0 do\n        try prepend_node(that.tail()?) end\n      end\n    end\n\n  fun ref push(a: A) =>\n    \"\"\"\n    Adds a value to the tail of the list.\n    \"\"\"\n    append_node(ListNode[A](consume a))\n\n  fun ref pop(): A^ ? =>\n    \"\"\"\n    Removes a value from the tail of the list.\n    \"\"\"\n    tail()? .> remove().pop()?\n\n  fun ref unshift(a: A) =>\n    \"\"\"\n    Adds a value to the head of the list.\n    \"\"\"\n    prepend_node(ListNode[A](consume a))\n\n  fun ref shift(): A^ ? =>\n    \"\"\"\n    Removes a value from the head of the list.\n    \"\"\"\n    head()? .> remove().pop()?\n\n  fun ref append(\n    seq: (ReadSeq[A] & ReadElement[A^]),\n    offset: USize = 0,\n    len: USize = -1)\n  =>\n    \"\"\"\n    Append len elements from a sequence, starting from the given offset.\n    \"\"\"\n    if offset >= seq.size() then\n      return\n    end\n\n    let copy_len = len.min(seq.size() - offset)\n    reserve(_size + copy_len)\n\n    let cap = copy_len + offset\n    var i = offset\n\n    try\n      while i < cap do\n        push(seq(i)?)\n        i = i + 1\n      end\n    end\n\n  fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) =>\n    \"\"\"\n    Add len iterated elements to the end of the list, starting from the given\n    offset.\n    \"\"\"\n    try\n      for i in Range(0, offset) do\n        if iter.has_next() then\n          iter.next()?\n        else\n          return\n        end\n      end\n\n      for i in Range(0, len) do\n        if iter.has_next() then\n          push(iter.next()?)\n        else\n          return\n        end\n      end\n    end\n\n  fun ref truncate(len: USize) =>\n    \"\"\"\n    Truncate the list to the given length, discarding excess elements.\n    If the list is already smaller than len, do nothing.\n    \"\"\"\n    try\n      while _size > len do\n        pop()?\n      end\n    end\n\n  fun clone(): List[this->A!]^ =>\n    \"\"\"\n    Clone the list.\n    \"\"\"\n    let out = List[this->A!]\n\n    for v in values() do\n      out.push(v)\n    end\n    out\n\n  fun map[B](f: {(this->A!): B^} box): List[B]^ =>\n    \"\"\"\n    Builds a new list by applying a function to every member of the list.\n    \"\"\"\n    try\n      _map[B](head()?, f, List[B])\n    else\n      List[B]\n    end\n\n  fun _map[B](\n    ln: this->ListNode[A],\n    f: {(this->A!): B^} box,\n    acc: List[B])\n    : List[B]^\n  =>\n    \"\"\"\n    Private helper for map, recursively working with ListNodes.\n    \"\"\"\n    try acc.push(f(ln()?)) end\n\n    try\n      _map[B](ln.next() as this->ListNode[A], f, acc)\n    else\n      acc\n    end\n\n  fun flat_map[B](f: {(this->A!): List[B]} box): List[B]^ =>\n    \"\"\"\n    Builds a new list by applying a function to every member of the list and\n    using the elements of the resulting lists.\n    \"\"\"\n    try\n      _flat_map[B](head()?, f, List[B])\n    else\n      List[B]\n    end\n\n  fun _flat_map[B](\n    ln: this->ListNode[A],\n    f: {(this->A!): List[B]} box,\n    acc: List[B]): List[B]^\n  =>\n    \"\"\"\n    Private helper for flat_map, recursively working with ListNodes.\n    \"\"\"\n    try acc.append_list(f(ln()?)) end\n\n    try\n      _flat_map[B](ln.next() as this->ListNode[A], f, acc)\n    else\n      acc\n    end\n\n  fun filter(f: {(this->A!): Bool} box): List[this->A!]^ =>\n    \"\"\"\n    Builds a new list with those elements that satisfy a provided predicate.\n    \"\"\"\n    try\n      _filter(head()?, f, List[this->A!])\n    else\n      List[this->A!]\n    end\n\n  fun _filter(\n    ln: this->ListNode[A],\n    f: {(this->A!): Bool} box,\n    acc: List[this->A!]): List[this->A!]\n  =>\n    \"\"\"\n    Private helper for filter, recursively working with ListNodes.\n    \"\"\"\n    try\n      let cur = ln()?\n      if f(cur) then acc.push(cur) end\n    end\n\n    try\n      _filter(ln.next() as this->ListNode[A], f, acc)\n    else\n      acc\n    end\n\n  fun fold[B](f: {(B!, this->A!): B^} box, acc: B): B =>\n    \"\"\"\n    Folds the elements of the list using the supplied function.\n    \"\"\"\n    let h = try\n      head()?\n    else\n      return acc\n    end\n\n    _fold[B](h, f, consume acc)\n\n  fun _fold[B](\n    ln: this->ListNode[A],\n    f: {(B!, this->A!): B^} box,\n    acc: B)\n    : B\n  =>\n    \"\"\"\n    Private helper for fold, recursively working with ListNodes.\n    \"\"\"\n    let nextAcc: B = try f(acc, ln()?) else consume acc end\n    let h = try\n      ln.next() as this->ListNode[A]\n    else\n      return nextAcc\n    end\n\n    _fold[B](h, f, consume nextAcc)\n\n  fun every(f: {(this->A!): Bool} box): Bool =>\n    \"\"\"\n    Returns true if every element satisfies the provided predicate, false\n    otherwise.\n    \"\"\"\n    try\n      _every(head()?, f)\n    else\n      true\n    end\n\n  fun _every(ln: this->ListNode[A], f: {(this->A!): Bool} box): Bool =>\n    \"\"\"\n    Private helper for every, recursively working with ListNodes.\n    \"\"\"\n    try\n      if not(f(ln()?)) then\n        false\n      else\n        _every(ln.next() as this->ListNode[A], f)\n      end\n    else\n      true\n    end\n\n  fun exists(f: {(this->A!): Bool} box): Bool =>\n    \"\"\"\n    Returns true if at least one element satisfies the provided predicate,\n    false otherwise.\n    \"\"\"\n    try\n      _exists(head()?, f)\n    else\n      false\n    end\n\n  fun _exists(ln: this->ListNode[A], f: {(this->A!): Bool} box): Bool =>\n    \"\"\"\n    Private helper for exists, recursively working with ListNodes.\n    \"\"\"\n    try\n      if f(ln()?) then\n        true\n      else\n        _exists(ln.next() as this->ListNode[A], f)\n      end\n    else\n      false\n    end\n\n  fun partition(\n    f: {(this->A!): Bool} box)\n    : (List[this->A!]^, List[this->A!]^)\n  =>\n    \"\"\"\n    Builds a pair of lists, the first of which is made up of the elements\n    satisfying the supplied predicate and the second of which is made up of\n    those that do not.\n    \"\"\"\n    let l1 = List[this->A!]\n    let l2 = List[this->A!]\n    for item in values() do\n      if f(item) then l1.push(item) else l2.push(item) end\n    end\n    (l1, l2)\n\n  fun drop(n: USize): List[this->A!]^ =>\n    \"\"\"\n    Builds a list by dropping the first n elements.\n    \"\"\"\n    let l = List[this->A!]\n\n    if size() > n then\n      try\n        var node = index(n)?\n\n        for i in Range(n, size()) do\n          l.push(node()?)\n          node = node.next() as this->ListNode[A]\n        end\n      end\n    end\n    l\n\n  fun take(n: USize): List[this->A!] =>\n    \"\"\"\n    Builds a list of the first n elements.\n    \"\"\"\n    let l = List[this->A!]\n\n    if size() > 0 then\n      try\n        var node = head()?\n\n        for i in Range(0, n.min(size())) do\n          l.push(node()?)\n          node = node.next() as this->ListNode[A]\n        end\n      end\n    end\n    l\n\n  fun take_while(f: {(this->A!): Bool} box): List[this->A!]^ =>\n    \"\"\"\n    Builds a list of elements satisfying the provided predicate until one does\n    not.\n    \"\"\"\n    let l = List[this->A!]\n\n    if size() > 0 then\n      try\n        var node = head()?\n\n        for i in Range(0, size()) do\n          let item = node()?\n          if f(item) then l.push(item) else return l end\n          node = node.next() as this->ListNode[A]\n        end\n      end\n    end\n    l\n\n  fun reverse(): List[this->A!]^ =>\n    \"\"\"\n    Builds a new list by reversing the elements in the list.\n    \"\"\"\n    try\n      _reverse(head()?, List[this->A!])\n    else\n      List[this->A!]\n    end\n\n  fun _reverse(ln: this->ListNode[A], acc: List[this->A!]): List[this->A!]^ =>\n    \"\"\"\n    Private helper for reverse, recursively working with ListNodes.\n    \"\"\"\n    try acc.unshift(ln()?) end\n\n    try\n      _reverse(ln.next() as this->ListNode[A], acc)\n    else\n      acc\n    end\n\n  fun contains[B: (A & HasEq[A!] #read) = A](a: box->B): Bool =>\n    \"\"\"\n    Returns true if the list contains the provided element, false otherwise.\n    \"\"\"\n    try\n      _contains[B](head()?, a)\n    else\n      false\n    end\n\n  fun _contains[B: (A & HasEq[A!] #read) = A](\n    ln: this->ListNode[A],\n    a: box->B)\n    : Bool\n  =>\n    \"\"\"\n    Private helper for contains, recursively working with ListNodes.\n    \"\"\"\n    try\n      if a == ln()? then\n        true\n      else\n        _contains[B](ln.next() as this->ListNode[A], a)\n      end\n    else\n      false\n    end\n\n  fun nodes(): ListNodes[A, this->ListNode[A]]^ =>\n    \"\"\"\n    Return an iterator on the nodes in the list.\n    \"\"\"\n    ListNodes[A, this->ListNode[A]](_head)\n\n  fun rnodes(): ListNodes[A, this->ListNode[A]]^ =>\n    \"\"\"\n    Return an iterator on the nodes in the list.\n    \"\"\"\n    ListNodes[A, this->ListNode[A]](_head, true)\n\n  fun values(): ListValues[A, this->ListNode[A]]^ =>\n    \"\"\"\n    Return an iterator on the values in the list.\n    \"\"\"\n    ListValues[A, this->ListNode[A]](_head)\n\n  fun rvalues(): ListValues[A, this->ListNode[A]]^ =>\n    \"\"\"\n    Return an iterator on the values in the list.\n    \"\"\"\n    ListValues[A, this->ListNode[A]](_head, true)\n\n  fun ref _increment() =>\n    _size = _size + 1\n\n  fun ref _decrement() =>\n    _size = _size - 1\n\n  fun ref _set_head(head': (ListNode[A] | None)) =>\n    _head = head'\n\n  fun ref _set_tail(tail': (ListNode[A] | None)) =>\n    _tail = tail'\n\n  fun ref _set_both(node: ListNode[A]) =>\n    node._set_list(this)\n    _head = node\n    _tail = node\n    _size = 1\n\nclass ListNodes[A, N: ListNode[A] #read] is Iterator[N]\n  \"\"\"\n  Iterate over the nodes in a list.\n  \"\"\"\n  var _next: (N | None)\n  let _reverse: Bool\n\n  new create(head: (N | None), reverse: Bool = false) =>\n    \"\"\"\n    Keep the next list node to be examined.\n    \"\"\"\n    _next = head\n    _reverse = reverse\n\n  fun has_next(): Bool =>\n    \"\"\"\n    If we have a list node, we have more values.\n    \"\"\"\n    _next isnt None\n\n  fun ref next(): N ? =>\n    \"\"\"\n    Get the list node and replace it with the next one.\n    \"\"\"\n    match _next\n    | let next': N =>\n      if _reverse then\n        _next = next'.prev()\n      else\n        _next = next'.next()\n      end\n\n      next'\n    else\n      error\n    end\n\nclass ListValues[A, N: ListNode[A] #read] is Iterator[N->A]\n  \"\"\"\n  Iterate over the values in a list.\n  \"\"\"\n  var _next: (N | None)\n  let _reverse: Bool\n\n  new create(head: (N | None), reverse: Bool = false) =>\n    \"\"\"\n    Keep the next list node to be examined.\n    \"\"\"\n    _next = head\n    _reverse = reverse\n\n  fun has_next(): Bool =>\n    \"\"\"\n    If we have a list node, we have more values.\n    \"\"\"\n    _next isnt None\n\n  fun ref next(): N->A ? =>\n    \"\"\"\n    Get the value of the list node and replace it with the next one.\n    \"\"\"\n    match _next\n    | let next': N =>\n      if _reverse then\n        _next = next'.prev()\n      else\n        _next = next'.next()\n      end\n\n      next'()?\n    else\n      error\n    end",
            "title": "list.pony"
        },
        {
            "location": "/src/collections/hashable/",
            "text": "interface Hashable\n  \"\"\"\n  Anything with a hash method is hashable.\n  \"\"\"\n  fun hash(): USize\n\ninterface Hashable64\n  \"\"\"\n  A version of Hashable that returns 64-bit hashes on every platform.\n  \"\"\"\n  fun hash64(): U64\n\ninterface val HashFunction[A]\n  \"\"\"\n  A pluggable hash function.\n  \"\"\"\n  new val create()\n    \"\"\"\n    Data structures create instances internally. Use a primitive if possible.\n    \"\"\"\n\n  fun hash(x: box->A!): USize\n    \"\"\"\n    Calculate the hash of some type. This is an alias of the type parameter to\n    allow data structures to hash things without consuming them.\n    \"\"\"\n\n  fun eq(x: box->A!, y: box->A!): Bool\n    \"\"\"\n    Determine equality between two keys with the same hash. This is done with\n    viewpoint adapted aliases to allow data structures to determine equality\n    in a box fun without consuming keys.\n    \"\"\"\n\ninterface val HashFunction64[A]\n  \"\"\"\n  A pluggable hash function with 64-bit hashes.\n  \"\"\"\n  new val create()\n    \"\"\"\n    Data structures create instances internally. Use a primitive if possible.\n    \"\"\"\n\n  fun hash64(x: box->A!): U64\n    \"\"\"\n    Calculate the hash of some type. This is an alias of the type parameter to\n    allow data structures to hash things without consuming them.\n    \"\"\"\n\n  fun eq(x: box->A!, y: box->A!): Bool\n    \"\"\"\n    Determine equality between two keys with the same hash. This is done with\n    viewpoint adapted aliases to allow data structures to determine equality\n    in a box fun without consuming keys.\n    \"\"\"\n\nprimitive HashEq[A: (Hashable #read & Equatable[A] #read)] is HashFunction[A]\n  fun hash(x: box->A): USize =>\n    \"\"\"\n    Use the hash function from the type parameter.\n    \"\"\"\n    x.hash()\n\n  fun eq(x: box->A, y: box->A): Bool =>\n    \"\"\"\n    Use the structural equality function from the type parameter.\n    \"\"\"\n    x == y\n\nprimitive HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is\n  HashFunction64[A]\n  fun hash64(x: box->A): U64 =>\n    \"\"\"\n    Use the hash function from the type parameter.\n    \"\"\"\n    x.hash64()\n\n  fun eq(x: box->A, y: box->A): Bool =>\n    \"\"\"\n    Use the structural equality function from the type parameter.\n    \"\"\"\n    x == y\n\nprimitive HashIs[A] is (HashFunction[A] & HashFunction64[A])\n  fun hash(x: box->A!): USize =>\n    \"\"\"\n    Hash the identity rather than the contents.\n    \"\"\"\n    (digestof x).hash()\n\n  fun hash64(x: box->A!): U64 =>\n    \"\"\"\n    Hash the identity rather than the contents.\n    \"\"\"\n    (digestof x).hash64()\n\n  fun eq(x: box->A!, y: box->A!): Bool =>\n    \"\"\"\n    Determine equality by identity rather than structurally.\n    \"\"\"\n    x is y\n\nprimitive HashByteSeq is\n  (HashFunction[ByteSeq box] & HashFunction64[ByteSeq box])\n  \"\"\"\n  Hash and equality functions for arbitrary ByteSeq.\n  \"\"\"\n  fun hash(x: ByteSeq box): USize =>\n    @ponyint_hash_block[USize](x.cpointer(), x.size())\n\n  fun hash64(x: ByteSeq box): U64 =>\n    @ponyint_hash_block64[U64](x.cpointer(), x.size())\n\n  fun eq(x: ByteSeq box, y: ByteSeq box): Bool =>\n    if x.size() == y.size() then\n      @memcmp[I32](x.cpointer(), y.cpointer(), x.size()) == 0\n    else\n      false\n    end",
            "title": "hashable.pony"
        },
        {
            "location": "/src/collections/flag/",
            "text": "interface val Flag[A: (Unsigned & Integer[A] val)]\n  \"\"\"\n  A flag should be a primitive with a value method that returns the bits that\n  represent the flag. This allows a flag to encode a single bit, or any\n  combination of bits.\n  \"\"\"\n  fun value(): A\n\nclass Flags[A: Flag[B] val, B: (Unsigned & Integer[B] val) = U64] is\n  Comparable[Flags[A, B] box]\n  \"\"\"\n  Flags is a set of flags. The flags that are recognised should be passed as\n  a union type for type parameter A. For example:\n\n  primitive SSE\n    fun value(): U64 => 1\n\n  primitive AVX\n    fun value(): U64 => 2\n\n  primitive RDTSCP\n    fun value(): U64 => 4\n\n  type Features is Flags[(SSE | AVX | RDTSCP)]\n\n  Type parameter B is the unlying field used to store the flags.\n  \"\"\"\n  var _value: B = 0\n\n  fun value(): B =>\n    \"\"\"\n    Returns the bit encoding of the set flags.\n    \"\"\"\n    _value\n\n  fun apply(flag: A): Bool =>\n    \"\"\"\n    Returns true if the flag is set.\n    \"\"\"\n    (_value and flag.value()) > 0\n\n  fun ref all() =>\n    \"\"\"\n    Sets all bits, including undefined flags.\n    \"\"\"\n    _value = -1\n\n  fun ref clear() =>\n    \"\"\"\n    Unsets all flags.\n    \"\"\"\n    _value = 0\n\n  fun ref set(flag: A) =>\n    \"\"\"\n    Sets the flag.\n    \"\"\"\n    _value = _value or flag.value()\n\n  fun ref unset(flag: A) =>\n    \"\"\"\n    Unsets the flag.\n    \"\"\"\n    _value = _value and not flag.value()\n\n  fun ref flip(flag: A) =>\n    \"\"\"\n    Sets the flag if it is unset, unsets the flag if it is set.\n    \"\"\"\n    _value = _value xor flag.value()\n\n  fun ref union(that: Flags[A, B] box) =>\n    \"\"\"\n    The union of this and that.\n    \"\"\"\n    _value = this._value or that._value\n\n  fun ref intersect(that: Flags[A, B] box) =>\n    \"\"\"\n    The intersection of this and that.\n    \"\"\"\n    _value = this._value and that._value\n\n  fun ref difference(that: Flags[A, B] box) =>\n    \"\"\"\n    The symmetric difference of this and that.\n    \"\"\"\n    _value = this._value xor that._value\n\n  fun ref remove(that: Flags[A, B] box) =>\n    \"\"\"\n    Unset flags that are set in that.\n    \"\"\"\n    _value = this._value xor that._value\n\n  fun add(flag: A): Flags[A, B] iso^ =>\n    \"\"\"\n    This with the flag set.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value or flag.value()\n    f\n\n  fun sub(flag: A): Flags[A, B] iso^ =>\n    \"\"\"\n    This with the flag unset.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value and not flag.value()\n    f\n\n  fun op_or(that: Flags[A, B] box): Flags[A, B] iso^ =>\n    \"\"\"\n    The union of this and that.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value or that._value\n    f\n\n  fun op_and(that: Flags[A, B] box): Flags[A, B] iso^ =>\n    \"\"\"\n    The intersection of this and that.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value and that._value\n    f\n\n  fun op_xor(that: Flags[A, B] box): Flags[A, B] iso^ =>\n    \"\"\"\n    The symmetric difference of this and that.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value xor that._value\n    f\n\n  fun without(that: Flags[A, B] box): Flags[A, B] iso^ =>\n    \"\"\"\n    The flags in this that are not in that.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value and not that._value\n    f\n\n  fun clone(): Flags[A, B] iso^ =>\n    \"\"\"\n    Create a clone.\n    \"\"\"\n    let f = recover Flags[A, B] end\n    f._value = this._value\n    f\n\n  fun eq(that: Flags[A, B] box): Bool =>\n    \"\"\"\n    Returns true if this has the same flags set as that.\n    \"\"\"\n    _value == that._value\n\n  fun lt(that: Flags[A, B] box): Bool =>\n    \"\"\"\n    Returns true if the flags set on this are a strict subset of the flags set\n    on that. Flags is only partially ordered, so lt is not the opposite of ge.\n    \"\"\"\n    (_value != that._value) and ((_value and not that._value) == 0)\n\n  fun le(that: Flags[A, B] box): Bool =>\n    \"\"\"\n    Returns true if the flags set on this are a subset of the flags set on\n    that or they are the same. Flags is only partially ordered, so le is not\n    the opposite of te.\n    \"\"\"\n    ((_value and not that._value) == 0)\n\n  fun gt(that: Flags[A, B] box): Bool =>\n    \"\"\"\n    Returns true if the flags set on this are a struct superset of the flags\n    set on that. Flags is only partially ordered, so gt is not the opposite of\n    le.\n    \"\"\"\n    (_value != that._value) and ((that._value and not _value) == 0)\n\n  fun ge(that: Flags[A, B] box): Bool =>\n    \"\"\"\n    Returns true if the flags set on this are a superset of the flags set on\n    that or they are the same. Flags is only partially ordered, so ge is not\n    the opposite of lt.\n    \"\"\"\n    ((that._value and not _value) == 0)",
            "title": "flag.pony"
        },
        {
            "location": "/src/encode-base64/base64/",
            "text": "\"\"\"\n# Base64 package\n\nThe Base64 package contains support for doing Base64 binary-to-text encodings.\nWe currently have support 3 encodings: PEM, MIME and URL.\n\nTo learn more about Base64, we suggest you check out the\n[wikipedia entry](https://en.wikipedia.org/wiki/Base64).\n\n## Example code\n\n```pony\nuse \"encode/base64\"\n\nactor Main\n  new create(env: Env) =>\n    env.out.print(Base64.encode(\"foobar\"))\n    try\n      env.out.print(Base64.decode[String iso](\"Zm9vYmFy\")?)\n    end\n```\n\"\"\"\nuse \"collections\"\nuse \"assert\"\n\nprimitive Base64\n  fun encode_pem(data: ReadSeq[U8]): String iso^ =>\n    \"\"\"\n    Encode for PEM (RFC 1421).\n    \"\"\"\n    encode(data, '+', '/', '=', 64)\n\n  fun encode_mime(data: ReadSeq[U8]): String iso^ =>\n    \"\"\"\n    Encode for MIME (RFC 2045).\n    \"\"\"\n    encode(data, '+', '/', '=', 76)\n\n  fun encode_url[A: Seq[U8] iso = String iso](\n    data: ReadSeq[U8],\n    pad: Bool = false)\n    : A^\n  =>\n    \"\"\"\n    Encode for URLs (RFC 4648). Padding characters are stripped by default.\n    \"\"\"\n    let c: U8 = if pad then '=' else 0 end\n    encode[A](data, '-', '_', c)\n\n  fun encode[A: Seq[U8] iso = String iso](\n    data: ReadSeq[U8],\n    at62: U8 = '+',\n    at63: U8 = '/',\n    pad: U8 = '=',\n    linelen: USize = 0,\n    linesep: String = \"\\r\\n\")\n    : A^\n  =>\n    \"\"\"\n    Configurable encoding. The defaults are for RFC 4648.\n    \"\"\"\n    let len = ((data.size() + 2) / 3) * 4\n    let out = recover A(len) end\n    let lineblocks = linelen / 4\n\n    var srclen = data.size()\n    var blocks = USize(0)\n    var i = USize(0)\n\n    try\n      while srclen >= 3 do\n        let in1 = data(i)?\n        let in2 = data(i + 1)?\n        let in3 = data(i + 2)?\n\n        let out1 = in1 >> 2\n        let out2 = ((in1 and 0x03) << 4) + (in2 >> 4)\n        let out3 = ((in2 and 0x0f) << 2) + (in3 >> 6)\n        let out4 = in3 and 0x3f\n\n        out.push(_enc_byte(out1, at62, at63)?)\n        out.push(_enc_byte(out2, at62, at63)?)\n        out.push(_enc_byte(out3, at62, at63)?)\n        out.push(_enc_byte(out4, at62, at63)?)\n\n        i = i + 3\n        blocks = blocks + 1\n        srclen = srclen - 3\n\n        if (lineblocks > 0) and (blocks == lineblocks) then\n          out.append(linesep)\n          blocks = 0\n        end\n      end\n\n      if srclen >= 1 then\n        let in1 = data(i)?\n        let in2 = if srclen == 2 then data(i + 1)? else 0 end\n\n        let out1 = in1 >> 2\n        let out2 = ((in1 and 0x03) << 4) + (in2 >> 4)\n        let out3 = (in2 and 0x0f) << 2\n\n        out.push(_enc_byte(out1, at62, at63)?)\n        out.push(_enc_byte(out2, at62, at63)?)\n\n        if srclen == 2 then\n          out.push(_enc_byte(out3, at62, at63)?)\n        else\n          out.push(pad)\n        end\n\n        out.push(pad)\n      end\n\n      if lineblocks > 0 then\n        out.append(linesep)\n      end\n    else\n      out.clear()\n    end\n\n    out\n\n  fun decode_url[A: Seq[U8] iso = Array[U8] iso](data: ReadSeq[U8]): A^ ? =>\n    \"\"\"\n    Decode for URLs (RFC 4648).\n    \"\"\"\n    decode[A](data, '-', '_')?\n\n  fun decode[A: Seq[U8] iso = Array[U8] iso](\n    data: ReadSeq[U8],\n    at62: U8 = '+',\n    at63: U8 = '/',\n    pad: U8 = '=')\n    : A^ ?\n  =>\n    \"\"\"\n    Configurable decoding. The defaults are for RFC 4648. Missing padding is\n    not an error. Non-base64 data, other than whitespace (which can appear at\n    any time), is an error.\n    \"\"\"\n    let len = (data.size() * 4) / 3\n    let out = recover A(len) end\n\n    var state = U8(0)\n    var input = U8(0)\n    var output = U8(0)\n\n    for i in Range(0, data.size()) do\n      input = data(i)?\n\n      let value =\n        match input\n        | ' ' | '\\t' | '\\r' | '\\n' => continue\n        | pad => break\n        | at62 => 62\n        | at63 => 63\n        | if (input >= 'A') and (input <= 'Z') =>\n          (input - 'A')\n        | if (input >= 'a') and (input <= 'z') =>\n          ((input - 'a') + 26)\n        | if (input >= '0') and (input <= '9') =>\n          ((input - '0') + 52)\n        else\n          error\n        end\n\n      match state\n      | 0 =>\n        output = value << 2\n        state = 1\n      | 1 =>\n        out.push(output or (value >> 4))\n        output = (value and 0x0f) << 4\n        state = 2\n      | 2 =>\n        out.push(output or (value >> 2))\n        output = (value and 0x03) << 6\n        state = 3\n      | 3 =>\n        out.push(output or value)\n        state = 0\n      else\n        error\n      end\n    end\n\n    if output != 0 then\n      Fact(input != pad)?\n\n      match state\n      | 1 | 2 => out.push(output)\n      end\n    end\n\n    out\n\n  fun _enc_byte(i: U8, at62: U8, at63: U8): U8 ? =>\n    \"\"\"\n    Encode a single byte.\n    \"\"\"\n    match i\n    | 62 => at62\n    | 63 => at63\n    | if i < 26 => 'A' + i\n    | if i < 52 => ('a' - 26) + i\n    | if i < 62 => ('0' - 52) + i\n    else\n      error\n    end",
            "title": "base64.pony"
        },
        {
            "location": "/src/files/path/",
            "text": "use \"time\"\n\nprimitive _PathSep\nprimitive _PathDot\nprimitive _PathDot2\nprimitive _PathOther\n\ntype _PathState is (_PathSep | _PathDot | _PathDot2 | _PathOther)\n\nprimitive Path\n  \"\"\"\n  Operations on paths that do not require a capability. The operations can be\n  used to manipulate path names, but give no access to the resulting paths.\n  \"\"\"\n  fun is_sep(c: U8): Bool =>\n    \"\"\"\n    Determine if a byte is a path separator.\n    \"\"\"\n    ifdef windows then\n      (c == '/') or (c == '\\\\')\n    else\n      c == '/'\n    end\n\n  fun tag sep(): String =>\n    \"\"\"\n    Return the path separator as a string.\n    \"\"\"\n    ifdef windows then \"\\\\\" else \"/\" end\n\n  fun is_abs(path: String): Bool =>\n    \"\"\"\n    Return true if the path is an absolute path.\n    \"\"\"\n    try\n      ifdef windows then\n        is_sep(path(0)?) or _drive_letter(path)\n      else\n        is_sep(path(0)?)\n      end\n    else\n      false\n    end\n\n  fun join(path: String, next_path: String): String =>\n    \"\"\"\n    Join two paths together. If the next_path is absolute, simply return it.\n    The returned path will be cleaned.\n    \"\"\"\n    if path.size() == 0 then\n      clean(next_path)\n    elseif next_path.size() == 0 then\n      clean(path)\n    elseif is_abs(next_path) then\n      clean(next_path)\n    else\n      try\n        if is_sep(path(path.size()-1)?) then\n          if is_sep(next_path(0)?) then\n            return clean(path + next_path.trim(1))\n          else\n            return clean(path + next_path)\n          end\n        end\n      end\n      clean(path + sep() + next_path)\n    end\n\n  fun clean(path: String): String =>\n    \"\"\"\n    Replace multiple separators with a single separator.\n    Convert / to the OS separator.\n    Remove instances of . from the path.\n    Remove instances of .. and the preceding path element from the path.\n    The result will have no trailing slash unless it is a root directory.\n    If the result would be empty, \".\" will be returned instead.\n    \"\"\"\n    let s = recover String(path.size()) end\n    let vol = volume(path)\n    s.append(vol)\n\n    var state: _PathState = _PathOther\n    var i = vol.size()\n    var backtrack = ISize(-1)\n    let n = path.size()\n\n    try\n      var c = path(i)?\n\n      if is_sep(c) then\n        s.append(sep())\n        i = i + 1\n        state = _PathSep\n      elseif c == '.' then\n        i = i + 1\n        state = _PathDot\n      else\n        backtrack = s.size().isize()\n      end\n\n      while i < n do\n        c = path(i)?\n\n        if is_sep(c) then\n          match state\n          | _PathDot2 =>\n            if backtrack == -1 then\n              s.append(\"..\")\n              s.append(sep())\n            else\n              s.delete(backtrack, -1)\n\n              try\n                backtrack = s.rfind(sep())? + 1\n              else\n                backtrack = vol.size().isize()\n              end\n\n              if\n                (s.size() == 0) or\n                (s.compare_sub(\"../\", 3, backtrack) is Equal) or\n                ifdef windows then\n                  s.compare_sub(\"..\\\\\", 3, backtrack) is Equal\n                else\n                  true\n                end\n              then\n                backtrack = -1\n              end\n            end\n          | _PathOther =>\n            s.append(sep())\n          end\n          state = _PathSep\n        elseif c == '.' then\n          match state\n          | _PathSep =>\n            state = _PathDot\n          | _PathDot =>\n            state = _PathDot2\n          | _PathDot2 =>\n            backtrack = s.size().isize()\n            s.append(\"...\")\n            state = _PathOther\n          | _PathOther =>\n            s.append(\".\")\n          end\n        else\n          match state\n          | _PathSep =>\n            backtrack = s.size().isize()\n          | _PathDot =>\n            backtrack = s.size().isize()\n            s.append(\".\")\n          | _PathDot2 =>\n            backtrack = s.size().isize()\n            s.append(\"..\")\n          end\n          s.push(c)\n          state = _PathOther\n        end\n\n        i = i + 1\n      end\n    end\n\n    match state\n    | _PathDot2 =>\n      if backtrack == -1 then\n        s.append(\"..\")\n      else\n        s.delete(backtrack, -1)\n      end\n    end\n\n    try\n      if is_sep(s(s.size()-1)?) then\n        s.delete(-1, sep().size())\n      end\n    end\n\n    if s.size() > 0 then\n      s\n    else\n      \".\"\n    end\n\n  fun normcase(path: String): String =>\n    \"\"\"\n    Normalizes the case of path for the runtime platform.\n    \"\"\"\n    if Platform.windows() then\n      recover val path.lower() .> replace(\"/\", \"\\\\\") end\n    elseif Platform.osx() then\n      path.lower()\n    else\n      path\n    end\n\n  fun cwd(): String =>\n    \"\"\"\n    Returns the program's working directory. Setting the working directory is\n    not supported, as it is not concurrency-safe.\n    \"\"\"\n    recover String.from_cstring(@pony_os_cwd[Pointer[U8]]()) end\n\n  fun abs(path: String): String =>\n    \"\"\"\n    Returns a cleaned, absolute path.\n    \"\"\"\n    if is_abs(path) then\n      clean(path)\n    else\n      join(cwd(), path)\n    end\n\n  fun rel(to: String, target: String): String ? =>\n    \"\"\"\n    Returns a path such that Path.join(to, Path.rel(to, target)) == target.\n    Raises an error if this isn't possible.\n    \"\"\"\n    var to_clean = clean(to)\n    var target_clean = clean(target)\n\n    if to_clean == target_clean then\n      return \".\"\n    end\n\n    var to_i: ISize = 0\n\n    ifdef windows then\n      to_clean = abs(to_clean)\n      target_clean = abs(target_clean)\n\n      let to_vol = volume(to_clean)\n      let target_vol = volume(target_clean)\n\n      if to_vol != target_vol then\n        error\n      end\n\n      to_i = to_vol.size().isize()\n    end\n\n    var to_0 = to_i\n    var target_i = to_i\n    var target_0 = target_i\n\n    while true do\n      to_i = try\n        to_clean.find(sep(), to_i)?\n      else\n        to_clean.size().isize()\n      end\n\n      target_i = try\n        target_clean.find(sep(), target_i)?\n      else\n        target_clean.size().isize()\n      end\n\n      if\n        (to_i != target_i) or\n        (to_clean.compare_sub(target_clean, target_i.usize()) isnt Equal)\n      then\n        break\n      end\n\n      if to_i < to_clean.size().isize() then\n        to_i = to_i + 1\n      end\n\n      if target_i < target_clean.size().isize() then\n        target_i = target_i + 1\n      end\n\n      to_0 = to_i\n      target_0 = target_i\n    end\n\n    if\n      ((to_i - to_0) == 2)\n        and (to_clean.compare_sub(\"..\", 2, to_0) is Equal)\n    then\n      error\n    end\n\n    if to_0.usize() != to_clean.size() then\n      let result = recover String end\n\n      try\n        while true do\n          to_i = to_clean.find(sep(), to_i)? + 1\n          result.append(\"..\")\n          result.append(sep())\n        end\n      end\n\n      result.append(\"..\")\n      result.append(sep())\n      result.append(target_clean.trim(target_0.usize()))\n      result\n    else\n      target_clean.trim(target_0.usize())\n    end\n\n  fun split(path: String, separator: String = Path.sep()): (String, String) =>\n    \"\"\"\n    Splits the path into a pair, (head, tail) where tail is the last pathname\n    component and head is everything leading up to that. The tail part will\n    never contain a slash; if path ends in a slash, tail will be empty. If\n    there is no slash in path, head will be empty. If path is empty, both head\n    and tail are empty. The path in head will be cleaned before it is returned.\n    In all cases, join(head, tail) returns a path to the same location as path\n    (but the strings may differ). Also see the functions dir() and base().\n    \"\"\"\n    try\n      let i = path.rfind(separator)?.usize()\n      (clean(path.trim(0, i)), path.trim(i+separator.size()))\n    else\n      (\"\", path)\n    end\n\n  fun base(path: String, with_ext: Bool = true): String =>\n    \"\"\"\n    Return the path after the last separator, or the whole path if there is no\n    separator.\n    If `with_ext` is `false`, the extension as defined by the `ext()` method\n    will be omitted from the result.\n    \"\"\"\n    let b = try\n      path.trim(path.rfind(sep())?.usize() + 1)\n    else\n      path\n    end\n\n    if with_ext then\n      b\n    else\n      let e_size = ext(b).size()\n\n      if e_size > 0 then\n        b.trim(0, b.size() - e_size - 1)\n      else\n        b\n      end\n    end\n\n  fun dir(path: String): String =>\n    \"\"\"\n    Return a cleaned path before the last separator, or the whole path if there\n    is no separator.\n    \"\"\"\n    try\n      clean(path.trim(0, path.rfind(sep())?.usize()))\n    else\n      path\n    end\n\n  fun ext(path: String): String =>\n    \"\"\"\n    Return the file extension, i.e. the part after the last dot as long as that\n    dot is after all separators. Return an empty string for no extension.\n    \"\"\"\n    try\n      let i = path.rfind(\".\")?\n\n      let j = try\n        path.rfind(sep())?\n      else\n        i\n      end\n\n      if i >= j then\n        return path.trim(i.usize() + 1)\n      end\n    end\n    \"\"\n\n  fun volume(path: String): String =>\n    \"\"\"\n    On Windows, this returns the drive letter or UNC base at the beginning of\n    the path, if there is one. Otherwise, this returns an empty string.\n    \"\"\"\n    ifdef windows then\n      var offset = ISize(0)\n\n      if path.compare_sub(\"\"\"\\\\?\\\"\"\", 4) is Equal then\n        offset = 4\n\n        if path.compare_sub(\"\"\"UNC\\\"\"\", 4, offset) is Equal then\n          return _network_share(path, offset + 4)\n        end\n      end\n\n      if _drive_letter(path, offset) then\n        return path.trim(0, offset.usize() + 2)\n      end\n\n      try\n        if\n          is_sep(path.at_offset(offset)?) and\n          is_sep(path.at_offset(offset + 1)?)\n        then\n          return _network_share(path, offset + 3)\n        end\n      end\n    end\n    \"\"\n\n  fun _drive_letter(path: String, offset: ISize = 0): Bool =>\n    \"\"\"\n    Look for a drive letter followed by a ':', returning true if we find it.\n    \"\"\"\n    try\n      let c = path.at_offset(offset)?\n\n      (((c >= 'A') and (c <= 'Z')) or ((c >= 'a') and (c <= 'z')))\n        and (path.at_offset(offset + 1)? == ':')\n    else\n      false\n    end\n\n  fun _network_share(path: String, offset: ISize = 0): String =>\n    \"\"\"\n    Look for a host, a \\, and a resource. Return the path up to that point if\n    we found one, otherwise an empty String.\n    \"\"\"\n    try\n      let next = path.find(\"\\\\\", offset)? + 1\n\n      try\n        path.trim(0, path.find(\"\\\\\", next)?.usize())\n      else\n        path\n      end\n    else\n      \"\"\n    end\n\n  fun from_slash(path: String): String =>\n    \"\"\"\n    Changes each / in the path to the OS specific separator.\n    \"\"\"\n    ifdef windows then\n      let s = path.clone()\n      let len = s.size()\n      var i = USize(0)\n\n      try\n        while i < len do\n          if s(i)? == '/' then\n            s(i)? = '\\\\'\n          end\n\n          i = i + 1\n        end\n      end\n\n      s\n    else\n      path\n    end\n\n  fun to_slash(path: String): String =>\n    \"\"\"\n    Changes each OS specific separator in the path to /.\n    \"\"\"\n    ifdef windows then\n      let s = path.clone()\n      let len = s.size()\n      var i = USize(0)\n\n      try\n        while i < len do\n          if s(i)? == '\\\\' then\n            s(i)? = '/'\n          end\n\n          i = i + 1\n        end\n      end\n\n      s\n    else\n      path\n    end\n\n  fun canonical(path: String): String ? =>\n    \"\"\"\n    Return the equivalent canonical absolute path. Raise an error if there\n    isn't one.\n    \"\"\"\n    let cstring = @pony_os_realpath[Pointer[U8] iso^](\n      path.cstring())\n\n    if cstring.is_null() then\n      error\n    else\n      recover String.from_cstring(consume cstring) end\n    end\n\n  fun is_list_sep(c: U8): Bool =>\n    \"\"\"\n    Determine if a byte is a path list separator.\n    \"\"\"\n    ifdef windows then c == ';' else c == ':' end\n\n  fun list_sep(): String =>\n    \"\"\"\n    Return the path list separator as a string.\n    \"\"\"\n    ifdef windows then \";\" else \":\" end\n\n  fun split_list(path: String): Array[String] iso^ =>\n    \"\"\"\n    Separate a list of paths into an array of cleaned paths.\n    \"\"\"\n    let array = recover Array[String] end\n    var offset: ISize = 0\n\n    try\n      while true do\n        let next = path.find(list_sep(), offset)?\n        array.push(clean(path.trim(offset.usize(), next.usize())))\n        offset = next + 1\n      end\n    else\n      array.push(clean(path.trim(offset.usize())))\n    end\n\n    array\n\n  fun random(len: USize = 6): String =>\n    \"\"\"\n    Returns a pseudo-random base, suitable as a temporary file name or\n    directory name, but not guaranteed to not already exist.\n    \"\"\"\n    let letters =\n      \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    let s = recover String(len) end\n    var n = USize(0)\n    var r = Time.nanos().usize()\n\n    try\n      while n < len do\n        let c = letters(r % letters.size())?\n        r = r / letters.size()\n        s.push(c)\n        n = n + 1\n      end\n    end\n    s",
            "title": "path.pony"
        },
        {
            "location": "/src/files/file_stream/",
            "text": "actor FileStream is OutStream\n  \"\"\"\n  Asynchronous access to a File object. Wraps file operations print, write,\n  printv and writev. The File will be disposed through File._final.\n  \"\"\"\n  let _file: File\n\n  new create(file: File iso) =>\n    _file = consume file\n\n  be print(data: ByteSeq) =>\n    \"\"\"\n    Print some bytes and insert a newline afterwards.\n    \"\"\"\n    _file.print(data)\n\n  be write(data: ByteSeq) =>\n    \"\"\"\n    Print some bytes without inserting a newline afterwards.\n    \"\"\"\n    _file.write(data)\n\n  be printv(data: ByteSeqIter) =>\n    \"\"\"\n    Print an iterable collection of ByteSeqs.\n    \"\"\"\n    _file.printv(data)\n\n  be writev(data: ByteSeqIter) =>\n    \"\"\"\n    Write an iterable collection of ByteSeqs.\n    \"\"\"\n    _file.writev(data)",
            "title": "file_stream.pony"
        },
        {
            "location": "/src/files/file_path/",
            "text": "use \"time\"\n\ninterface WalkHandler\n  \"\"\"\n  A handler for `FilePath.walk`.\n  \"\"\"\n  fun ref apply(dir_path: FilePath, dir_entries: Array[String] ref)\n\nclass val FilePath\n  \"\"\"\n  A FilePath represents a capability to access a path. The path will be\n  represented as an absolute path and a set of capabilities for operations on\n  that path.\n  \"\"\"\n  let path: String\n    \"\"\"\n    Absolute filesystem path.\n    \"\"\"\n  let caps: FileCaps = FileCaps\n    \"\"\"\n    Set of capabilities for operations on `path`.\n    \"\"\"\n\n  new val create(\n    base: (FilePath | AmbientAuth),\n    path': String,\n    caps': FileCaps val = recover val FileCaps .> all() end)\n    ?\n  =>\n    \"\"\"\n    Create a new path. The caller must either provide the root capability or an\n    existing FilePath.\n\n    If the root capability is provided, path' will be relative to the program's\n    working directory. Otherwise, it will be relative to the existing FilePath,\n    and the existing FilePath must be a prefix of the resulting path.\n\n    The resulting FilePath will have capabilities that are the intersection of\n    the supplied capabilities and the capabilities on the parent.\n    \"\"\"\n    caps.union(caps')\n\n    path = match base\n      | let b: FilePath =>\n        if not b.caps(FileLookup) then\n          error\n        end\n\n        let tmp_path = Path.join(b.path, path')\n        caps.intersect(b.caps)\n\n        if not tmp_path.at(b.path, 0) then\n          error\n        end\n        tmp_path\n      | let b: AmbientAuth =>\n        Path.abs(path')\n      end\n\n  new val mkdtemp(\n    base: (FilePath | AmbientAuth),\n    prefix: String = \"\",\n    caps': FileCaps val = recover val FileCaps .> all() end)\n    ?\n  =>\n    \"\"\"\n    Create a temporary directory and returns a path to it. The directory's name\n    will begin with `prefix`. The caller must either provide the root\n    capability or an existing FilePath.\n\n    If AmbientAuth is provided, pattern will be relative to the program's\n    working directory. Otherwise, it will be relative to the existing\n    FilePath, and the existing FilePath must be a prefix of the resulting path.\n\n    The resulting FilePath will have capabilities that are the intersection of\n    the supplied capabilities and the capabilities on the base.\n    \"\"\"\n    (let dir, let pre) = Path.split(prefix)\n    let parent = FilePath(base, dir)?\n\n    if not parent.mkdir() then\n      error\n    end\n\n    var temp = FilePath(parent, pre + Path.random())?\n\n    while not temp.mkdir(true) do\n      temp = FilePath(parent, pre + Path.random())?\n    end\n\n    caps.union(caps')\n    caps.intersect(temp.caps)\n    path = temp.path\n\n  new val _create(path': String, caps': FileCaps val) =>\n    \"\"\"\n    Internal constructor.\n    \"\"\"\n    path = path'\n    caps.union(caps')\n\n  fun val join(\n    path': String,\n    caps': FileCaps val = recover val FileCaps .> all() end)\n    : FilePath ?\n  =>\n    \"\"\"\n    Return a new path relative to this one.\n    \"\"\"\n    create(this, path', caps')?\n\n  fun val walk(handler: WalkHandler ref, follow_links: Bool = false) =>\n    \"\"\"\n    Walks a directory structure starting at this.\n\n    `handler(dir_path, dir_entries)` will be called for each directory\n    starting with this one. The handler can control which subdirectories are\n    expanded by removing them from the `dir_entries` list.\n    \"\"\"\n    try\n      with dir = Directory(this)? do\n        var entries: Array[String] ref = dir.entries()?\n        handler(this, entries)\n        for e in entries.values() do\n          let p = this.join(e)?\n          let info = FileInfo(p)?\n          if info.directory and (follow_links or not info.symlink) then\n            p.walk(handler, follow_links)\n          end\n        end\n      end\n    else\n      return\n    end\n\n  fun val canonical(): FilePath ? =>\n    \"\"\"\n    Return the equivalent canonical absolute path. Raise an error if there\n    isn't one.\n    \"\"\"\n    _create(Path.canonical(path)?, caps)\n\n  fun val exists(): Bool =>\n    \"\"\"\n    Returns true if the path exists. Returns false for a broken symlink.\n    \"\"\"\n    try\n      not FileInfo(this)?.broken\n    else\n      false\n    end\n\n  fun val mkdir(must_create: Bool = false): Bool =>\n    \"\"\"\n    Creates the directory. Will recursively create each element. Returns true\n    if the directory exists when we're done, false if it does not. If we do not\n    have the FileStat permission, this will return false even if the directory\n    does exist.\n    \"\"\"\n    if not caps(FileMkdir) then\n      return false\n    end\n\n    var offset: ISize = 0\n\n    repeat\n      let element = try\n        offset = path.find(Path.sep(), offset)? + 1\n        path.substring(0, offset - 1)\n      else\n        offset = -1\n        path\n      end\n\n      if element.size() > 0 then\n        let r = ifdef windows then\n          @_mkdir[I32](element.cstring())\n        else\n          @mkdir[I32](element.cstring(), U32(0x1FF))\n        end\n\n        if r != 0 then\n          if @pony_os_errno[I32]() != @pony_os_eexist[I32]() then\n            return false\n          end\n\n          if must_create and (offset < 0) then\n            return false\n          end\n        end\n      end\n    until offset < 0 end\n\n    try\n      FileInfo(this)?.directory\n    else\n      false\n    end\n\n  fun val remove(): Bool =>\n    \"\"\"\n    Remove the file or directory. The directory contents will be removed as\n    well, recursively. Symlinks will be removed but not traversed.\n    \"\"\"\n    if not caps(FileRemove) then\n      return false\n    end\n\n    try\n      let info = FileInfo(this)?\n\n      if info.directory and not info.symlink then\n        let directory = Directory(this)?\n\n        for entry in directory.entries()?.values() do\n          if not join(entry)?.remove() then\n            return false\n          end\n        end\n      end\n\n      ifdef windows then\n        if info.directory and not info.symlink then\n          0 == @_rmdir[I32](path.cstring())\n        else\n          0 == @_unlink[I32](path.cstring())\n        end\n      else\n        if info.directory and not info.symlink then\n          0 == @rmdir[I32](path.cstring())\n        else\n          0 == @unlink[I32](path.cstring())\n        end\n      end\n    else\n      false\n    end\n\n  fun rename(new_path: FilePath): Bool =>\n    \"\"\"\n    Rename a file or directory.\n    \"\"\"\n    if not caps(FileRename) or not new_path.caps(FileCreate) then\n      return false\n    end\n\n    0 == @rename[I32](path.cstring(), new_path.path.cstring())\n\n  fun symlink(link_name: FilePath): Bool =>\n    \"\"\"\n    Create a symlink to a file or directory.\n    \"\"\"\n    if not caps(FileLink) or not link_name.caps(FileCreate) then\n      return false\n    end\n\n    ifdef windows then\n      0 != @CreateSymbolicLink[U8](link_name.path.cstring(), path.cstring())\n    else\n      0 == @symlink[I32](path.cstring(), link_name.path.cstring())\n    end\n\n  fun chmod(mode: FileMode box): Bool =>\n    \"\"\"\n    Set the FileMode for a path.\n    \"\"\"\n    if not caps(FileChmod) then\n      return false\n    end\n\n    let m = mode._os()\n\n    ifdef windows then\n      0 == @_chmod[I32](path.cstring(), m)\n    else\n      0 == @chmod[I32](path.cstring(), m)\n    end\n\n  fun chown(uid: U32, gid: U32): Bool =>\n    \"\"\"\n    Set the owner and group for a path. Does nothing on Windows.\n    \"\"\"\n    ifdef windows then\n      false\n    else\n      if caps(FileChown) then\n        0 == @chown[I32](path.cstring(), uid, gid)\n      else\n        false\n      end\n    end\n\n  fun touch(): Bool =>\n    \"\"\"\n    Set the last access and modification times of a path to now.\n    \"\"\"\n    set_time(Time.now(), Time.now())\n\n  fun set_time(atime: (I64, I64), mtime: (I64, I64)): Bool =>\n    \"\"\"\n    Set the last access and modification times of a path to the given values.\n    \"\"\"\n    if not caps(FileTime) then\n      return false\n    end\n\n    ifdef windows then\n      var tv: (I64, I64) = (atime._1, mtime._1)\n      0 == @_utime64[I32](path.cstring(), addressof tv)\n    else\n      var tv: (ILong, ILong, ILong, ILong) =\n        ( atime._1.ilong(), atime._2.ilong() / 1000,\n          mtime._1.ilong(), mtime._2.ilong() / 1000 )\n\n      0 == @utimes[I32](path.cstring(), addressof tv)\n    end",
            "title": "file_path.pony"
        },
        {
            "location": "/src/files/file_mode/",
            "text": "class FileMode\n  \"\"\"\n  This stores a UNIX-style mode broken out into a Bool for each bit. For other\n  operating systems, the mapping will be approximate. For example, on Windows,\n  if the file is readable all the read Bools will be set, and if the file is\n  writeable, all the write Bools will be set.\n\n  The default mode is read/write for the owner, read-only for everyone else.\n  \"\"\"\n  var setuid: Bool = false\n    \"\"\"`true` if the SETUID bit is set.\"\"\"\n\n  var setgid: Bool = false\n    \"\"\"`true` if the SETGID bit is set.\"\"\"\n\n  var sticky: Bool = false\n    \"\"\"`true` if the sticky bit is set.\"\"\"\n\n  var owner_read: Bool = true\n    \"\"\"`true` if the owning user can read the file.\"\"\"\n\n  var owner_write: Bool = true\n    \"\"\"`true` if the owning user can write to the file.\"\"\"\n\n  var owner_exec: Bool = false\n    \"\"\"`true` if the owning user can execute the file.\"\"\"\n\n  var group_read: Bool = true\n    \"\"\"`true` if members of the owning group can read the file.\"\"\"\n\n  var group_write: Bool = false\n    \"\"\"`true` if members of the owning group can write to the file.\"\"\"\n\n  var group_exec: Bool = false\n    \"\"\"`true` if members of the owning group can execute the file.\"\"\"\n\n  var any_read: Bool = true\n    \"\"\"`true` if every user can read the file.\"\"\"\n\n  var any_write: Bool = false\n    \"\"\"`true` if every user can write to the file.\"\"\"\n\n  var any_exec: Bool = false\n    \"\"\"`true if every user can execute the file.\"\"\"\n\n  fun ref exec() =>\n    \"\"\"\n    Set the executable flag for everyone.\n    \"\"\"\n    owner_exec = true\n    group_exec = true\n    any_exec = true\n\n  fun ref shared() =>\n    \"\"\"\n    Set the write flag for everyone to the same as owner_write.\n    \"\"\"\n    group_write = owner_write\n    any_write = owner_write\n\n  fun ref group() =>\n    \"\"\"\n    Clear all of the any-user flags.\n    \"\"\"\n    any_read = false\n    any_write = false\n    any_exec = false\n\n  fun ref private() =>\n    \"\"\"\n    Clear all of the group and any-user flags.\n    \"\"\"\n    group_read = false\n    group_write = false\n    group_exec = false\n    any_read = false\n    any_write = false\n    any_exec = false\n\n  fun _os(): U32 =>\n    \"\"\"\n    Get the OS specific integer for a file mode. On Windows, if any read flag\n    is set, the path is made readable, and if any write flag is set, the path\n    is made writeable.\n    \"\"\"\n    var m: U32 = 0\n\n    ifdef windows then\n      if owner_read or group_read or any_read then\n        m = m or 0x100\n      end\n\n      if owner_write or group_write or any_write then\n        m = m or 0x80\n      end\n    else\n      if setuid then m = m or 0x800 end\n      if setgid then m = m or 0x400 end\n      if sticky then m = m or 0x200 end\n      if owner_read then m = m or 0x100 end\n      if owner_write then m = m or 0x80 end\n      if owner_exec then m = m or 0x40 end\n      if group_read then m = m or 0x20 end\n      if group_write then m = m or 0x10 end\n      if group_exec then m = m or 0x8 end\n      if any_read then m = m or 0x4 end\n      if any_write then m = m or 0x2 end\n      if any_exec then m = m or 0x1 end\n    end\n    m",
            "title": "file_mode.pony"
        },
        {
            "location": "/src/files/file_info/",
            "text": "class val FileInfo\n  \"\"\"\n  This contains file system metadata for a path.\n\n  A symlink will report information about itself, other than the size which\n  will be the size of the target. A broken symlink will report as much as it\n  can and will set the broken flag.\n  \"\"\"\n  let filepath: FilePath\n\n  let mode: FileMode val = recover FileMode end\n    \"\"\"UNIX-style file mode.\"\"\"\n\n  let hard_links: U32 = 0\n    \"\"\"Number of hardlinks to this `filepath`.\"\"\"\n\n  let device: U64 = 0\n    \"\"\"\n    OS id of the device containing this `filepath`.\n    Device IDs consist of a major and minor device id,\n    denoting the type of device and the instance of this type on the system.\n    \"\"\"\n\n  let inode: U64 = 0\n    \"\"\"UNIX specific INODE number of `filepath`. Is 0 on Windows.\"\"\"\n\n  let uid: U32 = 0\n    \"\"\"UNIX-style user ID of the owner of `filepath`.\"\"\"\n\n  let gid: U32 = 0\n    \"\"\"UNIX-style user ID of the owning group of `filepath`.\"\"\"\n\n  let size: USize = 0\n    \"\"\"\n    Total size of `filepath` in bytes.\n\n    In case of a symlink this is the size of the target, not the symlink itself.\n    \"\"\"\n\n  let access_time: (I64, I64) = (0, 0)\n    \"\"\"\n    Time of last access as a tuple of seconds and nanoseconds since the epoch:\n\n    ```pony\n    (let a_secs: I64, let a_nanos: I64) = file_info.access_time\n    ```\n    \"\"\"\n\n  let modified_time: (I64, I64) = (0, 0)\n    \"\"\"\n    Time of last modification as tuple of seconds and nanoseconds since the epoch:\n\n    ```pony\n    (let m_secs: I64, let m_nanos: I64) = file_info.modified_time\n    ```\n    \"\"\"\n\n  let change_time: (I64, I64) = (0, 0)\n    \"\"\"\n    Time of the last change either the attributes (number of links, owner,\n    group, file mode, ...) or the content of `filepath`\n    as a tuple of seconds and nanoseconds since the epoch:\n\n    ```pony\n    (let c_secs: I64, let c_nanos: I64) = file_info.change_time\n    ```\n\n    On Windows this will be the file creation time.\n    \"\"\"\n\n  let file: Bool = false\n    \"\"\"`true` if `filepath` points to an a regular file.\"\"\"\n\n  let directory: Bool = false\n    \"\"\"`true` if `filepath` points to a directory.\"\"\"\n\n  let pipe: Bool = false\n    \"\"\"`true` if `filepath` points to a named pipe.\"\"\"\n\n  let symlink: Bool = false\n    \"\"\"`true` if `filepath` points to a symbolic link.\"\"\"\n\n  let broken: Bool = false\n    \"\"\"`true` if `filepath` points to a broken symlink.\"\"\"\n\n  new val create(from: FilePath) ? =>\n    \"\"\"\n    This will raise an error if the FileStat capability isn't available or the\n    path doesn't exist.\n    \"\"\"\n    if not from.caps(FileStat) then\n      error\n    end\n\n    filepath = from\n\n    if not @pony_os_stat[Bool](from.path.cstring(), this) then\n      error\n    end\n\n  new val _descriptor(fd: I32, path: FilePath) ? =>\n    \"\"\"\n    This will raise an error if the FileStat capability isn't available or the\n    file descriptor is invalid.\n    \"\"\"\n    if not path.caps(FileStat) or (fd == -1) then\n      error\n    end\n\n    filepath = path\n\n    let fstat =\n      @pony_os_fstat[Bool](fd, path.path.cstring(), this)\n    if not fstat then error end\n\n  new val _relative(fd: I32, path: FilePath, from: String) ? =>\n    if not path.caps(FileStat) or (fd == -1) then\n      error\n    end\n\n    filepath = path\n\n    let fstatat =\n      @pony_os_fstatat[Bool](fd, from.cstring(), this)\n    if not fstatat then error end",
            "title": "file_info.pony"
        },
        {
            "location": "/src/files/file_caps/",
            "text": "use \"collections\"\n\nprimitive FileCreate\n  fun value(): U32 => 1 << 0\n\nprimitive FileChmod\n  fun value(): U32 => 1 << 1\n\nprimitive FileChown\n  fun value(): U32 => 1 << 2\n\nprimitive FileLink\n  fun value(): U32 => 1 << 3\n\nprimitive FileLookup\n  fun value(): U32 => 1 << 4\n\nprimitive FileMkdir\n  fun value(): U32 => 1 << 5\n\nprimitive FileRead\n  fun value(): U32 => 1 << 6\n\nprimitive FileRemove\n  fun value(): U32 => 1 << 7\n\nprimitive FileRename\n  fun value(): U32 => 1 << 8\n\nprimitive FileSeek\n  fun value(): U32 => 1 << 9\n\nprimitive FileStat\n  fun value(): U32 => 1 << 10\n\nprimitive FileSync\n  fun value(): U32 => 1 << 11\n\nprimitive FileTime\n  fun value(): U32 => 1 << 12\n\nprimitive FileTruncate\n  fun value(): U32 => 1 << 13\n\nprimitive FileWrite\n  fun value(): U32 => 1 << 14\n\nprimitive FileExec\n  fun value(): U32 => 1 << 15    \n\ntype FileCaps is Flags[\n  ( FileCreate\n  | FileChmod\n  | FileChown\n  | FileLink\n  | FileLookup\n  | FileMkdir\n  | FileRead\n  | FileRemove\n  | FileRename\n  | FileSeek\n  | FileStat\n  | FileSync\n  | FileTime\n  | FileTruncate\n  | FileWrite\n  | FileExec\n  ),\n  U32 ]",
            "title": "file_caps.pony"
        },
        {
            "location": "/src/files/file/",
            "text": "use @_read[I32](fd: I32, buffer: Pointer[None], bytes_to_read: I32) if windows\nuse @read[ISize](fd: I32, buffer: Pointer[None], bytes_to_read: USize)\n  if not windows\nuse @_write[I32](fd: I32, buffer: Pointer[None], bytes_to_send: I32) if windows\nuse @writev[ISize](fd: I32, buffer: Pointer[None], num_to_send: I32)\n  if not windows\nuse @_lseeki64[I64](fd: I32, offset: I64, base: I32) if windows\nuse @lseek64[I64](fd: I32, offset: I64, base: I32) if linux\nuse @lseek[I64](fd: I32, offset: I64, base: I32) if not windows and not linux\nuse @FlushFileBuffers[Bool](file_handle: Pointer[None]) if windows\nuse @_get_osfhandle[Pointer[None]](fd: I32) if windows\nuse @fsync[I32](fd: I32) if not windows\nuse @fdatasync[I32](fd: I32) if not windows\nuse @_chsize_s[I32](fd: I32, len: I64) if windows\nuse @ftruncate64[I32](fd: I32, len: I64) if linux\nuse @ftruncate[I32](fd: I32, len: I64) if not windows and not linux\nuse @_close[I32](fd: I32) if windows\nuse @close[I32](fd: I32) if not windows\nuse @pony_os_writev_max[I32]()\nuse @pony_os_errno[I32]()\n\nuse \"collections\"\n\nprimitive FileOK\nprimitive FileError\nprimitive FileEOF\nprimitive FileBadFileNumber\nprimitive FileExists\nprimitive FilePermissionDenied\n\nprimitive _EBADF\n  fun apply(): I32 => 9\n\nprimitive _EEXIST\n  fun apply(): I32 => 17\n\nprimitive _EACCES\n  fun apply(): I32 => 13\n\ntype FileErrNo is\n  ( FileOK\n  | FileError\n  | FileEOF\n  | FileBadFileNumber\n  | FileExists\n  | FilePermissionDenied\n  )\n\nprimitive CreateFile\n  \"\"\"\n  Open a File for read/write, creating if it doesn't exist, preserving the\n  contents if it does exist.\n  \"\"\"\n  fun apply(from: FilePath): (File | FileErrNo) =>\n    let file = File(from)\n    let err = file.errno()\n\n    match err\n    | FileOK => file\n    else\n      err\n    end\n\nprimitive OpenFile\n  \"\"\"\n  Open a File for read only.\n  \"\"\"\n  fun apply(from: FilePath): (File | FileErrNo) =>\n    let file = File.open(from)\n    let err = file.errno()\n\n    match err\n    | FileOK => file\n    else\n      err\n    end\n\nclass File\n  \"\"\"\n  Operations on a file.\n  \"\"\"\n  let path: FilePath\n    \"\"\"\n    This is the filesystem path locating this file on the file system\n    and an object capability granting access to operate on this file.\n    \"\"\"\n\n  let writeable: Bool\n    \"\"\"\n    `true` if the underlying file descriptor has been opened as writeable.\n    \"\"\"\n\n  let _newline: String = \"\\n\"\n  var _unsynced_data: Bool = false\n  var _unsynced_metadata: Bool = false\n  var _fd: I32\n  var _last_line_length: USize = 256\n  var _errno: FileErrNo = FileOK\n  embed _pending_writev: Array[USize] = _pending_writev.create()\n  var _pending_writev_total: USize = 0\n\n  new create(from: FilePath) =>\n    \"\"\"\n    Attempt to open for read/write, creating if it doesn't exist, preserving\n    the contents if it does exist.\n    Set errno according to result.\n    \"\"\"\n    path = from\n    writeable = true\n    _fd = -1\n\n    if not from.caps(FileRead) or not from.caps(FileWrite) then\n      _errno = FileError\n    else\n      var flags: I32 = @ponyint_o_rdwr()\n      let mode = FileMode._os() // default file permissions\n      if not path.exists() then\n        if not path.caps(FileCreate) then\n          _errno = FileError\n        else\n          flags = flags or @ponyint_o_creat() or @ponyint_o_trunc()\n        end\n      end\n\n      _fd = ifdef windows then\n        @_open[I32](path.path.cstring(), flags, mode.i32())\n      else\n        @open[I32](path.path.cstring(), flags, mode)\n      end\n\n      if _fd == -1 then\n        _errno = _get_error()\n      else\n        try\n          _FileDes.set_rights(_fd, path, writeable)?\n        else\n          _errno = FileError\n        end\n      end\n    end\n\n  new open(from: FilePath) =>\n    \"\"\"\n    Open for read only.\n    Set _errno according to result.\n    \"\"\"\n    path = from\n    writeable = false\n    _fd = -1\n\n    if\n      not path.caps(FileRead) or\n      try\n        let info' = FileInfo(path)?\n        info'.directory or info'.pipe\n      else\n        true\n      end\n    then\n      _errno = FileError\n    else\n      _fd = ifdef windows then\n        @_open[I32](path.path.cstring(), @ponyint_o_rdonly())\n      else\n        @open[I32](path.path.cstring(), @ponyint_o_rdonly())\n      end\n\n      if _fd == -1 then\n        _errno = _get_error()\n      else\n        try\n          _FileDes.set_rights(_fd, path, writeable)?\n        else\n          _errno = FileError\n        end\n      end\n    end\n\n  new _descriptor(fd: I32, from: FilePath) ? =>\n    \"\"\"\n    Internal constructor from a file descriptor and a path.\n    \"\"\"\n    if not from.caps(FileRead) or (fd == -1) then\n      error\n    end\n\n    path = from\n    writeable = from.caps(FileWrite)\n    _fd = fd\n\n    _FileDes.set_rights(_fd, path, writeable)?\n\n  fun errno(): FileErrNo =>\n    \"\"\"\n    Returns the last error code set for this File\n    \"\"\"\n    _errno\n\n  fun ref clear_errno() =>\n    \"\"\"\n    Clears the last error code set for this File.\n    Clears the error indicator for the stream.\n    \"\"\"\n    _errno = FileOK\n\n  fun _get_error(): FileErrNo =>\n    \"\"\"\n    Fetch errno from the OS.\n    \"\"\"\n    let os_errno = @pony_os_errno()\n    match os_errno\n    | _EBADF() => return FileBadFileNumber\n    | _EEXIST() => return FileExists\n    | _EACCES() => return FilePermissionDenied\n    else\n      return FileError\n    end\n\n\n  fun valid(): Bool =>\n    \"\"\"\n    Returns true if the file is currently open.\n    \"\"\"\n    not (_fd == -1)\n\n  fun ref line(): String iso^ ? =>\n    \"\"\"\n    Returns a line as a String. The newline is not included in the string. If\n    there is no more data, this raises an error. If there is a file error,\n    this raises an error.\n    \"\"\"\n    if _fd == -1 then\n      error\n    end\n\n    let bytes_to_read: USize = 1\n    var offset: USize = 0\n    var len = _last_line_length\n    var result = recover String end\n    var done = false\n\n    while not done do\n      result.reserve(len)\n\n      let r =\n        (ifdef windows then\n          @_read(_fd, result.cpointer(offset), bytes_to_read.i32())\n        else\n          @read(_fd, result.cpointer(offset), bytes_to_read)\n        end)\n          .isize()\n\n      if r < bytes_to_read.isize() then\n        _errno =\n          if r == 0 then\n             FileEOF\n           else\n             _get_error() // error\n             error\n           end\n      else\n        // truncate at offset in order to adjust size of string after ffi call\n        // and to avoid scanning full array via recalc\n        result.truncate(offset + 1)\n      end\n\n      done = try\n        (_errno is FileEOF) or (result.at_offset(offset.isize())? == '\\n')\n      else\n        true\n      end\n\n      if (not done) then\n        offset = offset + 1\n        if offset == len then\n          len = len * 2\n        end\n      end\n    end\n\n    if result.size() == 0 then\n      error\n    end\n\n    try\n      if result.at_offset(offset.isize())? == '\\n' then\n        // can't rely on result.size because recalc might find an errant\n        // null terminator in the uninitialized memory.\n        result.truncate(offset)\n\n        if result.at_offset(-1)? == '\\r' then\n          result.truncate(result.size() - 1)\n        end\n      end\n    end\n\n    _last_line_length = len\n    result\n\n  fun ref read(len: USize): Array[U8] iso^ =>\n    \"\"\"\n    Returns up to len bytes.\n    \"\"\"\n    if _fd != -1 then\n      let result = recover Array[U8] .> undefined(len) end\n\n      let r =\n        (ifdef windows then\n          @_read(_fd, result.cpointer(), len.i32())\n        else\n          @read(_fd, result.cpointer(), len)\n        end)\n          .isize()\n\n      if r < len.isize() then\n        _errno =\n          if r == 0 then\n             FileEOF\n           else\n             _get_error() // error\n           end\n      end\n\n      result.truncate(r.usize())\n      result\n    else\n      recover Array[U8] end\n    end\n\n  fun ref read_string(len: USize): String iso^ =>\n    \"\"\"\n    Returns up to len bytes. The resulting string may have internal null\n    characters.\n    \"\"\"\n    if _fd != -1 then\n      let result = recover String(len) end\n\n      let r = (ifdef windows then\n        @_read(_fd, result.cpointer(), result.space().i32())\n      else\n        @read(_fd, result.cpointer(), result.space())\n      end).isize()\n\n      if r < len.isize() then\n        _errno =\n          if r == 0 then\n             FileEOF\n           else\n             _get_error() // error\n           end\n      end\n\n      result.truncate(r.usize())\n      result\n    else\n      recover String end\n    end\n\n  fun ref print(data: ByteSeq box): Bool =>\n    \"\"\"\n    Same as write, buts adds a newline.\n    \"\"\"\n    queue(data)\n    queue(_newline)\n\n    _pending_writes()\n\n  fun ref printv(data: ByteSeqIter box): Bool =>\n    \"\"\"\n    Print an iterable collection of ByteSeqs.\n    \"\"\"\n    for bytes in data.values() do\n      queue(bytes)\n      queue(_newline)\n    end\n\n    _pending_writes()\n\n  fun ref write(data: ByteSeq box): Bool =>\n    \"\"\"\n    Returns false if the file wasn't opened with write permission.\n    Returns false and closes the file if not all the bytes were written.\n    \"\"\"\n    queue(data)\n\n    _pending_writes()\n\n  fun ref writev(data: ByteSeqIter box): Bool =>\n    \"\"\"\n    Write an iterable collection of ByteSeqs.\n    \"\"\"\n    for bytes in data.values() do\n      queue(bytes)\n    end\n\n    _pending_writes()\n\n  fun ref queue(data: ByteSeq box) =>\n    \"\"\"\n    Queue data to be written\n    NOTE: Queue'd data will always be written before normal print/write\n    requested data\n    \"\"\"\n    _pending_writev .> push(data.cpointer().usize()) .> push(data.size())\n    _pending_writev_total = _pending_writev_total + data.size()\n\n  fun ref queuev(data: ByteSeqIter box) =>\n    \"\"\"\n    Queue an iterable collection of ByteSeqs to be written\n    NOTE: Queue'd data will always be written before normal print/write\n    requested data\n    \"\"\"\n    for bytes in data.values() do\n      queue(bytes)\n    end\n\n  fun ref flush(): Bool =>\n    \"\"\"\n    Flush any queued data\n    \"\"\"\n    _pending_writes()\n\n  fun ref _pending_writes(): Bool =>\n    \"\"\"\n    Write pending data.\n    Returns false if the file wasn't opened with write permission.\n    Returns false and closes the file and discards all pending data\n    if not all the bytes were written.\n    Returns true if it sent all pending data.\n    \"\"\"\n    try\n      (let result, let num_written, let new_pending_total) =\n        _write_to_disk()?\n      _pending_writev_total = new_pending_total\n      if _pending_writev_total == 0 then\n        _pending_writev.clear()\n        _unsynced_data = true\n        _unsynced_metadata = true\n      else\n        if num_written > 0 then\n          _unsynced_data = true\n          _unsynced_metadata = true\n        end\n        for d in Range[USize](0, num_written, 1) do\n          _pending_writev.shift()?\n          _pending_writev.shift()?\n        end\n      end\n      return result\n    else\n      // TODO: error recovery? EINTR?\n\n      // check error\n      _errno = _get_error()\n\n      dispose()\n      return false\n    end\n\n  fun _write_to_disk(): (Bool, USize, USize) ? =>\n    \"\"\"\n    Write pending data.\n    Returns false if the file wasn't opened with write permission.\n    Raises an error if not all the bytes were written.\n    Returns true if it sent all pending data.\n    Returns num_processed and new pending_total also.\n    \"\"\"\n    var num_to_send: I32 = 0\n    var num_sent: USize = 0\n    var bytes_to_send: USize = 0\n    var pending_total = _pending_writev_total\n\n    if (not writeable) or (_fd == -1) then\n      return (false, num_sent, pending_total)\n    end\n\n    // TODO: Make writev_batch_size user configurable\n    let writev_batch_size = @pony_os_writev_max()\n    while pending_total > 0 do\n      // Determine the number of bytes and buffers to send.\n      num_to_send = (_pending_writev.size().i32() / 2) - num_sent.i32()\n      if num_to_send <= writev_batch_size then\n        bytes_to_send = pending_total\n      else\n        // We have more buffers than a single writev can handle.\n        // We must iterate over the buffers being sent to add up to the total.\n        num_to_send = writev_batch_size\n        bytes_to_send = 0\n        var counter: I32 = (num_sent.i32() * 2) + 1\n        repeat\n          bytes_to_send = bytes_to_send + _pending_writev(counter.usize())?\n          counter = counter + 2\n        until counter >= (num_to_send * 2) end\n      end\n\n      // Write as much data as possible (vectored i/o).\n      // On Windows only write 1 buffer at a time.\n      var len = ifdef windows then\n        @_write(_fd, _pending_writev(num_sent * 2)?,\n          bytes_to_send.i32()).isize()\n      else\n        @writev(_fd, _pending_writev.cpointer(num_sent * 2),\n          num_to_send).isize()\n      end\n\n      if len < bytes_to_send.isize() then error end\n\n      // We've sent all the data we requested in this batch.\n      pending_total = pending_total - bytes_to_send\n      num_sent = num_sent + num_to_send.usize()\n    end\n\n    (true, num_sent, pending_total)\n\n  fun ref position(): USize =>\n    \"\"\"\n    Return the current cursor position in the file.\n    \"\"\"\n    if _fd != -1 then\n      let o: I64 = 0\n      let b: I32 = 1\n      let r = ifdef windows then\n        @_lseeki64(_fd, o, b)\n      else\n        ifdef linux then\n          @lseek64(_fd, o, b)\n        else\n          @lseek(_fd, o, b)\n        end\n      end\n\n      if r < 0 then\n        _errno = _get_error()\n      end\n      r.usize()\n    else\n      0\n    end\n\n  fun ref size(): USize =>\n    \"\"\"\n    Return the total length of the file.\n    \"\"\"\n    let pos = position()\n    _seek(0, 2)\n    let len = position()\n    _seek(pos.i64(), 0)\n    len\n\n  fun ref seek_start(offset: USize) =>\n    \"\"\"\n    Set the cursor position relative to the start of the file.\n    \"\"\"\n    if path.caps(FileSeek) then\n      _seek(offset.i64(), 0)\n    end\n\n  fun ref seek_end(offset: USize) =>\n    \"\"\"\n    Set the cursor position relative to the end of the file.\n    \"\"\"\n    if path.caps(FileSeek) then\n      _seek(-offset.i64(), 2)\n    end\n\n  fun ref seek(offset: ISize) =>\n    \"\"\"\n    Move the cursor position.\n    \"\"\"\n    if path.caps(FileSeek) then\n      _seek(offset.i64(), 1)\n    end\n\n  fun ref sync() =>\n    \"\"\"\n    Sync the file contents to physical storage.\n    \"\"\"\n    if path.caps(FileSync) and (_fd != -1) then\n      ifdef windows then\n        let r = @FlushFileBuffers(@_get_osfhandle(_fd))\n        if r == true then\n          _errno = FileError\n        end\n      else\n        let r = @fsync(_fd)\n        if r < 0 then\n          _errno = _get_error()\n        end\n      end\n    end\n    _unsynced_data = false\n    _unsynced_metadata = false\n\n  fun ref datasync() =>\n    \"\"\"\n    Sync the file contents to physical storage.\n    \"\"\"\n    if path.caps(FileSync) and (_fd != -1) then\n      ifdef windows then\n        let r = @FlushFileBuffers(@_get_osfhandle(_fd))\n        if r == true then\n          _errno = FileError\n        end\n      else\n        let r = @fdatasync(_fd)\n        if r < 0 then\n          _errno = _get_error()\n        end\n      end\n    end\n    _unsynced_data = false\n\n  fun ref set_length(len: USize): Bool =>\n    \"\"\"\n    Change the file size. If it is made larger, the new contents are undefined.\n    \"\"\"\n    if path.caps(FileTruncate) and writeable and (_fd != -1) then\n      let pos = position()\n      let result = ifdef windows then\n        @_chsize_s(_fd, len.i64())\n      else\n        ifdef linux then\n          @ftruncate64(_fd, len.i64())\n        else\n          @ftruncate(_fd, len.i64())\n        end\n      end\n\n      if pos >= len then\n        _seek(0, 2)\n      end\n\n      if result == 0 then\n        true\n      else\n        _errno = _get_error()\n        false\n      end\n    else\n      false\n    end\n\n  fun info(): FileInfo ? =>\n    \"\"\"\n    Return a FileInfo for this directory. Raise an error if the fd is invalid\n    or if we don't have FileStat permission.\n    \"\"\"\n    FileInfo._descriptor(_fd, path)?\n\n  fun chmod(mode: FileMode box): Bool =>\n    \"\"\"\n    Set the FileMode for this directory.\n    \"\"\"\n    _FileDes.chmod(_fd, path, mode)\n\n  fun chown(uid: U32, gid: U32): Bool =>\n    \"\"\"\n    Set the owner and group for this directory. Does nothing on Windows.\n    \"\"\"\n    _FileDes.chown(_fd, path, uid, gid)\n\n  fun touch(): Bool =>\n    \"\"\"\n    Set the last access and modification times of the directory to now.\n    \"\"\"\n    _FileDes.touch(_fd, path)\n\n  fun set_time(atime: (I64, I64), mtime: (I64, I64)): Bool =>\n    \"\"\"\n    Set the last access and modification times of the directory to the given\n    values.\n    \"\"\"\n    _FileDes.set_time(_fd, path, atime, mtime)\n\n  fun ref lines(): FileLines =>\n    \"\"\"\n    Returns an iterator for reading lines from the file.\n    \"\"\"\n    FileLines(this)\n\n  fun ref dispose() =>\n    \"\"\"\n    Close the file. Future operations will do nothing.\n    \"\"\"\n    if _fd != -1 then\n      if (_pending_writev_total > 0) and (_errno is FileOK) then\n        flush()\n      end\n      if _unsynced_data or _unsynced_metadata then\n        sync()\n      end\n      let r = ifdef windows then\n        @_close(_fd)\n      else\n        @close(_fd)\n      end\n      if r < 0 then\n        _errno = _get_error()\n      end\n      _fd = -1\n\n      _pending_writev_total = 0\n      _pending_writev.clear()\n    end\n\n  fun ref _seek(offset: I64, base: I32) =>\n    \"\"\"\n    Move the cursor position.\n    \"\"\"\n    if _fd != -1 then\n      let r = ifdef windows then\n        @_lseeki64(_fd, offset, base)\n      else\n        ifdef linux then\n          @lseek64(_fd, offset, base)\n        else\n          @lseek(_fd, offset, base)\n        end\n      end\n      if r < 0 then\n        _errno = _get_error()\n      end\n    end\n\n  fun _final() =>\n    \"\"\"\n    Close the file.\n    \"\"\"\n    if _fd != -1 then\n      if (_pending_writev_total > 0) and (_errno is FileOK) then\n        // attempt to write any buffered data\n        try\n          _write_to_disk()?\n        end\n      end\n      if _unsynced_data or _unsynced_metadata then\n        // attempt to sync any un-synced data\n        if (path.caps.value() and FileSync.value()) > 0 then\n          ifdef windows then\n            @FlushFileBuffers(@_get_osfhandle(_fd))\n          else\n            @fsync(_fd)\n          end\n        end\n      end\n      // close file\n      ifdef windows then\n        @_close(_fd)\n      else\n        @close(_fd)\n      end\n    end\n\nclass FileLines is Iterator[String]\n  \"\"\"\n  Iterate over the lines in a file.\n  \"\"\"\n  var _file: File\n  var _line: String = \"\"\n  var _next: Bool = false\n\n  new create(file: File) =>\n    _file = file\n\n    try\n      _line = file.line()?\n      _next = true\n    end\n\n  fun ref has_next(): Bool =>\n    _next\n\n  fun ref next(): String =>\n    let r = _line\n\n    try\n      _line = _file.line()?\n    else\n      _next = false\n    end\n\n    r",
            "title": "file.pony"
        },
        {
            "location": "/src/files/directory/",
            "text": "use \"time\"\n\nuse @ponyint_o_rdonly[I32]()\nuse @ponyint_o_rdwr[I32]()\nuse @ponyint_o_creat[I32]()\nuse @ponyint_o_trunc[I32]()\nuse @ponyint_o_directory[I32]()\nuse @ponyint_o_cloexec[I32]()\nuse @ponyint_at_removedir[I32]()\nuse @unlinkat[I32](fd: I32, target: Pointer[U8] tag, flags: I32)\n\nprimitive _DirectoryHandle\nprimitive _DirectoryEntry\n\nclass Directory\n  \"\"\"\n  Operations on a directory.\n\n  The directory-relative functions (open, etc) use the *at interface on FreeBSD\n  and Linux. This isn't available on OS X prior to 10.10, so it is not used. On\n  FreeBSD, this allows the directory-relative functions to take advantage of\n  Capsicum.\n  \"\"\"\n  let path: FilePath\n    \"\"\"\n    This is the filesystem path locating this directory on the file system\n    and an object capability granting access to operate on this directory.\n    \"\"\"\n\n  var _fd: I32 = -1\n  // We don't need a file descriptor in Windows. However we do still need to\n  // know whether we've disposed of this object, so we use the _fd to indicate\n  // this.\n  // 0 => not yet disposed of.\n  // -1 => disposed of.\n\n  new create(from: FilePath) ? =>\n    \"\"\"\n    This will raise an error if the path doesn't exist or it is not a\n    directory, or if FileRead or FileStat permission isn't available.\n    \"\"\"\n    if not from.caps(FileRead) then\n      error\n    end\n\n    if not FileInfo(from)?.directory then\n      error\n    end\n\n    path = from\n\n    ifdef posix then\n      _fd =\n        @open[I32](from.path.cstring(),\n          @ponyint_o_rdonly()\n            or @ponyint_o_directory()\n            or @ponyint_o_cloexec())\n\n      if _fd == -1 then\n        error\n      end\n    elseif windows then\n      _fd = 0\n    else\n      compile_error \"unsupported platform\"\n    end\n\n    _FileDes.set_rights(_fd, path)?\n\n  new iso _relative(path': FilePath, fd': I32) =>\n    \"\"\"\n    Internal constructor. Capsicum rights are already set by inheritence.\n    \"\"\"\n    path = path'\n    _fd = fd'\n\n  fun entries(): Array[String] iso^ ? =>\n    \"\"\"\n    The entries will include everything in the directory, but it is not\n    recursive. The path for the entry will be relative to the directory, so it\n    will contain no directory separators. The entries will not include \".\" or\n    \"..\".\n    \"\"\"\n    if not path.caps(FileRead) or (_fd == -1) then\n      error\n    end\n\n    let path' = path.path\n    let fd' = _fd\n\n    recover\n      let list = Array[String]\n\n      ifdef posix then\n        if fd' == -1 then\n          error\n        end\n\n        let h =\n          ifdef linux or bsd then\n            let fd =\n              @openat[I32](fd', \".\".cstring(),\n                @ponyint_o_rdonly()\n                  or @ponyint_o_directory()\n                  or @ponyint_o_cloexec())\n            @fdopendir[Pointer[_DirectoryHandle]](fd)\n          else\n            @opendir[Pointer[_DirectoryHandle]](path'.cstring())\n          end\n\n        if h.is_null() then\n          error\n        end\n\n        while true do\n          let p = @ponyint_unix_readdir[Pointer[U8] iso^](h)\n          if p.is_null() then break end\n          list.push(recover String.from_cstring(consume p) end)\n        end\n\n        @closedir[I32](h)\n      elseif windows then\n        var find = @ponyint_windows_find_data[Pointer[_DirectoryEntry]]()\n        let search = path' + \"\\\\*\"\n        let h = @FindFirstFileA[Pointer[_DirectoryHandle]](\n          search.cstring(), find)\n\n        if h.usize() == -1 then\n          error\n        end\n\n        repeat\n          let p = @ponyint_windows_readdir[Pointer[U8] iso^](find)\n\n          if not p.is_null() then\n            list.push(recover String.from_cstring(consume p) end)\n          end\n        until not @FindNextFileA[Bool](h, find) end\n\n        @FindClose[Bool](h)\n        @ponyint_windows_find_data_free[None](find)\n      else\n        compile_error \"unsupported platform\"\n      end\n\n      consume list\n    end\n\n  fun open(target: String): Directory iso^ ? =>\n    \"\"\"\n    Open a directory relative to this one. Raises an error if the path is not\n    within this directory hierarchy.\n    \"\"\"\n    if _fd == -1 then\n      error\n    end\n\n    let path' = FilePath(path, target, path.caps)?\n\n    ifdef linux or bsd then\n      let fd' =\n        @openat[I32](_fd, target.cstring(),\n          @ponyint_o_rdonly()\n            or @ponyint_o_directory()\n            or @ponyint_o_cloexec())\n      _relative(path', fd')\n    else\n      recover create(path')? end\n    end\n\n  fun mkdir(target: String): Bool =>\n    \"\"\"\n    Creates a directory relative to this one. Returns false if the path is\n    not within this directory hierarchy or if FileMkdir permission is missing.\n    \"\"\"\n    if\n      not path.caps(FileMkdir) or\n      not path.caps(FileLookup) or\n      (_fd == -1)\n    then\n      return false\n    end\n\n    try\n      let path' = FilePath(path, target, path.caps)?\n\n      ifdef linux or bsd then\n        var offset: ISize = 0\n\n        repeat\n          let element = try\n            offset = target.find(Path.sep(), offset)? + 1\n            target.substring(0, offset - 1)\n          else\n            offset = -1\n            target\n          end\n\n          @mkdirat[I32](_fd, element.cstring(), U32(0x1FF))\n        until offset < 0 end\n\n        FileInfo(path')?.directory\n      else\n        path'.mkdir()\n      end\n    else\n      false\n    end\n\n  fun create_file(target: String): File iso^ ? =>\n    \"\"\"\n    Open for read/write, creating if it doesn't exist, preserving the contents\n    if it does exist.\n    \"\"\"\n    if\n      not path.caps(FileCreate)\n        or not path.caps(FileRead)\n        or not path.caps(FileWrite)\n        or (_fd == -1)\n    then\n      error\n    end\n\n    let path' = FilePath(path, target, path.caps)?\n\n    ifdef linux or bsd then\n      let fd' =\n        @openat[I32](_fd, target.cstring(),\n          @ponyint_o_rdwr()\n            or @ponyint_o_creat()\n            or @ponyint_o_cloexec(),\n          I32(0x1B6))\n      recover File._descriptor(fd', path')? end\n    else\n      recover File(path') end\n    end\n\n  fun open_file(target: String): File iso^ ? =>\n    \"\"\"\n    Open for read only, failing if it doesn't exist.\n    \"\"\"\n    if\n      not path.caps(FileRead)\n        or (_fd == -1)\n    then\n      error\n    end\n\n    let path' = FilePath(path, target, path.caps - FileWrite)?\n\n    ifdef linux or bsd then\n      let fd' =\n        @openat[I32](_fd, target.cstring(),\n          @ponyint_o_rdonly() or @ponyint_o_cloexec(),\n          I32(0x1B6))\n      recover File._descriptor(fd', path')? end\n    else\n      recover File.open(path') end\n    end\n\n  fun info(): FileInfo ? =>\n    \"\"\"\n    Return a FileInfo for this directory. Raise an error if the fd is invalid\n    or if we don't have FileStat permission.\n    \"\"\"\n    FileInfo._descriptor(_fd, path)?\n\n  fun chmod(mode: FileMode box): Bool =>\n    \"\"\"\n    Set the FileMode for this directory.\n    \"\"\"\n    _FileDes.chmod(_fd, path, mode)\n\n  fun chown(uid: U32, gid: U32): Bool =>\n    \"\"\"\n    Set the owner and group for this directory. Does nothing on Windows.\n    \"\"\"\n    _FileDes.chown(_fd, path, uid, gid)\n\n  fun touch(): Bool =>\n    \"\"\"\n    Set the last access and modification times of the directory to now.\n    \"\"\"\n    _FileDes.touch(_fd, path)\n\n  fun set_time(atime: (I64, I64), mtime: (I64, I64)): Bool =>\n    \"\"\"\n    Set the last access and modification times of the directory to the given\n    values.\n    \"\"\"\n    _FileDes.set_time(_fd, path, atime, mtime)\n\n  fun infoat(target: String): FileInfo ? =>\n    \"\"\"\n    Return a FileInfo for some path relative to this directory.\n    \"\"\"\n    if\n      not path.caps(FileStat)\n        or not path.caps(FileLookup)\n        or (_fd == -1)\n    then\n      error\n    end\n\n    let path' = FilePath(path, target, path.caps)?\n\n    ifdef linux or bsd then\n      FileInfo._relative(_fd, path', target)?\n    else\n      FileInfo(path')?\n    end\n\n  fun chmodat(target: String, mode: FileMode box): Bool =>\n    \"\"\"\n    Set the FileMode for some path relative to this directory.\n    \"\"\"\n    if\n      not path.caps(FileChmod)\n        or not path.caps(FileLookup)\n        or (_fd == -1)\n    then\n      return false\n    end\n\n    try\n      let path' = FilePath(path, target, path.caps)?\n\n      ifdef linux or bsd then\n        0 == @fchmodat[I32](_fd, target.cstring(), mode._os(), I32(0))\n      else\n        path'.chmod(mode)\n      end\n    else\n      false\n    end\n\n  fun chownat(target: String, uid: U32, gid: U32): Bool =>\n    \"\"\"\n    Set the FileMode for some path relative to this directory.\n    \"\"\"\n    if\n      not path.caps(FileChown)\n        or not path.caps(FileLookup)\n        or (_fd == -1)\n    then\n      return false\n    end\n\n    try\n      let path' = FilePath(path, target, path.caps)?\n\n      ifdef linux or bsd then\n        0 == @fchownat[I32](_fd, target.cstring(), uid, gid, I32(0))\n      else\n        path'.chown(uid, gid)\n      end\n    else\n      false\n    end\n\n  fun touchat(target: String): Bool =>\n    \"\"\"\n    Set the last access and modification times of the directory to now.\n    \"\"\"\n    set_time_at(target, Time.now(), Time.now())\n\n  fun set_time_at(\n    target: String,\n    atime: (I64, I64),\n    mtime: (I64, I64))\n    : Bool\n  =>\n    \"\"\"\n    Set the last access and modification times of the directory to the given\n    values.\n    \"\"\"\n    if\n      not path.caps(FileChown)\n        or not path.caps(FileLookup)\n        or (_fd == -1)\n    then\n      return false\n    end\n\n    try\n      let path' = FilePath(path, target, path.caps)?\n\n      ifdef linux or bsd then\n        var tv: (ILong, ILong, ILong, ILong) =\n          ( atime._1.ilong(), atime._2.ilong() / 1000,\n            mtime._1.ilong(), mtime._2.ilong() / 1000 )\n\n        0 == @futimesat[I32](_fd, target.cstring(), addressof tv)\n      else\n        path'.set_time(atime, mtime)\n      end\n    else\n      false\n    end\n\n  fun symlink(source: FilePath, link_name: String): Bool =>\n    \"\"\"\n    Link the source path to the link_name, where the link_name is relative to\n    this directory.\n    \"\"\"\n    if\n      not path.caps(FileLink)\n        or not path.caps(FileLookup)\n        or not path.caps(FileCreate)\n        or not source.caps(FileLink)\n        or (_fd == -1)\n    then\n      return false\n    end\n\n    try\n      let path' = FilePath(path, link_name, path.caps)?\n\n      ifdef linux or bsd then\n        0 == @symlinkat[I32](source.path.cstring(), _fd, link_name.cstring())\n      else\n        source.symlink(path')\n      end\n    else\n      false\n    end\n\n  fun remove(target: String): Bool =>\n    \"\"\"\n    Remove the file or directory. The directory contents will be removed as\n    well, recursively. Symlinks will be removed but not traversed.\n    \"\"\"\n    if\n      not path.caps(FileLookup)\n        or not path.caps(FileRemove)\n        or (_fd == -1)\n    then\n      return false\n    end\n\n    try\n      let path' = FilePath(path, target, path.caps)?\n\n      ifdef linux or bsd then\n        let fi = FileInfo(path')?\n\n        if fi.directory and not fi.symlink then\n          let directory = open(target)?\n\n          for entry in directory.entries()?.values() do\n            if not directory.remove(entry) then\n              return false\n            end\n          end\n\n          0 == @unlinkat(_fd, target.cstring(), @ponyint_at_removedir())\n        else\n          0 == @unlinkat(_fd, target.cstring(), 0)\n        end\n      else\n        path'.remove()\n      end\n    else\n      false\n    end\n\n  fun rename(source: String, to: Directory box, target: String): Bool =>\n    \"\"\"\n    Rename source (which is relative to this directory) to target (which is\n    relative to the `to` directory).\n    \"\"\"\n    if\n      not path.caps(FileLookup)\n       or not path.caps(FileRename)\n       or not to.path.caps(FileLookup)\n       or not to.path.caps(FileCreate)\n       or (_fd == -1)\n       or (to._fd == -1)\n    then\n      return false\n    end\n\n    try\n      let path' = FilePath(path, source, path.caps)?\n      let path'' = FilePath(to.path, target, to.path.caps)?\n\n      ifdef linux or bsd then\n        0 == @renameat[I32](_fd, source.cstring(), to._fd, target.cstring())\n      else\n        path'.rename(path'')\n      end\n    else\n      false\n    end\n\n  fun ref dispose() =>\n    \"\"\"\n    Close the directory.\n    \"\"\"\n    if _fd != -1 then\n      ifdef posix then\n        @close[I32](_fd)\n      end\n\n      _fd = -1\n    end\n\n  fun _final() =>\n    \"\"\"\n    Close the file descriptor.\n    \"\"\"\n    if _fd != -1 then\n      ifdef posix then\n        @close[I32](_fd)\n      end\n    end",
            "title": "directory.pony"
        },
        {
            "location": "/src/format/prefix_spec/",
            "text": "trait val PrefixSpec\n\nprimitive PrefixDefault is PrefixSpec\n\nprimitive PrefixSpace is PrefixSpec\nprimitive PrefixSign is PrefixSpec\n\ntype PrefixNumber is\n  ( PrefixDefault\n  | PrefixSpace\n  | PrefixSign )",
            "title": "prefix_spec.pony"
        },
        {
            "location": "/src/format/format_spec/",
            "text": "trait val FormatSpec\n\nprimitive FormatDefault is FormatSpec\n\nprimitive FormatUTF32 is FormatSpec\nprimitive FormatBinary is FormatSpec\nprimitive FormatBinaryBare is FormatSpec\nprimitive FormatOctal is FormatSpec\nprimitive FormatOctalBare is FormatSpec\nprimitive FormatHex is FormatSpec\nprimitive FormatHexBare is FormatSpec\nprimitive FormatHexSmall is FormatSpec\nprimitive FormatHexSmallBare is FormatSpec\n\ntype FormatInt is\n  ( FormatDefault\n  | FormatUTF32\n  | FormatBinary\n  | FormatBinaryBare\n  | FormatOctal\n  | FormatOctalBare\n  | FormatHex\n  | FormatHexBare\n  | FormatHexSmall\n  | FormatHexSmallBare )\n\nprimitive FormatExp is FormatSpec\nprimitive FormatExpLarge is FormatSpec\nprimitive FormatFix is FormatSpec\nprimitive FormatFixLarge is FormatSpec\nprimitive FormatGeneral is FormatSpec\nprimitive FormatGeneralLarge is FormatSpec\n\ntype FormatFloat is\n  ( FormatDefault\n  | FormatExp\n  | FormatExpLarge\n  | FormatFix\n  | FormatFixLarge\n  | FormatGeneral\n  | FormatGeneralLarge )",
            "title": "format_spec.pony"
        },
        {
            "location": "/src/format/format/",
            "text": "\"\"\"\n# Format package\n\nThe Format package provides support for formatting strings. It can be\nused to set things like width, padding and alignment, as well as\ncontrolling the way numbers are displayed (decimal, octal,\nhexadecimal).\n\n# Example program\n\n```pony\nuse \"format\"\n\nactor Main\n  fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String =>\n    Format(desc where width = 10)\n      + \":\"\n      + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt)\n\n  new create(env: Env) =>\n    try\n      (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?)\n      env.out.print(disp(\"x\", x))\n      env.out.print(disp(\"y\", y))\n      env.out.print(disp(\"hex(x)\", x, FormatHex))\n      env.out.print(disp(\"hex(y)\", y, FormatHex))\n      env.out.print(disp(\"x * y\", x * y))\n    else\n      let exe = try env.args(0)? else \"fmt_example\" end\n      env.err.print(\"Usage: \" + exe + \" NUMBER1 NUMBER2\")\n    end\n```\n\"\"\"\n\nuse \"collections\"\n\nprimitive Format\n  \"\"\"\n  Provides functions for generating formatted strings.\n\n  * fmt. Format to use.\n  * prefix. Prefix to use.\n  * prec. Precision to use. The exact meaning of this depends on the type,\n  but is generally the number of characters used for all, or part, of the\n  string. A value of -1 indicates that the default for the type should be\n  used.\n  * width. The minimum number of characters that will be in the produced\n  string. If necessary the string will be padded with the fill character to\n  make it long enough.\n  *align. Specify whether fill characters should be added at the beginning or\n  end of the generated string, or both.\n  *fill: The character to pad a string with if is is shorter than width.\n  \"\"\"\n  fun apply(\n    str: String,\n    fmt: FormatDefault = FormatDefault,\n    prefix: PrefixDefault = PrefixDefault,\n    prec: USize = -1,\n    width: USize = 0,\n    align: Align = AlignLeft,\n    fill: U32 = ' ')\n    : String iso^\n  =>\n    let copy_len = str.size().min(prec.usize())\n    let len = copy_len.max(width.usize())\n    recover\n      let s = String(len)\n\n      match align\n      | AlignLeft =>\n        s.append(str)\n        for i in Range(s.size(), s.space()) do\n          s.push_utf32(fill)\n        end\n      | AlignRight =>\n        for i in Range(0, len - copy_len) do\n          s.push_utf32(fill)\n        end\n        s.append(str)\n      | AlignCenter =>\n        let half = (len - copy_len) / 2\n        for i in Range(0, half) do\n          s.push_utf32(fill)\n        end\n        s.append(str)\n        for i in Range(s.size(), s.space()) do\n          s.push_utf32(fill)\n        end\n      end\n\n      s .> recalc()\n    end\n\n  fun int[A: (Int & Integer[A])](\n    x: A,\n    fmt: FormatInt = FormatDefault,\n    prefix: PrefixNumber = PrefixDefault,\n    prec: USize = -1,\n    width: USize = 0,\n    align: Align = AlignRight,\n    fill: U32 = ' ')\n    : String iso^\n  =>\n    let zero = x.from[USize](0)\n    (let abs, let neg) = if x < zero then (-x, true) else (x, false) end\n\n    iftype A <: U128 then\n      _FormatInt.u128(x.u128(), false, fmt, prefix, prec, width, align, fill)\n    elseif A <: I128 then\n      _FormatInt.u128(abs.u128(), neg, fmt, prefix, prec, width, align, fill)\n    elseif A <: (U64 | I64) then\n      _FormatInt.u64(abs.u64(), neg, fmt, prefix, prec, width, align, fill)\n    elseif A <: (U32 | I32) then\n      _FormatInt.u32(abs.u32(), neg, fmt, prefix, prec, width, align, fill)\n    elseif A <: (U16 | I16) then\n      _FormatInt.u16(abs.u16(), neg, fmt, prefix, prec, width, align, fill)\n    elseif A <: (U8 | I8) then\n      _FormatInt.u8(abs.u8(), neg, fmt, prefix, prec, width, align, fill)\n    elseif A <: (USize | ISize) then\n      ifdef ilp32 then\n        _FormatInt.u32(abs.u32(), neg, fmt, prefix, prec, width, align, fill)\n      else\n        _FormatInt.u64(abs.u64(), neg, fmt, prefix, prec, width, align, fill)\n      end\n    elseif A <: (ULong | ILong) then\n      ifdef ilp32 or llp64 then\n        _FormatInt.u32(abs.u32(), neg, fmt, prefix, prec, width, align, fill)\n      else\n        _FormatInt.u64(abs.u64(), neg, fmt, prefix, prec, width, align, fill)\n      end\n    else\n      _FormatInt.u128(x.u128(), false, fmt, prefix, prec, width, align, fill)\n    end\n\n  fun float[A: (Float & FloatingPoint[A])](\n    x: A,\n    fmt: FormatFloat = FormatDefault,\n    prefix: PrefixNumber = PrefixDefault,\n    prec: USize = 6,\n    width: USize = 0,\n    align: Align = AlignRight,\n    fill: U32 = ' ')\n    : String iso^\n  =>\n    _FormatFloat.f64(x.f64(), fmt, prefix, prec, width, align, fill)",
            "title": "format.pony"
        },
        {
            "location": "/src/format/align/",
            "text": "primitive AlignLeft\nprimitive AlignRight\nprimitive AlignCenter\n\ntype Align is\n  ( AlignLeft\n  | AlignRight\n  | AlignCenter )",
            "title": "align.pony"
        },
        {
            "location": "/src/net/udp_socket/",
            "text": "use \"collections\"\n\ntype UDPSocketAuth is (AmbientAuth | NetAuth | UDPAuth)\n\nactor UDPSocket\n  \"\"\"\n  Creates a UDP socket that can be used for sending and receiving UDP messages.\n\n  The following examples create:\n  * an echo server that listens for connections and returns whatever message it\n    receives\n  * a client that connects to the server, sends a message, and prints the\n    message it receives in response\n\n  The server is implemented like this:\n\n  ```pony\n  use \"net\"\n\n  class MyUDPNotify is UDPNotify\n    fun ref received(\n      sock: UDPSocket ref,\n      data: Array[U8] iso,\n      from: NetAddress)\n    =>\n      sock.write(consume data, from)\n\n    fun ref not_listening(sock: UDPSocket ref) =>\n      None\n\n  actor Main\n    new create(env: Env) =>\n      try\n        UDPSocket(env.root as AmbientAuth,\n          MyUDPNotify, \"\", \"8989\")\n      end\n  ```\n\n  The client is implemented like this:\n\n  ```pony\n  use \"net\"\n\n  class MyUDPNotify is UDPNotify\n    let _out: OutStream\n    let _destination: NetAddress\n\n    new create(\n      out: OutStream,\n      destination: NetAddress)\n    =>\n      _out = out\n      _destination = destination\n\n    fun ref listening(sock: UDPSocket ref) =>\n      sock.write(\"hello world\", _destination)\n\n    fun ref received(\n      sock: UDPSocket ref,\n      data: Array[U8] iso,\n      from: NetAddress)\n    =>\n      _out.print(\"GOT:\" + String.from_array(consume data))\n      sock.dispose()\n\n    fun ref not_listening(sock: UDPSocket ref) =>\n      None\n\n  actor Main\n    new create(env: Env) =>\n      try\n        let destination =\n          DNS.ip4(env.root as AmbientAuth, \"localhost\", \"8989\")(0)?\n        UDPSocket(env.root as AmbientAuth,\n          recover MyUDPNotify(env.out, consume destination) end)\n      end\n  ```\n  \"\"\"\n  var _notify: UDPNotify\n  var _fd: U32\n  var _event: AsioEventID\n  var _readable: Bool = false\n  var _closed: Bool = false\n  var _packet_size: USize\n  var _read_buf: Array[U8] iso\n  var _read_from: NetAddress iso = NetAddress\n  embed _ip: NetAddress = NetAddress\n\n  new create(\n    auth: UDPSocketAuth,\n    notify: UDPNotify iso,\n    host: String = \"\",\n    service: String = \"0\",\n    size: USize = 1024)\n  =>\n    \"\"\"\n    Listens for both IPv4 and IPv6 datagrams.\n    \"\"\"\n    _notify = consume notify\n    _event =\n      @pony_os_listen_udp[AsioEventID](this,\n        host.cstring(), service.cstring())\n    _fd = @pony_asio_event_fd(_event)\n    @pony_os_sockname[Bool](_fd, _ip)\n    _packet_size = size\n    _read_buf = recover Array[U8] .> undefined(size) end\n    _notify_listening()\n    _start_next_read()\n\n  new ip4(\n    auth: UDPSocketAuth,\n    notify: UDPNotify iso,\n    host: String = \"\",\n    service: String = \"0\",\n    size: USize = 1024)\n  =>\n    \"\"\"\n    Listens for IPv4 datagrams.\n    \"\"\"\n    _notify = consume notify\n    _event =\n      @pony_os_listen_udp4[AsioEventID](this,\n        host.cstring(), service.cstring())\n    _fd = @pony_asio_event_fd(_event)\n    @pony_os_sockname[Bool](_fd, _ip)\n    _packet_size = size\n    _read_buf = recover Array[U8] .> undefined(size) end\n    _notify_listening()\n    _start_next_read()\n\n  new ip6(\n    auth: UDPSocketAuth,\n    notify: UDPNotify iso,\n    host: String = \"\",\n    service: String = \"0\",\n    size: USize = 1024)\n  =>\n    \"\"\"\n    Listens for IPv6 datagrams.\n    \"\"\"\n    _notify = consume notify\n    _event =\n      @pony_os_listen_udp6[AsioEventID](this,\n        host.cstring(), service.cstring())\n    _fd = @pony_asio_event_fd(_event)\n    @pony_os_sockname[Bool](_fd, _ip)\n    _packet_size = size\n    _read_buf = recover Array[U8] .> undefined(size) end\n    _notify_listening()\n    _start_next_read()\n\n  be write(data: ByteSeq, to: NetAddress) =>\n    \"\"\"\n    Write a single sequence of bytes.\n    \"\"\"\n    _write(data, to)\n\n  be writev(data: ByteSeqIter, to: NetAddress) =>\n    \"\"\"\n    Write a sequence of sequences of bytes.\n    \"\"\"\n    for bytes in data.values() do\n      _write(bytes, to)\n    end\n\n  be set_notify(notify: UDPNotify iso) =>\n    \"\"\"\n    Change the notifier.\n    \"\"\"\n    _notify = consume notify\n\n  be set_broadcast(state: Bool) =>\n    \"\"\"\n    Enable or disable broadcasting from this socket.\n    \"\"\"\n    if not _closed then\n      if _ip.ip4() then\n        set_so_broadcast(state)\n      elseif _ip.ip6() then\n        @pony_os_multicast_join[None](_fd, \"FF02::1\".cstring(), \"\".cstring())\n      end\n    end\n\n  be set_multicast_interface(from: String = \"\") =>\n    \"\"\"\n    By default, the OS will choose which address is used to send packets bound\n    for multicast addresses. This can be used to force a specific interface. To\n    revert to allowing the OS to choose, call with an empty string.\n    \"\"\"\n    if not _closed then\n      @pony_os_multicast_interface[None](_fd, from.cstring())\n    end\n\n  be set_multicast_loopback(loopback: Bool) =>\n    \"\"\"\n    By default, packets sent to a multicast address will be received by the\n    sending system if it has subscribed to that address. Disabling loopback\n    prevents this.\n    \"\"\"\n    if not _closed then\n      set_ip_multicast_loop(loopback)\n    end\n\n  be set_multicast_ttl(ttl: U8) =>\n    \"\"\"\n    Set the TTL for multicast sends. Defaults to 1.\n    \"\"\"\n    if not _closed then\n      set_ip_multicast_ttl(ttl)\n    end\n\n  be multicast_join(group: String, to: String = \"\") =>\n    \"\"\"\n    Add a multicast group. This can be limited to packets arriving on a\n    specific interface.\n    \"\"\"\n    if not _closed then\n      @pony_os_multicast_join[None](_fd, group.cstring(), to.cstring())\n    end\n\n  be multicast_leave(group: String, to: String = \"\") =>\n    \"\"\"\n    Drop a multicast group. This can be limited to packets arriving on a\n    specific interface. No attempt is made to check that this socket has\n    previously added this group.\n    \"\"\"\n    if not _closed then\n      @pony_os_multicast_leave[None](_fd, group.cstring(), to.cstring())\n    end\n\n  be dispose() =>\n    \"\"\"\n    Stop listening.\n    \"\"\"\n    if not _closed then\n      _close()\n    end\n\n  fun local_address(): NetAddress =>\n    \"\"\"\n    Return the bound IP address.\n    \"\"\"\n    _ip\n\n  be _event_notify(event: AsioEventID, flags: U32, arg: U32) =>\n    \"\"\"\n    When we are readable, we accept new connections until none remain.\n    \"\"\"\n    if event isnt _event then\n      return\n    end\n\n    if not _closed then\n      if AsioEvent.readable(flags) then\n        _readable = true\n        _complete_reads(arg)\n        _pending_reads()\n      end\n    else\n      ifdef windows then\n        if AsioEvent.readable(flags) then\n          _readable = false\n          _close()\n        end\n      end\n    end\n\n    if AsioEvent.disposable(flags) then\n      @pony_asio_event_destroy[None](_event)\n      _event = AsioEvent.none()\n    end\n\n  be _read_again() =>\n    \"\"\"\n    Resume reading.\n    \"\"\"\n    if not _closed then\n      _pending_reads()\n    end\n\n  fun ref _pending_reads() =>\n    \"\"\"\n    Read while data is available, guessing the next packet length as we go. If\n    we read 4 kb of data, send ourself a resume message and stop reading, to\n    avoid starving other actors.\n    \"\"\"\n    ifdef not windows then\n      try\n        var sum: USize = 0\n\n        while _readable do\n          let size = _packet_size\n          let data = _read_buf = recover Array[U8] .> undefined(size) end\n          let from = recover NetAddress end\n          let len =\n            @pony_os_recvfrom[USize](_event, data.cpointer(), data.space(),\n              from) ?\n\n          if len == 0 then\n            _readable = false\n            return\n          end\n\n          data.truncate(len)\n          _notify.received(this, consume data, consume from)\n\n          sum = sum + len\n\n          if sum > (1 << 12) then\n            _read_again()\n            return\n          end\n        end\n      else\n        _close()\n      end\n    end\n\n  fun ref _complete_reads(len: U32) =>\n    \"\"\"\n    The OS has informed as that len bytes of pending reads have completed.\n    This occurs only with IOCP on Windows.\n    \"\"\"\n    ifdef windows then\n      if _read_buf.space() == 0 then\n        // Socket has been closed\n        _readable = false\n        _close()\n        return\n      end\n\n      if _closed then\n        return\n      end\n\n      // Hand back read data\n      let size = _packet_size\n      let data = _read_buf = recover Array[U8] .> undefined(size) end\n      let from = _read_from = recover NetAddress end\n      data.truncate(len.usize())\n      _notify.received(this, consume data, consume from)\n\n      _start_next_read()\n    end\n\n  fun ref _start_next_read() =>\n    \"\"\"\n    Start our next receive.\n    This is used only with IOCP on Windows.\n    \"\"\"\n    ifdef windows then\n      try\n        @pony_os_recvfrom[USize](_event, _read_buf.cpointer(),\n          _read_buf.space(), _read_from) ?\n      else\n        _readable = false\n        _close()\n      end\n    end\n\n  fun ref _write(data: ByteSeq, to: NetAddress) =>\n    \"\"\"\n    Write the datagram to the socket.\n    \"\"\"\n    if not _closed then\n      try\n        @pony_os_sendto[USize](_fd, data.cpointer(), data.size(), to) ?\n      else\n        _close()\n      end\n    end\n\n  fun ref _notify_listening() =>\n    \"\"\"\n    Inform the notifier that we're listening.\n    \"\"\"\n    if _fd != -1 then\n      _notify.listening(this)\n    else\n      _notify.not_listening(this)\n    end\n\n  fun ref _close() =>\n    \"\"\"\n    Inform the notifier that we've closed.\n    \"\"\"\n    ifdef windows then\n      // On windows, wait until IOCP read operation has completed or been\n      // cancelled.\n      if _closed and not _readable and not _event.is_null() then\n        @pony_asio_event_unsubscribe[None](_event)\n      end\n    else\n      // Unsubscribe immediately.\n      if not _event.is_null() then\n        @pony_asio_event_unsubscribe[None](_event)\n        _readable = false\n      end\n    end\n\n    _closed = true\n\n    if _fd != -1 then\n      _notify.closed(this)\n      // On windows, this will also cancel all outstanding IOCP operations.\n      @pony_os_socket_close[None](_fd)\n      _fd = -1\n    end\n\n  fun ref getsockopt(level: I32, option_name: I32, option_max_size: USize = 4): (U32, Array[U8] iso^) =>\n    \"\"\"\n    General wrapper for UDP sockets to the `getsockopt(2)` system call.\n\n    The caller must provide an array that is pre-allocated to be\n    at least as large as the largest data structure that the kernel\n    may return for the requested option.\n\n    In case of system call success, this function returns the 2-tuple:\n    1. The integer `0`.\n    2. An `Array[U8]` of data returned by the system call's `void *`\n       4th argument.  Its size is specified by the kernel via the\n       system call's `sockopt_len_t *` 5th argument.\n\n    In case of system call failure, this function returns the 2-tuple:\n    1. The value of `errno`.\n    2. An undefined value that must be ignored.\n\n    Usage example:\n\n    ```pony\n    // listening() is a callback function for class UDPNotify\n    fun ref listening(sock: UDPSocket ref) =>\n      match sock.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4)\n        | (0, let gbytes: Array[U8] iso) =>\n          try\n            let br = Reader.create().>append(consume gbytes)\n            ifdef littleendian then\n              let buffer_size = br.u32_le()?\n            else\n              let buffer_size = br.u32_be()?\n            end\n          end\n        | (let errno: U32, _) =>\n          // System call failed\n      end\n    ```\n    \"\"\"\n    _OSSocket.getsockopt(_fd, level, option_name, option_max_size)\n\n  fun ref getsockopt_u32(level: I32, option_name: I32): (U32, U32) =>\n    \"\"\"\n    Wrapper for UDP sockets to the `getsockopt(2)` system call where\n    the kernel's returned option value is a C `uint32_t` type / Pony\n    type `U32`.\n\n    In case of system call success, this function returns the 2-tuple:\n    1. The integer `0`.\n    2. The `*option_value` returned by the kernel converted to a Pony `U32`.\n\n    In case of system call failure, this function returns the 2-tuple:\n    1. The value of `errno`.\n    2. An undefined value that must be ignored.\n    \"\"\"\n    _OSSocket.getsockopt_u32(_fd, level, option_name)\n\n  fun ref setsockopt(level: I32, option_name: I32, option: Array[U8]): U32 =>\n    \"\"\"\n    General wrapper for UDP sockets to the `setsockopt(2)` system call.\n\n    The caller is responsible for the correct size and byte contents of\n    the `option` array for the requested `level` and `option_name`,\n    including using the appropriate CPU endian byte order.\n\n    This function returns `0` on success, else the value of `errno` on\n    failure.\n\n    Usage example:\n\n    ```pony\n    // listening() is a callback function for class UDPNotify\n    fun ref listening(sock: UDPSocket ref) =>\n      let sb = Writer\n\n      sb.u32_le(7744)             // Our desired socket buffer size\n      let sbytes = Array[U8]\n      for bs in sb.done().values() do\n        sbytes.append(bs)\n      end\n      match sock.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes)\n        | 0 =>\n          // System call was successful\n        | let errno: U32 =>\n          // System call failed\n      end\n    ```\n    \"\"\"\n    _OSSocket.setsockopt(_fd, level, option_name, option)\n\n  fun ref setsockopt_u32(level: I32, option_name: I32, option: U32): U32 =>\n    \"\"\"\n    Wrapper for UDP sockets to the `setsockopt(2)` system call where\n    the kernel expects an option value of a C `uint32_t` type / Pony\n    type `U32`.\n\n    This function returns `0` on success, else the value of `errno` on\n    failure.\n    \"\"\"\n    _OSSocket.setsockopt_u32(_fd, level, option_name, option)\n\n\n  fun ref get_so_error(): (U32, U32) =>\n    \"\"\"\n    Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)`\n    \"\"\"\n    _OSSocket.get_so_error(_fd)\n\n  fun ref get_so_rcvbuf(): (U32, U32) =>\n    \"\"\"\n    Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)`\n    \"\"\"\n    _OSSocket.get_so_rcvbuf(_fd)\n\n  fun ref get_so_sndbuf(): (U32, U32) =>\n    \"\"\"\n    Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)`\n    \"\"\"\n    _OSSocket.get_so_sndbuf(_fd)\n\n\n  fun ref set_ip_multicast_loop(loopback: Bool): U32 =>\n    \"\"\"\n    Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, IP_MULTICAST_LOOP, ...)`\n    \"\"\"\n    var word: Array[U8] ref =\n      _OSSocket.u32_to_bytes4(if loopback then 1 else 0 end)\n    _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.ip_multicast_loop(), word)\n\n  fun ref set_ip_multicast_ttl(ttl: U8): U32 =>\n    \"\"\"\n    Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, IP_MULTICAST_TTL, ...)`\n    \"\"\"\n    var word: Array[U8] ref = _OSSocket.u32_to_bytes4(ttl.u32())\n    _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.ip_multicast_ttl(), word)\n\n  fun ref set_so_broadcast(state: Bool): U32 =>\n    \"\"\"\n    Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_BROADCAST, ...)`\n    \"\"\"\n    var word: Array[U8] ref =\n      _OSSocket.u32_to_bytes4(if state then 1 else 0 end)\n    _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.so_broadcast(), word)\n\n  fun ref set_so_rcvbuf(bufsize: U32): U32 =>\n    \"\"\"\n    Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)`\n    \"\"\"\n    _OSSocket.set_so_rcvbuf(_fd, bufsize)\n\n  fun ref set_so_sndbuf(bufsize: U32): U32 =>\n    \"\"\"\n    Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)`\n    \"\"\"\n    _OSSocket.set_so_sndbuf(_fd, bufsize)",
            "title": "udp_socket.pony"
        },
        {
            "location": "/src/net/udp_notify/",
            "text": "interface UDPNotify\n  \"\"\"\n  Notifications for UDP connections.\n\n  For an example of using this class please see the documentatoin for the\n  `UDPSocket` actor.\n  \"\"\"\n  fun ref listening(sock: UDPSocket ref) =>\n    \"\"\"\n    Called when the socket has been bound to an address.\n    \"\"\"\n    None\n\n  fun ref not_listening(sock: UDPSocket ref)\n    \"\"\"\n    Called if it wasn't possible to bind the socket to an address.\n\n    It is expected to implement proper error handling. You need to opt in to\n    ignoring errors, which can be implemented like this:\n\n    ```pony\n    fun ref not_listening(sock: UDPSocket ref) =>\n      None\n    ```\n    \"\"\"\n\n  fun ref received(\n    sock: UDPSocket ref,\n    data: Array[U8] iso,\n    from: NetAddress)\n  =>\n    \"\"\"\n    Called when new data is received on the socket.\n    \"\"\"\n    None\n\n  fun ref closed(sock: UDPSocket ref) =>\n    \"\"\"\n    Called when the socket is closed.\n    \"\"\"\n    None",
            "title": "udp_notify.pony"
        },
        {
            "location": "/src/net/tcp_listener/",
            "text": "type TCPListenerAuth is (AmbientAuth | NetAuth | TCPAuth | TCPListenAuth)\n\nactor TCPListener\n  \"\"\"\n  Listens for new network connections.\n\n  The following program creates an echo server that listens for\n  connections on port 8989 and echoes back any data it receives.\n\n  ```pony\n  use \"net\"\n\n  class MyTCPConnectionNotify is TCPConnectionNotify\n    fun ref received(\n      conn: TCPConnection ref,\n      data: Array[U8] iso,\n      times: USize)\n      : Bool\n    =>\n      conn.write(String.from_array(consume data))\n      true\n\n    fun ref connect_failed(conn: TCPConnection ref) =>\n      None\n\n  class MyTCPListenNotify is TCPListenNotify\n    fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ =>\n      MyTCPConnectionNotify\n\n    fun ref not_listening(listen: TCPListener ref) =>\n      None\n\n  actor Main\n    new create(env: Env) =>\n      try\n        TCPListener(env.root as AmbientAuth,\n          recover MyTCPListenNotify end, \"\", \"8989\")\n      end\n  ```\n  \"\"\"\n  var _notify: TCPListenNotify\n  var _fd: U32\n  var _event: AsioEventID = AsioEvent.none()\n  var _closed: Bool = false\n  let _limit: USize\n  var _count: USize = 0\n  var _paused: Bool = false\n  var _init_size: USize\n  var _max_size: USize\n\n  new create(\n    auth: TCPListenerAuth,\n    notify: TCPListenNotify iso,\n    host: String = \"\",\n    service: String = \"0\",\n    limit: USize = 0,\n    init_size: USize = 64,\n    max_size: USize = 16384)\n  =>\n    \"\"\"\n    Listens for both IPv4 and IPv6 connections.\n    \"\"\"\n    _limit = limit\n    _notify = consume notify\n    _event =\n      @pony_os_listen_tcp[AsioEventID](this,\n        host.cstring(), service.cstring())\n    _init_size = init_size\n    _max_size = max_size\n    _fd = @pony_asio_event_fd(_event)\n    _notify_listening()\n\n  new ip4(\n    auth: TCPListenerAuth,\n    notify: TCPListenNotify iso,\n    host: String = \"\",\n    service: String = \"0\",\n    limit: USize = 0,\n    init_size: USize = 64,\n    max_size: USize = 16384)\n  =>\n    \"\"\"\n    Listens for IPv4 connections.\n    \"\"\"\n    _limit = limit\n    _notify = consume notify\n    _event =\n      @pony_os_listen_tcp4[AsioEventID](this, host.cstring(),\n        service.cstring())\n    _init_size = init_size\n    _max_size = max_size\n    _fd = @pony_asio_event_fd(_event)\n    _notify_listening()\n\n  new ip6(\n    auth: TCPListenerAuth,\n    notify: TCPListenNotify iso,\n    host: String = \"\",\n    service: String = \"0\",\n    limit: USize = 0,\n    init_size: USize = 64,\n    max_size: USize = 16384)\n  =>\n    \"\"\"\n    Listens for IPv6 connections.\n    \"\"\"\n    _limit = limit\n    _notify = consume notify\n    _event =\n      @pony_os_listen_tcp6[AsioEventID](this, host.cstring(),\n        service.cstring())\n    _init_size = init_size\n    _max_size = max_size\n    _fd = @pony_asio_event_fd(_event)\n    _notify_listening()\n\n  be set_notify(notify: TCPListenNotify iso) =>\n    \"\"\"\n    Change the notifier.\n    \"\"\"\n    _notify = consume notify\n\n  be dispose() =>\n    \"\"\"\n    Stop listening.\n    \"\"\"\n    close()\n\n  fun local_address(): NetAddress =>\n    \"\"\"\n    Return the bound IP address.\n    \"\"\"\n    let ip = recover NetAddress end\n    @pony_os_sockname[Bool](_fd, ip)\n    ip\n\n  be _event_notify(event: AsioEventID, flags: U32, arg: U32) =>\n    \"\"\"\n    When we are readable, we accept new connections until none remain.\n    \"\"\"\n    if event isnt _event then\n      return\n    end\n\n    if AsioEvent.readable(flags) then\n      _accept(arg)\n    end\n\n    if AsioEvent.disposable(flags) then\n      @pony_asio_event_destroy(_event)\n      _event = AsioEvent.none()\n    end\n\n  be _conn_closed() =>\n    \"\"\"\n    An accepted connection has closed. If we have dropped below the limit, try\n    to accept new connections.\n    \"\"\"\n    _count = _count - 1\n\n    if _paused and (_count < _limit) then\n      _paused = false\n      _accept()\n    end\n\n  fun ref _accept(ns: U32 = 0) =>\n    \"\"\"\n    Accept connections as long as we have spawned fewer than our limit.\n    \"\"\"\n    ifdef windows then\n      if ns == -1 then\n        // Unsubscribe when we get an invalid socket in the event.\n        @pony_asio_event_unsubscribe(_event)\n        return\n      end\n\n      if ns > 0 then\n        if _closed then\n          @pony_os_socket_close[None](ns)\n          return\n        end\n\n        _spawn(ns)\n      end\n\n      // Queue an accept if we're not at the limit.\n      if (_limit == 0) or (_count < _limit) then\n        @pony_os_accept[U32](_event)\n      else\n        _paused = true\n      end\n    else\n      if _closed then\n        return\n      end\n\n      while (_limit == 0) or (_count < _limit) do\n        var fd = @pony_os_accept[U32](_event)\n\n        match fd\n        | -1 =>\n          // Something other than EWOULDBLOCK, try again.\n          None\n        | 0 =>\n          // EWOULDBLOCK, don't try again.\n          return\n        else\n          _spawn(fd)\n        end\n      end\n\n      _paused = true\n    end\n\n  fun ref _spawn(ns: U32) =>\n    \"\"\"\n    Spawn a new connection.\n    \"\"\"\n    try\n      TCPConnection._accept(this, _notify.connected(this)?, ns, _init_size,\n        _max_size)\n      _count = _count + 1\n    else\n      @pony_os_socket_close[None](ns)\n    end\n\n  fun ref _notify_listening() =>\n    \"\"\"\n    Inform the notifier that we're listening.\n    \"\"\"\n    if not _event.is_null() then\n      _notify.listening(this)\n    else\n      _closed = true\n      _notify.not_listening(this)\n    end\n\n  fun ref close() =>\n    \"\"\"\n    Dispose of resources.\n    \"\"\"\n    if _closed then\n      return\n    end\n\n    _closed = true\n\n    if not _event.is_null() then\n      // When not on windows, the unsubscribe is done immediately.\n      ifdef not windows then\n        @pony_asio_event_unsubscribe(_event)\n      end\n\n      @pony_os_socket_close[None](_fd)\n      _fd = -1\n\n      _notify.closed(this)\n    end",
            "title": "tcp_listener.pony"
        },
        {
            "location": "/src/net/tcp_listen_notify/",
            "text": "interface TCPListenNotify\n  \"\"\"\n  Notifications for TCP listeners.\n\n  For an example of using this class, please see the documentation for the\n  `TCPListener` actor.\n  \"\"\"\n  fun ref listening(listen: TCPListener ref) =>\n    \"\"\"\n    Called when the listener has been bound to an address.\n    \"\"\"\n    None\n\n  fun ref not_listening(listen: TCPListener ref)\n    \"\"\"\n    Called if it wasn't possible to bind the listener to an address.\n\n    It is expected to implement proper error handling. You need to opt in to\n    ignoring errors, which can be implemented like this:\n\n    ```pony\n    fun ref not_listening(listen: TCPListener ref) =>\n      None\n    ```\n    \"\"\"\n\n  fun ref closed(listen: TCPListener ref) =>\n    \"\"\"\n    Called when the listener is closed.\n    \"\"\"\n    None\n\n  fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ ?\n    \"\"\"\n    Create a new TCPConnectionNotify to attach to a new TCPConnection for a\n    newly established connection to the server.\n    \"\"\"",
            "title": "tcp_listen_notify.pony"
        },
        {
            "location": "/src/net/tcp_connection_notify/",
            "text": "interface TCPConnectionNotify\n  \"\"\"\n  Notifications for TCP connections.\n\n  For an example of using this class please see the documentation for the\n  `TCPConnection` and `TCPListener` actors.\n  \"\"\"\n  fun ref accepted(conn: TCPConnection ref) =>\n    \"\"\"\n    Called when a TCPConnection is accepted by a TCPListener.\n    \"\"\"\n    None\n\n  fun ref connecting(conn: TCPConnection ref, count: U32) =>\n    \"\"\"\n    Called if name resolution succeeded for a TCPConnection and we are now\n    waiting for a connection to the server to succeed. The count is the number\n    of connections we're trying. The notifier will be informed each time the\n    count changes, until a connection is made or connect_failed() is called.\n    \"\"\"\n    None\n\n  fun ref connected(conn: TCPConnection ref) =>\n    \"\"\"\n    Called when we have successfully connected to the server.\n    \"\"\"\n    None\n\n  fun ref connect_failed(conn: TCPConnection ref)\n    \"\"\"\n    Called when we have failed to connect to all possible addresses for the\n    server. At this point, the connection will never be established.\n\n    It is expected to implement proper error handling. You need to opt in to\n    ignoring errors, which can be implemented like this:\n\n    ```pony\n    fun ref connect_failed(conn: TCPConnection ref) =>\n      None\n    ```\n    \"\"\"\n\n  fun ref auth_failed(conn: TCPConnection ref) =>\n    \"\"\"\n    A raw TCPConnection has no authentication mechanism. However, when\n    protocols are wrapped in other protocols, this can be used to report an\n    authentication failure in a lower level protocol (e.g. SSL).\n    \"\"\"\n    None\n\n  fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq =>\n    \"\"\"\n    Called when data is sent on the connection. This gives the notifier an\n    opportunity to modify sent data before it is written. To swallow data,\n    return an empty string.\n    \"\"\"\n    data\n\n  fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter =>\n    \"\"\"\n    Called when multiple chunks of data are sent to the connection in a single\n    call. This gives the notifier an opportunity to modify the sent data chunks\n    before they are written. To swallow the send, return an empty\n    Array[String].\n    \"\"\"\n    data\n\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  =>\n    \"\"\"\n    Called when new data is received on the connection. Return true if you\n    want to continue receiving messages without yielding until you read\n    max_size on the TCPConnection. Return false to cause the TCPConnection\n    to yield now.\n\n    Includes the number of times during the current behavior, that received has\n    been called. This allows the notifier to end reads on a regular basis.\n    \"\"\"\n    true\n\n  fun ref expect(conn: TCPConnection ref, qty: USize): USize =>\n    \"\"\"\n    Called when the connection has been told to expect a certain quantity of\n    bytes. This allows nested notifiers to change the expected quantity, which\n    allows a lower level protocol to handle any framing (e.g. SSL).\n    \"\"\"\n    qty\n\n  fun ref closed(conn: TCPConnection ref) =>\n    \"\"\"\n    Called when the connection is closed.\n    \"\"\"\n    None\n\n  fun ref throttled(conn: TCPConnection ref) =>\n    \"\"\"\n    Called when the connection starts experiencing TCP backpressure. You should\n    respond to this by pausing additional calls to `write` and `writev` until\n    you are informed that pressure has been released. Failure to respond to\n    the `throttled` notification will result in outgoing data queuing in the\n    connection and increasing memory usage.\n    \"\"\"\n    None\n\n  fun ref unthrottled(conn: TCPConnection ref) =>\n    \"\"\"\n    Called when the connection stops experiencing TCP backpressure. Upon\n    receiving this notification, you should feel free to start making calls to\n    `write` and `writev` again.\n    \"\"\"\n    None",
            "title": "tcp_connection_notify.pony"
        },
        {
            "location": "/src/net/tcp_connection/",
            "text": "use \"collections\"\n\nuse @pony_asio_event_create[AsioEventID](owner: AsioEventNotify, fd: U32,\n  flags: U32, nsec: U64, noisy: Bool)\nuse @pony_asio_event_fd[U32](event: AsioEventID)\nuse @pony_asio_event_unsubscribe[None](event: AsioEventID)\nuse @pony_asio_event_resubscribe_read[None](event: AsioEventID)\nuse @pony_asio_event_resubscribe_write[None](event: AsioEventID)\nuse @pony_asio_event_destroy[None](event: AsioEventID)\nuse @pony_asio_event_set_writeable[None](event: AsioEventID, writeable: Bool)\nuse @pony_asio_event_set_readable[None](event: AsioEventID, readable: Bool)\n\ntype TCPConnectionAuth is (AmbientAuth | NetAuth | TCPAuth | TCPConnectAuth)\n\nactor TCPConnection\n  \"\"\"\n  A TCP connection. When connecting, the Happy Eyeballs algorithm is used.\n\n  The following code creates a client that connects to port 8989 of\n  the local host, writes \"hello world\", and listens for a response,\n  which it then prints.\n\n  ```pony\n  use \"net\"\n\n  class MyTCPConnectionNotify is TCPConnectionNotify\n    let _out: OutStream\n\n    new create(out: OutStream) =>\n      _out = out\n\n    fun ref connected(conn: TCPConnection ref) =>\n      conn.write(\"hello world\")\n\n    fun ref received(\n      conn: TCPConnection ref,\n      data: Array[U8] iso,\n      times: USize)\n      : Bool\n    =>\n      _out.print(\"GOT:\" + String.from_array(consume data))\n      conn.close()\n      true\n\n    fun ref connect_failed(conn: TCPConnection ref) =>\n      None\n\n  actor Main\n    new create(env: Env) =>\n      try\n        TCPConnection(env.root as AmbientAuth,\n          recover MyTCPConnectionNotify(env.out) end, \"\", \"8989\")\n      end\n  ```\n\n  Note: when writing to the connection data will be silently discarded if the\n  connection has not yet been established.\n\n  ## Backpressure support\n\n  ### Write\n\n  The TCP protocol has built-in backpressure support. This is generally\n  experienced as the outgoing write buffer becoming full and being unable\n  to write all requested data to the socket. In `TCPConnection`, this is\n  hidden from the programmer. When this occurs, `TCPConnection` will buffer\n  the extra data until such time as it is able to be sent. Left unchecked,\n  this could result in uncontrolled queuing. To address this,\n  `TCPConnectionNotify` implements two methods `throttled` and `unthrottled`\n  that are called when backpressure is applied and released.\n\n  Upon receiving a `throttled` notification, your application has two choices\n  on how to handle it. One is to inform the Pony runtime that it can no\n  longer make progress and that runtime backpressure should be applied to\n  any actors sending this one messages. For example, you might construct your\n  application like:\n\n  ```pony\n  // Here we have a TCPConnectionNotify that upon construction\n  // is given a BackpressureAuth token. This allows the notifier\n  // to inform the Pony runtime when to apply and release backpressure\n  // as the connection experiences it.\n  // Note the calls to\n  //\n  // Backpressure.apply(_auth)\n  // Backpressure.release(_auth)\n  //\n  // that apply and release backpressure as needed\n\n  use \"backpressure\"\n  use \"collections\"\n  use \"net\"\n\n  class SlowDown is TCPConnectionNotify\n    let _auth: BackpressureAuth\n    let _out: StdStream\n\n    new iso create(auth: BackpressureAuth, out: StdStream) =>\n      _auth = auth\n      _out = out\n\n    fun ref throttled(connection: TCPConnection ref) =>\n      _out.print(\"Experiencing backpressure!\")\n      Backpressure.apply(_auth)\n\n    fun ref unthrottled(connection: TCPConnection ref) =>\n      _out.print(\"Releasing backpressure!\")\n      Backpressure.release(_auth)\n\n    fun ref closed(connection: TCPConnection ref) =>\n      // if backpressure has been applied, make sure we release\n      // when shutting down\n      _out.print(\"Releasing backpressure if applied!\")\n      Backpressure.release(_auth)\n\n    fun ref connect_failed(conn: TCPConnection ref) =>\n      None\n\n  actor Main\n    new create(env: Env) =>\n      try\n        let auth = env.root as AmbientAuth\n        let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end,\n          \"\", \"7669\")\n      end\n\n  ```\n\n  Or if you want, you could handle backpressure by shedding load, that is,\n  dropping the extra data rather than carrying out the send. This might look\n  like:\n\n  ```pony\n  use \"net\"\n\n  class ThrowItAway is TCPConnectionNotify\n    var _throttled: Bool = false\n\n    fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq =>\n      if not _throttled then\n        data\n      else\n        \"\"\n      end\n\n    fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter =>\n      if not _throttled then\n        data\n      else\n        recover Array[String] end\n      end\n\n    fun ref throttled(connection: TCPConnection ref) =>\n      _throttled = true\n\n    fun ref unthrottled(connection: TCPConnection ref) =>\n      _throttled = false\n\n    fun ref connect_failed(conn: TCPConnection ref) =>\n      None\n\n  actor Main\n    new create(env: Env) =>\n      try\n        TCPConnection(env.root as AmbientAuth,\n          recover ThrowItAway end, \"\", \"7669\")\n      end\n  ```\n\n  In general, unless you have a very specific use case, we strongly advise that\n  you don't implement a load shedding scheme where you drop data.\n\n  ### Read\n\n  If your application is unable to keep up with data being sent to it over\n  a `TCPConnection` you can use the builtin read backpressure support to\n  pause reading the socket which will in turn start to exert backpressure on\n  the corresponding writer on the other end of that socket.\n\n  The `mute` behavior allow any other actors in your application to request\n  the cessation of additional reads until such time as `unmute` is called.\n  Please note that this cessation is not guaranteed to happen immediately as\n  it is the result of an asynchronous behavior call and as such will have to\n  wait for existing messages in the `TCPConnection`'s mailbox to be handled.\n\n  On non-windows platforms, your `TCPConnection` will not notice if the\n  other end of the connection closes until you unmute it. Unix type systems\n  like FreeBSD, Linux and OSX learn about a closed connection upon read. On\n  these platforms, you **must** call `unmute` on a muted connection to have\n  it close. Without calling `unmute` the `TCPConnection` actor will never\n  exit.\n  \"\"\"\n  var _listen: (TCPListener | None) = None\n  var _notify: TCPConnectionNotify\n  var _connect_count: U32\n  var _fd: U32 = -1\n  var _event: AsioEventID = AsioEvent.none()\n  var _connected: Bool = false\n  var _readable: Bool = false\n  var _writeable: Bool = false\n  var _throttled: Bool = false\n  var _closed: Bool = false\n  var _shutdown: Bool = false\n  var _shutdown_peer: Bool = false\n  var _in_sent: Bool = false\n  // _pending is used to avoid GC prematurely reaping memory.\n  // See GitHub bug 2526 for more.  It looks like a write-only\n  // data structure, but its use is vital to avoid GC races:\n  // _pending_writev's C pointers are invisible to ORCA.\n  embed _pending: Array[ByteSeq] = _pending.create()\n  embed _pending_writev: Array[USize] = _pending_writev.create()\n  var _pending_sent: USize = 0\n  var _pending_writev_total: USize = 0\n  var _read_buf: Array[U8] iso\n\n  var _next_size: USize\n  let _max_size: USize\n\n  var _read_len: USize = 0\n  var _expect: USize = 0\n\n  var _muted: Bool = false\n\n  new create(\n    auth: TCPConnectionAuth,\n    notify: TCPConnectionNotify iso,\n    host: String,\n    service: String,\n    from: String = \"\",\n    init_size: USize = 64,\n    max_size: USize = 16384)\n  =>\n    \"\"\"\n    Connect via IPv4 or IPv6. If `from` is a non-empty string, the connection\n    will be made from the specified interface.\n    \"\"\"\n    _read_buf = recover Array[U8] .> undefined(init_size) end\n    _next_size = init_size\n    _max_size = max_size\n    _notify = consume notify\n    _connect_count =\n      @pony_os_connect_tcp[U32](this, host.cstring(), service.cstring(),\n        from.cstring())\n    _notify_connecting()\n\n  new ip4(\n    auth: TCPConnectionAuth,\n    notify: TCPConnectionNotify iso,\n    host: String,\n    service: String,\n    from: String = \"\",\n    init_size: USize = 64,\n    max_size: USize = 16384)\n  =>\n    \"\"\"\n    Connect via IPv4.\n    \"\"\"\n    _read_buf = recover Array[U8] .> undefined(init_size) end\n    _next_size = init_size\n    _max_size = max_size\n    _notify = consume notify\n    _connect_count =\n      @pony_os_connect_tcp4[U32](this, host.cstring(), service.cstring(),\n        from.cstring())\n    _notify_connecting()\n\n  new ip6(\n    auth: TCPConnectionAuth,\n    notify: TCPConnectionNotify iso,\n    host: String,\n    service: String,\n    from: String = \"\",\n    init_size: USize = 64,\n    max_size: USize = 16384)\n  =>\n    \"\"\"\n    Connect via IPv6.\n    \"\"\"\n    _read_buf = recover Array[U8] .> undefined(init_size) end\n    _next_size = init_size\n    _max_size = max_size\n    _notify = consume notify\n    _connect_count =\n      @pony_os_connect_tcp6[U32](this, host.cstring(), service.cstring(),\n        from.cstring())\n    _notify_connecting()\n\n  new _accept(\n    listen: TCPListener,\n    notify: TCPConnectionNotify iso,\n    fd: U32,\n    init_size: USize = 64,\n    max_size: USize = 16384)\n  =>\n    \"\"\"\n    A new connection accepted on a server.\n    \"\"\"\n    _listen = listen\n    _notify = consume notify\n    _connect_count = 0\n    _fd = fd\n    ifdef not windows then\n      _event = @pony_asio_event_create(this, fd,\n        AsioEvent.read_write_oneshot(), 0, true)\n    else\n      _event = @pony_asio_event_create(this, fd,\n        AsioEvent.read_write(), 0, true)\n    end\n    _connected = true\n    ifdef not windows then\n      @pony_asio_event_set_writeable(_event, true)\n    end\n    _writeable = true\n    _read_buf = recover Array[U8] .> undefined(init_size) end\n    _next_size = init_size\n    _max_size = max_size\n\n    _notify.accepted(this)\n\n    _readable = true\n    _queue_read()\n    _pending_reads()\n\n  be write(data: ByteSeq) =>\n    \"\"\"\n    Write a single sequence of bytes. Data will be silently discarded if the\n    connection has not yet been established though.\n    \"\"\"\n    if _connected and not _closed then\n      _in_sent = true\n      write_final(_notify.sent(this, data))\n      _in_sent = false\n    end\n\n  be writev(data: ByteSeqIter) =>\n    \"\"\"\n    Write a sequence of sequences of bytes. Data will be silently discarded if\n    the connection has not yet been established though.\n    \"\"\"\n    if _connected and not _closed then\n      _in_sent = true\n\n      ifdef windows then\n        try\n          var num_to_send: I32 = 0\n          for bytes in _notify.sentv(this, data).values() do\n            // Add an IOCP write.\n            _pending_writev\n              .> push(bytes.size())\n              .> push(bytes.cpointer().usize())\n            _pending_writev_total = _pending_writev_total + bytes.size()\n            _pending.push(bytes)\n            num_to_send = num_to_send + 1\n          end\n\n          // Write as much data as possible.\n          var len =\n            @pony_os_writev[USize](_event,\n              _pending_writev.cpointer(_pending_sent * 2),\n              num_to_send) ?\n\n          _pending_sent = _pending_sent + num_to_send.usize()\n\n          if _pending_sent > 32 then\n            // If more than 32 asynchronous writes are scheduled, apply\n            // backpressure. The choice of 32 is rather arbitrary an\n            // probably needs tuning\n            _apply_backpressure()\n          end\n        end\n      else\n        for bytes in _notify.sentv(this, data).values() do\n          _pending_writev\n            .> push(bytes.cpointer().usize())\n            .> push(bytes.size())\n          _pending_writev_total = _pending_writev_total + bytes.size()\n          _pending.push(bytes)\n        end\n\n        _pending_writes()\n      end\n\n      _in_sent = false\n    end\n\n  be mute() =>\n    \"\"\"\n    Temporarily suspend reading off this TCPConnection until such time as\n    `unmute` is called.\n    \"\"\"\n    _muted = true\n\n  be unmute() =>\n    \"\"\"\n    Start reading off this TCPConnection again after having been muted.\n    \"\"\"\n    _muted = false\n    _pending_reads()\n\n  be set_notify(notify: TCPConnectionNotify iso) =>\n    \"\"\"\n    Change the notifier.\n    \"\"\"\n    _notify = consume notify\n\n  be dispose() =>\n    \"\"\"\n    Close the connection gracefully once all writes are sent.\n    \"\"\"\n    close()\n\n  fun local_address(): NetAddress =>\n    \"\"\"\n    Return the local IP address.\n    \"\"\"\n    let ip = recover NetAddress end\n    @pony_os_sockname[Bool](_fd, ip)\n    ip\n\n  fun remote_address(): NetAddress =>\n    \"\"\"\n    Return the remote IP address.\n    \"\"\"\n    let ip = recover NetAddress end\n    @pony_os_peername[Bool](_fd, ip)\n    ip\n\n  fun ref expect(qty: USize = 0) =>\n    \"\"\"\n    A `received` call on the notifier must contain exactly `qty` bytes. If\n    `qty` is zero, the call can contain any amount of data. This has no effect\n    if called in the `sent` notifier callback.\n    \"\"\"\n    if not _in_sent then\n      _expect = _notify.expect(this, qty)\n      _read_buf_size()\n    end\n\n  fun ref set_nodelay(state: Bool) =>\n    \"\"\"\n    Turn Nagle on/off. Defaults to on. This can only be set on a connected\n    socket.\n    \"\"\"\n    if _connected then\n      set_tcp_nodelay(state)\n    end\n\n  fun ref set_keepalive(secs: U32) =>\n    \"\"\"\n    Sets the TCP keepalive timeout to approximately `secs` seconds. Exact\n    timing is OS dependent. If `secs` is zero, TCP keepalive is disabled. TCP\n    keepalive is disabled by default. This can only be set on a connected\n    socket.\n    \"\"\"\n    if _connected then\n      @pony_os_keepalive[None](_fd, secs)\n    end\n\n  be _event_notify(event: AsioEventID, flags: U32, arg: U32) =>\n    \"\"\"\n    Handle socket events.\n    \"\"\"\n    if event isnt _event then\n      if AsioEvent.writeable(flags) then\n        // A connection has completed.\n        var fd = @pony_asio_event_fd(event)\n        _connect_count = _connect_count - 1\n\n        if not _connected and not _closed then\n          // We don't have a connection yet.\n          if _is_sock_connected(fd) then\n            // The connection was successful, make it ours.\n            _fd = fd\n            _event = event\n            _connected = true\n            _writeable = true\n            _readable = true\n\n            _notify.connected(this)\n            _queue_read()\n            _pending_reads()\n\n            // Don't call _complete_writes, as Windows will see this as a\n            // closed connection.\n            ifdef not windows then\n              if _pending_writes() then\n                // Sent all data; release backpressure.\n                _release_backpressure()\n              end\n            end\n          else\n            // The connection failed, unsubscribe the event and close.\n            @pony_asio_event_unsubscribe(event)\n            @pony_os_socket_close[None](fd)\n            _notify_connecting()\n          end\n        else\n          // We're already connected, unsubscribe the event and close.\n          @pony_asio_event_unsubscribe(event)\n          @pony_os_socket_close[None](fd)\n          _try_shutdown()\n        end\n      else\n        // It's not our event.\n        if AsioEvent.disposable(flags) then\n          // It's disposable, so dispose of it.\n          @pony_asio_event_destroy(event)\n        end\n      end\n    else\n      // At this point, it's our event.\n      if AsioEvent.writeable(flags) then\n        _writeable = true\n        _complete_writes(arg)\n        ifdef not windows then\n          if _pending_writes() then\n            // Sent all data. Release backpressure.\n            _release_backpressure()\n          end\n        end\n      end\n\n      if AsioEvent.readable(flags) then\n        _readable = true\n        _complete_reads(arg)\n        _pending_reads()\n      end\n\n      if AsioEvent.disposable(flags) then\n        @pony_asio_event_destroy(event)\n        _event = AsioEvent.none()\n      end\n\n      _try_shutdown()\n    end\n\n  be _read_again() =>\n    \"\"\"\n    Resume reading.\n    \"\"\"\n    _pending_reads()\n\n  fun ref write_final(data: ByteSeq) =>\n    \"\"\"\n    Write as much as possible to the socket. Set `_writeable` to `false` if not\n    everything was written. On an error, close the connection. This is for data\n    that has already been transformed by the notifier. Data will be silently\n    discarded if the connection has not yet been established though.\n    \"\"\"\n    if _connected and not _closed then\n      ifdef windows then\n        try\n          // Add an IOCP write.\n          _pending_writev .> push(data.size()) .> push(data.cpointer().usize())\n          _pending_writev_total = _pending_writev_total + data.size()\n          _pending.push(data)\n\n          @pony_os_writev[USize](_event,\n            _pending_writev.cpointer(_pending_sent * 2), I32(1)) ?\n\n          _pending_sent = _pending_sent + 1\n\n          if _pending_sent > 32 then\n            // If more than 32 asynchronous writes are scheduled, apply\n            // backpressure. The choice of 32 is rather arbitrary an\n            // probably needs tuning\n            _apply_backpressure()\n          end\n        end\n      else\n        _pending_writev .> push(data.cpointer().usize()) .> push(data.size())\n        _pending_writev_total = _pending_writev_total + data.size()\n        _pending.push(data)\n        _pending_writes()\n      end\n    end\n\n  fun ref _complete_writes(len: U32) =>\n    \"\"\"\n    The OS has informed us that `len` bytes of pending writes have completed.\n    This occurs only with IOCP on Windows.\n    \"\"\"\n    ifdef windows then\n      if len == 0 then\n        // IOCP reported a failed write on this chunk. Non-graceful shutdown.\n        _hard_close()\n        return\n      end\n\n      try\n        _manage_pending_buffer(len.usize(),\n          _pending_writev_total, _pending.size())?\n      end\n\n      if _pending_sent < 16 then\n        // If fewer than 16 asynchronous writes are scheduled, remove\n        // backpressure. The choice of 16 is rather arbitrary and probably\n        // needs to be tuned.\n        _release_backpressure()\n      end\n    end\n\n  fun ref _pending_writes(): Bool =>\n    \"\"\"\n    Send pending data. If any data can't be sent, keep it and mark as not\n    writeable. On an error, dispose of the connection. Returns whether\n    it sent all pending data or not.\n    \"\"\"\n    ifdef not windows then\n      // TODO: Make writev_batch_size user configurable\n      let writev_batch_size: USize = @pony_os_writev_max[I32]().usize()\n      var num_to_send: USize = 0\n      var bytes_to_send: USize = 0\n      while _writeable and (_pending_writev_total > 0) do\n        try\n          // Determine number of bytes and buffers to send.\n          if (_pending_writev.size() / 2) < writev_batch_size then\n            num_to_send = _pending_writev.size() / 2\n            bytes_to_send = _pending_writev_total\n          else\n            // Have more buffers than a single writev can handle.\n            // Iterate over buffers being sent to add up total.\n            num_to_send = writev_batch_size\n            bytes_to_send = 0\n            for d in Range[USize](1, num_to_send * 2, 2) do\n              bytes_to_send = bytes_to_send + _pending_writev(d)?\n            end\n          end\n\n          // Write as much data as possible.\n          var len = @pony_os_writev[USize](_event,\n            _pending_writev.cpointer(), num_to_send.i32()) ?\n\n          if _manage_pending_buffer(len, bytes_to_send, num_to_send)? then\n            return true\n          end\n        else\n          // Non-graceful shutdown on error.\n          _hard_close()\n        end\n      end\n    end\n\n    false\n\n  fun ref _manage_pending_buffer(\n    bytes_sent: USize,\n    bytes_to_send: USize,\n    num_to_send: USize)\n    : Bool ?\n  =>\n    \"\"\"\n    Manage pending buffer for data sent. Returns a boolean of whether\n    the pending buffer is empty or not.\n    \"\"\"\n    var len = bytes_sent\n    if len < bytes_to_send then\n      while len > 0 do\n        let iov_p =\n          ifdef windows then\n            _pending_writev(1)?\n          else\n            _pending_writev(0)?\n          end\n        let iov_s =\n          ifdef windows then\n            _pending_writev(0)?\n          else\n            _pending_writev(1)?\n          end\n        if iov_s <= len then\n          len = len - iov_s\n          _pending_writev.shift()?\n          _pending_writev.shift()?\n          _pending.shift()?\n          ifdef windows then\n            _pending_sent = _pending_sent - 1\n          end\n          _pending_writev_total = _pending_writev_total - iov_s\n        else\n          ifdef windows then\n            _pending_writev.update(1, iov_p+len)?\n            _pending_writev.update(0, iov_s-len)?\n          else\n            _pending_writev.update(0, iov_p+len)?\n            _pending_writev.update(1, iov_s-len)?\n          end\n          _pending_writev_total = _pending_writev_total - len\n          len = 0\n        end\n      end\n      ifdef not windows then\n        _apply_backpressure()\n      end\n    else\n      // sent all data we requested in this batch\n      _pending_writev_total = _pending_writev_total - bytes_to_send\n      if _pending_writev_total == 0 then\n        _pending_writev.clear()\n        _pending.clear()\n        ifdef windows then\n          _pending_sent = 0\n        end\n        return true\n      else\n        for d in Range[USize](0, num_to_send, 1) do\n          _pending_writev.shift()?\n          _pending_writev.shift()?\n          _pending.shift()?\n          ifdef windows then\n            _pending_sent = _pending_sent - 1\n          end\n        end\n      end\n    end\n\n    false\n\n  fun ref _complete_reads(len: U32) =>\n    \"\"\"\n    The OS has informed us that `len` bytes of pending reads have completed.\n    This occurs only with IOCP on Windows.\n    \"\"\"\n    ifdef windows then\n      match len.usize()\n      | 0 =>\n        // The socket has been closed from the other side, or a hard close has\n        // cancelled the queued read.\n        _readable = false\n        _shutdown_peer = true\n        close()\n        return\n      | _next_size =>\n        _next_size = _max_size.min(_next_size * 2)\n      end\n\n      _read_len = _read_len + len.usize()\n\n      if (not _muted) and (_read_len >= _expect) then\n        let data = _read_buf = recover Array[U8] end\n        data.truncate(_read_len)\n        _read_len = 0\n\n        _notify.received(this, consume data, 1)\n        _read_buf_size()\n      end\n\n      _queue_read()\n    end\n\n  fun ref _read_buf_size() =>\n    \"\"\"\n    Resize the read buffer.\n    \"\"\"\n    if _expect != 0 then\n      _read_buf.undefined(_expect)\n    else\n      _read_buf.undefined(_next_size)\n    end\n\n  fun ref _queue_read() =>\n    \"\"\"\n    Begin an IOCP read on Windows.\n    \"\"\"\n    ifdef windows then\n      try\n        @pony_os_recv[USize](\n          _event,\n          _read_buf.cpointer(_read_len),\n          _read_buf.size() - _read_len) ?\n      else\n        _hard_close()\n      end\n    end\n\n  fun ref _pending_reads() =>\n    \"\"\"\n    Unless this connection is currently muted, read while data is available,\n    guessing the next packet length as we go. If we read 4 kb of data, send\n    ourself a resume message and stop reading, to avoid starving other actors.\n    \"\"\"\n    ifdef not windows then\n      try\n        var sum: USize = 0\n        var received_called: USize = 0\n\n        while _readable and not _shutdown_peer do\n          if _muted then\n            return\n          end\n\n          // Read as much data as possible.\n          let len = @pony_os_recv[USize](\n            _event,\n            _read_buf.cpointer(_read_len),\n            _read_buf.size() - _read_len) ?\n\n          match len\n          | 0 =>\n            // Would block, try again later.\n            // this is safe because asio thread isn't currently subscribed\n            // for a read event so will not be writing to the readable flag\n            @pony_asio_event_set_readable(_event, false)\n            _readable = false\n            @pony_asio_event_resubscribe_read(_event)\n            return\n          | _next_size =>\n            // Increase the read buffer size.\n            _next_size = _max_size.min(_next_size * 2)\n          end\n\n          _read_len = _read_len + len\n\n          if _read_len >= _expect then\n            let data = _read_buf = recover Array[U8] end\n            data.truncate(_read_len)\n            _read_len = 0\n\n            received_called = received_called + 1\n            if not _notify.received(this, consume data, received_called) then\n              _read_buf_size()\n              _read_again()\n              return\n            else\n              _read_buf_size()\n            end\n          end\n\n          sum = sum + len\n\n          if sum >= _max_size then\n            // If we've read _max_size, yield and read again later.\n            _read_again()\n            return\n          end\n        end\n      else\n        // The socket has been closed from the other side.\n        _shutdown_peer = true\n        close()\n      end\n    end\n\n  fun ref _notify_connecting() =>\n    \"\"\"\n    Inform the notifier that we're connecting.\n    \"\"\"\n    if _connect_count > 0 then\n      _notify.connecting(this, _connect_count)\n    else\n      _notify.connect_failed(this)\n      _hard_close()\n    end\n\n  fun ref close() =>\n    \"\"\"\n    Attempt to perform a graceful shutdown. Don't accept new writes. If the\n    connection isn't muted then we won't finish closing until we get a zero\n    length read. If the connection is muted, perform a hard close and shut\n    down immediately.\n    \"\"\"\n    ifdef windows then\n      _close()\n    else\n      if _muted then\n        _hard_close()\n      else\n        _close()\n      end\n    end\n\n  fun ref _close() =>\n    _closed = true\n    _try_shutdown()\n\n  fun ref _try_shutdown() =>\n    \"\"\"\n    If we have closed and we have no remaining writes or pending connections,\n    then shutdown.\n    \"\"\"\n    if not _closed then\n      return\n    end\n\n    if\n      not _shutdown and\n      (_connect_count == 0) and\n      (_pending_writev_total == 0)\n    then\n      _shutdown = true\n\n      if _connected then\n        @pony_os_socket_shutdown[None](_fd)\n      else\n        _shutdown_peer = true\n      end\n    end\n\n    if _connected and _shutdown and _shutdown_peer then\n      _hard_close()\n    end\n\n    ifdef windows then\n      // On windows, wait until all outstanding IOCP operations have completed\n      // or been cancelled.\n      if not _connected and not _readable and (_pending_sent == 0) then\n        @pony_asio_event_unsubscribe(_event)\n      end\n    end\n\n  fun ref _hard_close() =>\n    \"\"\"\n    When an error happens, do a non-graceful close.\n    \"\"\"\n    if not _connected then\n      return\n    end\n\n    _connected = false\n    _closed = true\n    _shutdown = true\n    _shutdown_peer = true\n\n    _pending.clear()\n    _pending_writev.clear()\n    _pending_writev_total = 0\n    ifdef windows then\n      _pending_sent = 0\n    end\n\n    ifdef not windows then\n      // Unsubscribe immediately and drop all pending writes.\n      @pony_asio_event_unsubscribe(_event)\n      _readable = false\n      _writeable = false\n      @pony_asio_event_set_readable(_event, false)\n      @pony_asio_event_set_writeable(_event, false)\n    end\n\n    // On windows, this will also cancel all outstanding IOCP operations.\n    @pony_os_socket_close[None](_fd)\n    _fd = -1\n\n    _notify.closed(this)\n\n    try (_listen as TCPListener)._conn_closed() end\n\n\n  // Check this when a connection gets its first writeable event.\n  fun _is_sock_connected(fd: U32): Bool =>\n    (let errno: U32, let value: U32) = _OSSocket.get_so_error(fd)\n    (errno == 0) and (value == 0)\n\n  fun ref _apply_backpressure() =>\n    if not _throttled then\n      _throttled = true\n      _notify.throttled(this)\n    end\n    ifdef not windows then\n      _writeable = false\n\n      // this is safe because asio thread isn't currently subscribed\n      // for a write event so will not be writing to the readable flag\n      @pony_asio_event_set_writeable(_event, false)\n      @pony_asio_event_resubscribe_write(_event)\n    end\n\n  fun ref _release_backpressure() =>\n    if _throttled then\n      _throttled = false\n      _notify.unthrottled(this)\n    end\n\n  /**************************************/\n\n  fun ref getsockopt(level: I32, option_name: I32, option_max_size: USize = 4):\n    (U32, Array[U8] iso^) =>\n    \"\"\"\n    General wrapper for TCP sockets to the `getsockopt(2)` system call.\n\n    The caller must provide an array that is pre-allocated to be\n    at least as large as the largest data structure that the kernel\n    may return for the requested option.\n\n    In case of system call success, this function returns the 2-tuple:\n    1. The integer `0`.\n    2. An `Array[U8]` of data returned by the system call's `void *`\n       4th argument.  Its size is specified by the kernel via the\n       system call's `sockopt_len_t *` 5th argument.\n\n    In case of system call failure, this function returns the 2-tuple:\n    1. The value of `errno`.\n    2. An undefined value that must be ignored.\n\n    Usage example:\n\n    ```pony\n    // connected() is a callback function for class TCPConnectionNotify\n    fun ref connected(conn: TCPConnection ref) =>\n      match conn.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4)\n        | (0, let gbytes: Array[U8] iso) =>\n          try\n            let br = Reader.create().>append(consume gbytes)\n            ifdef littleendian then\n              let buffer_size = br.u32_le()?\n            else\n              let buffer_size = br.u32_be()?\n            end\n          end\n        | (let errno: U32, _) =>\n          // System call failed\n      end\n    ```\n    \"\"\"\n    _OSSocket.getsockopt(_fd, level, option_name, option_max_size)\n\n  fun ref getsockopt_u32(level: I32, option_name: I32): (U32, U32) =>\n    \"\"\"\n    Wrapper for TCP sockets to the `getsockopt(2)` system call where\n    the kernel's returned option value is a C `uint32_t` type / Pony\n    type `U32`.\n\n    In case of system call success, this function returns the 2-tuple:\n    1. The integer `0`.\n    2. The `*option_value` returned by the kernel converted to a Pony `U32`.\n\n    In case of system call failure, this function returns the 2-tuple:\n    1. The value of `errno`.\n    2. An undefined value that must be ignored.\n    \"\"\"\n    _OSSocket.getsockopt_u32(_fd, level, option_name)\n\n  fun ref setsockopt(level: I32, option_name: I32, option: Array[U8]): U32 =>\n    \"\"\"\n    General wrapper for TCP sockets to the `setsockopt(2)` system call.\n\n    The caller is responsible for the correct size and byte contents of\n    the `option` array for the requested `level` and `option_name`,\n    including using the appropriate machine endian byte order.\n\n    This function returns `0` on success, else the value of `errno` on\n    failure.\n\n    Usage example:\n\n    ```pony\n    // connected() is a callback function for class TCPConnectionNotify\n    fun ref connected(conn: TCPConnection ref) =>\n      let sb = Writer\n\n      sb.u32_le(7744)             // Our desired socket buffer size\n      let sbytes = Array[U8]\n      for bs in sb.done().values() do\n        sbytes.append(bs)\n      end\n      match conn.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes)\n        | 0 =>\n          // System call was successful\n        | let errno: U32 =>\n          // System call failed\n      end\n    ```\n    \"\"\"\n    _OSSocket.setsockopt(_fd, level, option_name, option)\n\n  fun ref setsockopt_u32(level: I32, option_name: I32, option: U32): U32 =>\n    \"\"\"\n    General wrapper for TCP sockets to the `setsockopt(2)` system call where\n    the kernel expects an option value of a C `uint32_t` type / Pony\n    type `U32`.\n\n    This function returns `0` on success, else the value of `errno` on\n    failure.\n    \"\"\"\n    _OSSocket.setsockopt_u32(_fd, level, option_name, option)\n\n\n  fun ref get_so_error(): (U32, U32) =>\n    \"\"\"\n    Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)`\n    \"\"\"\n    _OSSocket.get_so_error(_fd)\n\n  fun ref get_so_rcvbuf(): (U32, U32) =>\n    \"\"\"\n    Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)`\n    \"\"\"\n    _OSSocket.get_so_rcvbuf(_fd)\n\n  fun ref get_so_sndbuf(): (U32, U32) =>\n    \"\"\"\n    Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)`\n    \"\"\"\n    _OSSocket.get_so_sndbuf(_fd)\n\n  fun ref get_tcp_nodelay(): (U32, U32) =>\n    \"\"\"\n    Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)`\n    \"\"\"\n    _OSSocket.getsockopt_u32(_fd, OSSockOpt.sol_socket(), OSSockOpt.tcp_nodelay())\n\n\n  fun ref set_so_rcvbuf(bufsize: U32): U32 =>\n    \"\"\"\n    Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)`\n    \"\"\"\n    _OSSocket.set_so_rcvbuf(_fd, bufsize)\n\n  fun ref set_so_sndbuf(bufsize: U32): U32 =>\n    \"\"\"\n    Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)`\n    \"\"\"\n    _OSSocket.set_so_sndbuf(_fd, bufsize)\n\n  fun ref set_tcp_nodelay(state: Bool): U32 =>\n    \"\"\"\n    Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)`\n    \"\"\"\n    var word: Array[U8] ref =\n      _OSSocket.u32_to_bytes4(if state then 1 else 0 end)\n    _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.tcp_nodelay(), word)",
            "title": "tcp_connection.pony"
        },
        {
            "location": "/src/net/ossockopt/",
            "text": "use @pony_os_sockopt_level[I32](option: I32)\nuse @pony_os_sockopt_option[I32](option: I32)\n\nprimitive OSSockOpt\n  \"\"\"\n  Convenience functions to fetch the option level and option\n  name constants (arguments #2 and #3) for the\n  `getsockopt(2)` and `setsockopt(2)` operating system calls.\n\n  The values of the option level and option name constants are\n  typically C preprocessor macros, e.g., `#define SOMETHING 42`.\n  These macro names are upper case and may contain multiple\n  consecutive underscore characters (though this is rare, for\n  example, `IP_NAT__XXX`).  The function names in this primitive\n  are derived by the C macro name and then:\n\n    * converted to lower case\n    * any double underscore (`__`) is converted to a\n      single underscore (`_`).\n\n  These constants are _not_ stable between Pony releases.\n  Values returned by this function may be held by long-lived variables\n  by the calling process: values cannot change while the process runs.\n  Programmers must not cache any of these values for purposes of\n  sharing them for use by any other Pony program (for example,\n  sharing via serialization & deserialization or via direct\n  shared memory).\n\n  Many functions may return `-1`, which means that the constant's\n  value could not be determined at the Pony runtime library compile\n  time.  One cause may be that the option truly isn't available,\n  for example, the option level constant `IPPROTO_3PC` is available\n  on MacOS 10.x but not on Linux 4.4.  Another cause may be the\n  Pony runtime library's compilation did not include the correct\n  header file(s) for the target OS platform.\n\n  A third cause of error is due to the regular expression-based\n  approach used to harvest desirable constants.  It is not fool-proof.\n  The regexp used is too broad and finds some macros that are not\n  supposed to be used with `getsockopt(2)` and `setsockopt(2)`.\n  Please consult your platform's documentation to verify the names\n  of the option level and option name macros.\n\n  The following code fragments are equivalent: set the socket\n  receive buffer size for the file descriptor `fd` to `4455`.\n\n  ```c\n  /* In C */\n  int option_value = 4455;\n  setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &option_value, 4);\n\n  /* In Pony */\n  var option: I32 = 4455;\n  @pony_os_setsockopt[I32](fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(),\n    addressof option, I32(4))\n  ```\n  \"\"\"\n\n  /* Constants are from\n   *   macOS Sierra 10.12.6\n   *   Ubuntu Linux Xenial/16.04 LTS + kernel 4.4.0-109-generic\n   *   FreeBSD 11.1-RELEASE\n   *   Windows Winsock function reference for getsockopt & setsockopt:\n   *     https://msdn.microsoft.com/en-us/library/windows/desktop/ms738544(v=vs.85).aspx\n   *     https://msdn.microsoft.com/en-us/library/windows/desktop/ms740476(v=vs.85).aspx\n\n   * Harvested by recipe given in socket.c\n   */\n\n  /*\n   * Levels formatted in Pony by:\n   *   egrep '^(IP[A-Z0-6]*PROTO_|NSPROTO_|SOL_)' ~/sum-of-all-constants.txt | egrep -v '\\(' | sort -u | egrep -v '^$' | sed 's/__/_/g' | awk 'BEGIN { count=4000; } { printf(\"  fun %s():I32 => @pony_os_sockopt_level(I32(%d))\\n\", tolower($1), count++); }'\n   */\n\n  // levels\n  fun ipproto_3pc():I32 => @pony_os_sockopt_level(I32(4000))\n  fun ipproto_adfs():I32 => @pony_os_sockopt_level(I32(4001))\n  fun ipproto_ah():I32 => @pony_os_sockopt_level(I32(4002))\n  fun ipproto_ahip():I32 => @pony_os_sockopt_level(I32(4003))\n  fun ipproto_apes():I32 => @pony_os_sockopt_level(I32(4004))\n  fun ipproto_argus():I32 => @pony_os_sockopt_level(I32(4005))\n  fun ipproto_ax25():I32 => @pony_os_sockopt_level(I32(4006))\n  fun ipproto_beetph():I32 => @pony_os_sockopt_level(I32(4007))\n  fun ipproto_bha():I32 => @pony_os_sockopt_level(I32(4008))\n  fun ipproto_blt():I32 => @pony_os_sockopt_level(I32(4009))\n  fun ipproto_brsatmon():I32 => @pony_os_sockopt_level(I32(4010))\n  fun ipproto_carp():I32 => @pony_os_sockopt_level(I32(4011))\n  fun ipproto_cftp():I32 => @pony_os_sockopt_level(I32(4012))\n  fun ipproto_chaos():I32 => @pony_os_sockopt_level(I32(4013))\n  fun ipproto_cmtp():I32 => @pony_os_sockopt_level(I32(4014))\n  fun ipproto_comp():I32 => @pony_os_sockopt_level(I32(4015))\n  fun ipproto_cphb():I32 => @pony_os_sockopt_level(I32(4016))\n  fun ipproto_cpnx():I32 => @pony_os_sockopt_level(I32(4017))\n  fun ipproto_dccp():I32 => @pony_os_sockopt_level(I32(4018))\n  fun ipproto_ddp():I32 => @pony_os_sockopt_level(I32(4019))\n  fun ipproto_dgp():I32 => @pony_os_sockopt_level(I32(4020))\n  fun ipproto_divert():I32 => @pony_os_sockopt_level(I32(4021))\n  fun ipproto_done():I32 => @pony_os_sockopt_level(I32(4022))\n  fun ipproto_dstopts():I32 => @pony_os_sockopt_level(I32(4023))\n  fun ipproto_egp():I32 => @pony_os_sockopt_level(I32(4024))\n  fun ipproto_emcon():I32 => @pony_os_sockopt_level(I32(4025))\n  fun ipproto_encap():I32 => @pony_os_sockopt_level(I32(4026))\n  fun ipproto_eon():I32 => @pony_os_sockopt_level(I32(4027))\n  fun ipproto_esp():I32 => @pony_os_sockopt_level(I32(4028))\n  fun ipproto_etherip():I32 => @pony_os_sockopt_level(I32(4029))\n  fun ipproto_fragment():I32 => @pony_os_sockopt_level(I32(4030))\n  fun ipproto_ggp():I32 => @pony_os_sockopt_level(I32(4031))\n  fun ipproto_gmtp():I32 => @pony_os_sockopt_level(I32(4032))\n  fun ipproto_gre():I32 => @pony_os_sockopt_level(I32(4033))\n  fun ipproto_hello():I32 => @pony_os_sockopt_level(I32(4034))\n  fun ipproto_hip():I32 => @pony_os_sockopt_level(I32(4035))\n  fun ipproto_hmp():I32 => @pony_os_sockopt_level(I32(4036))\n  fun ipproto_hopopts():I32 => @pony_os_sockopt_level(I32(4037))\n  fun ipproto_icmp():I32 => @pony_os_sockopt_level(I32(4038))\n  fun ipproto_icmpv6():I32 => @pony_os_sockopt_level(I32(4039))\n  fun ipproto_idp():I32 => @pony_os_sockopt_level(I32(4040))\n  fun ipproto_idpr():I32 => @pony_os_sockopt_level(I32(4041))\n  fun ipproto_idrp():I32 => @pony_os_sockopt_level(I32(4042))\n  fun ipproto_igmp():I32 => @pony_os_sockopt_level(I32(4043))\n  fun ipproto_igp():I32 => @pony_os_sockopt_level(I32(4044))\n  fun ipproto_igrp():I32 => @pony_os_sockopt_level(I32(4045))\n  fun ipproto_il():I32 => @pony_os_sockopt_level(I32(4046))\n  fun ipproto_inlsp():I32 => @pony_os_sockopt_level(I32(4047))\n  fun ipproto_inp():I32 => @pony_os_sockopt_level(I32(4048))\n  fun ipproto_ip():I32 => @pony_os_sockopt_level(I32(4049))\n  fun ipproto_ipcomp():I32 => @pony_os_sockopt_level(I32(4050))\n  fun ipproto_ipcv():I32 => @pony_os_sockopt_level(I32(4051))\n  fun ipproto_ipeip():I32 => @pony_os_sockopt_level(I32(4052))\n  fun ipproto_ipip():I32 => @pony_os_sockopt_level(I32(4053))\n  fun ipproto_ippc():I32 => @pony_os_sockopt_level(I32(4054))\n  fun ipproto_ipv4():I32 => @pony_os_sockopt_level(I32(4055))\n  fun ipproto_ipv6():I32 => @pony_os_sockopt_level(I32(4056))\n  fun ipproto_irtp():I32 => @pony_os_sockopt_level(I32(4057))\n  fun ipproto_kryptolan():I32 => @pony_os_sockopt_level(I32(4058))\n  fun ipproto_larp():I32 => @pony_os_sockopt_level(I32(4059))\n  fun ipproto_leaf1():I32 => @pony_os_sockopt_level(I32(4060))\n  fun ipproto_leaf2():I32 => @pony_os_sockopt_level(I32(4061))\n  fun ipproto_max():I32 => @pony_os_sockopt_level(I32(4062))\n  fun ipproto_maxid():I32 => @pony_os_sockopt_level(I32(4063))\n  fun ipproto_meas():I32 => @pony_os_sockopt_level(I32(4064))\n  fun ipproto_mh():I32 => @pony_os_sockopt_level(I32(4065))\n  fun ipproto_mhrp():I32 => @pony_os_sockopt_level(I32(4066))\n  fun ipproto_micp():I32 => @pony_os_sockopt_level(I32(4067))\n  fun ipproto_mobile():I32 => @pony_os_sockopt_level(I32(4068))\n  fun ipproto_mpls():I32 => @pony_os_sockopt_level(I32(4069))\n  fun ipproto_mtp():I32 => @pony_os_sockopt_level(I32(4070))\n  fun ipproto_mux():I32 => @pony_os_sockopt_level(I32(4071))\n  fun ipproto_nd():I32 => @pony_os_sockopt_level(I32(4072))\n  fun ipproto_nhrp():I32 => @pony_os_sockopt_level(I32(4073))\n  fun ipproto_none():I32 => @pony_os_sockopt_level(I32(4074))\n  fun ipproto_nsp():I32 => @pony_os_sockopt_level(I32(4075))\n  fun ipproto_nvpii():I32 => @pony_os_sockopt_level(I32(4076))\n  fun ipproto_old_divert():I32 => @pony_os_sockopt_level(I32(4077))\n  fun ipproto_ospfigp():I32 => @pony_os_sockopt_level(I32(4078))\n  fun ipproto_pfsync():I32 => @pony_os_sockopt_level(I32(4079))\n  fun ipproto_pgm():I32 => @pony_os_sockopt_level(I32(4080))\n  fun ipproto_pigp():I32 => @pony_os_sockopt_level(I32(4081))\n  fun ipproto_pim():I32 => @pony_os_sockopt_level(I32(4082))\n  fun ipproto_prm():I32 => @pony_os_sockopt_level(I32(4083))\n  fun ipproto_pup():I32 => @pony_os_sockopt_level(I32(4084))\n  fun ipproto_pvp():I32 => @pony_os_sockopt_level(I32(4085))\n  fun ipproto_raw():I32 => @pony_os_sockopt_level(I32(4086))\n  fun ipproto_rccmon():I32 => @pony_os_sockopt_level(I32(4087))\n  fun ipproto_rdp():I32 => @pony_os_sockopt_level(I32(4088))\n  fun ipproto_reserved_253():I32 => @pony_os_sockopt_level(I32(4089))\n  fun ipproto_reserved_254():I32 => @pony_os_sockopt_level(I32(4090))\n  fun ipproto_routing():I32 => @pony_os_sockopt_level(I32(4091))\n  fun ipproto_rsvp():I32 => @pony_os_sockopt_level(I32(4092))\n  fun ipproto_rvd():I32 => @pony_os_sockopt_level(I32(4093))\n  fun ipproto_satexpak():I32 => @pony_os_sockopt_level(I32(4094))\n  fun ipproto_satmon():I32 => @pony_os_sockopt_level(I32(4095))\n  fun ipproto_sccsp():I32 => @pony_os_sockopt_level(I32(4096))\n  fun ipproto_sctp():I32 => @pony_os_sockopt_level(I32(4097))\n  fun ipproto_sdrp():I32 => @pony_os_sockopt_level(I32(4098))\n  fun ipproto_send():I32 => @pony_os_sockopt_level(I32(4099))\n  fun ipproto_sep():I32 => @pony_os_sockopt_level(I32(4100))\n  fun ipproto_shim6():I32 => @pony_os_sockopt_level(I32(4101))\n  fun ipproto_skip():I32 => @pony_os_sockopt_level(I32(4102))\n  fun ipproto_spacer():I32 => @pony_os_sockopt_level(I32(4103))\n  fun ipproto_srpc():I32 => @pony_os_sockopt_level(I32(4104))\n  fun ipproto_st():I32 => @pony_os_sockopt_level(I32(4105))\n  fun ipproto_svmtp():I32 => @pony_os_sockopt_level(I32(4106))\n  fun ipproto_swipe():I32 => @pony_os_sockopt_level(I32(4107))\n  fun ipproto_tcf():I32 => @pony_os_sockopt_level(I32(4108))\n  fun ipproto_tcp():I32 => @pony_os_sockopt_level(I32(4109))\n  fun ipproto_tlsp():I32 => @pony_os_sockopt_level(I32(4110))\n  fun ipproto_tp():I32 => @pony_os_sockopt_level(I32(4111))\n  fun ipproto_tpxx():I32 => @pony_os_sockopt_level(I32(4112))\n  fun ipproto_trunk1():I32 => @pony_os_sockopt_level(I32(4113))\n  fun ipproto_trunk2():I32 => @pony_os_sockopt_level(I32(4114))\n  fun ipproto_ttp():I32 => @pony_os_sockopt_level(I32(4115))\n  fun ipproto_udp():I32 => @pony_os_sockopt_level(I32(4116))\n  fun ipproto_udplite():I32 => @pony_os_sockopt_level(I32(4117))\n  fun ipproto_vines():I32 => @pony_os_sockopt_level(I32(4118))\n  fun ipproto_visa():I32 => @pony_os_sockopt_level(I32(4119))\n  fun ipproto_vmtp():I32 => @pony_os_sockopt_level(I32(4120))\n  fun ipproto_wbexpak():I32 => @pony_os_sockopt_level(I32(4121))\n  fun ipproto_wbmon():I32 => @pony_os_sockopt_level(I32(4122))\n  fun ipproto_wsn():I32 => @pony_os_sockopt_level(I32(4123))\n  fun ipproto_xnet():I32 => @pony_os_sockopt_level(I32(4124))\n  fun ipproto_xtp():I32 => @pony_os_sockopt_level(I32(4125))\n  fun sol_atalk():I32 => @pony_os_sockopt_level(I32(4126))\n  fun sol_ax25():I32 => @pony_os_sockopt_level(I32(4127))\n  fun sol_hci_raw():I32 => @pony_os_sockopt_level(I32(4128))\n  fun sol_ipx():I32 => @pony_os_sockopt_level(I32(4129))\n  fun sol_l2cap():I32 => @pony_os_sockopt_level(I32(4130))\n  fun sol_local():I32 => @pony_os_sockopt_level(I32(4131))\n  fun sol_ndrvproto():I32 => @pony_os_sockopt_level(I32(4132))\n  fun sol_netrom():I32 => @pony_os_sockopt_level(I32(4133))\n  fun sol_rds():I32 => @pony_os_sockopt_level(I32(4134))\n  fun sol_rfcomm():I32 => @pony_os_sockopt_level(I32(4135))\n  fun sol_rose():I32 => @pony_os_sockopt_level(I32(4136))\n  fun sol_sco():I32 => @pony_os_sockopt_level(I32(4137))\n  fun sol_socket():I32 => @pony_os_sockopt_level(I32(4138))\n  fun sol_tipc():I32 => @pony_os_sockopt_level(I32(4139))\n  fun sol_udp():I32 => @pony_os_sockopt_level(I32(4140))\n\n  /*\n   *\n   * Options formatted in Pony by:\n   *   egrep -v '^(IP[A-Z0-6]*PROTO_|NSPROTO_|SOL_)' ~/sum-of-all-constants.txt | egrep -v '\\(' | sort -u | egrep -v '^$' | sed 's/__/_/g' | awk 'BEGIN { count=0; } { printf(\"  fun %s():I32 => @pony_os_sockopt_option(I32(%d))\\n\", tolower($1), count++); }'\n   */\n\n  // options\n  fun af_coip():I32 => @pony_os_sockopt_option(I32(0))\n  fun af_inet():I32 => @pony_os_sockopt_option(I32(1))\n  fun af_inet6():I32 => @pony_os_sockopt_option(I32(2))\n  fun bluetooth_proto_sco():I32 => @pony_os_sockopt_option(I32(3))\n  fun dccp_nr_pkt_types():I32 => @pony_os_sockopt_option(I32(4))\n  fun dccp_service_list_max_len():I32 => @pony_os_sockopt_option(I32(5))\n  fun dccp_single_opt_maxlen():I32 => @pony_os_sockopt_option(I32(6))\n  fun dccp_sockopt_available_ccids():I32 => @pony_os_sockopt_option(I32(7))\n  fun dccp_sockopt_ccid():I32 => @pony_os_sockopt_option(I32(8))\n  fun dccp_sockopt_ccid_rx_info():I32 => @pony_os_sockopt_option(I32(9))\n  fun dccp_sockopt_ccid_tx_info():I32 => @pony_os_sockopt_option(I32(10))\n  fun dccp_sockopt_change_l():I32 => @pony_os_sockopt_option(I32(11))\n  fun dccp_sockopt_change_r():I32 => @pony_os_sockopt_option(I32(12))\n  fun dccp_sockopt_get_cur_mps():I32 => @pony_os_sockopt_option(I32(13))\n  fun dccp_sockopt_packet_size():I32 => @pony_os_sockopt_option(I32(14))\n  fun dccp_sockopt_qpolicy_id():I32 => @pony_os_sockopt_option(I32(15))\n  fun dccp_sockopt_qpolicy_txqlen():I32 => @pony_os_sockopt_option(I32(16))\n  fun dccp_sockopt_recv_cscov():I32 => @pony_os_sockopt_option(I32(17))\n  fun dccp_sockopt_rx_ccid():I32 => @pony_os_sockopt_option(I32(18))\n  fun dccp_sockopt_send_cscov():I32 => @pony_os_sockopt_option(I32(19))\n  fun dccp_sockopt_server_timewait():I32 => @pony_os_sockopt_option(I32(20))\n  fun dccp_sockopt_service():I32 => @pony_os_sockopt_option(I32(21))\n  fun dccp_sockopt_tx_ccid():I32 => @pony_os_sockopt_option(I32(22))\n  fun dso_acceptmode():I32 => @pony_os_sockopt_option(I32(23))\n  fun dso_conaccept():I32 => @pony_os_sockopt_option(I32(24))\n  fun dso_conaccess():I32 => @pony_os_sockopt_option(I32(25))\n  fun dso_condata():I32 => @pony_os_sockopt_option(I32(26))\n  fun dso_conreject():I32 => @pony_os_sockopt_option(I32(27))\n  fun dso_cork():I32 => @pony_os_sockopt_option(I32(28))\n  fun dso_disdata():I32 => @pony_os_sockopt_option(I32(29))\n  fun dso_info():I32 => @pony_os_sockopt_option(I32(30))\n  fun dso_linkinfo():I32 => @pony_os_sockopt_option(I32(31))\n  fun dso_max():I32 => @pony_os_sockopt_option(I32(32))\n  fun dso_maxwindow():I32 => @pony_os_sockopt_option(I32(33))\n  fun dso_nodelay():I32 => @pony_os_sockopt_option(I32(34))\n  fun dso_seqpacket():I32 => @pony_os_sockopt_option(I32(35))\n  fun dso_services():I32 => @pony_os_sockopt_option(I32(36))\n  fun dso_stream():I32 => @pony_os_sockopt_option(I32(37))\n  fun icmp_address():I32 => @pony_os_sockopt_option(I32(38))\n  fun icmp_addressreply():I32 => @pony_os_sockopt_option(I32(39))\n  fun icmp_dest_unreach():I32 => @pony_os_sockopt_option(I32(40))\n  fun icmp_echo():I32 => @pony_os_sockopt_option(I32(41))\n  fun icmp_echoreply():I32 => @pony_os_sockopt_option(I32(42))\n  fun icmp_exc_fragtime():I32 => @pony_os_sockopt_option(I32(43))\n  fun icmp_exc_ttl():I32 => @pony_os_sockopt_option(I32(44))\n  fun icmp_filter():I32 => @pony_os_sockopt_option(I32(45))\n  fun icmp_frag_needed():I32 => @pony_os_sockopt_option(I32(46))\n  fun icmp_host_ano():I32 => @pony_os_sockopt_option(I32(47))\n  fun icmp_host_isolated():I32 => @pony_os_sockopt_option(I32(48))\n  fun icmp_host_unknown():I32 => @pony_os_sockopt_option(I32(49))\n  fun icmp_host_unreach():I32 => @pony_os_sockopt_option(I32(50))\n  fun icmp_host_unr_tos():I32 => @pony_os_sockopt_option(I32(51))\n  fun icmp_info_reply():I32 => @pony_os_sockopt_option(I32(52))\n  fun icmp_info_request():I32 => @pony_os_sockopt_option(I32(53))\n  fun icmp_net_ano():I32 => @pony_os_sockopt_option(I32(54))\n  fun icmp_net_unknown():I32 => @pony_os_sockopt_option(I32(55))\n  fun icmp_net_unreach():I32 => @pony_os_sockopt_option(I32(56))\n  fun icmp_net_unr_tos():I32 => @pony_os_sockopt_option(I32(57))\n  fun icmp_parameterprob():I32 => @pony_os_sockopt_option(I32(58))\n  fun icmp_pkt_filtered():I32 => @pony_os_sockopt_option(I32(59))\n  fun icmp_port_unreach():I32 => @pony_os_sockopt_option(I32(60))\n  fun icmp_prec_cutoff():I32 => @pony_os_sockopt_option(I32(61))\n  fun icmp_prec_violation():I32 => @pony_os_sockopt_option(I32(62))\n  fun icmp_prot_unreach():I32 => @pony_os_sockopt_option(I32(63))\n  fun icmp_redirect():I32 => @pony_os_sockopt_option(I32(64))\n  fun icmp_redir_host():I32 => @pony_os_sockopt_option(I32(65))\n  fun icmp_redir_hosttos():I32 => @pony_os_sockopt_option(I32(66))\n  fun icmp_redir_net():I32 => @pony_os_sockopt_option(I32(67))\n  fun icmp_redir_nettos():I32 => @pony_os_sockopt_option(I32(68))\n  fun icmp_source_quench():I32 => @pony_os_sockopt_option(I32(69))\n  fun icmp_sr_failed():I32 => @pony_os_sockopt_option(I32(70))\n  fun icmp_timestamp():I32 => @pony_os_sockopt_option(I32(71))\n  fun icmp_timestampreply():I32 => @pony_os_sockopt_option(I32(72))\n  fun icmp_time_exceeded():I32 => @pony_os_sockopt_option(I32(73))\n  fun ipctl_acceptsourceroute():I32 => @pony_os_sockopt_option(I32(74))\n  fun ipctl_defmtu():I32 => @pony_os_sockopt_option(I32(75))\n  fun ipctl_defttl():I32 => @pony_os_sockopt_option(I32(76))\n  fun ipctl_directedbroadcast():I32 => @pony_os_sockopt_option(I32(77))\n  fun ipctl_fastforwarding():I32 => @pony_os_sockopt_option(I32(78))\n  fun ipctl_forwarding():I32 => @pony_os_sockopt_option(I32(79))\n  fun ipctl_gif_ttl():I32 => @pony_os_sockopt_option(I32(80))\n  fun ipctl_intrdqdrops():I32 => @pony_os_sockopt_option(I32(81))\n  fun ipctl_intrdqmaxlen():I32 => @pony_os_sockopt_option(I32(82))\n  fun ipctl_intrqdrops():I32 => @pony_os_sockopt_option(I32(83))\n  fun ipctl_intrqmaxlen():I32 => @pony_os_sockopt_option(I32(84))\n  fun ipctl_keepfaith():I32 => @pony_os_sockopt_option(I32(85))\n  fun ipctl_maxid():I32 => @pony_os_sockopt_option(I32(86))\n  fun ipctl_rtexpire():I32 => @pony_os_sockopt_option(I32(87))\n  fun ipctl_rtmaxcache():I32 => @pony_os_sockopt_option(I32(88))\n  fun ipctl_rtminexpire():I32 => @pony_os_sockopt_option(I32(89))\n  fun ipctl_sendredirects():I32 => @pony_os_sockopt_option(I32(90))\n  fun ipctl_sourceroute():I32 => @pony_os_sockopt_option(I32(91))\n  fun ipctl_stats():I32 => @pony_os_sockopt_option(I32(92))\n  fun ipport_ephemeralfirst():I32 => @pony_os_sockopt_option(I32(93))\n  fun ipport_ephemerallast():I32 => @pony_os_sockopt_option(I32(94))\n  fun ipport_hifirstauto():I32 => @pony_os_sockopt_option(I32(95))\n  fun ipport_hilastauto():I32 => @pony_os_sockopt_option(I32(96))\n  fun ipport_max():I32 => @pony_os_sockopt_option(I32(97))\n  fun ipport_reserved():I32 => @pony_os_sockopt_option(I32(98))\n  fun ipport_reservedstart():I32 => @pony_os_sockopt_option(I32(99))\n  fun ipport_userreserved():I32 => @pony_os_sockopt_option(I32(100))\n  fun ipv6_2292dstopts():I32 => @pony_os_sockopt_option(I32(101))\n  fun ipv6_2292hoplimit():I32 => @pony_os_sockopt_option(I32(102))\n  fun ipv6_2292hopopts():I32 => @pony_os_sockopt_option(I32(103))\n  fun ipv6_2292pktinfo():I32 => @pony_os_sockopt_option(I32(104))\n  fun ipv6_2292pktoptions():I32 => @pony_os_sockopt_option(I32(105))\n  fun ipv6_2292rthdr():I32 => @pony_os_sockopt_option(I32(106))\n  fun ipv6_addrform():I32 => @pony_os_sockopt_option(I32(107))\n  fun ipv6_addr_preferences():I32 => @pony_os_sockopt_option(I32(108))\n  fun ipv6_add_membership():I32 => @pony_os_sockopt_option(I32(109))\n  fun ipv6_authhdr():I32 => @pony_os_sockopt_option(I32(110))\n  fun ipv6_autoflowlabel():I32 => @pony_os_sockopt_option(I32(111))\n  fun ipv6_checksum():I32 => @pony_os_sockopt_option(I32(112))\n  fun ipv6_dontfrag():I32 => @pony_os_sockopt_option(I32(113))\n  fun ipv6_drop_membership():I32 => @pony_os_sockopt_option(I32(114))\n  fun ipv6_dstopts():I32 => @pony_os_sockopt_option(I32(115))\n  fun ipv6_flowinfo():I32 => @pony_os_sockopt_option(I32(116))\n  fun ipv6_flowinfo_flowlabel():I32 => @pony_os_sockopt_option(I32(117))\n  fun ipv6_flowinfo_priority():I32 => @pony_os_sockopt_option(I32(118))\n  fun ipv6_flowinfo_send():I32 => @pony_os_sockopt_option(I32(119))\n  fun ipv6_flowlabel_mgr():I32 => @pony_os_sockopt_option(I32(120))\n  fun ipv6_fl_a_get():I32 => @pony_os_sockopt_option(I32(121))\n  fun ipv6_fl_a_put():I32 => @pony_os_sockopt_option(I32(122))\n  fun ipv6_fl_a_renew():I32 => @pony_os_sockopt_option(I32(123))\n  fun ipv6_fl_f_create():I32 => @pony_os_sockopt_option(I32(124))\n  fun ipv6_fl_f_excl():I32 => @pony_os_sockopt_option(I32(125))\n  fun ipv6_fl_f_reflect():I32 => @pony_os_sockopt_option(I32(126))\n  fun ipv6_fl_f_remote():I32 => @pony_os_sockopt_option(I32(127))\n  fun ipv6_fl_s_any():I32 => @pony_os_sockopt_option(I32(128))\n  fun ipv6_fl_s_excl():I32 => @pony_os_sockopt_option(I32(129))\n  fun ipv6_fl_s_none():I32 => @pony_os_sockopt_option(I32(130))\n  fun ipv6_fl_s_process():I32 => @pony_os_sockopt_option(I32(131))\n  fun ipv6_fl_s_user():I32 => @pony_os_sockopt_option(I32(132))\n  fun ipv6_hoplimit():I32 => @pony_os_sockopt_option(I32(133))\n  fun ipv6_hopopts():I32 => @pony_os_sockopt_option(I32(134))\n  fun ipv6_ipsec_policy():I32 => @pony_os_sockopt_option(I32(135))\n  fun ipv6_join_anycast():I32 => @pony_os_sockopt_option(I32(136))\n  fun ipv6_leave_anycast():I32 => @pony_os_sockopt_option(I32(137))\n  fun ipv6_minhopcount():I32 => @pony_os_sockopt_option(I32(138))\n  fun ipv6_mtu():I32 => @pony_os_sockopt_option(I32(139))\n  fun ipv6_mtu_discover():I32 => @pony_os_sockopt_option(I32(140))\n  fun ipv6_multicast_hops():I32 => @pony_os_sockopt_option(I32(141))\n  fun ipv6_multicast_if():I32 => @pony_os_sockopt_option(I32(142))\n  fun ipv6_multicast_loop():I32 => @pony_os_sockopt_option(I32(143))\n  fun ipv6_nexthop():I32 => @pony_os_sockopt_option(I32(144))\n  fun ipv6_origdstaddr():I32 => @pony_os_sockopt_option(I32(145))\n  fun ipv6_pathmtu():I32 => @pony_os_sockopt_option(I32(146))\n  fun ipv6_pktinfo():I32 => @pony_os_sockopt_option(I32(147))\n  fun ipv6_pmtudisc_do():I32 => @pony_os_sockopt_option(I32(148))\n  fun ipv6_pmtudisc_dont():I32 => @pony_os_sockopt_option(I32(149))\n  fun ipv6_pmtudisc_interface():I32 => @pony_os_sockopt_option(I32(150))\n  fun ipv6_pmtudisc_omit():I32 => @pony_os_sockopt_option(I32(151))\n  fun ipv6_pmtudisc_probe():I32 => @pony_os_sockopt_option(I32(152))\n  fun ipv6_pmtudisc_want():I32 => @pony_os_sockopt_option(I32(153))\n  fun ipv6_prefer_src_cga():I32 => @pony_os_sockopt_option(I32(154))\n  fun ipv6_prefer_src_coa():I32 => @pony_os_sockopt_option(I32(155))\n  fun ipv6_prefer_src_home():I32 => @pony_os_sockopt_option(I32(156))\n  fun ipv6_prefer_src_noncga():I32 => @pony_os_sockopt_option(I32(157))\n  fun ipv6_prefer_src_public():I32 => @pony_os_sockopt_option(I32(158))\n  fun ipv6_prefer_src_pubtmp_default():I32 => @pony_os_sockopt_option(I32(159))\n  fun ipv6_prefer_src_tmp():I32 => @pony_os_sockopt_option(I32(160))\n  fun ipv6_priority_10():I32 => @pony_os_sockopt_option(I32(161))\n  fun ipv6_priority_11():I32 => @pony_os_sockopt_option(I32(162))\n  fun ipv6_priority_12():I32 => @pony_os_sockopt_option(I32(163))\n  fun ipv6_priority_13():I32 => @pony_os_sockopt_option(I32(164))\n  fun ipv6_priority_14():I32 => @pony_os_sockopt_option(I32(165))\n  fun ipv6_priority_15():I32 => @pony_os_sockopt_option(I32(166))\n  fun ipv6_priority_8():I32 => @pony_os_sockopt_option(I32(167))\n  fun ipv6_priority_9():I32 => @pony_os_sockopt_option(I32(168))\n  fun ipv6_priority_bulk():I32 => @pony_os_sockopt_option(I32(169))\n  fun ipv6_priority_control():I32 => @pony_os_sockopt_option(I32(170))\n  fun ipv6_priority_filler():I32 => @pony_os_sockopt_option(I32(171))\n  fun ipv6_priority_interactive():I32 => @pony_os_sockopt_option(I32(172))\n  fun ipv6_priority_reserved1():I32 => @pony_os_sockopt_option(I32(173))\n  fun ipv6_priority_reserved2():I32 => @pony_os_sockopt_option(I32(174))\n  fun ipv6_priority_unattended():I32 => @pony_os_sockopt_option(I32(175))\n  fun ipv6_priority_uncharacterized():I32 => @pony_os_sockopt_option(I32(176))\n  fun ipv6_recvdstopts():I32 => @pony_os_sockopt_option(I32(177))\n  fun ipv6_recverr():I32 => @pony_os_sockopt_option(I32(178))\n  fun ipv6_recvhoplimit():I32 => @pony_os_sockopt_option(I32(179))\n  fun ipv6_recvhopopts():I32 => @pony_os_sockopt_option(I32(180))\n  fun ipv6_recvorigdstaddr():I32 => @pony_os_sockopt_option(I32(181))\n  fun ipv6_recvpathmtu():I32 => @pony_os_sockopt_option(I32(182))\n  fun ipv6_recvpktinfo():I32 => @pony_os_sockopt_option(I32(183))\n  fun ipv6_recvrthdr():I32 => @pony_os_sockopt_option(I32(184))\n  fun ipv6_recvtclass():I32 => @pony_os_sockopt_option(I32(185))\n  fun ipv6_router_alert():I32 => @pony_os_sockopt_option(I32(186))\n  fun ipv6_rthdr():I32 => @pony_os_sockopt_option(I32(187))\n  fun ipv6_rthdrdstopts():I32 => @pony_os_sockopt_option(I32(188))\n  fun ipv6_tclass():I32 => @pony_os_sockopt_option(I32(189))\n  fun ipv6_tlv_hao():I32 => @pony_os_sockopt_option(I32(190))\n  fun ipv6_tlv_jumbo():I32 => @pony_os_sockopt_option(I32(191))\n  fun ipv6_tlv_pad1():I32 => @pony_os_sockopt_option(I32(192))\n  fun ipv6_tlv_padn():I32 => @pony_os_sockopt_option(I32(193))\n  fun ipv6_tlv_routeralert():I32 => @pony_os_sockopt_option(I32(194))\n  fun ipv6_transparent():I32 => @pony_os_sockopt_option(I32(195))\n  fun ipv6_unicast_hops():I32 => @pony_os_sockopt_option(I32(196))\n  fun ipv6_unicast_if():I32 => @pony_os_sockopt_option(I32(197))\n  fun ipv6_use_min_mtu():I32 => @pony_os_sockopt_option(I32(198))\n  fun ipv6_v6only():I32 => @pony_os_sockopt_option(I32(199))\n  fun ipv6_xfrm_policy():I32 => @pony_os_sockopt_option(I32(200))\n  fun ipx_address():I32 => @pony_os_sockopt_option(I32(201))\n  fun ipx_address_notify():I32 => @pony_os_sockopt_option(I32(202))\n  fun ipx_crtitf():I32 => @pony_os_sockopt_option(I32(203))\n  fun ipx_dltitf():I32 => @pony_os_sockopt_option(I32(204))\n  fun ipx_dstype():I32 => @pony_os_sockopt_option(I32(205))\n  fun ipx_extended_address():I32 => @pony_os_sockopt_option(I32(206))\n  fun ipx_filterptype():I32 => @pony_os_sockopt_option(I32(207))\n  fun ipx_frame_8022():I32 => @pony_os_sockopt_option(I32(208))\n  fun ipx_frame_8023():I32 => @pony_os_sockopt_option(I32(209))\n  fun ipx_frame_etherii():I32 => @pony_os_sockopt_option(I32(210))\n  fun ipx_frame_none():I32 => @pony_os_sockopt_option(I32(211))\n  fun ipx_frame_snap():I32 => @pony_os_sockopt_option(I32(212))\n  fun ipx_frame_tr_8022():I32 => @pony_os_sockopt_option(I32(213))\n  fun ipx_getnetinfo():I32 => @pony_os_sockopt_option(I32(214))\n  fun ipx_getnetinfo_norip():I32 => @pony_os_sockopt_option(I32(215))\n  fun ipx_immediatespxack():I32 => @pony_os_sockopt_option(I32(216))\n  fun ipx_internal():I32 => @pony_os_sockopt_option(I32(217))\n  fun ipx_maxsize():I32 => @pony_os_sockopt_option(I32(218))\n  fun ipx_max_adapter_num():I32 => @pony_os_sockopt_option(I32(219))\n  fun ipx_mtu():I32 => @pony_os_sockopt_option(I32(220))\n  fun ipx_node_len():I32 => @pony_os_sockopt_option(I32(221))\n  fun ipx_primary():I32 => @pony_os_sockopt_option(I32(222))\n  fun ipx_ptype():I32 => @pony_os_sockopt_option(I32(223))\n  fun ipx_receive_broadcast():I32 => @pony_os_sockopt_option(I32(224))\n  fun ipx_recvhdr():I32 => @pony_os_sockopt_option(I32(225))\n  fun ipx_reripnetnumber():I32 => @pony_os_sockopt_option(I32(226))\n  fun ipx_route_no_router():I32 => @pony_os_sockopt_option(I32(227))\n  fun ipx_rt_8022():I32 => @pony_os_sockopt_option(I32(228))\n  fun ipx_rt_bluebook():I32 => @pony_os_sockopt_option(I32(229))\n  fun ipx_rt_routed():I32 => @pony_os_sockopt_option(I32(230))\n  fun ipx_rt_snap():I32 => @pony_os_sockopt_option(I32(231))\n  fun ipx_special_none():I32 => @pony_os_sockopt_option(I32(232))\n  fun ipx_spxgetconnectionstatus():I32 => @pony_os_sockopt_option(I32(233))\n  fun ipx_stopfilterptype():I32 => @pony_os_sockopt_option(I32(234))\n  fun ipx_type():I32 => @pony_os_sockopt_option(I32(235))\n  fun ip_add_membership():I32 => @pony_os_sockopt_option(I32(236))\n  fun ip_add_source_membership():I32 => @pony_os_sockopt_option(I32(237))\n  fun ip_bindany():I32 => @pony_os_sockopt_option(I32(238))\n  fun ip_bindmulti():I32 => @pony_os_sockopt_option(I32(239))\n  fun ip_bind_address_no_port():I32 => @pony_os_sockopt_option(I32(240))\n  fun ip_block_source():I32 => @pony_os_sockopt_option(I32(241))\n  fun ip_bound_if():I32 => @pony_os_sockopt_option(I32(242))\n  fun ip_checksum():I32 => @pony_os_sockopt_option(I32(243))\n  fun ip_default_multicast_loop():I32 => @pony_os_sockopt_option(I32(244))\n  fun ip_default_multicast_ttl():I32 => @pony_os_sockopt_option(I32(245))\n  fun ip_dontfrag():I32 => @pony_os_sockopt_option(I32(246))\n  fun ip_drop_membership():I32 => @pony_os_sockopt_option(I32(247))\n  fun ip_drop_source_membership():I32 => @pony_os_sockopt_option(I32(248))\n  fun ip_dummynet3():I32 => @pony_os_sockopt_option(I32(249))\n  fun ip_dummynet_configure():I32 => @pony_os_sockopt_option(I32(250))\n  fun ip_dummynet_del():I32 => @pony_os_sockopt_option(I32(251))\n  fun ip_dummynet_flush():I32 => @pony_os_sockopt_option(I32(252))\n  fun ip_dummynet_get():I32 => @pony_os_sockopt_option(I32(253))\n  fun ip_faith():I32 => @pony_os_sockopt_option(I32(254))\n  fun ip_flowid():I32 => @pony_os_sockopt_option(I32(255))\n  fun ip_flowtype():I32 => @pony_os_sockopt_option(I32(256))\n  fun ip_freebind():I32 => @pony_os_sockopt_option(I32(257))\n  fun ip_fw3():I32 => @pony_os_sockopt_option(I32(258))\n  fun ip_fw_add():I32 => @pony_os_sockopt_option(I32(259))\n  fun ip_fw_del():I32 => @pony_os_sockopt_option(I32(260))\n  fun ip_fw_flush():I32 => @pony_os_sockopt_option(I32(261))\n  fun ip_fw_get():I32 => @pony_os_sockopt_option(I32(262))\n  fun ip_fw_nat_cfg():I32 => @pony_os_sockopt_option(I32(263))\n  fun ip_fw_nat_del():I32 => @pony_os_sockopt_option(I32(264))\n  fun ip_fw_nat_get_config():I32 => @pony_os_sockopt_option(I32(265))\n  fun ip_fw_nat_get_log():I32 => @pony_os_sockopt_option(I32(266))\n  fun ip_fw_resetlog():I32 => @pony_os_sockopt_option(I32(267))\n  fun ip_fw_table_add():I32 => @pony_os_sockopt_option(I32(268))\n  fun ip_fw_table_del():I32 => @pony_os_sockopt_option(I32(269))\n  fun ip_fw_table_flush():I32 => @pony_os_sockopt_option(I32(270))\n  fun ip_fw_table_getsize():I32 => @pony_os_sockopt_option(I32(271))\n  fun ip_fw_table_list():I32 => @pony_os_sockopt_option(I32(272))\n  fun ip_fw_zero():I32 => @pony_os_sockopt_option(I32(273))\n  fun ip_hdrincl():I32 => @pony_os_sockopt_option(I32(274))\n  fun ip_ipsec_policy():I32 => @pony_os_sockopt_option(I32(275))\n  fun ip_max_group_src_filter():I32 => @pony_os_sockopt_option(I32(276))\n  fun ip_max_memberships():I32 => @pony_os_sockopt_option(I32(277))\n  fun ip_max_sock_mute_filter():I32 => @pony_os_sockopt_option(I32(278))\n  fun ip_max_sock_src_filter():I32 => @pony_os_sockopt_option(I32(279))\n  fun ip_max_source_filter():I32 => @pony_os_sockopt_option(I32(280))\n  fun ip_minttl():I32 => @pony_os_sockopt_option(I32(281))\n  fun ip_min_memberships():I32 => @pony_os_sockopt_option(I32(282))\n  fun ip_msfilter():I32 => @pony_os_sockopt_option(I32(283))\n  fun ip_mtu():I32 => @pony_os_sockopt_option(I32(284))\n  fun ip_mtu_discover():I32 => @pony_os_sockopt_option(I32(285))\n  fun ip_multicast_all():I32 => @pony_os_sockopt_option(I32(286))\n  fun ip_multicast_if():I32 => @pony_os_sockopt_option(I32(287))\n  fun ip_multicast_ifindex():I32 => @pony_os_sockopt_option(I32(288))\n  fun ip_multicast_loop():I32 => @pony_os_sockopt_option(I32(289))\n  fun ip_multicast_ttl():I32 => @pony_os_sockopt_option(I32(290))\n  fun ip_multicast_vif():I32 => @pony_os_sockopt_option(I32(291))\n  fun ip_nat_xxx():I32 => @pony_os_sockopt_option(I32(292))\n  fun ip_nodefrag():I32 => @pony_os_sockopt_option(I32(293))\n  fun ip_old_fw_add():I32 => @pony_os_sockopt_option(I32(294))\n  fun ip_old_fw_del():I32 => @pony_os_sockopt_option(I32(295))\n  fun ip_old_fw_flush():I32 => @pony_os_sockopt_option(I32(296))\n  fun ip_old_fw_get():I32 => @pony_os_sockopt_option(I32(297))\n  fun ip_old_fw_resetlog():I32 => @pony_os_sockopt_option(I32(298))\n  fun ip_old_fw_zero():I32 => @pony_os_sockopt_option(I32(299))\n  fun ip_onesbcast():I32 => @pony_os_sockopt_option(I32(300))\n  fun ip_options():I32 => @pony_os_sockopt_option(I32(301))\n  fun ip_origdstaddr():I32 => @pony_os_sockopt_option(I32(302))\n  fun ip_passsec():I32 => @pony_os_sockopt_option(I32(303))\n  fun ip_pktinfo():I32 => @pony_os_sockopt_option(I32(304))\n  fun ip_pktoptions():I32 => @pony_os_sockopt_option(I32(305))\n  fun ip_pmtudisc_do():I32 => @pony_os_sockopt_option(I32(306))\n  fun ip_pmtudisc_dont():I32 => @pony_os_sockopt_option(I32(307))\n  fun ip_pmtudisc_interface():I32 => @pony_os_sockopt_option(I32(308))\n  fun ip_pmtudisc_omit():I32 => @pony_os_sockopt_option(I32(309))\n  fun ip_pmtudisc_probe():I32 => @pony_os_sockopt_option(I32(310))\n  fun ip_pmtudisc_want():I32 => @pony_os_sockopt_option(I32(311))\n  fun ip_portrange():I32 => @pony_os_sockopt_option(I32(312))\n  fun ip_portrange_default():I32 => @pony_os_sockopt_option(I32(313))\n  fun ip_portrange_high():I32 => @pony_os_sockopt_option(I32(314))\n  fun ip_portrange_low():I32 => @pony_os_sockopt_option(I32(315))\n  fun ip_recvdstaddr():I32 => @pony_os_sockopt_option(I32(316))\n  fun ip_recverr():I32 => @pony_os_sockopt_option(I32(317))\n  fun ip_recvflowid():I32 => @pony_os_sockopt_option(I32(318))\n  fun ip_recvif():I32 => @pony_os_sockopt_option(I32(319))\n  fun ip_recvopts():I32 => @pony_os_sockopt_option(I32(320))\n  fun ip_recvorigdstaddr():I32 => @pony_os_sockopt_option(I32(321))\n  fun ip_recvpktinfo():I32 => @pony_os_sockopt_option(I32(322))\n  fun ip_recvretopts():I32 => @pony_os_sockopt_option(I32(323))\n  fun ip_recvrssbucketid():I32 => @pony_os_sockopt_option(I32(324))\n  fun ip_recvtos():I32 => @pony_os_sockopt_option(I32(325))\n  fun ip_recvttl():I32 => @pony_os_sockopt_option(I32(326))\n  fun ip_retopts():I32 => @pony_os_sockopt_option(I32(327))\n  fun ip_router_alert():I32 => @pony_os_sockopt_option(I32(328))\n  fun ip_rssbucketid():I32 => @pony_os_sockopt_option(I32(329))\n  fun ip_rss_listen_bucket():I32 => @pony_os_sockopt_option(I32(330))\n  fun ip_rsvp_off():I32 => @pony_os_sockopt_option(I32(331))\n  fun ip_rsvp_on():I32 => @pony_os_sockopt_option(I32(332))\n  fun ip_rsvp_vif_off():I32 => @pony_os_sockopt_option(I32(333))\n  fun ip_rsvp_vif_on():I32 => @pony_os_sockopt_option(I32(334))\n  fun ip_sendsrcaddr():I32 => @pony_os_sockopt_option(I32(335))\n  fun ip_striphdr():I32 => @pony_os_sockopt_option(I32(336))\n  fun ip_tos():I32 => @pony_os_sockopt_option(I32(337))\n  fun ip_traffic_mgt_background():I32 => @pony_os_sockopt_option(I32(338))\n  fun ip_transparent():I32 => @pony_os_sockopt_option(I32(339))\n  fun ip_ttl():I32 => @pony_os_sockopt_option(I32(340))\n  fun ip_unblock_source():I32 => @pony_os_sockopt_option(I32(341))\n  fun ip_unicast_if():I32 => @pony_os_sockopt_option(I32(342))\n  fun ip_xfrm_policy():I32 => @pony_os_sockopt_option(I32(343))\n  fun local_connwait():I32 => @pony_os_sockopt_option(I32(344))\n  fun local_creds():I32 => @pony_os_sockopt_option(I32(345))\n  fun local_peercred():I32 => @pony_os_sockopt_option(I32(346))\n  fun local_peerepid():I32 => @pony_os_sockopt_option(I32(347))\n  fun local_peereuuid():I32 => @pony_os_sockopt_option(I32(348))\n  fun local_peerpid():I32 => @pony_os_sockopt_option(I32(349))\n  fun local_peeruuid():I32 => @pony_os_sockopt_option(I32(350))\n  fun local_vendor():I32 => @pony_os_sockopt_option(I32(351))\n  fun max_tcpoptlen():I32 => @pony_os_sockopt_option(I32(352))\n  fun mcast_block_source():I32 => @pony_os_sockopt_option(I32(353))\n  fun mcast_exclude():I32 => @pony_os_sockopt_option(I32(354))\n  fun mcast_include():I32 => @pony_os_sockopt_option(I32(355))\n  fun mcast_join_group():I32 => @pony_os_sockopt_option(I32(356))\n  fun mcast_join_source_group():I32 => @pony_os_sockopt_option(I32(357))\n  fun mcast_leave_group():I32 => @pony_os_sockopt_option(I32(358))\n  fun mcast_leave_source_group():I32 => @pony_os_sockopt_option(I32(359))\n  fun mcast_msfilter():I32 => @pony_os_sockopt_option(I32(360))\n  fun mcast_unblock_source():I32 => @pony_os_sockopt_option(I32(361))\n  fun mcast_undefined():I32 => @pony_os_sockopt_option(I32(362))\n  fun mrt_add_bw_upcall():I32 => @pony_os_sockopt_option(I32(363))\n  fun mrt_add_mfc():I32 => @pony_os_sockopt_option(I32(364))\n  fun mrt_add_vif():I32 => @pony_os_sockopt_option(I32(365))\n  fun mrt_api_config():I32 => @pony_os_sockopt_option(I32(366))\n  fun mrt_api_flags_all():I32 => @pony_os_sockopt_option(I32(367))\n  fun mrt_api_support():I32 => @pony_os_sockopt_option(I32(368))\n  fun mrt_assert():I32 => @pony_os_sockopt_option(I32(369))\n  fun mrt_del_bw_upcall():I32 => @pony_os_sockopt_option(I32(370))\n  fun mrt_del_mfc():I32 => @pony_os_sockopt_option(I32(371))\n  fun mrt_del_vif():I32 => @pony_os_sockopt_option(I32(372))\n  fun mrt_done():I32 => @pony_os_sockopt_option(I32(373))\n  fun mrt_init():I32 => @pony_os_sockopt_option(I32(374))\n  fun mrt_mfc_bw_upcall():I32 => @pony_os_sockopt_option(I32(375))\n  fun mrt_mfc_flags_all():I32 => @pony_os_sockopt_option(I32(376))\n  fun mrt_mfc_flags_border_vif():I32 => @pony_os_sockopt_option(I32(377))\n  fun mrt_mfc_flags_disable_wrongvif():I32 => @pony_os_sockopt_option(I32(378))\n  fun mrt_mfc_rp():I32 => @pony_os_sockopt_option(I32(379))\n  fun mrt_pim():I32 => @pony_os_sockopt_option(I32(380))\n  fun mrt_version():I32 => @pony_os_sockopt_option(I32(381))\n  fun msg_notification():I32 => @pony_os_sockopt_option(I32(382))\n  fun msg_socallbck():I32 => @pony_os_sockopt_option(I32(383))\n  fun ndrvproto_ndrv():I32 => @pony_os_sockopt_option(I32(384))\n  fun ndrv_addmulticast():I32 => @pony_os_sockopt_option(I32(385))\n  fun ndrv_deldmxspec():I32 => @pony_os_sockopt_option(I32(386))\n  fun ndrv_delmulticast():I32 => @pony_os_sockopt_option(I32(387))\n  fun ndrv_demuxtype_ethertype():I32 => @pony_os_sockopt_option(I32(388))\n  fun ndrv_demuxtype_sap():I32 => @pony_os_sockopt_option(I32(389))\n  fun ndrv_demuxtype_snap():I32 => @pony_os_sockopt_option(I32(390))\n  fun ndrv_dmux_max_descr():I32 => @pony_os_sockopt_option(I32(391))\n  fun ndrv_protocol_desc_vers():I32 => @pony_os_sockopt_option(I32(392))\n  fun ndrv_setdmxspec():I32 => @pony_os_sockopt_option(I32(393))\n  fun netlink_add_membership():I32 => @pony_os_sockopt_option(I32(394))\n  fun netlink_audit():I32 => @pony_os_sockopt_option(I32(395))\n  fun netlink_broadcast_error():I32 => @pony_os_sockopt_option(I32(396))\n  fun netlink_cap_ack():I32 => @pony_os_sockopt_option(I32(397))\n  fun netlink_connector():I32 => @pony_os_sockopt_option(I32(398))\n  fun netlink_crypto():I32 => @pony_os_sockopt_option(I32(399))\n  fun netlink_dnrtmsg():I32 => @pony_os_sockopt_option(I32(400))\n  fun netlink_drop_membership():I32 => @pony_os_sockopt_option(I32(401))\n  fun netlink_ecryptfs():I32 => @pony_os_sockopt_option(I32(402))\n  fun netlink_fib_lookup():I32 => @pony_os_sockopt_option(I32(403))\n  fun netlink_firewall():I32 => @pony_os_sockopt_option(I32(404))\n  fun netlink_generic():I32 => @pony_os_sockopt_option(I32(405))\n  fun netlink_inet_diag():I32 => @pony_os_sockopt_option(I32(406))\n  fun netlink_ip6_fw():I32 => @pony_os_sockopt_option(I32(407))\n  fun netlink_iscsi():I32 => @pony_os_sockopt_option(I32(408))\n  fun netlink_kobject_uevent():I32 => @pony_os_sockopt_option(I32(409))\n  fun netlink_listen_all_nsid():I32 => @pony_os_sockopt_option(I32(410))\n  fun netlink_list_memberships():I32 => @pony_os_sockopt_option(I32(411))\n  fun netlink_netfilter():I32 => @pony_os_sockopt_option(I32(412))\n  fun netlink_nflog():I32 => @pony_os_sockopt_option(I32(413))\n  fun netlink_no_enobufs():I32 => @pony_os_sockopt_option(I32(414))\n  fun netlink_pktinfo():I32 => @pony_os_sockopt_option(I32(415))\n  fun netlink_rdma():I32 => @pony_os_sockopt_option(I32(416))\n  fun netlink_route():I32 => @pony_os_sockopt_option(I32(417))\n  fun netlink_rx_ring():I32 => @pony_os_sockopt_option(I32(418))\n  fun netlink_scsitransport():I32 => @pony_os_sockopt_option(I32(419))\n  fun netlink_selinux():I32 => @pony_os_sockopt_option(I32(420))\n  fun netlink_sock_diag():I32 => @pony_os_sockopt_option(I32(421))\n  fun netlink_tx_ring():I32 => @pony_os_sockopt_option(I32(422))\n  fun netlink_unused():I32 => @pony_os_sockopt_option(I32(423))\n  fun netlink_usersock():I32 => @pony_os_sockopt_option(I32(424))\n  fun netlink_xfrm():I32 => @pony_os_sockopt_option(I32(425))\n  fun netrom_idle():I32 => @pony_os_sockopt_option(I32(426))\n  fun netrom_kill():I32 => @pony_os_sockopt_option(I32(427))\n  fun netrom_n2():I32 => @pony_os_sockopt_option(I32(428))\n  fun netrom_neigh():I32 => @pony_os_sockopt_option(I32(429))\n  fun netrom_node():I32 => @pony_os_sockopt_option(I32(430))\n  fun netrom_paclen():I32 => @pony_os_sockopt_option(I32(431))\n  fun netrom_t1():I32 => @pony_os_sockopt_option(I32(432))\n  fun netrom_t2():I32 => @pony_os_sockopt_option(I32(433))\n  fun netrom_t4():I32 => @pony_os_sockopt_option(I32(434))\n  fun nrdv_multicast_addrs_per_sock():I32 => @pony_os_sockopt_option(I32(435))\n  fun pvd_config():I32 => @pony_os_sockopt_option(I32(436))\n  fun rds_cancel_sent_to():I32 => @pony_os_sockopt_option(I32(437))\n  fun rds_cmsg_atomic_cswp():I32 => @pony_os_sockopt_option(I32(438))\n  fun rds_cmsg_atomic_fadd():I32 => @pony_os_sockopt_option(I32(439))\n  fun rds_cmsg_cong_update():I32 => @pony_os_sockopt_option(I32(440))\n  fun rds_cmsg_masked_atomic_cswp():I32 => @pony_os_sockopt_option(I32(441))\n  fun rds_cmsg_masked_atomic_fadd():I32 => @pony_os_sockopt_option(I32(442))\n  fun rds_cmsg_rdma_args():I32 => @pony_os_sockopt_option(I32(443))\n  fun rds_cmsg_rdma_dest():I32 => @pony_os_sockopt_option(I32(444))\n  fun rds_cmsg_rdma_map():I32 => @pony_os_sockopt_option(I32(445))\n  fun rds_cmsg_rdma_status():I32 => @pony_os_sockopt_option(I32(446))\n  fun rds_cong_monitor():I32 => @pony_os_sockopt_option(I32(447))\n  fun rds_cong_monitor_size():I32 => @pony_os_sockopt_option(I32(448))\n  fun rds_free_mr():I32 => @pony_os_sockopt_option(I32(449))\n  fun rds_get_mr():I32 => @pony_os_sockopt_option(I32(450))\n  fun rds_get_mr_for_dest():I32 => @pony_os_sockopt_option(I32(451))\n  fun rds_ib_abi_version():I32 => @pony_os_sockopt_option(I32(452))\n  fun rds_ib_gid_len():I32 => @pony_os_sockopt_option(I32(453))\n  fun rds_info_connections():I32 => @pony_os_sockopt_option(I32(454))\n  fun rds_info_connection_flag_connected():I32 => @pony_os_sockopt_option(I32(455))\n  fun rds_info_connection_flag_connecting():I32 => @pony_os_sockopt_option(I32(456))\n  fun rds_info_connection_flag_sending():I32 => @pony_os_sockopt_option(I32(457))\n  fun rds_info_connection_stats():I32 => @pony_os_sockopt_option(I32(458))\n  fun rds_info_counters():I32 => @pony_os_sockopt_option(I32(459))\n  fun rds_info_first():I32 => @pony_os_sockopt_option(I32(460))\n  fun rds_info_ib_connections():I32 => @pony_os_sockopt_option(I32(461))\n  fun rds_info_iwarp_connections():I32 => @pony_os_sockopt_option(I32(462))\n  fun rds_info_last():I32 => @pony_os_sockopt_option(I32(463))\n  fun rds_info_message_flag_ack():I32 => @pony_os_sockopt_option(I32(464))\n  fun rds_info_message_flag_fast_ack():I32 => @pony_os_sockopt_option(I32(465))\n  fun rds_info_recv_messages():I32 => @pony_os_sockopt_option(I32(466))\n  fun rds_info_retrans_messages():I32 => @pony_os_sockopt_option(I32(467))\n  fun rds_info_send_messages():I32 => @pony_os_sockopt_option(I32(468))\n  fun rds_info_sockets():I32 => @pony_os_sockopt_option(I32(469))\n  fun rds_info_tcp_sockets():I32 => @pony_os_sockopt_option(I32(470))\n  fun rds_rdma_canceled():I32 => @pony_os_sockopt_option(I32(471))\n  fun rds_rdma_dontwait():I32 => @pony_os_sockopt_option(I32(472))\n  fun rds_rdma_dropped():I32 => @pony_os_sockopt_option(I32(473))\n  fun rds_rdma_fence():I32 => @pony_os_sockopt_option(I32(474))\n  fun rds_rdma_invalidate():I32 => @pony_os_sockopt_option(I32(475))\n  fun rds_rdma_notify_me():I32 => @pony_os_sockopt_option(I32(476))\n  fun rds_rdma_other_error():I32 => @pony_os_sockopt_option(I32(477))\n  fun rds_rdma_readwrite():I32 => @pony_os_sockopt_option(I32(478))\n  fun rds_rdma_remote_error():I32 => @pony_os_sockopt_option(I32(479))\n  fun rds_rdma_silent():I32 => @pony_os_sockopt_option(I32(480))\n  fun rds_rdma_success():I32 => @pony_os_sockopt_option(I32(481))\n  fun rds_rdma_use_once():I32 => @pony_os_sockopt_option(I32(482))\n  fun rds_recverr():I32 => @pony_os_sockopt_option(I32(483))\n  fun rds_trans_count():I32 => @pony_os_sockopt_option(I32(484))\n  fun rds_trans_ib():I32 => @pony_os_sockopt_option(I32(485))\n  fun rds_trans_iwarp():I32 => @pony_os_sockopt_option(I32(486))\n  fun rds_trans_none():I32 => @pony_os_sockopt_option(I32(487))\n  fun rds_trans_tcp():I32 => @pony_os_sockopt_option(I32(488))\n  fun rose_access_barred():I32 => @pony_os_sockopt_option(I32(489))\n  fun rose_defer():I32 => @pony_os_sockopt_option(I32(490))\n  fun rose_dte_originated():I32 => @pony_os_sockopt_option(I32(491))\n  fun rose_holdback():I32 => @pony_os_sockopt_option(I32(492))\n  fun rose_idle():I32 => @pony_os_sockopt_option(I32(493))\n  fun rose_invalid_facility():I32 => @pony_os_sockopt_option(I32(494))\n  fun rose_local_procedure():I32 => @pony_os_sockopt_option(I32(495))\n  fun rose_max_digis():I32 => @pony_os_sockopt_option(I32(496))\n  fun rose_mtu():I32 => @pony_os_sockopt_option(I32(497))\n  fun rose_network_congestion():I32 => @pony_os_sockopt_option(I32(498))\n  fun rose_not_obtainable():I32 => @pony_os_sockopt_option(I32(499))\n  fun rose_number_busy():I32 => @pony_os_sockopt_option(I32(500))\n  fun rose_out_of_order():I32 => @pony_os_sockopt_option(I32(501))\n  fun rose_qbitincl():I32 => @pony_os_sockopt_option(I32(502))\n  fun rose_remote_procedure():I32 => @pony_os_sockopt_option(I32(503))\n  fun rose_ship_absent():I32 => @pony_os_sockopt_option(I32(504))\n  fun rose_t1():I32 => @pony_os_sockopt_option(I32(505))\n  fun rose_t2():I32 => @pony_os_sockopt_option(I32(506))\n  fun rose_t3():I32 => @pony_os_sockopt_option(I32(507))\n  fun scm_hci_raw_direction():I32 => @pony_os_sockopt_option(I32(508))\n  fun scm_timestamp():I32 => @pony_os_sockopt_option(I32(509))\n  fun scm_timestamping():I32 => @pony_os_sockopt_option(I32(510))\n  fun scm_timestampns():I32 => @pony_os_sockopt_option(I32(511))\n  fun scm_wifi_status():I32 => @pony_os_sockopt_option(I32(512))\n  fun sctp_abort_association():I32 => @pony_os_sockopt_option(I32(513))\n  fun sctp_adaptation_layer():I32 => @pony_os_sockopt_option(I32(514))\n  fun sctp_adaption_layer():I32 => @pony_os_sockopt_option(I32(515))\n  fun sctp_add_streams():I32 => @pony_os_sockopt_option(I32(516))\n  fun sctp_add_vrf_id():I32 => @pony_os_sockopt_option(I32(517))\n  fun sctp_asconf():I32 => @pony_os_sockopt_option(I32(518))\n  fun sctp_asconf_ack():I32 => @pony_os_sockopt_option(I32(519))\n  fun sctp_asconf_supported():I32 => @pony_os_sockopt_option(I32(520))\n  fun sctp_associnfo():I32 => @pony_os_sockopt_option(I32(521))\n  fun sctp_authentication():I32 => @pony_os_sockopt_option(I32(522))\n  fun sctp_auth_active_key():I32 => @pony_os_sockopt_option(I32(523))\n  fun sctp_auth_chunk():I32 => @pony_os_sockopt_option(I32(524))\n  fun sctp_auth_deactivate_key():I32 => @pony_os_sockopt_option(I32(525))\n  fun sctp_auth_delete_key():I32 => @pony_os_sockopt_option(I32(526))\n  fun sctp_auth_key():I32 => @pony_os_sockopt_option(I32(527))\n  fun sctp_auth_supported():I32 => @pony_os_sockopt_option(I32(528))\n  fun sctp_autoclose():I32 => @pony_os_sockopt_option(I32(529))\n  fun sctp_auto_asconf():I32 => @pony_os_sockopt_option(I32(530))\n  fun sctp_badcrc():I32 => @pony_os_sockopt_option(I32(531))\n  fun sctp_bindx_add_addr():I32 => @pony_os_sockopt_option(I32(532))\n  fun sctp_bindx_rem_addr():I32 => @pony_os_sockopt_option(I32(533))\n  fun sctp_blk_logging_enable():I32 => @pony_os_sockopt_option(I32(534))\n  fun sctp_bound():I32 => @pony_os_sockopt_option(I32(535))\n  fun sctp_cause_cookie_in_shutdown():I32 => @pony_os_sockopt_option(I32(536))\n  fun sctp_cause_deleting_last_addr():I32 => @pony_os_sockopt_option(I32(537))\n  fun sctp_cause_deleting_src_addr():I32 => @pony_os_sockopt_option(I32(538))\n  fun sctp_cause_illegal_asconf_ack():I32 => @pony_os_sockopt_option(I32(539))\n  fun sctp_cause_invalid_param():I32 => @pony_os_sockopt_option(I32(540))\n  fun sctp_cause_invalid_stream():I32 => @pony_os_sockopt_option(I32(541))\n  fun sctp_cause_missing_param():I32 => @pony_os_sockopt_option(I32(542))\n  fun sctp_cause_nat_colliding_state():I32 => @pony_os_sockopt_option(I32(543))\n  fun sctp_cause_nat_missing_state():I32 => @pony_os_sockopt_option(I32(544))\n  fun sctp_cause_no_error():I32 => @pony_os_sockopt_option(I32(545))\n  fun sctp_cause_no_user_data():I32 => @pony_os_sockopt_option(I32(546))\n  fun sctp_cause_out_of_resc():I32 => @pony_os_sockopt_option(I32(547))\n  fun sctp_cause_protocol_violation():I32 => @pony_os_sockopt_option(I32(548))\n  fun sctp_cause_request_refused():I32 => @pony_os_sockopt_option(I32(549))\n  fun sctp_cause_resource_shortage():I32 => @pony_os_sockopt_option(I32(550))\n  fun sctp_cause_restart_w_newaddr():I32 => @pony_os_sockopt_option(I32(551))\n  fun sctp_cause_stale_cookie():I32 => @pony_os_sockopt_option(I32(552))\n  fun sctp_cause_unrecog_chunk():I32 => @pony_os_sockopt_option(I32(553))\n  fun sctp_cause_unrecog_param():I32 => @pony_os_sockopt_option(I32(554))\n  fun sctp_cause_unresolvable_addr():I32 => @pony_os_sockopt_option(I32(555))\n  fun sctp_cause_unsupported_hmacid():I32 => @pony_os_sockopt_option(I32(556))\n  fun sctp_cause_user_initiated_abt():I32 => @pony_os_sockopt_option(I32(557))\n  fun sctp_cc_hstcp():I32 => @pony_os_sockopt_option(I32(558))\n  fun sctp_cc_htcp():I32 => @pony_os_sockopt_option(I32(559))\n  fun sctp_cc_option():I32 => @pony_os_sockopt_option(I32(560))\n  fun sctp_cc_opt_rtcc_setmode():I32 => @pony_os_sockopt_option(I32(561))\n  fun sctp_cc_opt_steady_step():I32 => @pony_os_sockopt_option(I32(562))\n  fun sctp_cc_opt_use_dccc_ecn():I32 => @pony_os_sockopt_option(I32(563))\n  fun sctp_cc_rfc2581():I32 => @pony_os_sockopt_option(I32(564))\n  fun sctp_cc_rtcc():I32 => @pony_os_sockopt_option(I32(565))\n  fun sctp_closed():I32 => @pony_os_sockopt_option(I32(566))\n  fun sctp_clr_stat_log():I32 => @pony_os_sockopt_option(I32(567))\n  fun sctp_cmt_base():I32 => @pony_os_sockopt_option(I32(568))\n  fun sctp_cmt_max():I32 => @pony_os_sockopt_option(I32(569))\n  fun sctp_cmt_mptcp():I32 => @pony_os_sockopt_option(I32(570))\n  fun sctp_cmt_off():I32 => @pony_os_sockopt_option(I32(571))\n  fun sctp_cmt_on_off():I32 => @pony_os_sockopt_option(I32(572))\n  fun sctp_cmt_rpv1():I32 => @pony_os_sockopt_option(I32(573))\n  fun sctp_cmt_rpv2():I32 => @pony_os_sockopt_option(I32(574))\n  fun sctp_cmt_use_dac():I32 => @pony_os_sockopt_option(I32(575))\n  fun sctp_connect_x():I32 => @pony_os_sockopt_option(I32(576))\n  fun sctp_connect_x_complete():I32 => @pony_os_sockopt_option(I32(577))\n  fun sctp_connect_x_delayed():I32 => @pony_os_sockopt_option(I32(578))\n  fun sctp_context():I32 => @pony_os_sockopt_option(I32(579))\n  fun sctp_cookie_ack():I32 => @pony_os_sockopt_option(I32(580))\n  fun sctp_cookie_echo():I32 => @pony_os_sockopt_option(I32(581))\n  fun sctp_cookie_echoed():I32 => @pony_os_sockopt_option(I32(582))\n  fun sctp_cookie_wait():I32 => @pony_os_sockopt_option(I32(583))\n  fun sctp_cwnd_logging_enable():I32 => @pony_os_sockopt_option(I32(584))\n  fun sctp_cwnd_monitor_enable():I32 => @pony_os_sockopt_option(I32(585))\n  fun sctp_cwr_in_same_window():I32 => @pony_os_sockopt_option(I32(586))\n  fun sctp_cwr_reduce_override():I32 => @pony_os_sockopt_option(I32(587))\n  fun sctp_data():I32 => @pony_os_sockopt_option(I32(588))\n  fun sctp_data_first_frag():I32 => @pony_os_sockopt_option(I32(589))\n  fun sctp_data_frag_mask():I32 => @pony_os_sockopt_option(I32(590))\n  fun sctp_data_last_frag():I32 => @pony_os_sockopt_option(I32(591))\n  fun sctp_data_middle_frag():I32 => @pony_os_sockopt_option(I32(592))\n  fun sctp_data_not_frag():I32 => @pony_os_sockopt_option(I32(593))\n  fun sctp_data_sack_immediately():I32 => @pony_os_sockopt_option(I32(594))\n  fun sctp_data_unordered():I32 => @pony_os_sockopt_option(I32(595))\n  fun sctp_default_prinfo():I32 => @pony_os_sockopt_option(I32(596))\n  fun sctp_default_send_param():I32 => @pony_os_sockopt_option(I32(597))\n  fun sctp_default_sndinfo():I32 => @pony_os_sockopt_option(I32(598))\n  fun sctp_delayed_sack():I32 => @pony_os_sockopt_option(I32(599))\n  fun sctp_del_vrf_id():I32 => @pony_os_sockopt_option(I32(600))\n  fun sctp_disable_fragments():I32 => @pony_os_sockopt_option(I32(601))\n  fun sctp_ecn_cwr():I32 => @pony_os_sockopt_option(I32(602))\n  fun sctp_ecn_echo():I32 => @pony_os_sockopt_option(I32(603))\n  fun sctp_ecn_supported():I32 => @pony_os_sockopt_option(I32(604))\n  fun sctp_enable_change_assoc_req():I32 => @pony_os_sockopt_option(I32(605))\n  fun sctp_enable_reset_assoc_req():I32 => @pony_os_sockopt_option(I32(606))\n  fun sctp_enable_reset_stream_req():I32 => @pony_os_sockopt_option(I32(607))\n  fun sctp_enable_stream_reset():I32 => @pony_os_sockopt_option(I32(608))\n  fun sctp_enable_value_mask():I32 => @pony_os_sockopt_option(I32(609))\n  fun sctp_established():I32 => @pony_os_sockopt_option(I32(610))\n  fun sctp_event():I32 => @pony_os_sockopt_option(I32(611))\n  fun sctp_events():I32 => @pony_os_sockopt_option(I32(612))\n  fun sctp_explicit_eor():I32 => @pony_os_sockopt_option(I32(613))\n  fun sctp_flight_logging_enable():I32 => @pony_os_sockopt_option(I32(614))\n  fun sctp_forward_cum_tsn():I32 => @pony_os_sockopt_option(I32(615))\n  fun sctp_fragment_interleave():I32 => @pony_os_sockopt_option(I32(616))\n  fun sctp_frag_level_0():I32 => @pony_os_sockopt_option(I32(617))\n  fun sctp_frag_level_1():I32 => @pony_os_sockopt_option(I32(618))\n  fun sctp_frag_level_2():I32 => @pony_os_sockopt_option(I32(619))\n  fun sctp_from_middle_box():I32 => @pony_os_sockopt_option(I32(620))\n  fun sctp_fr_logging_enable():I32 => @pony_os_sockopt_option(I32(621))\n  fun sctp_get_addr_len():I32 => @pony_os_sockopt_option(I32(622))\n  fun sctp_get_asoc_vrf():I32 => @pony_os_sockopt_option(I32(623))\n  fun sctp_get_assoc_id_list():I32 => @pony_os_sockopt_option(I32(624))\n  fun sctp_get_assoc_number():I32 => @pony_os_sockopt_option(I32(625))\n  fun sctp_get_local_addresses():I32 => @pony_os_sockopt_option(I32(626))\n  fun sctp_get_local_addr_size():I32 => @pony_os_sockopt_option(I32(627))\n  fun sctp_get_nonce_values():I32 => @pony_os_sockopt_option(I32(628))\n  fun sctp_get_packet_log():I32 => @pony_os_sockopt_option(I32(629))\n  fun sctp_get_peer_addresses():I32 => @pony_os_sockopt_option(I32(630))\n  fun sctp_get_peer_addr_info():I32 => @pony_os_sockopt_option(I32(631))\n  fun sctp_get_remote_addr_size():I32 => @pony_os_sockopt_option(I32(632))\n  fun sctp_get_sndbuf_use():I32 => @pony_os_sockopt_option(I32(633))\n  fun sctp_get_stat_log():I32 => @pony_os_sockopt_option(I32(634))\n  fun sctp_get_vrf_ids():I32 => @pony_os_sockopt_option(I32(635))\n  fun sctp_had_no_tcb():I32 => @pony_os_sockopt_option(I32(636))\n  fun sctp_heartbeat_ack():I32 => @pony_os_sockopt_option(I32(637))\n  fun sctp_heartbeat_request():I32 => @pony_os_sockopt_option(I32(638))\n  fun sctp_hmac_ident():I32 => @pony_os_sockopt_option(I32(639))\n  fun sctp_idata():I32 => @pony_os_sockopt_option(I32(640))\n  fun sctp_iforward_cum_tsn():I32 => @pony_os_sockopt_option(I32(641))\n  fun sctp_initiation():I32 => @pony_os_sockopt_option(I32(642))\n  fun sctp_initiation_ack():I32 => @pony_os_sockopt_option(I32(643))\n  fun sctp_initmsg():I32 => @pony_os_sockopt_option(I32(644))\n  fun sctp_interleaving_supported():I32 => @pony_os_sockopt_option(I32(645))\n  fun sctp_i_want_mapped_v4_addr():I32 => @pony_os_sockopt_option(I32(646))\n  fun sctp_last_packet_tracing():I32 => @pony_os_sockopt_option(I32(647))\n  fun sctp_listen():I32 => @pony_os_sockopt_option(I32(648))\n  fun sctp_local_auth_chunks():I32 => @pony_os_sockopt_option(I32(649))\n  fun sctp_lock_logging_enable():I32 => @pony_os_sockopt_option(I32(650))\n  fun sctp_log_at_send_2_outq():I32 => @pony_os_sockopt_option(I32(651))\n  fun sctp_log_at_send_2_sctp():I32 => @pony_os_sockopt_option(I32(652))\n  fun sctp_log_maxburst_enable():I32 => @pony_os_sockopt_option(I32(653))\n  fun sctp_log_rwnd_enable():I32 => @pony_os_sockopt_option(I32(654))\n  fun sctp_log_sack_arrivals_enable():I32 => @pony_os_sockopt_option(I32(655))\n  fun sctp_log_try_advance():I32 => @pony_os_sockopt_option(I32(656))\n  fun sctp_ltrace_chunk_enable():I32 => @pony_os_sockopt_option(I32(657))\n  fun sctp_ltrace_error_enable():I32 => @pony_os_sockopt_option(I32(658))\n  fun sctp_map_logging_enable():I32 => @pony_os_sockopt_option(I32(659))\n  fun sctp_maxburst():I32 => @pony_os_sockopt_option(I32(660))\n  fun sctp_maxseg():I32 => @pony_os_sockopt_option(I32(661))\n  fun sctp_max_burst():I32 => @pony_os_sockopt_option(I32(662))\n  fun sctp_max_cookie_life():I32 => @pony_os_sockopt_option(I32(663))\n  fun sctp_max_cwnd():I32 => @pony_os_sockopt_option(I32(664))\n  fun sctp_max_hb_interval():I32 => @pony_os_sockopt_option(I32(665))\n  fun sctp_max_sack_delay():I32 => @pony_os_sockopt_option(I32(666))\n  fun sctp_mbcnt_logging_enable():I32 => @pony_os_sockopt_option(I32(667))\n  fun sctp_mbuf_logging_enable():I32 => @pony_os_sockopt_option(I32(668))\n  fun sctp_mobility_base():I32 => @pony_os_sockopt_option(I32(669))\n  fun sctp_mobility_fasthandoff():I32 => @pony_os_sockopt_option(I32(670))\n  fun sctp_mobility_prim_deleted():I32 => @pony_os_sockopt_option(I32(671))\n  fun sctp_nagle_logging_enable():I32 => @pony_os_sockopt_option(I32(672))\n  fun sctp_nodelay():I32 => @pony_os_sockopt_option(I32(673))\n  fun sctp_nrsack_supported():I32 => @pony_os_sockopt_option(I32(674))\n  fun sctp_nr_selective_ack():I32 => @pony_os_sockopt_option(I32(675))\n  fun sctp_operation_error():I32 => @pony_os_sockopt_option(I32(676))\n  fun sctp_packed():I32 => @pony_os_sockopt_option(I32(677))\n  fun sctp_packet_dropped():I32 => @pony_os_sockopt_option(I32(678))\n  fun sctp_packet_log_size():I32 => @pony_os_sockopt_option(I32(679))\n  fun sctp_packet_truncated():I32 => @pony_os_sockopt_option(I32(680))\n  fun sctp_pad_chunk():I32 => @pony_os_sockopt_option(I32(681))\n  fun sctp_partial_delivery_point():I32 => @pony_os_sockopt_option(I32(682))\n  fun sctp_pcb_copy_flags():I32 => @pony_os_sockopt_option(I32(683))\n  fun sctp_pcb_flags_accepting():I32 => @pony_os_sockopt_option(I32(684))\n  fun sctp_pcb_flags_adaptationevnt():I32 => @pony_os_sockopt_option(I32(685))\n  fun sctp_pcb_flags_assoc_resetevnt():I32 => @pony_os_sockopt_option(I32(686))\n  fun sctp_pcb_flags_authevnt():I32 => @pony_os_sockopt_option(I32(687))\n  fun sctp_pcb_flags_autoclose():I32 => @pony_os_sockopt_option(I32(688))\n  fun sctp_pcb_flags_auto_asconf():I32 => @pony_os_sockopt_option(I32(689))\n  fun sctp_pcb_flags_blocking_io():I32 => @pony_os_sockopt_option(I32(690))\n  fun sctp_pcb_flags_boundall():I32 => @pony_os_sockopt_option(I32(691))\n  fun sctp_pcb_flags_bound_v6():I32 => @pony_os_sockopt_option(I32(692))\n  fun sctp_pcb_flags_close_ip():I32 => @pony_os_sockopt_option(I32(693))\n  fun sctp_pcb_flags_connected():I32 => @pony_os_sockopt_option(I32(694))\n  fun sctp_pcb_flags_donot_heartbeat():I32 => @pony_os_sockopt_option(I32(695))\n  fun sctp_pcb_flags_dont_wake():I32 => @pony_os_sockopt_option(I32(696))\n  fun sctp_pcb_flags_do_asconf():I32 => @pony_os_sockopt_option(I32(697))\n  fun sctp_pcb_flags_do_not_pmtud():I32 => @pony_os_sockopt_option(I32(698))\n  fun sctp_pcb_flags_dryevnt():I32 => @pony_os_sockopt_option(I32(699))\n  fun sctp_pcb_flags_explicit_eor():I32 => @pony_os_sockopt_option(I32(700))\n  fun sctp_pcb_flags_ext_rcvinfo():I32 => @pony_os_sockopt_option(I32(701))\n  fun sctp_pcb_flags_frag_interleave():I32 => @pony_os_sockopt_option(I32(702))\n  fun sctp_pcb_flags_interleave_strms():I32 => @pony_os_sockopt_option(I32(703))\n  fun sctp_pcb_flags_in_tcppool():I32 => @pony_os_sockopt_option(I32(704))\n  fun sctp_pcb_flags_multiple_asconfs():I32 => @pony_os_sockopt_option(I32(705))\n  fun sctp_pcb_flags_needs_mapped_v4():I32 => @pony_os_sockopt_option(I32(706))\n  fun sctp_pcb_flags_nodelay():I32 => @pony_os_sockopt_option(I32(707))\n  fun sctp_pcb_flags_no_fragment():I32 => @pony_os_sockopt_option(I32(708))\n  fun sctp_pcb_flags_pdapievnt():I32 => @pony_os_sockopt_option(I32(709))\n  fun sctp_pcb_flags_portreuse():I32 => @pony_os_sockopt_option(I32(710))\n  fun sctp_pcb_flags_recvassocevnt():I32 => @pony_os_sockopt_option(I32(711))\n  fun sctp_pcb_flags_recvdataioevnt():I32 => @pony_os_sockopt_option(I32(712))\n  fun sctp_pcb_flags_recvnsendfailevnt():I32 => @pony_os_sockopt_option(I32(713))\n  fun sctp_pcb_flags_recvnxtinfo():I32 => @pony_os_sockopt_option(I32(714))\n  fun sctp_pcb_flags_recvpaddrevnt():I32 => @pony_os_sockopt_option(I32(715))\n  fun sctp_pcb_flags_recvpeererr():I32 => @pony_os_sockopt_option(I32(716))\n  fun sctp_pcb_flags_recvrcvinfo():I32 => @pony_os_sockopt_option(I32(717))\n  fun sctp_pcb_flags_recvsendfailevnt():I32 => @pony_os_sockopt_option(I32(718))\n  fun sctp_pcb_flags_recvshutdownevnt():I32 => @pony_os_sockopt_option(I32(719))\n  fun sctp_pcb_flags_socket_allgone():I32 => @pony_os_sockopt_option(I32(720))\n  fun sctp_pcb_flags_socket_cant_read():I32 => @pony_os_sockopt_option(I32(721))\n  fun sctp_pcb_flags_socket_gone():I32 => @pony_os_sockopt_option(I32(722))\n  fun sctp_pcb_flags_stream_changeevnt():I32 => @pony_os_sockopt_option(I32(723))\n  fun sctp_pcb_flags_stream_resetevnt():I32 => @pony_os_sockopt_option(I32(724))\n  fun sctp_pcb_flags_tcptype():I32 => @pony_os_sockopt_option(I32(725))\n  fun sctp_pcb_flags_udptype():I32 => @pony_os_sockopt_option(I32(726))\n  fun sctp_pcb_flags_unbound():I32 => @pony_os_sockopt_option(I32(727))\n  fun sctp_pcb_flags_wakeinput():I32 => @pony_os_sockopt_option(I32(728))\n  fun sctp_pcb_flags_wakeoutput():I32 => @pony_os_sockopt_option(I32(729))\n  fun sctp_pcb_flags_was_aborted():I32 => @pony_os_sockopt_option(I32(730))\n  fun sctp_pcb_flags_was_connected():I32 => @pony_os_sockopt_option(I32(731))\n  fun sctp_pcb_flags_zero_copy_active():I32 => @pony_os_sockopt_option(I32(732))\n  fun sctp_pcb_status():I32 => @pony_os_sockopt_option(I32(733))\n  fun sctp_peeloff():I32 => @pony_os_sockopt_option(I32(734))\n  fun sctp_peer_addr_params():I32 => @pony_os_sockopt_option(I32(735))\n  fun sctp_peer_addr_thlds():I32 => @pony_os_sockopt_option(I32(736))\n  fun sctp_peer_auth_chunks():I32 => @pony_os_sockopt_option(I32(737))\n  fun sctp_pktdrop_supported():I32 => @pony_os_sockopt_option(I32(738))\n  fun sctp_pluggable_cc():I32 => @pony_os_sockopt_option(I32(739))\n  fun sctp_pluggable_ss():I32 => @pony_os_sockopt_option(I32(740))\n  fun sctp_primary_addr():I32 => @pony_os_sockopt_option(I32(741))\n  fun sctp_pr_assoc_status():I32 => @pony_os_sockopt_option(I32(742))\n  fun sctp_pr_stream_status():I32 => @pony_os_sockopt_option(I32(743))\n  fun sctp_pr_supported():I32 => @pony_os_sockopt_option(I32(744))\n  fun sctp_reconfig_supported():I32 => @pony_os_sockopt_option(I32(745))\n  fun sctp_recvnxtinfo():I32 => @pony_os_sockopt_option(I32(746))\n  fun sctp_recvrcvinfo():I32 => @pony_os_sockopt_option(I32(747))\n  fun sctp_recv_rwnd_logging_enable():I32 => @pony_os_sockopt_option(I32(748))\n  fun sctp_remote_udp_encaps_port():I32 => @pony_os_sockopt_option(I32(749))\n  fun sctp_reset_assoc():I32 => @pony_os_sockopt_option(I32(750))\n  fun sctp_reset_streams():I32 => @pony_os_sockopt_option(I32(751))\n  fun sctp_reuse_port():I32 => @pony_os_sockopt_option(I32(752))\n  fun sctp_rtoinfo():I32 => @pony_os_sockopt_option(I32(753))\n  fun sctp_rttvar_logging_enable():I32 => @pony_os_sockopt_option(I32(754))\n  fun sctp_sack_cmt_dac():I32 => @pony_os_sockopt_option(I32(755))\n  fun sctp_sack_logging_enable():I32 => @pony_os_sockopt_option(I32(756))\n  fun sctp_sack_nonce_sum():I32 => @pony_os_sockopt_option(I32(757))\n  fun sctp_sack_rwnd_logging_enable():I32 => @pony_os_sockopt_option(I32(758))\n  fun sctp_sat_network_burst_incr():I32 => @pony_os_sockopt_option(I32(759))\n  fun sctp_sat_network_min():I32 => @pony_os_sockopt_option(I32(760))\n  fun sctp_sb_logging_enable():I32 => @pony_os_sockopt_option(I32(761))\n  fun sctp_selective_ack():I32 => @pony_os_sockopt_option(I32(762))\n  fun sctp_set_debug_level():I32 => @pony_os_sockopt_option(I32(763))\n  fun sctp_set_dynamic_primary():I32 => @pony_os_sockopt_option(I32(764))\n  fun sctp_set_initial_dbg_seq():I32 => @pony_os_sockopt_option(I32(765))\n  fun sctp_set_peer_primary_addr():I32 => @pony_os_sockopt_option(I32(766))\n  fun sctp_shutdown():I32 => @pony_os_sockopt_option(I32(767))\n  fun sctp_shutdown_ack():I32 => @pony_os_sockopt_option(I32(768))\n  fun sctp_shutdown_ack_sent():I32 => @pony_os_sockopt_option(I32(769))\n  fun sctp_shutdown_complete():I32 => @pony_os_sockopt_option(I32(770))\n  fun sctp_shutdown_pending():I32 => @pony_os_sockopt_option(I32(771))\n  fun sctp_shutdown_received():I32 => @pony_os_sockopt_option(I32(772))\n  fun sctp_shutdown_sent():I32 => @pony_os_sockopt_option(I32(773))\n  fun sctp_smallest_pmtu():I32 => @pony_os_sockopt_option(I32(774))\n  fun sctp_ss_default():I32 => @pony_os_sockopt_option(I32(775))\n  fun sctp_ss_fair_bandwith():I32 => @pony_os_sockopt_option(I32(776))\n  fun sctp_ss_first_come():I32 => @pony_os_sockopt_option(I32(777))\n  fun sctp_ss_priority():I32 => @pony_os_sockopt_option(I32(778))\n  fun sctp_ss_round_robin():I32 => @pony_os_sockopt_option(I32(779))\n  fun sctp_ss_round_robin_packet():I32 => @pony_os_sockopt_option(I32(780))\n  fun sctp_ss_value():I32 => @pony_os_sockopt_option(I32(781))\n  fun sctp_status():I32 => @pony_os_sockopt_option(I32(782))\n  fun sctp_stream_reset():I32 => @pony_os_sockopt_option(I32(783))\n  fun sctp_stream_reset_incoming():I32 => @pony_os_sockopt_option(I32(784))\n  fun sctp_stream_reset_outgoing():I32 => @pony_os_sockopt_option(I32(785))\n  fun sctp_str_logging_enable():I32 => @pony_os_sockopt_option(I32(786))\n  fun sctp_threshold_logging():I32 => @pony_os_sockopt_option(I32(787))\n  fun sctp_timeouts():I32 => @pony_os_sockopt_option(I32(788))\n  fun sctp_use_ext_rcvinfo():I32 => @pony_os_sockopt_option(I32(789))\n  fun sctp_vrf_id():I32 => @pony_os_sockopt_option(I32(790))\n  fun sctp_wake_logging_enable():I32 => @pony_os_sockopt_option(I32(791))\n  fun sock_cloexec():I32 => @pony_os_sockopt_option(I32(792))\n  fun sock_dgram():I32 => @pony_os_sockopt_option(I32(793))\n  fun sock_maxaddrlen():I32 => @pony_os_sockopt_option(I32(794))\n  fun sock_nonblock():I32 => @pony_os_sockopt_option(I32(795))\n  fun sock_raw():I32 => @pony_os_sockopt_option(I32(796))\n  fun sock_rdm():I32 => @pony_os_sockopt_option(I32(797))\n  fun sock_seqpacket():I32 => @pony_os_sockopt_option(I32(798))\n  fun sock_stream():I32 => @pony_os_sockopt_option(I32(799))\n  fun somaxconn():I32 => @pony_os_sockopt_option(I32(800))\n  fun sonpx_setoptshut():I32 => @pony_os_sockopt_option(I32(801))\n  fun so_acceptconn():I32 => @pony_os_sockopt_option(I32(802))\n  fun so_acceptfilter():I32 => @pony_os_sockopt_option(I32(803))\n  fun so_atmpvc():I32 => @pony_os_sockopt_option(I32(804))\n  fun so_atmqos():I32 => @pony_os_sockopt_option(I32(805))\n  fun so_atmsap():I32 => @pony_os_sockopt_option(I32(806))\n  fun so_attach_bpf():I32 => @pony_os_sockopt_option(I32(807))\n  fun so_attach_filter():I32 => @pony_os_sockopt_option(I32(808))\n  fun so_bindtodevice():I32 => @pony_os_sockopt_option(I32(809))\n  fun so_bintime():I32 => @pony_os_sockopt_option(I32(810))\n  fun so_bpf_extensions():I32 => @pony_os_sockopt_option(I32(811))\n  fun so_broadcast():I32 => @pony_os_sockopt_option(I32(812))\n  fun so_bsdcompat():I32 => @pony_os_sockopt_option(I32(813))\n  fun so_bsp_state():I32 => @pony_os_sockopt_option(I32(814))\n  fun so_busy_poll():I32 => @pony_os_sockopt_option(I32(815))\n  fun so_conaccess():I32 => @pony_os_sockopt_option(I32(816))\n  fun so_condata():I32 => @pony_os_sockopt_option(I32(817))\n  fun so_conditional_accept():I32 => @pony_os_sockopt_option(I32(818))\n  fun so_connect_time():I32 => @pony_os_sockopt_option(I32(819))\n  fun so_debug():I32 => @pony_os_sockopt_option(I32(820))\n  fun so_detach_bpf():I32 => @pony_os_sockopt_option(I32(821))\n  fun so_detach_filter():I32 => @pony_os_sockopt_option(I32(822))\n  fun so_domain():I32 => @pony_os_sockopt_option(I32(823))\n  fun so_dontlinger():I32 => @pony_os_sockopt_option(I32(824))\n  fun so_dontroute():I32 => @pony_os_sockopt_option(I32(825))\n  fun so_donttrunc():I32 => @pony_os_sockopt_option(I32(826))\n  fun so_error():I32 => @pony_os_sockopt_option(I32(827))\n  fun so_exclusiveaddruse():I32 => @pony_os_sockopt_option(I32(828))\n  fun so_get_filter():I32 => @pony_os_sockopt_option(I32(829))\n  fun so_group_id():I32 => @pony_os_sockopt_option(I32(830))\n  fun so_group_priority():I32 => @pony_os_sockopt_option(I32(831))\n  fun so_hci_raw_direction():I32 => @pony_os_sockopt_option(I32(832))\n  fun so_hci_raw_filter():I32 => @pony_os_sockopt_option(I32(833))\n  fun so_incoming_cpu():I32 => @pony_os_sockopt_option(I32(834))\n  fun so_keepalive():I32 => @pony_os_sockopt_option(I32(835))\n  fun so_l2cap_encrypted():I32 => @pony_os_sockopt_option(I32(836))\n  fun so_l2cap_flush():I32 => @pony_os_sockopt_option(I32(837))\n  fun so_l2cap_iflow():I32 => @pony_os_sockopt_option(I32(838))\n  fun so_l2cap_imtu():I32 => @pony_os_sockopt_option(I32(839))\n  fun so_l2cap_oflow():I32 => @pony_os_sockopt_option(I32(840))\n  fun so_l2cap_omtu():I32 => @pony_os_sockopt_option(I32(841))\n  fun so_label():I32 => @pony_os_sockopt_option(I32(842))\n  fun so_linger():I32 => @pony_os_sockopt_option(I32(843))\n  fun so_linger_sec():I32 => @pony_os_sockopt_option(I32(844))\n  fun so_linkinfo():I32 => @pony_os_sockopt_option(I32(845))\n  fun so_listenincqlen():I32 => @pony_os_sockopt_option(I32(846))\n  fun so_listenqlen():I32 => @pony_os_sockopt_option(I32(847))\n  fun so_listenqlimit():I32 => @pony_os_sockopt_option(I32(848))\n  fun so_lock_filter():I32 => @pony_os_sockopt_option(I32(849))\n  fun so_mark():I32 => @pony_os_sockopt_option(I32(850))\n  fun so_max_msg_size():I32 => @pony_os_sockopt_option(I32(851))\n  fun so_max_pacing_rate():I32 => @pony_os_sockopt_option(I32(852))\n  fun so_multipoint():I32 => @pony_os_sockopt_option(I32(853))\n  fun so_netsvc_marking_level():I32 => @pony_os_sockopt_option(I32(854))\n  fun so_net_service_type():I32 => @pony_os_sockopt_option(I32(855))\n  fun so_nke():I32 => @pony_os_sockopt_option(I32(856))\n  fun so_noaddrerr():I32 => @pony_os_sockopt_option(I32(857))\n  fun so_nofcs():I32 => @pony_os_sockopt_option(I32(858))\n  fun so_nosigpipe():I32 => @pony_os_sockopt_option(I32(859))\n  fun so_notifyconflict():I32 => @pony_os_sockopt_option(I32(860))\n  fun so_no_check():I32 => @pony_os_sockopt_option(I32(861))\n  fun so_no_ddp():I32 => @pony_os_sockopt_option(I32(862))\n  fun so_no_offload():I32 => @pony_os_sockopt_option(I32(863))\n  fun so_np_extensions():I32 => @pony_os_sockopt_option(I32(864))\n  fun so_nread():I32 => @pony_os_sockopt_option(I32(865))\n  fun so_numrcvpkt():I32 => @pony_os_sockopt_option(I32(866))\n  fun so_nwrite():I32 => @pony_os_sockopt_option(I32(867))\n  fun so_oobinline():I32 => @pony_os_sockopt_option(I32(868))\n  fun so_original_dst():I32 => @pony_os_sockopt_option(I32(869))\n  fun so_passcred():I32 => @pony_os_sockopt_option(I32(870))\n  fun so_passsec():I32 => @pony_os_sockopt_option(I32(871))\n  fun so_peek_off():I32 => @pony_os_sockopt_option(I32(872))\n  fun so_peercred():I32 => @pony_os_sockopt_option(I32(873))\n  fun so_peerlabel():I32 => @pony_os_sockopt_option(I32(874))\n  fun so_peername():I32 => @pony_os_sockopt_option(I32(875))\n  fun so_peersec():I32 => @pony_os_sockopt_option(I32(876))\n  fun so_port_scalability():I32 => @pony_os_sockopt_option(I32(877))\n  fun so_priority():I32 => @pony_os_sockopt_option(I32(878))\n  fun so_protocol():I32 => @pony_os_sockopt_option(I32(879))\n  fun so_protocol_info():I32 => @pony_os_sockopt_option(I32(880))\n  fun so_prototype():I32 => @pony_os_sockopt_option(I32(881))\n  fun so_proxyusr():I32 => @pony_os_sockopt_option(I32(882))\n  fun so_randomport():I32 => @pony_os_sockopt_option(I32(883))\n  fun so_rcvbuf():I32 => @pony_os_sockopt_option(I32(884))\n  fun so_rcvbufforce():I32 => @pony_os_sockopt_option(I32(885))\n  fun so_rcvlowat():I32 => @pony_os_sockopt_option(I32(886))\n  fun so_rcvtimeo():I32 => @pony_os_sockopt_option(I32(887))\n  fun so_rds_transport():I32 => @pony_os_sockopt_option(I32(888))\n  fun so_reuseaddr():I32 => @pony_os_sockopt_option(I32(889))\n  fun so_reuseport():I32 => @pony_os_sockopt_option(I32(890))\n  fun so_reuseshareuid():I32 => @pony_os_sockopt_option(I32(891))\n  fun so_rfcomm_fc_info():I32 => @pony_os_sockopt_option(I32(892))\n  fun so_rfcomm_mtu():I32 => @pony_os_sockopt_option(I32(893))\n  fun so_rxq_ovfl():I32 => @pony_os_sockopt_option(I32(894))\n  fun so_sco_conninfo():I32 => @pony_os_sockopt_option(I32(895))\n  fun so_sco_mtu():I32 => @pony_os_sockopt_option(I32(896))\n  fun so_security_authentication():I32 => @pony_os_sockopt_option(I32(897))\n  fun so_security_encryption_network():I32 => @pony_os_sockopt_option(I32(898))\n  fun so_security_encryption_transport():I32 => @pony_os_sockopt_option(I32(899))\n  fun so_select_err_queue():I32 => @pony_os_sockopt_option(I32(900))\n  fun so_setclp():I32 => @pony_os_sockopt_option(I32(901))\n  fun so_setfib():I32 => @pony_os_sockopt_option(I32(902))\n  fun so_sndbuf():I32 => @pony_os_sockopt_option(I32(903))\n  fun so_sndbufforce():I32 => @pony_os_sockopt_option(I32(904))\n  fun so_sndlowat():I32 => @pony_os_sockopt_option(I32(905))\n  fun so_sndtimeo():I32 => @pony_os_sockopt_option(I32(906))\n  fun so_timestamp():I32 => @pony_os_sockopt_option(I32(907))\n  fun so_timestamping():I32 => @pony_os_sockopt_option(I32(908))\n  fun so_timestampns():I32 => @pony_os_sockopt_option(I32(909))\n  fun so_timestamp_monotonic():I32 => @pony_os_sockopt_option(I32(910))\n  fun so_type():I32 => @pony_os_sockopt_option(I32(911))\n  fun so_upcallclosewait():I32 => @pony_os_sockopt_option(I32(912))\n  fun so_update_accept_context():I32 => @pony_os_sockopt_option(I32(913))\n  fun so_useloopback():I32 => @pony_os_sockopt_option(I32(914))\n  fun so_user_cookie():I32 => @pony_os_sockopt_option(I32(915))\n  fun so_vendor():I32 => @pony_os_sockopt_option(I32(916))\n  fun so_vm_sockets_buffer_max_size():I32 => @pony_os_sockopt_option(I32(917))\n  fun so_vm_sockets_buffer_min_size():I32 => @pony_os_sockopt_option(I32(918))\n  fun so_vm_sockets_buffer_size():I32 => @pony_os_sockopt_option(I32(919))\n  fun so_vm_sockets_connect_timeout():I32 => @pony_os_sockopt_option(I32(920))\n  fun so_vm_sockets_nonblock_txrx():I32 => @pony_os_sockopt_option(I32(921))\n  fun so_vm_sockets_peer_host_vm_id():I32 => @pony_os_sockopt_option(I32(922))\n  fun so_vm_sockets_trusted():I32 => @pony_os_sockopt_option(I32(923))\n  fun so_wantmore():I32 => @pony_os_sockopt_option(I32(924))\n  fun so_wantoobflag():I32 => @pony_os_sockopt_option(I32(925))\n  fun so_wifi_status():I32 => @pony_os_sockopt_option(I32(926))\n  fun tcp6_mss():I32 => @pony_os_sockopt_option(I32(927))\n  fun tcpci_flag_lossrecovery():I32 => @pony_os_sockopt_option(I32(928))\n  fun tcpci_flag_reordering_detected():I32 => @pony_os_sockopt_option(I32(929))\n  fun tcpci_opt_ecn():I32 => @pony_os_sockopt_option(I32(930))\n  fun tcpci_opt_sack():I32 => @pony_os_sockopt_option(I32(931))\n  fun tcpci_opt_timestamps():I32 => @pony_os_sockopt_option(I32(932))\n  fun tcpci_opt_wscale():I32 => @pony_os_sockopt_option(I32(933))\n  fun tcpf_ca_cwr():I32 => @pony_os_sockopt_option(I32(934))\n  fun tcpf_ca_disorder():I32 => @pony_os_sockopt_option(I32(935))\n  fun tcpf_ca_loss():I32 => @pony_os_sockopt_option(I32(936))\n  fun tcpf_ca_open():I32 => @pony_os_sockopt_option(I32(937))\n  fun tcpf_ca_recovery():I32 => @pony_os_sockopt_option(I32(938))\n  fun tcpi_opt_ecn():I32 => @pony_os_sockopt_option(I32(939))\n  fun tcpi_opt_ecn_seen():I32 => @pony_os_sockopt_option(I32(940))\n  fun tcpi_opt_sack():I32 => @pony_os_sockopt_option(I32(941))\n  fun tcpi_opt_syn_data():I32 => @pony_os_sockopt_option(I32(942))\n  fun tcpi_opt_timestamps():I32 => @pony_os_sockopt_option(I32(943))\n  fun tcpi_opt_toe():I32 => @pony_os_sockopt_option(I32(944))\n  fun tcpi_opt_wscale():I32 => @pony_os_sockopt_option(I32(945))\n  fun tcpolen_cc():I32 => @pony_os_sockopt_option(I32(946))\n  fun tcpolen_cc_appa():I32 => @pony_os_sockopt_option(I32(947))\n  fun tcpolen_eol():I32 => @pony_os_sockopt_option(I32(948))\n  fun tcpolen_fastopen_req():I32 => @pony_os_sockopt_option(I32(949))\n  fun tcpolen_fast_open_empty():I32 => @pony_os_sockopt_option(I32(950))\n  fun tcpolen_fast_open_max():I32 => @pony_os_sockopt_option(I32(951))\n  fun tcpolen_fast_open_min():I32 => @pony_os_sockopt_option(I32(952))\n  fun tcpolen_maxseg():I32 => @pony_os_sockopt_option(I32(953))\n  fun tcpolen_nop():I32 => @pony_os_sockopt_option(I32(954))\n  fun tcpolen_pad():I32 => @pony_os_sockopt_option(I32(955))\n  fun tcpolen_sack():I32 => @pony_os_sockopt_option(I32(956))\n  fun tcpolen_sackhdr():I32 => @pony_os_sockopt_option(I32(957))\n  fun tcpolen_sack_permitted():I32 => @pony_os_sockopt_option(I32(958))\n  fun tcpolen_signature():I32 => @pony_os_sockopt_option(I32(959))\n  fun tcpolen_timestamp():I32 => @pony_os_sockopt_option(I32(960))\n  fun tcpolen_tstamp_appa():I32 => @pony_os_sockopt_option(I32(961))\n  fun tcpolen_window():I32 => @pony_os_sockopt_option(I32(962))\n  fun tcpopt_cc():I32 => @pony_os_sockopt_option(I32(963))\n  fun tcpopt_ccecho():I32 => @pony_os_sockopt_option(I32(964))\n  fun tcpopt_ccnew():I32 => @pony_os_sockopt_option(I32(965))\n  fun tcpopt_eol():I32 => @pony_os_sockopt_option(I32(966))\n  fun tcpopt_fastopen():I32 => @pony_os_sockopt_option(I32(967))\n  fun tcpopt_fast_open():I32 => @pony_os_sockopt_option(I32(968))\n  fun tcpopt_maxseg():I32 => @pony_os_sockopt_option(I32(969))\n  fun tcpopt_multipath():I32 => @pony_os_sockopt_option(I32(970))\n  fun tcpopt_nop():I32 => @pony_os_sockopt_option(I32(971))\n  fun tcpopt_pad():I32 => @pony_os_sockopt_option(I32(972))\n  fun tcpopt_sack():I32 => @pony_os_sockopt_option(I32(973))\n  fun tcpopt_sack_hdr():I32 => @pony_os_sockopt_option(I32(974))\n  fun tcpopt_sack_permitted():I32 => @pony_os_sockopt_option(I32(975))\n  fun tcpopt_sack_permit_hdr():I32 => @pony_os_sockopt_option(I32(976))\n  fun tcpopt_signature():I32 => @pony_os_sockopt_option(I32(977))\n  fun tcpopt_timestamp():I32 => @pony_os_sockopt_option(I32(978))\n  fun tcpopt_tstamp_hdr():I32 => @pony_os_sockopt_option(I32(979))\n  fun tcpopt_window():I32 => @pony_os_sockopt_option(I32(980))\n  fun tcp_ca_name_max():I32 => @pony_os_sockopt_option(I32(981))\n  fun tcp_ccalgoopt():I32 => @pony_os_sockopt_option(I32(982))\n  fun tcp_cc_info():I32 => @pony_os_sockopt_option(I32(983))\n  fun tcp_congestion():I32 => @pony_os_sockopt_option(I32(984))\n  fun tcp_connectiontimeout():I32 => @pony_os_sockopt_option(I32(985))\n  fun tcp_connection_info():I32 => @pony_os_sockopt_option(I32(986))\n  fun tcp_cookie_in_always():I32 => @pony_os_sockopt_option(I32(987))\n  fun tcp_cookie_max():I32 => @pony_os_sockopt_option(I32(988))\n  fun tcp_cookie_min():I32 => @pony_os_sockopt_option(I32(989))\n  fun tcp_cookie_out_never():I32 => @pony_os_sockopt_option(I32(990))\n  fun tcp_cookie_pair_size():I32 => @pony_os_sockopt_option(I32(991))\n  fun tcp_cookie_transactions():I32 => @pony_os_sockopt_option(I32(992))\n  fun tcp_cork():I32 => @pony_os_sockopt_option(I32(993))\n  fun tcp_defer_accept():I32 => @pony_os_sockopt_option(I32(994))\n  fun tcp_enable_ecn():I32 => @pony_os_sockopt_option(I32(995))\n  fun tcp_fastopen():I32 => @pony_os_sockopt_option(I32(996))\n  fun tcp_function_blk():I32 => @pony_os_sockopt_option(I32(997))\n  fun tcp_function_name_len_max():I32 => @pony_os_sockopt_option(I32(998))\n  fun tcp_info():I32 => @pony_os_sockopt_option(I32(999))\n  fun tcp_keepalive():I32 => @pony_os_sockopt_option(I32(1000))\n  fun tcp_keepcnt():I32 => @pony_os_sockopt_option(I32(1001))\n  fun tcp_keepidle():I32 => @pony_os_sockopt_option(I32(1002))\n  fun tcp_keepinit():I32 => @pony_os_sockopt_option(I32(1003))\n  fun tcp_keepintvl():I32 => @pony_os_sockopt_option(I32(1004))\n  fun tcp_linger2():I32 => @pony_os_sockopt_option(I32(1005))\n  fun tcp_maxburst():I32 => @pony_os_sockopt_option(I32(1006))\n  fun tcp_maxhlen():I32 => @pony_os_sockopt_option(I32(1007))\n  fun tcp_maxolen():I32 => @pony_os_sockopt_option(I32(1008))\n  fun tcp_maxseg():I32 => @pony_os_sockopt_option(I32(1009))\n  fun tcp_maxwin():I32 => @pony_os_sockopt_option(I32(1010))\n  fun tcp_max_sack():I32 => @pony_os_sockopt_option(I32(1011))\n  fun tcp_max_winshift():I32 => @pony_os_sockopt_option(I32(1012))\n  fun tcp_md5sig():I32 => @pony_os_sockopt_option(I32(1013))\n  fun tcp_md5sig_maxkeylen():I32 => @pony_os_sockopt_option(I32(1014))\n  fun tcp_minmss():I32 => @pony_os_sockopt_option(I32(1015))\n  fun tcp_mss():I32 => @pony_os_sockopt_option(I32(1016))\n  fun tcp_mss_default():I32 => @pony_os_sockopt_option(I32(1017))\n  fun tcp_mss_desired():I32 => @pony_os_sockopt_option(I32(1018))\n  fun tcp_nodelay():I32 => @pony_os_sockopt_option(I32(1019))\n  fun tcp_noopt():I32 => @pony_os_sockopt_option(I32(1020))\n  fun tcp_nopush():I32 => @pony_os_sockopt_option(I32(1021))\n  fun tcp_notsent_lowat():I32 => @pony_os_sockopt_option(I32(1022))\n  fun tcp_pcap_in():I32 => @pony_os_sockopt_option(I32(1023))\n  fun tcp_pcap_out():I32 => @pony_os_sockopt_option(I32(1024))\n  fun tcp_queue_seq():I32 => @pony_os_sockopt_option(I32(1025))\n  fun tcp_quickack():I32 => @pony_os_sockopt_option(I32(1026))\n  fun tcp_repair():I32 => @pony_os_sockopt_option(I32(1027))\n  fun tcp_repair_options():I32 => @pony_os_sockopt_option(I32(1028))\n  fun tcp_repair_queue():I32 => @pony_os_sockopt_option(I32(1029))\n  fun tcp_rxt_conndroptime():I32 => @pony_os_sockopt_option(I32(1030))\n  fun tcp_rxt_findrop():I32 => @pony_os_sockopt_option(I32(1031))\n  fun tcp_saved_syn():I32 => @pony_os_sockopt_option(I32(1032))\n  fun tcp_save_syn():I32 => @pony_os_sockopt_option(I32(1033))\n  fun tcp_sendmoreacks():I32 => @pony_os_sockopt_option(I32(1034))\n  fun tcp_syncnt():I32 => @pony_os_sockopt_option(I32(1035))\n  fun tcp_s_data_in():I32 => @pony_os_sockopt_option(I32(1036))\n  fun tcp_s_data_out():I32 => @pony_os_sockopt_option(I32(1037))\n  fun tcp_thin_dupack():I32 => @pony_os_sockopt_option(I32(1038))\n  fun tcp_thin_linear_timeouts():I32 => @pony_os_sockopt_option(I32(1039))\n  fun tcp_timestamp():I32 => @pony_os_sockopt_option(I32(1040))\n  fun tcp_user_timeout():I32 => @pony_os_sockopt_option(I32(1041))\n  fun tcp_vendor():I32 => @pony_os_sockopt_option(I32(1042))\n  fun tcp_window_clamp():I32 => @pony_os_sockopt_option(I32(1043))\n  fun tipc_addr_id():I32 => @pony_os_sockopt_option(I32(1044))\n  fun tipc_addr_mcast():I32 => @pony_os_sockopt_option(I32(1045))\n  fun tipc_addr_name():I32 => @pony_os_sockopt_option(I32(1046))\n  fun tipc_addr_nameseq():I32 => @pony_os_sockopt_option(I32(1047))\n  fun tipc_cfg_srv():I32 => @pony_os_sockopt_option(I32(1048))\n  fun tipc_cluster_scope():I32 => @pony_os_sockopt_option(I32(1049))\n  fun tipc_conn_shutdown():I32 => @pony_os_sockopt_option(I32(1050))\n  fun tipc_conn_timeout():I32 => @pony_os_sockopt_option(I32(1051))\n  fun tipc_critical_importance():I32 => @pony_os_sockopt_option(I32(1052))\n  fun tipc_destname():I32 => @pony_os_sockopt_option(I32(1053))\n  fun tipc_dest_droppable():I32 => @pony_os_sockopt_option(I32(1054))\n  fun tipc_errinfo():I32 => @pony_os_sockopt_option(I32(1055))\n  fun tipc_err_no_name():I32 => @pony_os_sockopt_option(I32(1056))\n  fun tipc_err_no_node():I32 => @pony_os_sockopt_option(I32(1057))\n  fun tipc_err_no_port():I32 => @pony_os_sockopt_option(I32(1058))\n  fun tipc_err_overload():I32 => @pony_os_sockopt_option(I32(1059))\n  fun tipc_high_importance():I32 => @pony_os_sockopt_option(I32(1060))\n  fun tipc_importance():I32 => @pony_os_sockopt_option(I32(1061))\n  fun tipc_link_state():I32 => @pony_os_sockopt_option(I32(1062))\n  fun tipc_low_importance():I32 => @pony_os_sockopt_option(I32(1063))\n  fun tipc_max_bearer_name():I32 => @pony_os_sockopt_option(I32(1064))\n  fun tipc_max_if_name():I32 => @pony_os_sockopt_option(I32(1065))\n  fun tipc_max_link_name():I32 => @pony_os_sockopt_option(I32(1066))\n  fun tipc_max_media_name():I32 => @pony_os_sockopt_option(I32(1067))\n  fun tipc_max_user_msg_size():I32 => @pony_os_sockopt_option(I32(1068))\n  fun tipc_medium_importance():I32 => @pony_os_sockopt_option(I32(1069))\n  fun tipc_node_recvq_depth():I32 => @pony_os_sockopt_option(I32(1070))\n  fun tipc_node_scope():I32 => @pony_os_sockopt_option(I32(1071))\n  fun tipc_ok():I32 => @pony_os_sockopt_option(I32(1072))\n  fun tipc_published():I32 => @pony_os_sockopt_option(I32(1073))\n  fun tipc_reserved_types():I32 => @pony_os_sockopt_option(I32(1074))\n  fun tipc_retdata():I32 => @pony_os_sockopt_option(I32(1075))\n  fun tipc_sock_recvq_depth():I32 => @pony_os_sockopt_option(I32(1076))\n  fun tipc_src_droppable():I32 => @pony_os_sockopt_option(I32(1077))\n  fun tipc_subscr_timeout():I32 => @pony_os_sockopt_option(I32(1078))\n  fun tipc_sub_cancel():I32 => @pony_os_sockopt_option(I32(1079))\n  fun tipc_sub_ports():I32 => @pony_os_sockopt_option(I32(1080))\n  fun tipc_sub_service():I32 => @pony_os_sockopt_option(I32(1081))\n  fun tipc_top_srv():I32 => @pony_os_sockopt_option(I32(1082))\n  fun tipc_wait_forever():I32 => @pony_os_sockopt_option(I32(1083))\n  fun tipc_withdrawn():I32 => @pony_os_sockopt_option(I32(1084))\n  fun tipc_zone_scope():I32 => @pony_os_sockopt_option(I32(1085))\n  fun ttcp_client_snd_wnd():I32 => @pony_os_sockopt_option(I32(1086))\n  fun udp_cork():I32 => @pony_os_sockopt_option(I32(1087))\n  fun udp_encap():I32 => @pony_os_sockopt_option(I32(1088))\n  fun udp_encap_espinudp():I32 => @pony_os_sockopt_option(I32(1089))\n  fun udp_encap_espinudp_maxfraglen():I32 => @pony_os_sockopt_option(I32(1090))\n  fun udp_encap_espinudp_non_ike():I32 => @pony_os_sockopt_option(I32(1091))\n  fun udp_encap_espinudp_port():I32 => @pony_os_sockopt_option(I32(1092))\n  fun udp_encap_l2tpinudp():I32 => @pony_os_sockopt_option(I32(1093))\n  fun udp_nocksum():I32 => @pony_os_sockopt_option(I32(1094))\n  fun udp_no_check6_rx():I32 => @pony_os_sockopt_option(I32(1095))\n  fun udp_no_check6_tx():I32 => @pony_os_sockopt_option(I32(1096))\n  fun udp_vendor():I32 => @pony_os_sockopt_option(I32(1097))",
            "title": "ossockopt.pony"
        },
        {
            "location": "/src/net/net_address/",
            "text": "class val NetAddress is Equatable[NetAddress]\n  \"\"\"\n  Represents an IPv4 or IPv6 address. The family field indicates the address\n  type. The addr field is either the IPv4 address or the IPv6 flow info. The\n  addr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The\n  scope field is the IPv6 scope, or invalid for an IPv4 address.\n\n  This class is modelled after the C data structure for holding socket\n  addresses for both IPv4 and IPv6 `sockaddr_storage`.\n\n  Use the `name` method to obtain address/hostname and port/service as Strings.\n  \"\"\"\n  let length: U8 = 0\n  let family: U8 = 0\n  let port: U16 = 0\n    \"\"\"\n    Port number in network byte order.\n\n    In order to obtain a host byte order port, use:\n\n    ```pony\n    let host_order_port: U16 = @ntohs[U16](net_address.port)\n    ```\n    \"\"\"\n  let addr: U32 = 0\n    \"\"\"\n    IPv4 address in network byte order.\n    Will be `0` for IPv6 addresses. Check with `ipv4()` and `ipv6()`.\n\n    Use `@ntohl[U32](net_address.addr)` to obtain it in the host byte order.\n    \"\"\"\n\n  let addr1: U32 = 0\n    \"\"\"\n    Bits 0-32 of the IPv6 address in network byte order.\n\n    `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`.\n    \"\"\"\n\n  let addr2: U32 = 0\n    \"\"\"\n    Bits 33-64 of the IPv6 address in network byte order.\n\n    `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`.\n    \"\"\"\n  let addr3: U32 = 0\n    \"\"\"\n    Bits 65-96 of the IPv6 address in network byte order.\n\n    `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`.\n    \"\"\"\n  let addr4: U32 = 0\n    \"\"\"\n    Bits 97-128 of the IPv6 address in network byte order.\n\n    `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`.\n    \"\"\"\n\n  let scope: U32 = 0\n    \"\"\"IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes.\"\"\"\n\n  fun ip4(): Bool =>\n    \"\"\"\n    Returns true for an IPv4 address.\n    \"\"\"\n    @pony_os_ipv4[Bool](this)\n\n  fun ip6(): Bool =>\n    \"\"\"\n    Returns true for an IPv6 address.\n    \"\"\"\n    @pony_os_ipv6[Bool](this)\n\n  fun name(\n    reversedns: (DNSLookupAuth | None) = None,\n    servicename: Bool = false)\n    : (String, String) ?\n  =>\n    \"\"\"\n    Returns the host and service name.\n\n    If `reversedns` is an instance of `DNSLookupAuth`\n    a DNS lookup will be executed and the hostname\n    for this address is returned as first element of the result tuple.\n    If no hostname could be found, an error is raised.\n    If `reversedns` is `None` the plain IP address is given\n    and no DNS lookup is executed.\n\n    If `servicename` is `false` the numeric port is returned\n    as second element of the result tuple.\n    If it is `true` the port is translated into its\n    corresponding servicename (e.g. port 80 is returned as `\"http\"`).\n\n    Internally this method uses the POSIX C function `getnameinfo`.\n    \"\"\"\n    var host: Pointer[U8] iso = recover Pointer[U8] end\n    var serv: Pointer[U8] iso = recover Pointer[U8] end\n    let reverse = reversedns isnt None\n\n    if not\n      @pony_os_nameinfo[Bool](this, addressof host, addressof serv, reverse,\n        servicename)\n    then\n      error\n    end\n\n    (recover String.from_cstring(consume host) end,\n      recover String.from_cstring(consume serv) end)\n\n  fun eq(that: NetAddress box): Bool =>\n    (this.length == that.length)\n      and (this.family == that.family)\n      and (this.port == that.port)\n      and (host_eq(that))\n      and (this.scope == that.scope)\n\n  fun host_eq(that: NetAddress box): Bool =>\n    if ip4() then\n      this.addr == that.addr\n    else\n      (this.addr1 == that.addr1)\n        and (this.addr2 == that.addr2)\n        and (this.addr3 == that.addr3)\n        and (this.addr4 == that.addr4)\n    end",
            "title": "net_address.pony"
        },
        {
            "location": "/src/net/dns/",
            "text": "type DNSLookupAuth is (AmbientAuth | NetAuth | DNSAuth)\n\nprimitive DNS\n  \"\"\"\n  Helper functions for resolving DNS queries.\n  \"\"\"\n  fun apply(auth: DNSLookupAuth, host: String, service: String)\n    : Array[NetAddress] iso^\n  =>\n    \"\"\"\n    Gets all IPv4 and IPv6 addresses for a host and service.\n    \"\"\"\n    _resolve(auth, 0, host, service)\n\n  fun ip4(auth: DNSLookupAuth, host: String, service: String)\n    : Array[NetAddress] iso^\n  =>\n    \"\"\"\n    Gets all IPv4 addresses for a host and service.\n    \"\"\"\n    _resolve(auth, 1, host, service)\n\n  fun ip6(auth: DNSLookupAuth, host: String, service: String)\n    : Array[NetAddress] iso^\n  =>\n    \"\"\"\n    Gets all IPv6 addresses for a host and service.\n    \"\"\"\n    _resolve(auth, 2, host, service)\n\n  fun broadcast_ip4(auth: DNSLookupAuth, service: String)\n    : Array[NetAddress] iso^\n  =>\n    \"\"\"\n    Link-local IP4 broadcast address.\n    \"\"\"\n    ip4(auth, \"255.255.255.255\", service)\n\n  fun broadcast_ip6(auth: DNSLookupAuth, service: String)\n    : Array[NetAddress] iso^\n  =>\n    \"\"\"\n    Link-local IP6 broadcast address.\n    \"\"\"\n    ip6(auth, \"FF02::1\", service)\n\n  fun is_ip4(host: String): Bool =>\n    \"\"\"\n    Returns true if the host is a literal IPv4 address.\n    \"\"\"\n    @pony_os_host_ip4[Bool](host.cstring())\n\n  fun is_ip6(host: String): Bool =>\n    \"\"\"\n    Returns true if the host is a literal IPv6 address.\n    \"\"\"\n    @pony_os_host_ip6[Bool](host.cstring())\n\n  fun _resolve(\n    auth: DNSLookupAuth,\n    family: U32,\n    host: String,\n    service: String)\n    : Array[NetAddress] iso^\n  =>\n    \"\"\"\n    Turns an addrinfo pointer into an array of addresses.\n    \"\"\"\n    var list = recover Array[NetAddress] end\n    var result = @pony_os_addrinfo[Pointer[U8]](family,\n      host.cstring(), service.cstring())\n\n    if not result.is_null() then\n      var addr = result\n\n      while not addr.is_null() do\n        let ip = recover NetAddress end\n        @pony_os_getaddr[None](addr, ip)\n        list.push(consume ip)\n        addr = @pony_os_nextaddr[Pointer[U8]](addr)\n      end\n\n      @freeaddrinfo[None](result)\n    end\n\n    list",
            "title": "dns.pony"
        },
        {
            "location": "/src/net/auth/",
            "text": "primitive NetAuth\n  new create(from: AmbientAuth) =>\n    None\n\nprimitive DNSAuth\n  new create(from: (AmbientAuth | NetAuth)) =>\n    None\n\nprimitive UDPAuth\n  new create(from: (AmbientAuth | NetAuth)) =>\n    None\n\nprimitive TCPAuth\n  new create(from: (AmbientAuth | NetAuth)) =>\n    None\n\nprimitive TCPListenAuth\n  new create(from: (AmbientAuth | NetAuth | TCPAuth)) =>\n    None\n\nprimitive TCPConnectAuth\n  new create(from: (AmbientAuth | NetAuth | TCPAuth)) =>\n    None",
            "title": "auth.pony"
        },
        {
            "location": "/src/net-ssl/x509/",
            "text": "use \"net\"\nuse \"collections\"\n\nprimitive _X509Name\nprimitive _GeneralName\nprimitive _GeneralNameStack\n\nprimitive X509\n  fun valid_for_host(cert: Pointer[X509], host: String): Bool =>\n    \"\"\"\n    Checks if an OpenSSL X509 certificate is valid for a given host.\n    \"\"\"\n    for name in all_names(cert).values() do\n      if _match_name(host, name) then\n        return true\n      end\n    end\n    false\n\n  fun common_name(cert: Pointer[X509]): String ? =>\n    \"\"\"\n    Get the common name for the certificate. Raises an error if the common name\n    contains any NULL bytes.\n    \"\"\"\n    if cert.is_null() then\n      error\n    end\n\n    let subject = @X509_get_subject_name[Pointer[_X509Name]](cert)\n    let len =\n      @X509_NAME_get_text_by_NID[I32](subject, I32(13), Pointer[U8], I32(0))\n\n    if len < 0 then\n      error\n    end\n\n    let common = recover String(len.usize()) end\n    @X509_NAME_get_text_by_NID[I32](subject, I32(13), common.cstring(),\n      len + 1)\n    common.recalc()\n\n    if common.size() != len.usize() then\n      error\n    end\n\n    common\n\n  fun all_names(cert: Pointer[X509]): Array[String] val =>\n    \"\"\"\n    Returns an array of all names for the certificate. Any names containing\n    NULL bytes are not included. This includes the common name and all subject\n    alternate names.\n    \"\"\"\n    let array = recover Array[String] end\n\n    if cert.is_null() then\n      return array\n    end\n\n    try\n      array.push(common_name(cert)?)\n    end\n\n    let stack =\n      @X509_get_ext_d2i[Pointer[_GeneralNameStack]](cert, I32(85),\n        Pointer[U8], Pointer[U8])\n\n    if stack.is_null() then\n      return array\n    end\n\n    var name =\n      ifdef \"openssl_1.1.0\" then\n        @OPENSSL_sk_pop[Pointer[_GeneralName]](stack)\n      else\n        @sk_pop[Pointer[_GeneralName]](stack)\n      end\n\n    while not name.is_null() do\n      var ptype = I32(0)\n      let value =\n        @GENERAL_NAME_get0_value[Pointer[U8] tag](name, addressof ptype)\n\n      match ptype\n      | 2 => // GEN_DNS\n        // Check for V_ASN1_IA5STRING\n        if @ASN1_STRING_type[I32](value) == 22 then\n          try\n            array.push(\n              recover\n                // Build a String from the ASN1 data.\n                let data = @ASN1_STRING_data[Pointer[U8]](value)\n                let len = @ASN1_STRING_length[I32](value)\n                let s = String.copy_cstring(data)\n\n                // If it contains NULL bytes, don't include it.\n                if s.size() != len.usize() then\n                  error\n                end\n\n                consume s\n              end)\n          end\n        end\n      | 7 => // GEN_IPADD\n        // Turn the IP address into a string.\n        array.push(\n          recover\n            // Build a String from the ASN1 data.\n            let data = @ASN1_STRING_data[Pointer[U8]](value)\n            let len = @ASN1_STRING_length[I32](value)\n            String.from_cstring(@pony_os_ip_string[Pointer[U8]](data, len))\n          end)\n      end\n\n      @GENERAL_NAME_free[None](name)\n      ifdef \"openssl_1.1.0\" then\n        name = @OPENSSL_sk_pop[Pointer[_GeneralName]](stack)\n      else\n        name = @sk_pop[Pointer[_GeneralName]](stack)\n      end\n    end\n\n    ifdef \"openssl_1.1.0\" then\n      @OPENSSL_sk_free[None](stack)\n    else\n      @sk_free[None](stack)\n    end\n    array\n\n  fun _match_name(host: String, name: String): Bool =>\n    \"\"\"\n    Returns true if the name extracted from the certificate is valid for the\n    given host.\n    \"\"\"\n    if DNS.is_ip4(host) or DNS.is_ip6(host) then\n      // If the host is a literal IP address, it must match exactly.\n      return host == name\n    end\n\n    if host.compare_sub(name, name.size(), 0, 0, true) is Equal then\n      // If the names are the same ignoring case, they match.\n      return true\n    end\n\n    try\n      if name(0)? == '*' then\n        // The name has a wildcard. Must be followed by at least two\n        // non-empty domain levels.\n        if (name.size() < 3) or (name(1)? != '.') or (name(2)? == '.') then\n          return false\n        end\n\n        try\n          // Find the second domain level and make sure it's followed by\n          // something other than a dot.\n          let offset = name.find(\".\", 3)?\n\n          if name.at_offset(offset + 1)? == '.' then\n            return false\n          end\n        end\n\n        // Get the host domain.\n        let domain = host.find(\".\")?\n\n        // If the host domain is the wildcard domain ignoring case, they match.\n        return\n          host.compare_sub(name, name.size() - 1, domain, 1, true) is Equal\n      end\n    end\n\n    false",
            "title": "x509.pony"
        },
        {
            "location": "/src/net-ssl/ssl_versions/",
            "text": "primitive SslAutoVersion                    fun val apply(): ULong => 0x0\n\nprimitive Ssl3Version                       fun val apply(): ULong => 0x300\nprimitive Tls1Version                       fun val apply(): ULong => 0x301\nprimitive Tls1u1Version                     fun val apply(): ULong => 0x302\nprimitive Tls1u2Version                     fun val apply(): ULong => 0x303\nprimitive Tls1u3Version                     fun val apply(): ULong => 0x304\nprimitive Dtls1Version                      fun val apply(): ULong => 0xFEFF\nprimitive Dtls1u2Version                    fun val apply(): ULong => 0xFEFD\n\nprimitive TlsMinVersion                     fun val apply(): ULong =>\n    Tls1Version.apply()\nprimitive TlsMaxVersion                     fun val apply(): ULong =>\n    Tls1u3Version.apply()\nprimitive DtlsMinVersion                    fun val apply(): ULong =>\n    Dtls1Version.apply()\nprimitive DtlsMaxVersion                    fun val apply(): ULong =>\n    Dtls1u2Version.apply()",
            "title": "ssl_versions.pony"
        },
        {
            "location": "/src/net-ssl/ssl_context/",
            "text": "use \"files\"\n\nuse @SSL_CTX_ctrl[ILong](\n  ctx: Pointer[_SSLContext] tag,\n  op: I32,\n  arg: ULong,\n  parg: Pointer[None])\n\nuse @SSLv23_method[Pointer[None]]()\nuse @TLS_method[Pointer[None]]()\nuse @SSL_CTX_new[Pointer[_SSLContext]](method: Pointer[None])\nuse @SSL_CTX_free[None](ctx: Pointer[_SSLContext] tag)\nuse @SSL_CTX_clear_options[ULong](ctx: Pointer[_SSLContext] tag, opts: ULong)\nuse @SSL_CTX_set_options[ULong](ctx: Pointer[_SSLContext] tag, opts: ULong)\n\nprimitive _SSLContext\n\nprimitive _SslCtrlSetOptions                fun val apply(): I32 => 32\nprimitive _SslCtrlClearOptions              fun val apply(): I32 => 77\n\n// These are the SSL_OP_NO_{SSL|TLS}vx{_x} in ssl.h.\n// Since Pony doesn't allow underscore we use camel case\n// and began them with underscore to keep them private.\n// Also, in the version strings the \"v\" becomes \"V\" and\n// the underscore \"_\" becomes \"u\". So SSL_OP_NO_TLSv1_2\n// _SslOpNo_TlsV1u2.\nprimitive _SslOpNoSslV2    fun val apply(): ULong =>    0x01000000 // 0 in 1.1\nprimitive _SslOpNoSslV3    fun val apply(): ULong =>    0x02000000\nprimitive _SslOpNoTlsV1    fun val apply(): ULong =>    0x04000000\nprimitive _SslOpNoTlsV1u2  fun val apply(): ULong =>    0x08000000\nprimitive _SslOpNoTlsV1u1  fun val apply(): ULong =>    0x10000000\nprimitive _SslOpNoTlsV1u3  fun val apply(): ULong =>    0x20000000\n\nprimitive _SslOpNoDtlsV1   fun val apply(): ULong =>    0x04000000\nprimitive _SslOpNoDtlsV1u2 fun val apply(): ULong =>    0x08000000\n\n// Defined as SSL_OP_NO_SSL_MASK in ssl.h\nprimitive _SslOpNoSslMask fun val apply(): ULong =>\n    (_SslOpNoSslV3.apply() + _SslOpNoTlsV1.apply() + _SslOpNoTlsV1u1.apply()\n      + _SslOpNoTlsV1u2.apply() + _SslOpNoTlsV1u3.apply())\n\n// Defined as SSL_OP_NO_DTLS_MASK in ssl.h\nprimitive _SslOpNoDtlsMask fun val apply(): ULong =>\n    (_SslOpNoDtlsV1.apply() + _SslOpNoDtlsV1u2.apply())\n\nclass val SSLContext\n  \"\"\"\n  An SSL context is used to create SSL sessions.\n  \"\"\"\n  var _ctx: Pointer[_SSLContext] tag\n  var _client_verify: Bool = true\n  var _server_verify: Bool = false\n\n  new create() =>\n    \"\"\"\n    Create an SSL context.\n    \"\"\"\n    ifdef \"openssl_1.1.0\" then\n      _ctx = @SSL_CTX_new(@TLS_method())\n\n      // Allow only newer ciphers.\n      try\n        set_min_proto_version(Tls1u2Version.apply())?\n        set_max_proto_version(SslAutoVersion.apply())?\n      end\n    else\n      _ctx = @SSL_CTX_new(@SSLv23_method())\n\n      // Disable \"all\" SSL/TSL options\n      _set_options(_SslOpNoSslMask.apply() + _SslOpNoSslV2.apply())\n\n      // Allow only newer ciphers\n      allow_tls_v1_2(true)\n    end\n\n  fun _set_options(opts: ULong) =>\n    ifdef \"openssl_1.1.0\" then\n      @SSL_CTX_set_options(_ctx, opts)\n    else\n      @SSL_CTX_ctrl(_ctx, _SslCtrlSetOptions.apply(), opts, Pointer[None])\n    end\n\n  fun _clear_options(opts: ULong) =>\n    ifdef \"openssl_1.1.0\" then\n      @SSL_CTX_clear_options(_ctx, opts)\n    else\n      @SSL_CTX_ctrl(_ctx, _SslCtrlClearOptions.apply(), opts, Pointer[None])\n    end\n\n  fun client(hostname: String = \"\"): SSL iso^ ? =>\n    \"\"\"\n    Create a client-side SSL session. If a hostname is supplied, the server\n    side certificate must be valid for that hostname.\n    \"\"\"\n    let ctx = _ctx\n    let verify = _client_verify\n    recover SSL._create(ctx, false, verify, hostname)? end\n\n  fun server(): SSL iso^ ? =>\n    \"\"\"\n    Create a server-side SSL session.\n    \"\"\"\n    let ctx = _ctx\n    let verify = _server_verify\n    recover SSL._create(ctx, true, verify)? end\n\n  fun ref set_cert(cert: FilePath, key: FilePath) ? =>\n    \"\"\"\n    The cert file is a PEM certificate chain. The key file is a private key.\n    Servers must set this. For clients, it is optional.\n    \"\"\"\n    if\n      _ctx.is_null()\n        or (cert.path.size() == 0)\n        or (key.path.size() == 0)\n        or (0 == @SSL_CTX_use_certificate_chain_file[I32](\n          _ctx, cert.path.cstring()))\n        or (0 == @SSL_CTX_use_PrivateKey_file[I32](\n          _ctx, key.path.cstring(), I32(1)))\n        or (0 == @SSL_CTX_check_private_key[I32](_ctx))\n    then\n      error\n    end\n\n  fun ref set_authority(\n    file: (FilePath | None),\n    path: (FilePath | None) = None)\n    ?\n  =>\n    \"\"\"\n    Use a PEM file and/or a directory of PEM files to specify certificate\n    authorities. Clients must set this. For servers, it is optional. Use None\n    to indicate no file or no path. Raises an error if these verify locations\n    aren't valid, or if both are None.\n    \"\"\"\n    let fs = try (file as FilePath).path else \"\" end\n    let ps = try (path as FilePath).path else \"\" end\n\n    let f = if fs.size() > 0 then fs.cstring() else Pointer[U8] end\n    let p = if ps.size() > 0 then ps.cstring() else Pointer[U8] end\n\n    if\n      _ctx.is_null()\n        or (f.is_null() and p.is_null())\n        or (0 == @SSL_CTX_load_verify_locations[I32](_ctx, f, p))\n    then\n      error\n    end\n\n  fun ref set_ciphers(ciphers: String) ? =>\n    \"\"\"\n    Set the accepted ciphers. This replaces the existing list. Raises an error\n    if the cipher list is invalid.\n    \"\"\"\n    if\n      _ctx.is_null()\n        or (0 == @SSL_CTX_set_cipher_list[I32](_ctx, ciphers.cstring()))\n    then\n      error\n    end\n\n  fun ref set_client_verify(state: Bool) =>\n    \"\"\"\n    Set to true to require verification. Defaults to true.\n    \"\"\"\n    _client_verify = state\n\n  fun ref set_server_verify(state: Bool) =>\n    \"\"\"\n    Set to true to require verification. Defaults to false.\n    \"\"\"\n    _server_verify = state\n\n  fun ref set_verify_depth(depth: U32) =>\n    \"\"\"\n    Set the verify depth. Defaults to 6.\n    \"\"\"\n    if not _ctx.is_null() then\n      @SSL_CTX_set_verify_depth[None](_ctx, depth)\n    end\n\n  fun ref set_min_proto_version(version: ULong) ? =>\n    \"\"\"\n    Set minimum protocol version. Set to SslAutoVersion, 0,\n    to automatically manage lowest version.\n\n    Supported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                        Tls1u2Version, Tls1u3Version, Dtls1Version,\n                        Dtls1u2Version\n    \"\"\"\n    let result = @SSL_CTX_ctrl(_ctx, _SslCtrlSetMinProtoVersion.apply(),\n        version, Pointer[None])\n    if result == 0 then\n      error\n    end\n\n  fun ref get_min_proto_version(): ILong =>\n    \"\"\"\n    Get minimum protocol version. Returns SslAutoVersion, 0,\n    when automatically managing lowest version.\n\n    Supported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                        Tls1u2Version, Tls1u3Version, Dtls1Version,\n                        Dtls1u2Version\n    \"\"\"\n    @SSL_CTX_ctrl(_ctx, _SslCtrlGetMinProtoVersion.apply(), 0, Pointer[None])\n\n  fun ref set_max_proto_version(version: ULong) ? =>\n    \"\"\"\n    Set maximum protocol version. Set to SslAutoVersion, 0,\n    to automatically manage higest version.\n\n    Supported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                        Tls1u2Version, Tls1u3Version, Dtls1Version,\n                        Dtls1u2Version\n    \"\"\"\n    let result = @SSL_CTX_ctrl(_ctx, _SslCtrlSetMaxProtoVersion.apply(),\n        version, Pointer[None])\n    if result == 0 then\n      error\n    end\n\n  fun ref get_max_proto_version(): ILong =>\n    \"\"\"\n    Get maximum protocol version. Returns SslAutoVersion, 0,\n    when automatically managing highest version.\n\n    Supported versions: Ssl3Version, Tls1Version, Tls1u1Version,\n                        Tls1u2Version, Tls1u3Version, Dtls1Version,\n                        Dtls1u2Version\n    \"\"\"\n    @SSL_CTX_ctrl(_ctx, _SslCtrlGetMaxProtoVersion.apply(), 0, Pointer[None])\n\n  fun ref allow_tls_v1(state: Bool) =>\n    \"\"\"\n    Allow TLS v1. Defaults to false.\n    Deprecated: use set_min_proto_version and set_max_proto_version\n    \"\"\"\n    if not _ctx.is_null() then\n      if state then\n        _clear_options(_SslOpNoTlsV1.apply())\n      else\n        _set_options(_SslOpNoTlsV1.apply())\n      end\n    end\n\n  fun ref allow_tls_v1_1(state: Bool) =>\n    \"\"\"\n    Allow TLS v1.1. Defaults to false.\n    Deprecated: use set_min_proto_version and set_max_proto_version\n    \"\"\"\n    if not _ctx.is_null() then\n      if state then\n        _clear_options(_SslOpNoTlsV1u1.apply())\n      else\n        _set_options(_SslOpNoTlsV1u1.apply())\n      end\n    end\n\n  fun ref allow_tls_v1_2(state: Bool) =>\n    \"\"\"\n    Allow TLS v1.2. Defaults to true.\n    Deprecated: use set_min_proto_version and set_max_proto_version\n    \"\"\"\n    if not _ctx.is_null() then\n      if state then\n        _clear_options(_SslOpNoTlsV1u2.apply())\n      else\n        _set_options(_SslOpNoTlsV1u2.apply())\n      end\n    end\n\n  fun ref dispose() =>\n    \"\"\"\n    Free the SSL context.\n    \"\"\"\n    if not _ctx.is_null() then\n      @SSL_CTX_free(_ctx)\n      _ctx = Pointer[_SSLContext]\n    end\n\n  fun _final() =>\n    \"\"\"\n    Free the SSL context.\n    \"\"\"\n    if not _ctx.is_null() then\n      @SSL_CTX_free(_ctx)\n    end",
            "title": "ssl_context.pony"
        },
        {
            "location": "/src/net-ssl/ssl_connection/",
            "text": "use \"collections\"\nuse \"net\"\n\nclass SSLConnection is TCPConnectionNotify\n  \"\"\"\n  Wrap another protocol in an SSL connection.\n  \"\"\"\n  let _notify: TCPConnectionNotify\n  let _ssl: SSL\n  var _connected: Bool = false\n  var _expect: USize = 0\n  var _closed: Bool = false\n  let _pending: List[ByteSeq] = _pending.create()\n\n  new iso create(notify: TCPConnectionNotify iso, ssl: SSL iso) =>\n    \"\"\"\n    Initialise with a wrapped protocol and an SSL session.\n    \"\"\"\n    _notify = consume notify\n    _ssl = consume ssl\n\n  fun ref accepted(conn: TCPConnection ref) =>\n    \"\"\"\n    Forward to the wrapped protocol.\n    \"\"\"\n    _notify.accepted(conn)\n\n  fun ref connecting(conn: TCPConnection ref, count: U32) =>\n    \"\"\"\n    Forward to the wrapped protocol.\n    \"\"\"\n    _notify.connecting(conn, count)\n\n  fun ref connected(conn: TCPConnection ref) =>\n    \"\"\"\n    Swallow this event until the handshake is complete.\n    \"\"\"\n    _poll(conn)\n\n  fun ref connect_failed(conn: TCPConnection ref) =>\n    \"\"\"\n    Forward to the wrapped protocol.\n    \"\"\"\n    _notify.connect_failed(conn)\n\n  fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq =>\n    \"\"\"\n    Pass the data to the SSL session and check for both new application data\n    and new destination data.\n    \"\"\"\n    let notified = _notify.sent(conn, data)\n    if _connected then\n      try\n        _ssl.write(notified)?\n      else\n        return \"\"\n      end\n    else\n      _pending.push(notified)\n    end\n\n    _poll(conn)\n    \"\"\n\n  fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter =>\n    for bytes in data.values() do\n      sent(conn, bytes)\n    end\n\n  recover val Array[ByteSeq] end\n\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  =>\n    \"\"\"\n    Pass the data to the SSL session and check for both new application data\n    and new destination data.\n    \"\"\"\n    _ssl.receive(consume data)\n    _poll(conn)\n    true\n\n  fun ref expect(conn: TCPConnection ref, qty: USize): USize =>\n    \"\"\"\n    Keep track of the expect count for the wrapped protocol. Always tell the\n    TCPConnection to read all available data.\n    \"\"\"\n    _expect = _notify.expect(conn, qty)\n    0\n\n  fun ref closed(conn: TCPConnection ref) =>\n    \"\"\"\n    Forward to the wrapped protocol.\n    \"\"\"\n    _closed = true\n\n    _poll(conn)\n    _ssl.dispose()\n\n    _connected = false\n    _pending.clear()\n    _notify.closed(conn)\n\n  fun ref _poll(conn: TCPConnection ref) =>\n    \"\"\"\n    Checks for both new application data and new destination data. Informs the\n    wrapped protocol that is has connected when the handshake is complete.\n    \"\"\"\n    match _ssl.state()\n    | SSLReady =>\n      if not _connected then\n        _connected = true\n        _notify.connected(conn)\n\n        try\n          while _pending.size() > 0 do\n            _ssl.write(_pending.shift()?)?\n          end\n        end\n      end\n    | SSLAuthFail =>\n      _notify.auth_failed(conn)\n\n      if not _closed then\n        conn.close()\n      end\n\n      return\n    | SSLError =>\n      if not _closed then\n        conn.close()\n      end\n\n      return\n    end\n\n    try\n      var received_called: USize = 0\n\n      while true do\n        let r = _ssl.read(_expect)\n\n        if r isnt None then\n          received_called = received_called + 1\n          _notify.received(conn,\n            (consume r) as Array[U8] iso^,\n            received_called)\n        else\n          break\n        end\n      end\n    end\n\n    try\n      while _ssl.can_send() do\n        conn.write_final(_ssl.send()?)\n      end\n    end",
            "title": "ssl_connection.pony"
        },
        {
            "location": "/src/net-ssl/ssl/",
            "text": "use \"net\"\n\nuse @SSL_ctrl[ILong](\n  ssl: Pointer[_SSL],\n  op: I32,\n  arg: ILong,\n  parg: Pointer[None])\n\nprimitive _SSL\nprimitive _BIO\n\nprimitive SSLHandshake\nprimitive SSLAuthFail\nprimitive SSLReady\nprimitive SSLError\n\ntype SSLState is (SSLHandshake | SSLAuthFail | SSLReady | SSLError)\n\nclass SSL\n  \"\"\"\n  An SSL session manages handshakes, encryption and decryption. It is not tied\n  to any transport layer.\n  \"\"\"\n  let _hostname: String\n  var _ssl: Pointer[_SSL]\n  var _input: Pointer[_BIO] tag\n  var _output: Pointer[_BIO] tag\n  var _state: SSLState = SSLHandshake\n  var _read_buf: Array[U8] iso = recover Array[U8] end\n\n  new _create(\n    ctx: Pointer[_SSLContext] tag,\n    server: Bool,\n    verify: Bool,\n    hostname: String = \"\")\n    ?\n  =>\n    \"\"\"\n    Create a client or server SSL session from a context.\n    \"\"\"\n    if ctx.is_null() then error end\n    _hostname = hostname\n\n    _ssl = @SSL_new[Pointer[_SSL]](ctx)\n    if _ssl.is_null() then error end\n\n    let mode = if verify then I32(3) else I32(0) end\n    @SSL_set_verify[None](_ssl, mode, Pointer[U8])\n\n    _input = @BIO_new[Pointer[_BIO]](@BIO_s_mem[Pointer[U8]]())\n    if _input.is_null() then error end\n\n    _output = @BIO_new[Pointer[_BIO]](@BIO_s_mem[Pointer[U8]]())\n    if _output.is_null() then error end\n\n    @SSL_set_bio[None](_ssl, _input, _output)\n\n    if\n      (_hostname.size() > 0)\n        and not DNS.is_ip4(_hostname)\n        and not DNS.is_ip6(_hostname)\n    then\n      // SSL_set_tlsext_host_name\n      @SSL_ctrl(_ssl, 55, 0, _hostname.cstring())\n    end\n\n    if server then\n      @SSL_set_accept_state[None](_ssl)\n    else\n      @SSL_set_connect_state[None](_ssl)\n      @SSL_do_handshake[I32](_ssl)\n    end\n\n  fun state(): SSLState =>\n    \"\"\"\n    Returns the SSL session state.\n    \"\"\"\n    _state\n\n  fun ref read(expect: USize = 0): (Array[U8] iso^ | None) =>\n    \"\"\"\n    Returns unencrypted bytes to be passed to the application. If `expect` is\n    non-zero, the number of bytes returned will be exactly `expect`. If no data\n    (or less than `expect` bytes) is available, this returns None.\n    \"\"\"\n    let offset = _read_buf.size()\n\n    var len = if expect > 0 then\n      if offset >= expect then\n        return _read_buf = recover Array[U8] end\n      end\n\n      expect - offset\n    else\n      1024\n    end\n\n    let max = if expect > 0 then expect - offset else USize.max_value() end\n    let pending = @SSL_pending[I32](_ssl).usize()\n\n    if pending > 0 then\n      if expect > 0 then\n        len = len.min(pending)\n      else\n        len = pending\n      end\n\n      _read_buf.undefined(offset + len)\n      @SSL_read[I32](_ssl, _read_buf.cpointer().usize() + offset, len.i32())\n    else\n      _read_buf.undefined(offset + len)\n      let r =\n        @SSL_read[I32](_ssl, _read_buf.cpointer().usize() + offset, len.i32())\n\n      if r <= 0 then\n        match @SSL_get_error[I32](_ssl, r)\n        | 1 | 5 | 6 => _state = SSLError\n        end\n\n        _read_buf.truncate(offset)\n      else\n        _read_buf.truncate(offset + r.usize())\n      end\n    end\n\n    let ready = if expect == 0 then\n      _read_buf.size() > 0\n    else\n      _read_buf.size() == expect\n    end\n\n    if ready then\n      _read_buf = recover Array[U8] end\n    else\n      None\n    end\n\n  fun ref write(data: ByteSeq) ? =>\n    \"\"\"\n    When application data is sent, add it to the SSL session. Raises an error\n    if the handshake is not complete.\n    \"\"\"\n    if _state isnt SSLReady then error end\n\n    if data.size() > 0 then\n      @SSL_write[I32](_ssl, data.cpointer(), data.size().u32())\n    end\n\n  fun ref receive(data: ByteSeq) =>\n    \"\"\"\n    When data is received, add it to the SSL session.\n    \"\"\"\n    @BIO_write[I32](_input, data.cpointer(), data.size().u32())\n\n    if _state is SSLHandshake then\n      let r = @SSL_do_handshake[I32](_ssl)\n\n      if r > 0 then\n        _verify_hostname()\n      else\n        match @SSL_get_error[I32](_ssl, r)\n        | 1 => _state = SSLAuthFail\n        | 5 | 6 => _state = SSLError\n        end\n      end\n    end\n\n  fun ref can_send(): Bool =>\n    \"\"\"\n    Returns true if there are encrypted bytes to be passed to the destination.\n    \"\"\"\n    @BIO_ctrl_pending[USize](_output) > 0\n\n  fun ref send(): Array[U8] iso^ ? =>\n    \"\"\"\n    Returns encrypted bytes to be passed to the destination. Raises an error\n    if no data is available.\n    \"\"\"\n    let len = @BIO_ctrl_pending[USize](_output)\n    if len == 0 then error end\n\n    let buf = recover Array[U8] .> undefined(len) end\n    @BIO_read[I32](_output, buf.cpointer(), buf.size().u32())\n    buf\n\n  fun ref dispose() =>\n    \"\"\"\n    Dispose of the session.\n    \"\"\"\n    if not _ssl.is_null() then\n      @SSL_free[None](_ssl)\n      _ssl = Pointer[_SSL]\n    end\n\n  fun _final() =>\n    \"\"\"\n    Dispose of the session.\n    \"\"\"\n    if not _ssl.is_null() then\n      @SSL_free[None](_ssl)\n    end\n\n  fun ref _verify_hostname() =>\n    \"\"\"\n    Verify that the certificate is valid for the given hostname.\n    \"\"\"\n    if _hostname.size() > 0 then\n      let cert = @SSL_get_peer_certificate[Pointer[X509]](_ssl)\n      let ok = X509.valid_for_host(cert, _hostname)\n\n      if not cert.is_null() then\n        @X509_free[None](cert)\n      end\n\n      if not ok then\n        _state = SSLAuthFail\n        return\n      end\n    end\n\n    _state = SSLReady",
            "title": "ssl.pony"
        },
        {
            "location": "/src/ponytest/unit_test/",
            "text": "trait UnitTest\n  \"\"\"\n  Each unit test class must provide this trait. Simple tests only need to\n  define the name() and apply() functions. The remaining functions specify\n  additional test options.\n  \"\"\"\n\n  fun name(): String\n    \"\"\"\n    Report the test name, which is used when printing test results and on the\n    command line to select tests to run.\n    \"\"\"\n\n  fun exclusion_group(): String =>\n    \"\"\"\n    Report the test exclusion group, returning an empty string for none.\n    The default body returns an empty string.\n    \"\"\"\n    \"\"\n\n  fun ref apply(h: TestHelper) ?\n    \"\"\"\n    Run the test.\n    Raising an error is interpreted as a test failure.\n    \"\"\"\n\n  fun ref timed_out(h: TestHelper) =>\n    \"\"\"\n    Tear down a possibly hanging test.\n    Called when the timeout specified by to long_test() expires.\n    There is no need for this function to call complete(false).\n    tear_down() will still be called after this completes.\n    The default is to do nothing.\n    \"\"\"\n    None\n\n  fun ref tear_down(h: TestHelper) =>\n    \"\"\"\n    Tidy up after the test has completed.\n    Called for each run test, whether that test passed, succeeded or timed out.\n    The default is to do nothing.\n    \"\"\"\n    None\n\n  fun label(): String =>\n    \"\"\"\n    Report the test label, returning an empty string for none.\n    It can be later use to filter tests which we want to run, by labels.\n    \"\"\"\n    \"\"",
            "title": "unit_test.pony"
        },
        {
            "location": "/src/ponytest/test_list/",
            "text": "trait TestList\n  \"\"\"\n  Source of unit tests for a PonyTest object.\n  See package doc string for further information and example use.\n  \"\"\"\n\n  fun tag tests(test: PonyTest)\n    \"\"\"\n    Add all the tests in this suite to the given test object.\n    Typically the implementation of this function will be of the form:\n    ```pony\n    fun tests(test: PonyTest) =>\n      test(_TestClass1)\n      test(_TestClass2)\n      test(_TestClass3)\n    ```\n    \"\"\"",
            "title": "test_list.pony"
        },
        {
            "location": "/src/ponytest/test_helper/",
            "text": "interface ITest\n  fun apply() ?\n\nclass val TestHelper\n  \"\"\"\n  Per unit test class that provides control, logging and assertion functions.\n\n  Each unit test is given a TestHelper when it is run. This is val and so can\n  be passed between methods and actors within the test without restriction.\n\n  The assertion functions check the relevant condition and mark the test as a\n  failure if appropriate. The success or failure of the condition is reported\n  back as a Bool which can be checked if a different code path is needed when\n  that condition fails.\n\n  All assert functions take an optional message argument. This is simply a\n  string that is printed as part of the error message when the condition fails.\n  It is intended to aid identifying what failed.\n  \"\"\"\n\n  let _runner: _TestRunner\n  let env: Env\n    \"\"\"\n    The process environment.\n\n    This is useful for getting the [root authority](builtin-AmbienAuth) in order to access\n    the filesystem (See [files](files--index)) or the network (See [net](net--index))\n    in your tests.\n    \"\"\"\n\n  new val _create(runner: _TestRunner, env': Env) =>\n    \"\"\"\n    Create a new TestHelper.\n    \"\"\"\n    env = env'\n    _runner = runner\n\n  fun log(msg: String, verbose: Bool = false) =>\n    \"\"\"\n    Log the given message.\n\n    The verbose parameter allows messages to be printed only when the --verbose\n    command line option is used. For example, by default assert failures are\n    logged, but passes are not. With --verbose both passes and fails are\n    reported.\n\n    Logs are printed one test at a time to avoid interleaving log lines from\n    concurrent tests.\n    \"\"\"\n    _runner.log(msg, verbose)\n\n  fun fail(msg: String = \"Test failed\") =>\n    \"\"\"\n    Flag the test as having failed.\n    \"\"\"\n    _runner.fail(msg)\n\n  fun assert_true(actual: Bool, msg: String = \"\", loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the given expression is true.\n    \"\"\"\n    if not actual then\n      fail(_format_loc(loc) + \"Assert true failed. \" + msg)\n      return false\n    end\n    log(_format_loc(loc) + \"Assert true passed. \" + msg, true)\n    true\n\n  fun assert_false(actual: Bool, msg: String = \"\", loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the given expression is false.\n    \"\"\"\n    if actual then\n      fail(_format_loc(loc) + \"Assert false failed. \" + msg)\n      return false\n    end\n    log(_format_loc(loc) + \"Assert false passed. \" + msg, true)\n    true\n\n  fun assert_error(test: ITest box, msg: String = \"\", loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the given test function throws an error when run.\n    \"\"\"\n    try\n      test()?\n      fail(_format_loc(loc) + \"Assert error failed. \" + msg)\n      false\n    else\n      log(_format_loc(loc) + \"Assert error passed. \" + msg, true)\n      true\n    end\n\n  fun assert_no_error(\n    test: ITest box,\n    msg: String = \"\",\n    loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the gived test function does not throw an error when run.\n    \"\"\"\n    try\n      test()?\n      log(_format_loc(loc) + \"Assert no error passed. \" + msg, true)\n      true\n    else\n      fail(_format_loc(loc) + \"Assert no error failed. \" + msg)\n      true\n    end\n\n  fun assert_is[A](\n    expect: A,\n    actual: A,\n    msg: String = \"\",\n    loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the 2 given expressions resolve to the same instance\n    \"\"\"\n    _check_is[A](\"is\", consume expect, consume actual, msg, loc)\n\n  fun _check_is[A](\n    check: String,\n    expect: A,\n    actual: A,\n    msg: String,\n    loc: SourceLoc)\n    : Bool\n  =>\n    \"\"\"\n    Check that the 2 given expressions resolve to the same instance\n    \"\"\"\n    if expect isnt actual then\n      fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg\n        + \" Expected (\" + (digestof expect).string() + \") is (\"\n        + (digestof actual).string() + \")\")\n      return false\n    end\n\n    log(\n      _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg\n        + \" Got (\" + (digestof expect).string() + \") is (\"\n        + (digestof actual).string() + \")\",\n      true)\n    true\n\n  fun assert_eq[A: (Equatable[A] #read & Stringable #read)]\n    (expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc): Bool\n  =>\n    \"\"\"\n    Assert that the 2 given expressions are equal.\n    \"\"\"\n    _check_eq[A](\"eq\", expect, actual, msg, loc)\n\n  fun _check_eq[A: (Equatable[A] #read & Stringable)]\n    (check: String, expect: A, actual: A, msg: String, loc: SourceLoc)\n    : Bool\n  =>\n    \"\"\"\n    Check that the 2 given expressions are equal.\n    \"\"\"\n    if expect != actual then\n      fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg\n        + \" Expected (\" + expect.string() + \") == (\" + actual.string() + \")\")\n      return false\n    end\n\n    log(_format_loc(loc) + \"Assert \" + check + \" passed. \" + msg\n      + \" Got (\" + expect.string() + \") == (\" + actual.string() + \")\", true)\n    true\n\n  fun assert_isnt[A](\n    not_expect: A,\n    actual: A,\n    msg: String = \"\",\n    loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the 2 given expressions resolve to different instances.\n    \"\"\"\n    _check_isnt[A](\"isn't\", consume not_expect, consume actual, msg, loc)\n\n  fun _check_isnt[A](\n    check: String,\n    not_expect: A,\n    actual: A,\n    msg: String,\n    loc: SourceLoc)\n    : Bool\n  =>\n    \"\"\"\n    Check that the 2 given expressions resolve to different instances.\n    \"\"\"\n    if not_expect is actual then\n      fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg\n        + \" Expected (\" + (digestof not_expect).string() + \") isnt (\"\n        + (digestof actual).string() + \")\")\n      return false\n    end\n\n    log(\n      _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg\n        + \" Got (\" + (digestof not_expect).string() + \") isnt (\"\n        + (digestof actual).string() + \")\",\n      true)\n    true\n\n  fun assert_ne[A: (Equatable[A] #read & Stringable #read)]\n    (not_expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc): Bool\n  =>\n    \"\"\"\n    Assert that the 2 given expressions are not equal.\n    \"\"\"\n    _check_ne[A](\"ne\", not_expect, actual, msg, loc)\n\n  fun _check_ne[A: (Equatable[A] #read & Stringable)]\n    (check: String, not_expect: A, actual: A, msg: String, loc: SourceLoc)\n    : Bool\n  =>\n    \"\"\"\n    Check that the 2 given expressions are not equal.\n    \"\"\"\n    if not_expect == actual then\n      fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg\n        + \" Expected (\" + not_expect.string() + \") != (\" + actual.string()\n        + \")\")\n      return false\n    end\n\n    log(\n      _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg\n        + \" Got (\" + not_expect.string() + \") != (\" + actual.string() + \")\",\n      true)\n    true\n\n  fun assert_array_eq[A: (Equatable[A] #read & Stringable #read)](\n    expect: ReadSeq[A],\n    actual: ReadSeq[A],\n    msg: String = \"\",\n    loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the contents of the 2 given ReadSeqs are equal.\n    \"\"\"\n    var ok = true\n\n    if expect.size() != actual.size() then\n      ok = false\n    else\n      try\n        var i: USize = 0\n        while i < expect.size() do\n          if expect(i)? != actual(i)? then\n            ok = false\n            break\n          end\n\n          i = i + 1\n        end\n      else\n        ok = false\n      end\n    end\n\n    if not ok then\n      fail(_format_loc(loc) + \"Assert EQ failed. \" + msg + \" Expected (\"\n        + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\")\n      return false\n    end\n\n    log(\n      _format_loc(loc) + \"Assert EQ passed. \" + msg + \" Got (\"\n        + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\",\n      true)\n    true\n\n  fun assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)](\n    expect: ReadSeq[A],\n    actual: ReadSeq[A],\n    msg: String = \"\",\n    loc: SourceLoc = __loc)\n    : Bool\n  =>\n    \"\"\"\n    Assert that the contents of the 2 given ReadSeqs are equal ignoring order.\n    \"\"\"\n    try\n      let missing = Array[box->A]\n      let consumed = Array[Bool].init(false, actual.size())\n      for e in expect.values() do\n        var found = false\n        var i: USize = -1\n        for a in actual.values() do\n          i = i + 1\n          if consumed(i)? then continue end\n          if e == a then\n            consumed.update(i, true)?\n            found = true\n            break\n          end\n        end\n        if not found then\n          missing.push(e)\n        end\n      end\n\n      let extra = Array[box->A]\n      for (i, c) in consumed.pairs() do\n        if not c then extra.push(actual(i)?) end\n      end\n\n      if (extra.size() != 0) or (missing.size() != 0) then\n        fail(\n          _format_loc(loc) + \"Assert EQ_UNORDERED failed. \" + msg\n            + \" Expected (\" + _print_array[A](expect) + \") == (\"\n            + _print_array[A](actual) + \"):\"\n            + \"\\nMissing: \" + _print_array[box->A](missing)\n            + \"\\nExtra: \" + _print_array[box->A](extra))\n        return false\n      end\n      log(\n        _format_loc(loc) + \"Assert EQ_UNORDERED passed. \" + msg + \" Got (\"\n          + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\",\n        true)\n      true\n    else\n      fail(\"Assert EQ_UNORDERED failed from an internal error.\")\n      false\n    end\n\n  fun _format_loc(loc: SourceLoc): String =>\n    loc.file() + \":\" + loc.line().string() + \": \"\n\n  fun _print_array[A: Stringable #read](array: ReadSeq[A]): String =>\n    \"\"\"\n    Generate a printable string of the contents of the given readseq to use in\n    error messages.\n    \"\"\"\n    \"[len=\" + array.size().string() + \": \" + \", \".join(array.values()) + \"]\"\n\n  fun long_test(timeout: U64) =>\n    \"\"\"\n    Indicate that this is a long running test that may continue after the\n    test function exits.\n    Once this function is called, complete() must be called to finish the test,\n    unless a timeout occurs.\n    The timeout is specified in nanseconds.\n    \"\"\"\n    _runner.long_test(timeout)\n\n  fun complete(success: Bool) =>\n    \"\"\"\n    MUST be called by each long test to indicate the test has finished, unless\n    a timeout occurs.\n\n    The \"success\" parameter specifies whether the test succeeded. However if\n    any asserts fail the test will be considered a failure, regardless of the\n    value of this parameter.\n\n    Once this is called tear_down() may be called at any time.\n    \"\"\"\n    _runner.complete(success)\n\n  fun expect_action(name: String) =>\n    \"\"\"\n    Can be called in a long test to set up expectations for one or more actions\n    that, when all completed, will complete the test.\n\n    This pattern is useful for cases where you have multiple things that need\n    to happen to complete your test, but don't want to have to collect them\n    all yourself into a single actor that calls the complete method.\n\n    The order of calls to expect_action don't matter - the actions may be\n    completed in any other order to complete the test.\n    \"\"\"\n    _runner.expect_action(name)\n\n  fun complete_action(name: String) =>\n    \"\"\"\n    MUST be called for each action expectation that was set up in a long test\n    to fulfill the expectations. Any expectations that are still outstanding\n    when the long test timeout runs out will be printed by name when it fails.\n\n    Completing all outstanding actions is enough to finish the test. There's no\n    need to also call the complete method when the actions are finished.\n\n    Calling the complete method will finish the test immediately, without\n    waiting for any outstanding actions to be completed.\n    \"\"\"\n    _runner.complete_action(name, true)\n\n  fun fail_action(name: String) =>\n    \"\"\"\n    Call to fail an action, which will also cause the entire test to fail\n    immediately, without waiting the rest of the outstanding actions.\n\n    The name of the failed action will be included in the failure output.\n\n    Usually the action name should be an expected action set up by a call to\n    expect_action, but failing unexpected actions will also fail the test.\n    \"\"\"\n    _runner.complete_action(name, false)\n\n  fun dispose_when_done(disposable: DisposableActor) =>\n    \"\"\"\n    Pass a disposable actor to be disposed of when the test is complete.\n    The actor will be disposed no matter whether the test succeeds or fails.\n\n    If the test is already tearing down, the actor will be disposed immediately.\n    \"\"\"\n    _runner.dispose_when_done(disposable)",
            "title": "test_helper.pony"
        },
        {
            "location": "/src/ponytest/pony_test/",
            "text": "\"\"\"\n# PonyTest package\n\nThe PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.\n\nTo help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:\n\n* builtin\n* time\n* collections\n\nEach unit test is a class, with a single test function. By default all tests\nrun concurrently.\n\nEach test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.\n\nWhen any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.\n\n## Example program\n\nTo use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.\n\nThe following is a complete program with 2 trivial tests.\n\n```pony\nuse \"ponytest\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String => \"addition\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String => \"subtraction\"\n\n  fun apply(h: TestHelper) =>\n    h.assert_eq[U32](2, 4 - 2)\n```\n\nThe make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.\n\nMain.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.\n\n## Test names\n\nTests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.\n\nArbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.\n\nYou can skip any tests whose names start with a given string by using the\n`--exclude=[prefix]` command line option.\n\nYou can run only tests whose names start with a given string by using the\n`--only=[prefix]` command line option.\n\n## Aggregation\n\nOften it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.\n\nThis can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages `foo` and `bar`.\n\n```pony\nuse \"ponytest\"\nuse foo = \"foo\"\nuse bar = \"bar\"\n\nactor Main is TestList\n  new create(env: Env) =>\n    PonyTest(env, this)\n\n  new make() =>\n    None\n\n  fun tag tests(test: PonyTest) =>\n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)\n```\n\nAggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.\n\n## Long tests\n\nSimple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.\n\nLong tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.\n\nThe complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.\n\nSince failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.\n\nOn a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.\n\nNote that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.\n\nTimeouts should not be used as the standard method of detecting if a test has\nfailed.\n\n## Exclusion groups\n\nBy default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.\n\nNo tests that are in the same exclusion group will be run concurrently.\n\nExclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.\n\nThe command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.\n\n## Labels\n\nTest can have label. Labels are used to filter which tests are run, by setting\ncommand line argument `--label=[some custom label]`. It can be used to separate\nunit tests from integration tests.\n\nBy default label is empty. You can set it up by overriding `label(): String`\nmethod in unit test.\n\n```pony\nuse \"ponytest\"\n\nclass iso _I8AddTest is UnitTest\n  fun name(): String => \"_I8AddTest\"\n  fun label(): String => \"simple\"\n  fun apply(h: TestHelper) =>\n    h.assert_eq[I8](1, 1)\n\n```\n\n## Tear down\n\nEach unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.\n\nThe tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.\n\nWhen a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.\n\nThe test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.\n\n\"\"\"\n\nuse \"time\"\n\nactor PonyTest\n  \"\"\"\n  Main test framework actor that organises tests, collates information and\n  prints results.\n  \"\"\"\n\n  embed _groups: Array[(String, _Group)] = Array[(String, _Group)]\n  embed _records: Array[_TestRecord] = Array[_TestRecord]\n  let _env: Env\n  let _timers: Timers = Timers\n  var _do_nothing: Bool = false\n  var _verbose: Bool = false\n  var _sequential: Bool = false\n  var _no_prog: Bool = false\n  var _list_only: Bool = false\n  var _started: USize = 0\n  var _finished: USize = 0\n  var _any_found: Bool = false\n  var _all_started: Bool = false\n\n  // Filtering options\n  var _exclude: String = \"\"\n  var _label: String = \"\"\n  var _only: String = \"\"\n\n  new create(env: Env, list: TestList tag) =>\n    \"\"\"\n    Create a PonyTest object and use it to run the tests from the given\n    TestList\n    \"\"\"\n    _env = env\n    _process_opts()\n    _groups.push((\"\", _SimultaneousGroup))\n    list.tests(this)\n    _all_tests_applied()\n\n  be apply(test: UnitTest iso) =>\n    \"\"\"\n    Run the given test, subject to our filters and options.\n    \"\"\"\n    if _do_nothing then\n      return\n    end\n\n    var name = test.name()\n\n    // Ignore any tests that satisfy our \"exclude\" filter\n    if (_exclude != \"\") and name.at(_exclude, 0) then\n      return\n    end\n\n    // Ignore any tests that don't satisfy our \"only\" filter\n    if (_only != \"\") and (not name.at(_only, 0)) then\n      return\n    end\n\n    // Ignore tests when label arg is set and test label doesn't match\n    if (_label != \"\") and (_label != test.label()) then\n      return\n    end\n\n    _any_found = true\n\n    if _list_only then\n      // Don't actually run tests, just list them\n      _env.out.print(name)\n      return\n    end\n\n    var index = _records.size()\n    _records.push(_TestRecord(_env, name))\n\n    var group = _find_group(test.exclusion_group())\n    group(_TestRunner(this, index, consume test, group, _verbose, _env,\n      _timers))\n\n  fun ref _find_group(group_name: String): _Group =>\n    \"\"\"\n    Find the group to use for the given group name, subject to the\n    --sequential flag.\n    \"\"\"\n    var name = group_name\n\n    if _sequential then\n      // Use the same group for all tests.\n      name = \"all\"\n    end\n\n    for g in _groups.values() do\n      if g._1 == name then\n        return g._2\n      end\n    end\n\n    // Group doesn't exist yet, make it.\n    // We only need one simultaneous group, which we've already made. All new\n    // groups are exclusive.\n    let g = _ExclusiveGroup\n    _groups.push((name, g))\n    g\n\n  be _test_started(id: USize) =>\n    \"\"\"\n    A test has started running, update status info.\n    The id parameter is the test identifier handed out when we created the test\n    helper.\n    \"\"\"\n    _started = _started + 1\n\n    try\n      if not _no_prog then\n        _env.out.print(\n          _started.string() + \" test\" + _plural(_started)\n            + \" started, \" + _finished.string() + \" complete: \"\n            + _records(id)?.name + \" started\")\n      end\n    end\n\n  be _test_complete(id: USize, pass: Bool, log: Array[String] val) =>\n    \"\"\"\n    A test has completed, restore its result and update our status info.\n    The id parameter is the test identifier handed out when we created the test\n    helper.\n    \"\"\"\n    _finished = _finished + 1\n\n    try\n      _records(id)?._result(pass, log)\n\n      if not _no_prog then\n        _env.out.print(\n          _started.string() + \" test\" + _plural(_started)\n            + \" started, \" + _finished.string() + \" complete: \"\n            + _records(id)?.name + \" complete\")\n      end\n    end\n\n    if _all_started and (_finished == _records.size()) then\n      // All tests have completed\n      _print_report()\n    end\n\n  be _all_tests_applied() =>\n    \"\"\"\n    All our tests have been handed to apply(), setup for finishing\n    \"\"\"\n    if _do_nothing then\n      return\n    end\n\n    if not _any_found then\n      // No tests left after applying our filters\n      _env.out.print(\"No tests found\")\n      return\n    end\n\n    if _list_only then\n      // No tests to run\n      return\n    end\n\n    _all_started = true\n    if _finished == _records.size() then\n      // All tests have completed\n      _print_report()\n    end\n\n  fun ref _process_opts() =>\n    \"\"\"\n    Process our command line options.\n    All command line arguments given must be recognised and make sense.\n    State for specified options is stored in object fields.\n    We don't use the options package because we aren't already dependencies.\n    \"\"\"\n    var exe_name = \"\"\n\n    for arg in _env.args.values() do\n      if exe_name == \"\" then\n        exe_name = arg\n        continue\n      end\n\n      if arg == \"--sequential\" then\n        _sequential = true\n      elseif arg == \"--verbose\" then\n        _verbose = true\n      elseif arg == \"--noprog\" then\n        _no_prog = true\n      elseif arg == \"--list\" then\n        _list_only = true\n      elseif arg.compare_sub(\"--exclude=\", 10) is Equal then\n        _exclude = arg.substring(10)\n      elseif arg.compare_sub(\"--label=\", 8) is Equal then\n        _label = arg.substring(8)\n      elseif arg.compare_sub(\"--only=\", 7) is Equal then\n        _only = arg.substring(7)\n      else\n        _env.out.print(\"Unrecognised argument \\\"\" + arg + \"\\\"\")\n        _env.out.print(\"\")\n        _env.out.print(\"Usage:\")\n        _env.out.print(\"  \" + exe_name + \" [options]\")\n        _env.out.print(\"\")\n        _env.out.print(\"Options:\")\n        _env.out.print(\"  --exclude=prefix  - Don't run tests whose names \"\n          + \"start with the given prefix.\")\n        _env.out.print(\"  --only=prefix     - Only run tests whose names \"\n          + \"start with the given prefix.\")\n        _env.out.print(\"  --verbose         - Show all test output.\")\n        _env.out.print(\"  --sequential      - Run tests sequentially.\")\n        _env.out.print(\"  --noprog          - Do not print progress messages.\")\n        _env.out.print(\"  --list            - List but do not run tests.\")\n        _env.out.print(\"  --label=label     - Only run tests with given label\")\n        _do_nothing = true\n        return\n      end\n    end\n\n  fun _print_report() =>\n    \"\"\"\n    The tests are all complete, print out the results.\n    \"\"\"\n    var pass_count: USize = 0\n    var fail_count: USize = 0\n\n    // First we print the result summary for each test, in the order that they\n    // were given to us.\n    for rec in _records.values() do\n      if rec._report(_verbose) then\n        pass_count = pass_count + 1\n      else\n        fail_count = fail_count + 1\n      end\n    end\n\n    // Next we print the pass / fail stats.\n    _env.out.print(\"----\")\n    _env.out.print(\"---- \" + _records.size().string() + \" test\"\n      + _plural(_records.size()) + \" ran.\")\n    _env.out.print(_Color.green() + \"---- Passed: \" + pass_count.string()\n      + _Color.reset())\n\n    if fail_count == 0 then\n      // Success, nothing failed.\n      return\n    end\n\n    // Not everything passed.\n    _env.out.print(_Color.red() + \"**** FAILED: \" + fail_count.string()\n      + \" test\" + _plural(fail_count) + \", listed below:\" + _Color.reset())\n\n    // Finally print our list of failed tests.\n    for rec in _records.values() do\n      rec._list_failed()\n    end\n\n    _env.exitcode(-1)\n\n  fun _plural(n: USize): String =>\n    \"\"\"\n    Return a \"s\" or an empty string depending on whether the given number is 1.\n    For use when printing possibly plural words, eg \"test\" or \"tests\".\n    \"\"\"\n    if n == 1 then \"\" else \"s\" end",
            "title": "pony_test.pony"
        },
        {
            "location": "/src/promises/promise/",
            "text": "\"\"\"\n# Promises Package\n\nA `Promise` represents a value that will be available at a later\ntime. `Promise`s can either be fulfilled with a value or rejected. Any\nnumber of function handlers can be added to the `Promise`, to be\ncalled when the `Promise` is fulfilled or rejected. These handlers\nthemselves are also wrapped in `Promise`s so that they can be chained\ntogether in order for the fulfilled value of one `Promise` to be used\nto compute a value which will be used to fulfill the next `Promise` in\nthe chain, or so that if the `Promise` is rejected then the subsequent\nreject functions will also be called. The input and output types of a\nfulfill handler do not have to be the same, so a chain of fulfill\nhandlers can transform the original value into something new.\n\nFulfill and reject handlers can either be specified as classes that\nimplment the `Fulfill` and `Reject` interfaces, or as functions with\nthe same signatures as the `apply` methods in `Fulfill` and `Reject`.\n\nIn the following code, the fulfillment of the `Promise` causes the\nexecution of several fulfillment functions. The output is:\n\n```\nfulfilled + foo\nfulfilled + bar\nfulfilled + baz\n```\n\n```pony\nuse \"promises\"\n\nclass PrintFulfill is Fulfill[String, String]\n  let _env: Env\n  let _msg: String\n  new create(env: Env, msg: String) =>\n    _env = env\n    _msg = msg\n  fun apply(s: String): String =>\n    _env.out.print(\" + \".join([s; _msg]))\n    s\n\nactor Main\n  new create(env: Env) =>\n     let promise = Promise[String]\n     promise.next[String](recover PrintFulfill(env, \"foo\") end)\n     promise.next[String](recover PrintFulfill(env, \"bar\") end)\n     promise.next[String](recover PrintFulfill(env, \"baz\") end)\n     promise(\"fulfilled\")\n```\n\nIn the following code, the fulfill functions are chained together so\nthat the fulfilled value of the first one is used to generate a value\nwhich fulfills the second one, which in turn is used to compute a\nvalue which fulfills the third one, which in turn is used to compute a\nvalue which fulfills the fourth one. The output is the average length\nof the words passed on the command line or `0` if there are no command\nline arguments.\n\n```pony\nuse \"promises\"\n\nprimitive Computation\n  fun tag string_to_strings(s: String): Array[String] val =>\n    recover s.split() end\n  fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val =>\n    recover\n      let len = Array[USize]\n      for s in sa.values() do\n        len.push(s.size())\n      end\n      len\n    end\n  fun tag sizes_to_avg(sza: Array[USize] val): USize =>\n    var acc = USize(0)\n    for sz in sza.values() do\n      acc = acc + sz\n    end\n    acc / sza.size()\n  fun tag output(env: Env, sz: USize): None =>\n    env.out.print(sz.string())\n\nactor Main\n  new create(env: Env) =>\n     let promise = Promise[String]\n     promise.next[Array[String] val](recover Computation~string_to_strings() end)\n            .next[Array[USize] val](recover Computation~strings_to_sizes() end)\n            .next[USize](recover Computation~sizes_to_avg() end)\n            .next[None](recover Computation~output(env) end)\n     promise(\" \".join(env.args.slice(1)))\n```\n\"\"\"\nuse \"time\"\n\nactor Promise[A: Any #share]\n  \"\"\"\n  A promise to eventually produce a result of type A. This promise can either\n  be fulfilled or rejected.\n\n  Any number of promises can be chained after this one.\n  \"\"\"\n  var _value: (_Pending | _Reject | A) = _Pending\n  embed _list: Array[_IThen[A]] = _list.create()\n\n  be apply(value: A) =>\n    \"\"\"\n    Fulfill the promise.\n    \"\"\"\n    if _value isnt _Pending then\n      return\n    end\n\n    _value = value\n\n    for f in _list.values() do\n      f(value)\n    end\n\n    _list.clear()\n\n  be reject() =>\n    \"\"\"\n    Reject the promise.\n    \"\"\"\n    if _value isnt _Pending then\n      return\n    end\n\n    _value = _Reject\n\n    for f in _list.values() do\n      f.reject()\n    end\n\n    _list.clear()\n\n  fun tag next[B: Any #share](\n    fulfill: Fulfill[A, B],\n    rejected: Reject[B] = RejectAlways[B])\n    : Promise[B]\n  =>\n    \"\"\"\n    Chain a promise after this one.\n\n    When this promise is fulfilled, the result of type A is passed to the\n    fulfill function, generating in an intermediate result of type B. This\n    is then used to fulfill the next promise in the chain.\n\n    If there is no fulfill function, or if the fulfill function raises an\n    error, then the next promise in the chain will be rejected.\n\n    If this promise is rejected, this step's reject function is called with no\n    input, generating an intermediate result of type B which is used to\n    fulfill the next promise in the chain.\n\n    If there is no reject function, of if the reject function raises an error,\n    then the next promise in the chain will be rejected.\n    \"\"\"\n    let attach = _Then[A, B](consume fulfill, consume rejected)\n    let promise = attach.promise()\n    _attach(consume attach)\n    promise\n\n  fun tag add[B: Any #share = A](p: Promise[B]): Promise[(A, B)] =>\n    \"\"\"\n    Add two promises into one promise that returns the result of both when\n    they are fulfilled. If either of the promises is rejected then the new\n    promise is also rejected.\n    \"\"\"\n    let p' = Promise[(A, B)]\n\n    let c =\n      object\n        var _a: (A | _None) = _None\n        var _b: (B | _None) = _None\n\n        be fulfill_a(a: A) =>\n          match _b\n          | let b: B => p'((a, b))\n          else _a = a\n          end\n\n        be fulfill_b(b: B) =>\n          match _a\n          | let a: A => p'((a, b))\n          else _b = b\n          end\n      end\n\n    next[None](\n      {(a) => c.fulfill_a(a) },\n      {() => p'.reject() })\n\n    p.next[None](\n      {(b) => c.fulfill_b(b) },\n      {() => p'.reject() })\n\n    p'\n\n  fun tag join(ps: Iterator[Promise[A]]): Promise[Array[A] val] =>\n    \"\"\"\n    Create a promise that is fulfilled when the receiver and all promises in\n    the given iterator are fulfilled. If the receiver or any promise in the\n    sequence is rejected then the new promise is also rejected.\n    \"\"\"\n    Promises[A].join(\n      [this]\n        .> concat(ps)\n        .values())\n\n  fun tag select(p: Promise[A]): Promise[(A, Promise[A])] =>\n    \"\"\"\n    Return a promise that is fulfilled when either promise is fulfilled,\n    resulting in a tuple of its value and the other promise.\n    \"\"\"\n    let p' = Promise[(A, Promise[A])]\n\n    let s =\n      object tag\n        var _complete: Bool = false\n        let _p: Promise[(A, Promise[A])] = p'\n\n        be apply(a: A, p: Promise[A]) =>\n          if not _complete then\n            _p((a, p))\n            _complete = true\n          end\n      end\n\n    next[None]({(a) => s(a, p) })\n    p.next[None]({(a)(p = this) => s(a, p) })\n\n    p'\n\n  fun tag timeout(expiration: U64) =>\n    \"\"\"\n    Reject the promise after the given expiration in nanoseconds.\n    \"\"\"\n    Timers.apply(Timer(\n      object iso is TimerNotify\n        let _p: Promise[A] = this\n        fun ref apply(timer: Timer, count: U64): Bool =>\n          _p.reject()\n          false\n      end,\n      expiration))\n\n  be _attach(attach: _IThen[A] iso) =>\n    \"\"\"\n    Attaches a step asynchronously. If this promise has already been fulfilled\n    or rejected, immediately fulfill or reject the incoming step. Otherwise,\n    keep it in a list.\n    \"\"\"\n    if _value is _Pending then\n      _list.push(consume attach)\n    elseif _value is _Reject then\n      attach.reject()\n    else\n      try attach(_value as A) end\n    end\n\nprimitive Promises[A: Any #share]\n  fun join(ps: Iterator[Promise[A]]): Promise[Array[A] val] =>\n    \"\"\"\n    Create a promise that is fulfilled when all promises in the given sequence\n    are fulfilled. If any promise in the sequence is rejected then the new\n    promise is also rejected. The order that values appear in the final array\n    is based on when each promise is fulfilled and not the order that they are\n    given.\n    \"\"\"\n    let p' = Promise[Array[A] val]\n    let ps' = Array[Promise[A]] .> concat(consume ps)\n\n    if ps'.size() == 0 then\n      p'(recover Array[A] end)\n      return p'\n    end\n\n    let j = _Join[A](p', ps'.size())\n    for p in ps'.values() do\n      p.next[None]({(a)(j) => j(a)}, {() => p'.reject()})\n    end\n\n    p'\n\nactor _Join[A: Any #share]\n  embed _xs: Array[A]\n  let _space: USize\n  let _p: Promise[Array[A] val]\n\n  new create(p: Promise[Array[A] val], space: USize) =>\n    (_xs, _space, _p) = (Array[A](space), space, p)\n\n  be apply(a: A) =>\n    _xs.push(a)\n    if _xs.size() == _space then\n      let len = _xs.size()\n      let xs = recover Array[A](len) end\n      for x in _xs.values() do\n        xs.push(x)\n      end\n      _p(consume xs)\n    end\n\nprimitive _None",
            "title": "promise.pony"
        },
        {
            "location": "/src/promises/fulfill/",
            "text": "primitive _Pending\nprimitive _Reject\n\ninterface iso Fulfill[A: Any #share, B: Any #share]\n  \"\"\"\n  A function from A to B that is called when a promise is fulfilled.\n  \"\"\"\n  fun ref apply(value: A): B ?\n\ninterface iso Reject[A: Any #share]\n  \"\"\"\n  A function on A that is called when a promise is rejected.\n  \"\"\"\n  fun ref apply(): A ?\n\nclass iso FulfillIdentity[A: Any #share]\n  \"\"\"\n  An identity function for fulfilling promises.\n  \"\"\"\n  fun ref apply(value: A): A =>\n    consume value\n\nclass iso RejectAlways[A: Any #share]\n  \"\"\"\n  A reject that always raises an error.\n  \"\"\"\n  fun ref apply(): A ? =>\n    error",
            "title": "fulfill.pony"
        },
        {
            "location": "/src/signals/signal_notify/",
            "text": "interface SignalNotify\n  \"\"\"\n  Notifications for a signal.\n  \"\"\"\n  fun ref apply(count: U32): Bool =>\n    \"\"\"\n    Called with the the number of times the signal has fired since this was\n    last called. Return false to stop listening for the signal.\n    \"\"\"\n    true\n\n  fun ref dispose() =>\n    \"\"\"\n    Called if the signal is disposed. This is also called if the notifier\n    returns false.\n    \"\"\"\n    None\n\nprimitive SignalRaise\n  \"\"\"\n  Raise a signal.\n  \"\"\"\n  fun apply(sig: U32) =>\n    ifdef osx then\n      // On Darwin, @raise delivers the signal to the current thread, not the\n      // process, but kqueue EVFILT_SIGNAL will only see signals delivered to\n      // the process. @kill delivers the signal to a specific process.\n      @kill[I32](@getpid[I32](), sig)\n    else\n      @raise[I32](sig)\n    end",
            "title": "signal_notify.pony"
        },
        {
            "location": "/src/signals/signal_handler/",
            "text": "use @pony_asio_event_create[AsioEventID](\n  owner: AsioEventNotify,\n  fd: U32,\n  flags: U32,\n  nsec: U64,\n  noisy: Bool)\nuse @pony_asio_event_unsubscribe[None](event: AsioEventID)\nuse @pony_asio_event_destroy[None](event: AsioEventID)\n\nactor SignalHandler\n  \"\"\"\n  Listen for a specific signal.\n  If the wait parameter is true, the program will not terminate until the SignalHandler's dispose method is called, or if the SignalNotify returns false, after handling the signal as this also disposes the SignalHandler and unsubscribes it.\n\n  \"\"\"\n  let _notify: SignalNotify\n  let _sig: U32\n  var _event: AsioEventID\n\n  new create(notify: SignalNotify iso, sig: U32, wait: Bool = false) =>\n    \"\"\"\n    Create a signal handler.\n    \"\"\"\n    _notify = consume notify\n    _sig = sig\n    _event =\n      @pony_asio_event_create(this, 0, AsioEvent.signal(), sig.u64(), wait)\n\n  be raise() =>\n    \"\"\"\n    Raise the signal.\n    \"\"\"\n    SignalRaise(_sig)\n\n  be dispose() =>\n    \"\"\"\n    Dispose of the signal handler.\n    \"\"\"\n    _dispose()\n\n  be _event_notify(event: AsioEventID, flags: U32, arg: U32) =>\n    \"\"\"\n    Called when the signal is received, or when the AsioEventID can be\n    destroyed.\n    \"\"\"\n    if AsioEvent.disposable(flags) then\n      @pony_asio_event_destroy(event)\n    elseif event is _event then\n      if not _notify(arg) then\n        _dispose()\n      end\n    end\n\n  fun ref _dispose() =>\n    \"\"\"\n    Dispose of the AsioEventID.\n    \"\"\"\n    if not _event.is_null() then\n      @pony_asio_event_unsubscribe(_event)\n      _event = AsioEvent.none()\n      _notify.dispose()\n    end",
            "title": "signal_handler.pony"
        },
        {
            "location": "/src/signals/sig/",
            "text": "\"\"\"\n# Signals package\n\nThe Signals package provides support for handling Unix style signals.\nFor each signal that you want to handle, you need to create a `SignalHandler`\nand a corresponding `SignalNotify` object. Each SignalHandler runs as it own\nactor and upon receiving the signal will call its corresponding\n`SignalNotify`'s apply method.\n\n## Example program\n\nThe following program will listen for the TERM signal and output a message to\nstandard out if it is received.\n\n```pony\nuse \"signals\"\n\nactor Main\n  new create(env: Env) =>\n    // Create a TERM handler\n    let signal = SignalHandler(TermHandler(env), Sig.term())\n    // Raise TERM signal\n    signal.raise()\n\nclass TermHandler is SignalNotify\n  let _env: Env\n\n  new iso create(env: Env) =>\n    _env = env\n\n  fun ref apply(count: U32): Bool =>\n    _env.out.print(\"TERM signal received\")\n    true\n```\n\n## Signal portability\n\nThe `Sig` primitive provides support for portable signal handling across Linux,\nFreeBSD and OSX. Signals are not supported on Windows and attempting to use\nthem will cause a compilation error.\n\n## Shutting down handlers\n\nUnlike a `TCPConnection` and other forms of input receiving, creating a\n`SignalHandler` will not keep your program running. As such, you are not\nrequired to call `dispose` on your signal handlers in order to shutdown your\nprogram.\n\n\"\"\"\n\nprimitive Sig\n  \"\"\"\n  Define the portable signal numbers. Other signals can be used, but they are\n  not guaranteed to be portable.\n  \"\"\"\n  fun hup(): U32 => 1\n  fun int(): U32 => 2\n  fun quit(): U32 => 3\n\n  fun ill(): U32 =>\n    ifdef linux or bsd or osx then 4\n    else compile_error \"no SIGINT\"\n    end\n\n  fun trap(): U32 =>\n    ifdef linux or bsd or osx then 5\n    else compile_error \"no SIGTRAP\"\n    end\n\n  fun abrt(): U32 => 6\n\n  fun emt(): U32 =>\n    ifdef bsd or osx then 7\n    else compile_error \"no SIGEMT\"\n    end\n\n  fun fpe(): U32 =>\n    ifdef linux or bsd or osx then 8\n    else compile_error \"no SIGFPE\"\n    end\n\n  fun kill(): U32 => 9\n\n  fun bus(): U32 =>\n    ifdef bsd or osx then 10\n    elseif linux then 7\n    else compile_error \"no SIGBUS\"\n    end\n\n  fun segv(): U32 =>\n    ifdef linux or bsd or osx then 11\n    else compile_error \"no SIGSEGV\"\n    end\n\n  fun sys(): U32 =>\n    ifdef bsd or osx then 12\n    elseif linux then 31\n    else compile_error \"no SIGSYS\"\n    end\n\n  fun pipe(): U32 =>\n    ifdef linux or bsd or osx then 13\n    else compile_error \"no SIGPIPE\"\n    end\n\n  fun alrm(): U32 => 14\n  fun term(): U32 => 15\n\n  fun urg(): U32 =>\n    ifdef bsd or osx then 16\n    elseif linux then 23\n    else compile_error \"no SIGURG\"\n    end\n\n  fun stkflt(): U32 =>\n    ifdef linux then 16\n    else compile_error \"no SIGSTKFLT\"\n    end\n\n  fun stop(): U32 =>\n    ifdef bsd or osx then 17\n    elseif linux then 19\n    else compile_error \"no SIGSTOP\"\n    end\n\n  fun tstp(): U32 =>\n    ifdef bsd or osx then 18\n    elseif linux then 20\n    else compile_error \"no SIGTSTP\"\n    end\n\n  fun cont(): U32 =>\n    ifdef bsd or osx then 19\n    elseif linux then 18\n    else compile_error \"no SIGCONT\"\n    end\n\n  fun chld(): U32 =>\n    ifdef bsd or osx then 20\n    elseif linux then 17\n    else compile_error \"no SIGCHLD\"\n    end\n\n  fun ttin(): U32 =>\n    ifdef linux or bsd or osx then 21\n    else compile_error \"no SIGTTIN\"\n    end\n\n  fun ttou(): U32 =>\n    ifdef linux or bsd or osx then 22\n    else compile_error \"no SIGTTOU\"\n    end\n\n  fun io(): U32 =>\n    ifdef bsd or osx then 23\n    elseif linux then 29\n    else compile_error \"no SIGIO\"\n    end\n\n  fun xcpu(): U32 =>\n    ifdef linux or bsd or osx then 24\n    else compile_error \"no SIGXCPU\"\n    end\n\n  fun xfsz(): U32 =>\n    ifdef linux or bsd or osx then 25\n    else compile_error \"no SIGXFSZ\"\n    end\n\n  fun vtalrm(): U32 =>\n    ifdef linux or bsd or osx then 26\n    else compile_error \"no SIGVTALRM\"\n    end\n\n  fun prof(): U32 =>\n    ifdef linux or bsd or osx then 27\n    else compile_error \"no SIGPROF\"\n    end\n\n  fun winch(): U32 =>\n    ifdef linux or bsd or osx then 28\n    else compile_error \"no SIGWINCH\"\n    end\n\n  fun info(): U32 =>\n    ifdef bsd or osx then 29\n    else compile_error \"no SIGINFO\"\n    end\n\n  fun pwr(): U32 =>\n    ifdef linux then 30\n    else compile_error \"no SIGPWR\"\n    end\n\n  fun usr1(): U32 =>\n    ifdef bsd or osx then 30\n    elseif linux then 10\n    else compile_error \"no SIGUSR1\"\n    end\n\n  fun usr2(): U32 =>\n    ifdef not \"scheduler_scaling_pthreads\" then\n      ifdef bsd or osx then 31\n      elseif linux then 12\n      else compile_error \"no SIGUSR2\"\n      end\n    else\n      ifdef linux or bsd or osx then\n        compile_error \"SIGUSR2 reserved for runtime use\"\n      else\n        compile_error \"no SIGUSR2\"\n      end\n    end\n\n  fun rt(n: U32): U32 ? =>\n    ifdef bsd then\n      if n <= 61 then\n        65 + n.u32()\n      else\n        error\n      end\n    elseif linux then\n      if n <= 32 then\n        32 + n.u32()\n      else\n        error\n      end\n    else\n      compile_error \"no SIGRT\"\n    end",
            "title": "sig.pony"
        },
        {
            "location": "/src/strings/common_prefix/",
            "text": "primitive CommonPrefix\n  \"\"\"\n  Creates a string that is the common prefix of the supplied strings, possibly\n  empty.\n  \"\"\"\n\n  fun apply(data: ReadSeq[Stringable]): String iso^ =>\n    var res = \"\".clone()\n    try\n      let iter = data.values()\n      if iter.has_next() then\n        res = iter.next()?.string()\n        for d in iter do\n          var idx: USize = 0\n          let s = d.string()\n          while (idx < res.size()) and (idx < s.size()) do\n            if res(idx)? != s(idx)? then\n              break\n            end\n            idx = idx + 1\n          end\n          res = res.substring(0, idx.isize())\n        end\n      end\n    end\n    res",
            "title": "common_prefix.pony"
        },
        {
            "location": "/src/term/readline_notify/",
            "text": "use \"promises\"\n\ninterface ReadlineNotify\n  \"\"\"\n  Notifier for readline.\n  \"\"\"\n  fun ref apply(line: String, prompt: Promise[String]) =>\n    \"\"\"\n    Receives finished lines. The next prompt is set by fulfilling the promise.\n    If the promise is rejected, readline will stop handling input.\n    \"\"\"\n    None\n\n  fun ref tab(line: String): Seq[String] box =>\n    \"\"\"\n    Return tab completion possibilities.\n    \"\"\"\n    Array[String]",
            "title": "readline_notify.pony"
        },
        {
            "location": "/src/term/readline/",
            "text": "use \"collections\"\nuse \"files\"\nuse \"promises\"\nuse strings = \"strings\"\n\nclass Readline is ANSINotify\n  \"\"\"\n  Line editing, history, and tab completion.\n  \"\"\"\n  let _notify: ReadlineNotify\n  let _out: OutStream\n  let _path: (FilePath | None)\n  embed _history: Array[String]\n  embed _queue: Array[String] = Array[String]\n  let _maxlen: USize\n\n  var _edit: String iso = recover String end\n  var _cur_prompt: String = \"\"\n  var _cur_line: USize = 0\n  var _cur_pos: ISize = 0\n  var _blocked: Bool = true\n\n  new iso create(\n    notify: ReadlineNotify iso,\n    out: OutStream,\n    path: (FilePath | None) = None,\n    maxlen: USize = 0)\n  =>\n    \"\"\"\n    Create a readline handler to be passed to stdin. It begins blocked. Set an\n    initial prompt on the ANSITerm to begin processing.\n    \"\"\"\n    _notify = consume notify\n    _out = out\n    _path = path\n    _history = Array[String](maxlen)\n    _maxlen = maxlen\n\n    _load_history()\n\n  fun ref apply(term: ANSITerm ref, input: U8) =>\n    \"\"\"\n    Receives input.\n    \"\"\"\n    match input\n    | 0x01 => home() // ctrl-a\n    | 0x02 => left() // ctrl-b\n    | 0x04 =>\n      // ctrl-d\n      if _edit.size() == 0 then\n        _out.write(\"\\n\")\n        term.dispose()\n      else\n        delete()\n      end\n    | 0x05 => end_key() // ctrl-e\n    | 0x06 => right() // ctrl-f\n    | 0x08 => _backspace() // ctrl-h\n    | 0x09 => _tab()\n    | 0x0A => _dispatch(term) // LF\n    | 0x0B =>\n      // ctrl-k, delete to the end of the line.\n      _edit.truncate(_cur_pos.usize())\n    | 0x0C => _clear() // ctrl-l\n    | 0x0D => _dispatch(term) // CR\n    | 0x0E => down() // ctrl-n\n    | 0x10 => up() // ctrl-p\n    | 0x14 => _swap() // ctrl-t\n    | 0x15 =>\n      // ctrl-u, delete the whole line.\n      _edit.clear()\n      home()\n    | 0x17 => _delete_prev_word() // ctrl-w\n    | 0x7F => _backspace() // backspace\n    | if input < 0x20 => None // unknown control character\n    else\n      // Insert.\n      _edit.insert_byte(_cur_pos, input)\n      _cur_pos = _cur_pos + 1\n      _refresh_line()\n    end\n\n  fun ref prompt(term: ANSITerm ref, value: String) =>\n    \"\"\"\n    Set a new prompt, unblock, and handle the pending queue.\n    \"\"\"\n    _cur_prompt = value\n    _blocked = false\n\n    try\n      let line = _queue.shift()?\n      _add_history(line)\n      _out.print(_cur_prompt + line)\n      _handle_line(term, line)\n    else\n      _refresh_line()\n    end\n\n  fun ref closed() =>\n    \"\"\"\n    No more input is available.\n    \"\"\"\n    _save_history()\n\n  fun ref up(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) =>\n    \"\"\"\n    Previous line.\n    \"\"\"\n    try\n      if _cur_line > 0 then\n        _cur_line = _cur_line - 1\n        _edit = _history(_cur_line)?.clone()\n        end_key()\n      end\n    end\n\n  fun ref down(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) =>\n    \"\"\"\n    Next line.\n    \"\"\"\n    try\n      if _cur_line < (_history.size() - 1) then\n        _cur_line = _cur_line + 1\n        _edit = _history(_cur_line)?.clone()\n      else\n        _cur_line = _history.size()\n        _edit.clear()\n      end\n\n      end_key()\n    end\n\n  fun ref left(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) =>\n    \"\"\"\n    Move left.\n    \"\"\"\n    if _cur_pos == 0 then\n      return\n    end\n\n    try\n      repeat\n        _cur_pos = _cur_pos - 1\n      until\n        (_cur_pos == 0) or\n        ((_edit.at_offset(_cur_pos)? and 0xC0) != 0x80)\n      end\n\n      _refresh_line()\n    end\n\n  fun ref right(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) =>\n    \"\"\"\n    Move right.\n    \"\"\"\n    try\n      if _cur_pos < _edit.size().isize() then\n        _cur_pos = _cur_pos + 1\n      end\n\n      while\n        (_cur_pos < _edit.size().isize()) and\n        ((_edit.at_offset(_cur_pos)? and 0xC0) == 0x80)\n      do\n        _cur_pos = _cur_pos + 1\n      end\n\n      _refresh_line()\n    end\n\n  fun ref home(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) =>\n    \"\"\"\n    Beginning of the line.\n    \"\"\"\n    _cur_pos = 0\n    _refresh_line()\n\n  fun ref end_key(\n    ctrl: Bool = false,\n    alt: Bool = false,\n    shift: Bool = false)\n  =>\n    \"\"\"\n    End of the line.\n    \"\"\"\n    _cur_pos = _edit.size().isize()\n    _refresh_line()\n\n  fun ref _backspace() =>\n    \"\"\"\n    Backward delete.\n    \"\"\"\n    if _cur_pos == 0 then\n      return\n    end\n\n    try\n      var c = U8(0)\n\n      repeat\n        _cur_pos = _cur_pos - 1\n        c = _edit.at_offset(_cur_pos)?\n        _edit.delete(_cur_pos, 1)\n      until\n        (_cur_pos == 0) or ((c and 0xC0) != 0x80)\n      end\n\n      _refresh_line()\n    end\n\n  fun ref delete(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) =>\n    \"\"\"\n    Forward delete.\n    \"\"\"\n    try\n      if _cur_pos < _edit.size().isize() then\n        _edit.delete(_cur_pos, 1)\n      end\n\n      while\n        (_cur_pos < _edit.size().isize()) and\n        ((_edit.at_offset(_cur_pos)? and 0xC0) == 0x80)\n      do\n        _edit.delete(_cur_pos, 1)\n      end\n\n      _refresh_line()\n    end\n\n  fun ref _clear() =>\n    \"\"\"\n    Clear the screen.\n    \"\"\"\n    _out.write(ANSI.clear())\n    _refresh_line()\n\n  fun ref _swap() =>\n    \"\"\"\n    Swap the previous character with the current one.\n    \"\"\"\n    try\n      if (_cur_pos > 0) and (_cur_pos < _edit.size().isize()) then\n        _edit(_cur_pos.usize())? =\n          _edit((_cur_pos - 1).usize())? =\n            _edit(_cur_pos.usize())?\n      end\n\n      _refresh_line()\n    end\n\n  fun ref _delete_prev_word() =>\n    \"\"\"\n    Delete the previous word.\n    \"\"\"\n    try\n      let old = _cur_pos\n\n      while (_cur_pos > 0) and (_edit((_cur_pos - 1).usize())? == ' ') do\n        _cur_pos = _cur_pos - 1\n      end\n\n      while (_cur_pos > 0) and (_edit((_cur_pos - 1).usize())? != ' ') do\n        _cur_pos = _cur_pos - 1\n      end\n\n      _edit.delete(_cur_pos, (old - _cur_pos).usize())\n      _refresh_line()\n    end\n\n  fun ref _tab() =>\n    \"\"\"\n    Tab completion.\n\n    TODO: Improve this.\n    \"\"\"\n    let r = _notify.tab(_edit.clone())\n\n    match r.size()\n    | 0 => None\n    | 1 =>\n      try\n        _edit = r(0)?.clone()\n        end_key()\n      end\n    else\n      _out.write(\"\\n\")\n\n      for completion in r.values() do\n        _out.print(completion)\n      end\n\n      _edit = strings.CommonPrefix(r)\n      end_key()\n    end\n\n  fun ref _dispatch(term: ANSITerm) =>\n    \"\"\"\n    Send a finished line to the notifier.\n    \"\"\"\n    if _edit.size() > 0 then\n      let line: String = _edit = recover String end\n\n      if _blocked then\n        _queue.push(line)\n      else\n        _add_history(line)\n        _out.write(\"\\n\")\n        _handle_line(term, line)\n      end\n    end\n\n  fun ref _handle_line(term: ANSITerm, line: String) =>\n    \"\"\"\n    Dispatch a single line.\n    \"\"\"\n    let promise = Promise[String]\n\n    promise.next[Any tag](\n      recover term~prompt() end,\n      recover term~dispose() end)\n\n    _notify(line, promise)\n    _cur_pos = 0\n    _blocked = true\n\n  fun ref _refresh_line() =>\n    \"\"\"\n    Refresh the line on screen.\n    \"\"\"\n    if not _blocked then\n      let len = 40 + _cur_prompt.size() + _edit.size()\n      let out = recover String(len) end\n\n      // Move to the left edge.\n      out.append(\"\\r\")\n\n      // Print the prompt.\n      out.append(_cur_prompt)\n\n      // Print the current line.\n      out.append(_edit.clone())\n\n      // Erase to the right edge.\n      out.append(ANSI.erase())\n\n      // Set the cursor position.\n      var pos = _cur_prompt.codepoints()\n\n      if _cur_pos > 0 then\n        pos = pos + _edit.codepoints(0, _cur_pos)\n      end\n\n      out.append(\"\\r\")\n      out.append(ANSI.right(pos.u32()))\n      _out.write(consume out)\n    end\n\n  fun ref _add_history(line: String) =>\n    \"\"\"\n    Add a line to the history, trimming an earlier line if necessary.\n    \"\"\"\n    try\n      if (_history.size() > 0) and (_history(_history.size() - 1)? == line) then\n        _cur_line = _history.size()\n        return\n      end\n    end\n\n    if (_maxlen > 0) and (_history.size() >= _maxlen) then\n      try\n        _history.shift()?\n      end\n    end\n\n    _history.push(line)\n    _cur_line = _history.size()\n\n  fun ref _load_history() =>\n    \"\"\"\n    Load the history from a file.\n    \"\"\"\n    _history.clear()\n\n    try\n      with file = File.open(_path as FilePath) do\n        for line in file.lines() do\n          _add_history(consume line)\n        end\n      end\n    end\n\n  fun _save_history() =>\n    \"\"\"\n    Write the history back to a file.\n    \"\"\"\n    try\n      with file = File(_path as FilePath) do\n        for line in _history.values() do\n          file.print(line)\n        end\n      end\n    end",
            "title": "readline.pony"
        },
        {
            "location": "/src/term/ansi_term/",
            "text": "use \"time\"\nuse \"signals\"\nuse @ioctl[I32](fx: I32, cmd: ULong, ...) if posix\n\nstruct _TermSize\n  var row: U16 = 0\n  var col: U16 = 0\n  var xpixel: U16 = 0\n  var ypixel: U16 = 0\n\nprimitive _EscapeNone\nprimitive _EscapeStart\nprimitive _EscapeSS3\nprimitive _EscapeCSI\nprimitive _EscapeMod\n\ntype _EscapeState is\n  ( _EscapeNone\n  | _EscapeStart\n  | _EscapeSS3\n  | _EscapeCSI\n  | _EscapeMod\n  )\n\nclass _TermResizeNotify is SignalNotify\n  let _term: ANSITerm tag\n\n  new create(term: ANSITerm tag) =>\n    _term = term\n\n  fun apply(times: U32): Bool =>\n    _term.size()\n    true\n\nprimitive _TIOCGWINSZ\n  fun apply(): ULong =>\n    ifdef linux then\n      21523\n    elseif osx or bsd then\n      1074295912\n    else\n      0\n    end\n\nactor ANSITerm\n  \"\"\"\n  Handles ANSI escape codes from stdin.\n  \"\"\"\n  let _timers: Timers\n  var _timer: (Timer tag | None) = None\n  let _notify: ANSINotify\n  let _source: DisposableActor\n  var _escape: _EscapeState = _EscapeNone\n  var _esc_num: U8 = 0\n  var _esc_mod: U8 = 0\n  embed _esc_buf: Array[U8] = Array[U8]\n  var _closed: Bool = false\n\n  new create(\n    notify: ANSINotify iso,\n    source: DisposableActor,\n    timers: Timers = Timers)\n  =>\n    \"\"\"\n    Create a new ANSI term.\n    \"\"\"\n    _timers = timers\n    _notify = consume notify\n    _source = source\n\n    ifdef not windows then\n      SignalHandler(recover _TermResizeNotify(this) end, Sig.winch())\n    end\n\n    _size()\n\n  be apply(data: Array[U8] iso) =>\n    \"\"\"\n    Receives input from stdin.\n    \"\"\"\n    if _closed then\n      return\n    end\n\n    for c in (consume data).values() do\n      match _escape\n      | _EscapeNone =>\n        if c == 0x1B then\n          _escape = _EscapeStart\n          _esc_buf.push(0x1B)\n        else\n          _notify(this, c)\n        end\n      | _EscapeStart =>\n        match c\n        | 'b' =>\n          // alt-left\n          _esc_mod = 3\n          _left()\n        | 'f' =>\n          // alt-right\n          _esc_mod = 3\n          _right()\n        | 'O' =>\n          _escape = _EscapeSS3\n          _esc_buf.push(c)\n        | '[' =>\n          _escape = _EscapeCSI\n          _esc_buf.push(c)\n        else\n          _esc_flush()\n        end\n      | _EscapeSS3 =>\n        match c\n        | 'A' => _up()\n        | 'B' => _down()\n        | 'C' => _right()\n        | 'D' => _left()\n        | 'H' => _home()\n        | 'F' => _end()\n        | 'P' => _fn_key(1)\n        | 'Q' => _fn_key(2)\n        | 'R' => _fn_key(3)\n        | 'S' => _fn_key(4)\n        else\n          _esc_flush()\n        end\n      | _EscapeCSI =>\n        match c\n        | 'A' => _up()\n        | 'B' => _down()\n        | 'C' => _right()\n        | 'D' => _left()\n        | 'H' => _home()\n        | 'F' => _end()\n        | '~' => _keypad()\n        | ';' =>\n          _escape = _EscapeMod\n        | if (c >= '0') and (c <= '9') =>\n          // Escape number.\n          _esc_num = (_esc_num * 10) + (c - '0')\n          _esc_buf.push(c)\n        else\n          _esc_flush()\n        end\n      | _EscapeMod =>\n        match c\n        | 'A' => _up()\n        | 'B' => _down()\n        | 'C' => _right()\n        | 'D' => _left()\n        | 'H' => _home()\n        | 'F' => _end()\n        | '~' => _keypad()\n        | if (c >= '0') and (c <= '9') =>\n          // Escape modifier.\n          _esc_mod = (_esc_mod * 10) + (c - '0')\n          _esc_buf.push(c)\n        else\n          _esc_flush()\n        end\n      end\n    end\n\n    // If we are in the middle of an escape sequence, set a timer for 25 ms.\n    // If it fires, we send the escape sequence as if it was normal data.\n    if _escape isnt _EscapeNone then\n      if _timer isnt None then\n        try _timers.cancel(_timer as Timer tag) end\n      end\n\n      let t = recover\n        object is TimerNotify\n          let term: ANSITerm = this\n\n          fun ref apply(timer: Timer, count: U64): Bool =>\n            term._timeout()\n            false\n        end\n      end\n\n      let timer = Timer(consume t, 25000000)\n      _timer = timer\n      _timers(consume timer)\n    end\n\n  be prompt(value: String) =>\n    \"\"\"\n    Pass a prompt along to the notifier.\n    \"\"\"\n    _notify.prompt(this, value)\n\n  be size() =>\n    _size()\n\n  fun ref _size() =>\n    \"\"\"\n    Pass the window size to the notifier.\n    \"\"\"\n    let ws: _TermSize = _TermSize\n    ifdef posix then\n      @ioctl[I32](0, _TIOCGWINSZ(), ws) // do error handling\n      _notify.size(ws.row, ws.col)\n    end\n\n  be dispose() =>\n    \"\"\"\n    Stop accepting input, inform the notifier we have closed, and dispose of\n    our source.\n    \"\"\"\n    if not _closed then\n      _esc_clear()\n      _notify.closed()\n      _source.dispose()\n      _closed = true\n    end\n\n  be _timeout() =>\n    \"\"\"\n    Our timer since receiving an ESC has expired. Send the buffered data as if\n    it was not an escape sequence.\n    \"\"\"\n    _timer = None\n    _esc_flush()\n\n  fun ref _mod(): (Bool, Bool, Bool) =>\n    \"\"\"\n    Set the modifier bools.\n    \"\"\"\n    let r = match _esc_mod\n    | 2 => (false, false, true)\n    | 3 => (false, true, false)\n    | 4 => (false, true, true)\n    | 5 => (true, false, false)\n    | 6 => (true, false, true)\n    | 7 => (true, true, false)\n    | 8 => (true, true, true)\n    else (false, false, false)\n    end\n\n    _esc_mod = 0\n    r\n\n  fun ref _keypad() =>\n    \"\"\"\n    An extended key.\n    \"\"\"\n    match _esc_num\n    | 1 => _home()\n    | 2 => _insert()\n    | 3 => _delete()\n    | 4 => _end()\n    | 5 => _page_up()\n    | 6 => _page_down()\n    | 11 => _fn_key(1)\n    | 12 => _fn_key(2)\n    | 13 => _fn_key(3)\n    | 14 => _fn_key(4)\n    | 15 => _fn_key(5)\n    | 17 => _fn_key(6)\n    | 18 => _fn_key(7)\n    | 19 => _fn_key(8)\n    | 20 => _fn_key(9)\n    | 21 => _fn_key(10)\n    | 23 => _fn_key(11)\n    | 24 => _fn_key(12)\n    | 25 => _fn_key(13)\n    | 26 => _fn_key(14)\n    | 28 => _fn_key(15)\n    | 29 => _fn_key(16)\n    | 31 => _fn_key(17)\n    | 32 => _fn_key(18)\n    | 33 => _fn_key(19)\n    | 34 => _fn_key(20)\n    end\n\n  fun ref _up() =>\n    \"\"\"\n    Up arrow.\n    \"\"\"\n    (let ctrl, let alt, let shift) = _mod()\n    _notify.up(ctrl, alt, shift)\n    _esc_clear()\n\n  fun ref _down() =>\n    \"\"\"\n    Down arrow.\n    \"\"\"\n    (let ctrl, let alt, let shift) = _mod()\n    _notify.down(ctrl, alt, shift)\n    _esc_clear()\n\n  fun ref _left() =>\n    \"\"\"\n    Left arrow.\n    \"\"\"\n    (let ctrl, let alt, let shift) = _mod()\n    _notify.left(ctrl, alt, shift)\n    _esc_clear()\n\n  fun ref _right() =>\n    \"\"\"\n    Right arrow.\n    \"\"\"\n    (let ctrl, let alt, let shift) = _mod()\n    _notify.right(ctrl, alt, shift)\n    _esc_clear()\n\n  fun ref _delete() =>\n    \"\"\"\n    Delete key.\n    \"\"\"\n    (let ctrl, let alt, let shift) = _mod()\n    _notify.delete(ctrl, alt, shift)\n    _esc_clear()\n\n  fun ref _insert() =>\n    \"\"\"\n    Insert key.\n    \"\"\"\n    (let ctrl, let alt, let shift) = _mod()\n    _notify.insert(ctrl, alt, shift)\n    _esc_clear()\n\n  fun ref _home() =>\n    \"\"\"\n    Home key.\n    \"\"\"\n    (let ctrl, let alt, let shift) = _mod()\n    _notify.home(ctrl, alt, shift)\n    _esc_clear()\n\n  fun ref _end() =>\n    \"\"\"\n    End key.\n    \"\"\"\n    (let ctrl, let alt, let shift) = _mod()\n    _notify.end_key(ctrl, alt, shift)\n    _esc_clear()\n\n  fun ref _page_up() =>\n    \"\"\"\n    Page up key.\n    \"\"\"\n    (let ctrl, let alt, let shift) = _mod()\n    _notify.page_up(ctrl, alt, shift)\n    _esc_clear()\n\n  fun ref _page_down() =>\n    \"\"\"\n    Page down key.\n    \"\"\"\n    (let ctrl, let alt, let shift) = _mod()\n    _notify.page_down(ctrl, alt, shift)\n    _esc_clear()\n\n  fun ref _fn_key(i: U8) =>\n    \"\"\"\n    Function key.\n    \"\"\"\n    (let ctrl, let alt, let shift) = _mod()\n    _notify.fn_key(i, ctrl, alt, shift)\n    _esc_clear()\n\n  fun ref _esc_flush() =>\n    \"\"\"\n    Pass a partial or unrecognised escape sequence to the notifier.\n    \"\"\"\n    for c in _esc_buf.values() do\n      _notify(this, c)\n    end\n\n    _esc_clear()\n\n  fun ref _esc_clear() =>\n    \"\"\"\n    Clear the escape state.\n    \"\"\"\n    if _timer isnt None then\n      try _timers.cancel(_timer as Timer tag) end\n      _timer = None\n    end\n\n    _escape = _EscapeNone\n    _esc_buf.clear()\n    _esc_num = 0\n    _esc_mod = 0",
            "title": "ansi_term.pony"
        },
        {
            "location": "/src/term/ansi_notify/",
            "text": "interface ANSINotify\n  \"\"\"\n  Receive input from an ANSITerm.\n  \"\"\"\n  fun ref apply(term: ANSITerm ref, input: U8) =>\n    None\n\n  fun ref up(ctrl: Bool, alt: Bool, shift: Bool) =>\n    None\n\n  fun ref down(ctrl: Bool, alt: Bool, shift: Bool) =>\n    None\n\n  fun ref left(ctrl: Bool, alt: Bool, shift: Bool) =>\n    None\n\n  fun ref right(ctrl: Bool, alt: Bool, shift: Bool) =>\n    None\n\n  fun ref delete(ctrl: Bool, alt: Bool, shift: Bool) =>\n    None\n\n  fun ref insert(ctrl: Bool, alt: Bool, shift: Bool) =>\n    None\n\n  fun ref home(ctrl: Bool, alt: Bool, shift: Bool) =>\n    None\n\n  fun ref end_key(ctrl: Bool, alt: Bool, shift: Bool) =>\n    None\n\n  fun ref page_up(ctrl: Bool, alt: Bool, shift: Bool) =>\n    None\n\n  fun ref page_down(ctrl: Bool, alt: Bool, shift: Bool) =>\n    None\n\n  fun ref fn_key(i: U8, ctrl: Bool, alt: Bool, shift: Bool) =>\n    None\n\n  fun ref prompt(term: ANSITerm ref, value: String) =>\n    None\n\n  fun ref size(rows: U16, cols: U16) =>\n    None\n\n  fun ref closed() =>\n    None",
            "title": "ansi_notify.pony"
        },
        {
            "location": "/src/term/ansi/",
            "text": "primitive ANSI\n  \"\"\"\n  These strings can be embedded in text when writing to a StdStream to create\n  a text-based UI.\n  \"\"\"\n  fun up(n: U32 = 0): String =>\n    \"\"\"\n    Move the cursor up n lines. 0 is the same as 1.\n    \"\"\"\n    if n <= 1 then\n      \"\\x1B[A\"\n    else\n      \"\\x1B[\" + n.string() + \"A\"\n    end\n\n  fun down(n: U32 = 0): String =>\n    \"\"\"\n    Move the cursor down n lines. 0 is the same as 1.\n    \"\"\"\n    if n <= 1 then\n      \"\\x1B[B\"\n    else\n      \"\\x1B[\" + n.string() + \"B\"\n    end\n\n  fun right(n: U32 = 0): String =>\n    \"\"\"\n    Move the cursor right n columns. 0 is the same as 1.\n    \"\"\"\n    if n <= 1 then\n      \"\\x1B[C\"\n    else\n      \"\\x1B[\" + n.string() + \"C\"\n    end\n\n  fun left(n: U32 = 0): String =>\n    \"\"\"\n    Move the cursor left n columns. 0 is the same as 1.\n    \"\"\"\n    if n <= 1 then\n      \"\\x1B[D\"\n    else\n      \"\\x1B[\" + n.string() + \"D\"\n    end\n\n  fun cursor(x: U32 = 0, y: U32 = 0): String =>\n    \"\"\"\n    Move the cursor to line y, column x. 0 is the same as 1. This indexes from\n    the top left corner of the screen.\n    \"\"\"\n    if (x <= 1) and (y <= 1) then\n      \"\\x1B[H\"\n    else\n      \"\\x1B[\" + y.string() + \";\" + x.string() + \"H\"\n    end\n\n  fun clear(): String =>\n    \"\"\"\n    Clear the screen and move the cursor to the top left corner.\n    \"\"\"\n    \"\\x1B[H\\x1B[2J\"\n\n  fun erase(): String =>\n    \"\"\"\n    Erases everything to the left of the cursor on the line the cursor is on.\n    \"\"\"\n    \"\\x1B[0K\"\n\n  fun reset(): String =>\n    \"\"\"\n    Resets all colours and text styles to the default.\n    \"\"\"\n    \"\\x1B[0m\"\n\n  fun bold(state: Bool = true): String =>\n    \"\"\"\n    Bold text. Does nothing on Windows.\n    \"\"\"\n    if state then \"\\x1B[1m\" else \"\\x1B[22m\" end\n\n  fun underline(state: Bool = true): String =>\n    \"\"\"\n    Underlined text. Does nothing on Windows.\n    \"\"\"\n    if state then \"\\x1B[4m\" else \"\\x1B[24m\" end\n\n  fun blink(state: Bool = true): String =>\n    \"\"\"\n    Blinking text. Does nothing on Windows.\n    \"\"\"\n    if state then \"\\x1B[5m\" else \"\\x1B[25m\" end\n\n  fun reverse(state: Bool = true): String =>\n    \"\"\"\n    Swap foreground and background colour.\n    \"\"\"\n    if state then \"\\x1B[7m\" else \"\\x1B[27m\" end\n\n  fun black(): String =>\n    \"\"\"\n    Black text.\n    \"\"\"\n    \"\\x1B[30m\"\n\n  fun red(): String =>\n    \"\"\"\n    Red text.\n    \"\"\"\n    \"\\x1B[31m\"\n\n  fun green(): String =>\n    \"\"\"\n    Green text.\n    \"\"\"\n    \"\\x1B[32m\"\n\n  fun yellow(): String =>\n    \"\"\"\n    Yellow text.\n    \"\"\"\n    \"\\x1B[33m\"\n\n  fun blue(): String =>\n    \"\"\"\n    Blue text.\n    \"\"\"\n    \"\\x1B[34m\"\n\n  fun magenta(): String =>\n    \"\"\"\n    Magenta text.\n    \"\"\"\n    \"\\x1B[35m\"\n\n  fun cyan(): String =>\n    \"\"\"\n    Cyan text.\n    \"\"\"\n    \"\\x1B[36m\"\n\n  fun grey(): String =>\n    \"\"\"\n    Grey text.\n    \"\"\"\n    \"\\x1B[90m\"\n\n  fun white(): String =>\n    \"\"\"\n    White text.\n    \"\"\"\n    \"\\x1B[97m\"\n\n  fun bright_red(): String =>\n    \"\"\"\n    Bright red text.\n    \"\"\"\n    \"\\x1B[91m\"\n\n  fun bright_green(): String =>\n    \"\"\"\n    Bright green text.\n    \"\"\"\n    \"\\x1B[92m\"\n\n  fun bright_yellow(): String =>\n    \"\"\"\n    Bright yellow text.\n    \"\"\"\n    \"\\x1B[93m\"\n\n  fun bright_blue(): String =>\n    \"\"\"\n    Bright blue text.\n    \"\"\"\n    \"\\x1B[94m\"\n\n  fun bright_magenta(): String =>\n    \"\"\"\n    Bright magenta text.\n    \"\"\"\n    \"\\x1B[95m\"\n\n  fun bright_cyan(): String =>\n    \"\"\"\n    Bright cyan text.\n    \"\"\"\n    \"\\x1B[96m\"\n\n  fun bright_grey(): String =>\n    \"\"\"\n    Bright grey text.\n    \"\"\"\n    \"\\x1B[37m\"\n\n  fun black_bg(): String =>\n    \"\"\"\n    Black background.\n    \"\"\"\n    \"\\x1B[40m\"\n\n  fun red_bg(): String =>\n    \"\"\"\n    Red background.\n    \"\"\"\n    \"\\x1B[41m\"\n\n  fun green_bg(): String =>\n    \"\"\"\n    Green background.\n    \"\"\"\n    \"\\x1B[42m\"\n\n  fun yellow_bg(): String =>\n    \"\"\"\n    Yellow background.\n    \"\"\"\n    \"\\x1B[43m\"\n\n  fun blue_bg(): String =>\n    \"\"\"\n    Blue background.\n    \"\"\"\n    \"\\x1B[44m\"\n\n  fun magenta_bg(): String =>\n    \"\"\"\n    Magenta background.\n    \"\"\"\n    \"\\x1B[45m\"\n\n  fun cyan_bg(): String =>\n    \"\"\"\n    Cyan background.\n    \"\"\"\n    \"\\x1B[46m\"\n\n  fun grey_bg(): String =>\n    \"\"\"\n    Grey background.\n    \"\"\"\n    \"\\x1B[100m\"\n\n  fun white_bg(): String =>\n    \"\"\"\n    White background.\n    \"\"\"\n    \"\\x1B[107m\"\n\n  fun bright_red_bg(): String =>\n    \"\"\"\n    Bright red background.\n    \"\"\"\n    \"\\x1B[101m\"\n\n  fun bright_green_bg(): String =>\n    \"\"\"\n    Bright green background.\n    \"\"\"\n    \"\\x1B[102m\"\n\n  fun bright_yellow_bg(): String =>\n    \"\"\"\n    Bright yellow background.\n    \"\"\"\n    \"\\x1B[103m\"\n\n  fun bright_blue_bg(): String =>\n    \"\"\"\n    Bright blue background.\n    \"\"\"\n    \"\\x1B[104m\"\n\n  fun bright_magenta_bg(): String =>\n    \"\"\"\n    Bright magenta background.\n    \"\"\"\n    \"\\x1B[105m\"\n\n  fun bright_cyan_bg(): String =>\n    \"\"\"\n    Bright cyan background.\n    \"\"\"\n    \"\\x1B[106m\"\n\n  fun bright_grey_bg(): String =>\n    \"\"\"\n    Bright grey background.\n    \"\"\"\n    \"\\x1B[47m\"",
            "title": "ansi.pony"
        },
        {
            "location": "/src/time/timers/",
            "text": "use \"collections\"\n\nuse @pony_asio_event_create[AsioEventID](\n  owner: AsioEventNotify,\n  fd: U32,\n  flags: U32,\n  nsec: U64,\n  noisy: Bool)\nuse @pony_asio_event_setnsec[U32](event: AsioEventID, nsec: U64)\nuse @pony_asio_event_unsubscribe[None](event: AsioEventID)\nuse @pony_asio_event_destroy[None](event: AsioEventID)\n\nactor Timers\n  \"\"\"\n  A hierarchical set of timing wheels.\n  \"\"\"\n  var _current: U64 = 0\n  let _slop: USize\n  embed _map: MapIs[Timer tag, Timer] = MapIs[Timer tag, Timer]\n  embed _wheel: Array[_TimingWheel] = Array[_TimingWheel](_wheels())\n  embed _pending: List[Timer] = List[Timer]\n  var _event: AsioEventID = AsioEvent.none()\n\n  new create(slop: USize = 20) =>\n    \"\"\"\n    Create a timer handler with the specified number of slop bits. No slop bits\n    means trying for nanosecond resolution. 10 slop bits is approximately\n    microsecond resolution, 20 slop bits is approximately millisecond\n    resolution.\n    \"\"\"\n    _slop = slop\n    _set_time()\n\n    for i in Range(0, _wheels()) do\n      _wheel.push(_TimingWheel(i))\n    end\n\n  be apply(timer: Timer iso) =>\n    \"\"\"\n    Sets a timer. Fire it if need be, schedule it on the right timing wheel,\n    then rearm the timer.\n    \"\"\"\n    let timer': Timer ref = consume timer\n    _map(timer') = timer'\n    timer'._slop(_slop)\n    _fire(timer')\n    _advance()\n\n  be cancel(timer: Timer tag) =>\n    \"\"\"\n    Cancels a timer.\n    \"\"\"\n    try\n      (_, let timer') = _map.remove(timer)?\n      timer'._cancel()\n\n      if (_map.size() == 0) and (not _event.is_null()) then\n        // Unsubscribe an existing event.\n        @pony_asio_event_unsubscribe(_event)\n        _event = AsioEvent.none()\n      end\n    end\n\n  be dispose() =>\n    \"\"\"\n    Dispose of this set of timing wheels.\n    \"\"\"\n    for wheel in _wheel.values() do\n      wheel.clear()\n    end\n    _map.clear()\n\n    if not _event.is_null() then\n      @pony_asio_event_unsubscribe(_event)\n      _event = AsioEvent.none()\n    end\n\n  be _event_notify(event: AsioEventID, flags: U32, arg: U32) =>\n    \"\"\"\n    When the event fires, advance the timing wheels.\n    \"\"\"\n    if AsioEvent.disposable(flags) then\n      @pony_asio_event_destroy(event)\n    elseif event is _event then\n      _advance()\n    end\n\n  fun ref _advance() =>\n    \"\"\"\n    Update the current time, process all the timing wheels, and set the event\n    for the next time we need to advance.\n    \"\"\"\n    let elapsed = _set_time()\n\n    try\n      for i in Range(0, _wheels()) do\n        if not _wheel(i)?.advance(_pending, _current, elapsed) then\n          break\n        end\n      end\n\n      for timer in _pending.values() do\n        _fire(timer)\n      end\n    end\n\n    _pending.clear()\n\n    var nsec = _next()\n\n    if _event.is_null() then\n      if nsec != -1 then\n        // Create a new event.\n        _event =\n          @pony_asio_event_create(this, 0, AsioEvent.timer(), nsec, true)\n      end\n    else\n      if nsec != -1 then\n        // Update an existing event.\n        @pony_asio_event_setnsec(_event, nsec)\n      else\n        // Unsubscribe an existing event.\n        @pony_asio_event_unsubscribe(_event)\n        _event = AsioEvent.none()\n      end\n    end\n\n  fun ref _fire(timer: Timer) =>\n    \"\"\"\n    Fire a timer if necessary, then schedule it on the correct timing wheel\n    based on how long it is until it expires.\n    \"\"\"\n    if not timer._fire(_current) then\n      try\n        _map.remove(timer)?\n      end\n      return\n    end\n\n    try\n      let rem = timer._next() - _current\n      _get_wheel(rem)?.schedule(consume timer)\n    end\n\n  fun _next(): U64 =>\n    \"\"\"\n    Return the next time at which the timing wheels should be advanced. This is\n    adjusted for slop, so it yields nanoseconds. If no events are pending, this\n    returns -1.\n    \"\"\"\n    var next: U64 = -1\n\n    try\n      for i in Range(0, _wheels()) do\n        next = next.min(_wheel(i)?.next(_current))\n      end\n    end\n\n    if next != -1 then\n      next = next << _slop.u64()\n    end\n\n    next\n\n  fun ref _set_time(): U64 =>\n    \"\"\"\n    Set the current time with precision reduced by the slop bits. Return the\n    elapsed time.\n    \"\"\"\n    let previous = _current = Time.nanos() >> _slop.u64()\n    _current - previous\n\n  fun ref _get_wheel(rem: U64): _TimingWheel ? =>\n    \"\"\"\n    Get the hierarchical timing wheel for the given time until expiration.\n    \"\"\"\n    let t = rem.min(_expiration_max())\n    let i = ((t.bitwidth() - t.clz()) - 1).usize() / _bits()\n    _wheel(i)?\n\n  fun tag _expiration_max(): U64 =>\n    \"\"\"\n    Get the maximum time the timing wheels cover. Anything beyond this is\n    scheduled on the last timing wheel.\n    \"\"\"\n    ((1 << (_wheels() * _bits())) - 1).u64()\n\n  fun tag _wheels(): USize => 4\n  fun tag _bits(): USize => 6",
            "title": "timers.pony"
        },
        {
            "location": "/src/time/timer_notify/",
            "text": "interface TimerNotify\n  \"\"\"\n  Notifications for timer.\n  \"\"\"\n  fun ref apply(timer: Timer, count: U64): Bool =>\n    \"\"\"\n    Called with the the number of times the timer has fired since this was last\n    called. Usually, the value of `count` will be 1. If it is not 1, it means\n    that the timer isn't firing on schedule.\n\n    For example, if your timer is set to fire every 10 milliseconds, and\n    `count` is 2, that means it has been between 20-29 milliseconds since the\n    last time your timer fired. Non 1 values for a timer are rare and indicate\n    a system under heavy load.\n\n    Return true to reschedule the timer (if it has an interval), or\n    false to cancel the timer (even if it has an interval).\n    \"\"\"\n    true\n\n  fun ref cancel(timer: Timer) =>\n    \"\"\"\n    Called if the timer is cancelled. This is also called if the notifier\n    returns false from its `apply` method.\n    \"\"\"\n    None",
            "title": "timer_notify.pony"
        },
        {
            "location": "/src/time/timer/",
            "text": "use \"collections\"\n\nclass Timer\n  \"\"\"\n  The `Timer` class represents a timer that fires after an expiration\n  time, and then fires at an interval. When a `Timer` fires, it calls\n  the `apply` method of the `TimerNotify` object that was passed to it\n  when it was created.\n\n  The following example waits 5 seconds and then fires every 2\n  seconds, and when it fires the `TimerNotify` object prints how many\n  times it has been called:\n\n  ```pony\n  use \"time\"\n\n  actor Main\n    new create(env: Env) =>\n      let timers = Timers\n      let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n      timers(consume timer)\n\n  class Notify is TimerNotify\n    let _env: Env\n    var _counter: U32 = 0\n    new iso create(env: Env) =>\n      _env = env\n    fun ref apply(timer: Timer, count: U64): Bool =>\n      _env.out.print(_counter.string())\n      _counter = _counter + 1\n      true\n  ```\n  \"\"\"\n  var _expiration: U64\n  var _interval: U64\n  let _notify: TimerNotify\n  embed _node: ListNode[Timer]\n\n  new iso create(\n    notify: TimerNotify iso,\n    expiration: U64,\n    interval: U64 = 0)\n  =>\n    \"\"\"\n    Create a new timer. The expiration time should be a nanosecond count\n    until the first expiration. The interval should also be in nanoseconds.\n    \"\"\"\n    _expiration = expiration + Time.nanos()\n    _interval = interval\n    _notify = consume notify\n    _node = ListNode[Timer]\n    try _node()? = this end\n\n  new abs(notify: TimerNotify, expiration: (I64, I64), interval: U64 = 0) =>\n    \"\"\"\n    Creates a new timer with an absolute expiration time rather than a relative\n    time. The expiration time is wall-clock adjusted system time.\n    \"\"\"\n    _expiration = _abs_expiration_time(expiration)\n    _interval = interval\n    _notify = notify\n    _node = ListNode[Timer]\n    try _node()? = this end\n\n  fun ref _cancel() =>\n    \"\"\"\n    Remove the timer from any list.\n    \"\"\"\n    _node.remove()\n    _notify.cancel(this)\n\n  fun ref _get_node(): ListNode[Timer] =>\n    \"\"\"\n    Returns the list node pointing to the timer. Used to schedule the timer in\n    a queue.\n    \"\"\"\n    _node\n\n  fun ref _slop(bits: USize) =>\n    \"\"\"\n    Apply slop bits to the expiration time and interval. This reduces the\n    precision by the given number of bits, effectively quantizing time.\n    \"\"\"\n    _expiration = _expiration >> bits.u64()\n\n    if _interval > 0 then\n      _interval = (_interval >> bits.u64()).max(1)\n    end\n\n  fun ref _fire(current: U64): Bool =>\n    \"\"\"\n    A timer is fired if its expiration time is in the past. The notifier is\n    called with a count based on the elapsed time since expiration and the\n    timer interval. The expiration time is set to the next expiration. Returns\n    true if the timer should be rescheduled, false otherwise.\n    \"\"\"\n    let elapsed = current - _expiration\n\n    if elapsed < (1 << 63) then\n      let count = (elapsed / _interval) + 1\n      _expiration = _expiration + (count * _interval)\n\n      if not _notify(this, count) then\n        _notify.cancel(this)\n        return false\n      end\n    end\n\n    (_interval > 0) or ((_expiration - current) < (1 << 63))\n\n  fun _next(): U64 =>\n    \"\"\"\n    Returns the next expiration time.\n    \"\"\"\n    _expiration\n\n  fun tag _abs_expiration_time(wall: (I64, I64)): U64 =>\n    \"\"\"\n    Converts a wall-clock adjusted system time to absolute expiration time\n    \"\"\"\n    let wall_now = Time.now()\n    Time.nanos()\n      + (((wall._1 * 1000000000) + wall._2)\n      - ((wall_now._1 * 1000000000) + wall_now._2)).u64()",
            "title": "timer.pony"
        },
        {
            "location": "/src/time/time/",
            "text": "\"\"\"\n# Time Package\n\nThe Time Package provides classes and methods for timing operations,\ndealing with dates and times, and scheduling tasks.\n\"\"\"\n\nuse \"lib:rt\" if linux\n\nuse @clock_gettime[I32](clock: U32, ts: Pointer[(I64, I64)])\n  if lp64 and (linux or bsd)\n\nuse @clock_gettime[I32](clock: U32, ts: Pointer[(I32, I32)])\n  if ilp32 and (linux or bsd)\n\nuse @mach_absolute_time[U64]() if osx\n\ntype _Clock is (_ClockRealtime | _ClockMonotonic)\n\nprimitive _ClockRealtime\n  fun apply(): U32 =>\n    ifdef linux or bsd then\n      0\n    else\n      compile_error \"no clock_gettime realtime clock\"\n    end\n\nprimitive _ClockMonotonic\n  fun apply(): U32 =>\n    ifdef linux then\n      1\n    elseif bsd then\n      4\n    else\n      compile_error \"no clock_gettime monotonic clock\"\n    end\n\nprimitive Time\n  \"\"\"\n  A collection of ways to fetch the current time.\n  \"\"\"\n  fun now(): (I64 /*sec*/, I64 /*nsec*/) =>\n    \"\"\"\n    The wall-clock adjusted system time with nanoseconds.\n    Return: (seconds, nanoseconds)\n    \"\"\"\n    ifdef osx then\n      var ts: (I64, I64) = (0, 0)\n      @gettimeofday[I32](addressof ts, U64(0))\n      (ts._1, ts._2 * 1000)\n    elseif linux or bsd then\n      _clock_gettime(_ClockRealtime)\n    elseif windows then\n      var ft: (U32, U32) = (0, 0)\n      @GetSystemTimeAsFileTime[None](addressof ft)\n      var qft = ft._1.u64() or (ft._2.u64() << 32)\n      var epoch = qft.i64() - 116444736000000000\n      var sec = epoch / 10000000\n      var nsec = (epoch - (sec * 10000000)) * 100\n      (sec, nsec)\n    else\n      compile_error \"unsupported platform\"\n    end\n\n  fun seconds(): I64 =>\n    \"\"\"\n    The wall-clock adjusted system time.\n    \"\"\"\n    @time[I64](U64(0))\n\n  fun millis(): U64 =>\n    \"\"\"\n    Monotonic unadjusted milliseconds.\n    \"\"\"\n    ifdef osx then\n      @mach_absolute_time() / 1000000\n    elseif linux or bsd then\n      var ts = _clock_gettime(_ClockMonotonic)\n      ((ts._1 * 1000) + (ts._2 / 1000000)).u64()\n    elseif windows then\n      (let qpc, let qpf) = _query_performance_counter()\n      (qpc * 1000) / qpf\n    else\n      compile_error \"unsupported platform\"\n    end\n\n  fun micros(): U64 =>\n    \"\"\"\n    Monotonic unadjusted microseconds.\n    \"\"\"\n    ifdef osx then\n      @mach_absolute_time() / 1000\n    elseif linux or bsd then\n      var ts = _clock_gettime(_ClockMonotonic)\n      ((ts._1 * 1000000) + (ts._2 / 1000)).u64()\n    elseif windows then\n      (let qpc, let qpf) = _query_performance_counter()\n      (qpc * 1000000) / qpf\n    else\n      compile_error \"unsupported platform\"\n    end\n\n  fun nanos(): U64 =>\n    \"\"\"\n    Monotonic unadjusted nanoseconds.\n    \"\"\"\n    ifdef osx then\n      @mach_absolute_time()\n    elseif linux or bsd then\n      var ts = _clock_gettime(_ClockMonotonic)\n      ((ts._1 * 1000000000) + ts._2).u64()\n    elseif windows then\n      (let qpc, let qpf) = _query_performance_counter()\n      (qpc * 1000000000) / qpf\n    else\n      compile_error \"unsupported platform\"\n    end\n\n  fun cycles(): U64 =>\n    \"\"\"\n    Processor cycle count. Don't use this for performance timing, as it does\n    not control for out-of-order execution.\n    \"\"\"\n    @\"llvm.readcyclecounter\"[U64]()\n\n  fun perf_begin(): U64 =>\n    \"\"\"\n    Get a cycle count for beginning a performance testing block. This will\n    will prevent instructions from before this call leaking into the block and\n    instructions after this call being executed earlier.\n    \"\"\"\n    ifdef x86 then\n      @\"internal.x86.cpuid\"[(I32, I32, I32, I32)](I32(0))\n      @\"llvm.x86.rdtsc\"[U64]()\n    else\n      compile_error \"perf_begin only supported on x86\"\n    end\n\n  fun perf_end(): U64 =>\n    \"\"\"\n    Get a cycle count for ending a performance testing block. This will\n    will prevent instructions from after this call leaking into the block and\n    instructions before this call being executed later.\n    \"\"\"\n    ifdef x86 then\n      var aux: I32 = 0\n      var ts = @\"internal.x86.rdtscp\"[U64](addressof aux)\n      @\"internal.x86.cpuid\"[(I32, I32, I32, I32)](I32(0))\n      ts\n    else\n      compile_error \"perf_end only supported on x86\"\n    end\n\n  fun _clock_gettime(clock: _Clock): (I64, I64) =>\n    \"\"\"\n    Return a clock time on linux and bsd.\n    \"\"\"\n    ifdef lp64 and (linux or bsd) then\n      var ts: (I64, I64) = (0, 0)\n      @clock_gettime(clock(), addressof ts)\n      ts\n    elseif ilp32 and (linux or bsd) then\n      var ts: (I32, I32) = (0, 0)\n      @clock_gettime(clock(), addressof ts)\n      (ts._1.i64(), ts._2.i64())\n    else\n      compile_error \"no clock_gettime\"\n    end\n\n  fun _query_performance_counter(): (U64 /* qpc */, U64 /* qpf */) =>\n    \"\"\"\n    Return QPC and QPF.\n    \"\"\"\n    ifdef windows then\n      var pf: (U32, U32) = (0, 0)\n      var pc: (U32, U32) = (0, 0)\n      @QueryPerformanceFrequency[U32](addressof pf)\n      @QueryPerformanceCounter[U32](addressof pc)\n      let qpf = pf._1.u64() or (pf._2.u64() << 32)\n      let qpc = pc._1.u64() or (pc._2.u64() << 32)\n      (qpc, qpf)\n    else\n      compile_error \"no QueryPerformanceCounter\"\n    end",
            "title": "time.pony"
        },
        {
            "location": "/src/time/posix_date/",
            "text": "class PosixDate\n  \"\"\"\n  Represents a proleptic Gregorian date and time, without specifying a\n  time zone. The day of month, month, day of week, and day of year are all\n  indexed from 1, i.e. January is 1, Monday is 1.\n  \"\"\"\n  var nsec: I32 = 0\n  var sec: I32 = 0\n  var min: I32 = 0\n  var hour: I32 = 0\n  var day_of_month: I32 = 1\n  var month: I32 = 1\n  var year: I32 = 1970\n  var day_of_week: I32 = 4\n  var day_of_year: I32 = 1\n\n  new create(seconds: I64 = 0, nanoseconds: I64 = 0) =>\n    \"\"\"\n    Create a date from a POSIX time. Negative arguments will be changed to zero.\n    \"\"\"\n    @ponyint_gmtime[None](this,\n      _negative_to_zero(seconds),\n      _negative_to_zero(nanoseconds))\n\n  fun time(): I64 =>\n    \"\"\"\n    Return a POSIX time. Treats the date as UTC.\n    \"\"\"\n    @ponyint_timegm[I64](this)\n\n  fun ref normal() =>\n    \"\"\"\n    Normalise all the fields of the date. For example, if the hour is 24, it is\n    set to 0 and the day is advanced. This allows fields to be changed naively,\n    eg. adding 1000 to hours to advance the time by 1000 hours, and then\n    normalising the date.\n    \"\"\"\n    @ponyint_gmtime[None](this, time(), nsec)\n\n  fun format(fmt: String): String =>\n    \"\"\"\n    Format the time as for strftime.\n    \"\"\"\n    recover\n      String.from_cstring(@ponyint_formattime[Pointer[U8]](this,\n        fmt.cstring()))\n    end\n\n  fun _negative_to_zero(value: I64): I64 =>\n    if value > 0 then\n      value\n    else\n      0\n    end",
            "title": "posix_date.pony"
        },
        {
            "location": "/src/time/nanos/",
            "text": "primitive Nanos\n  \"\"\"\n  Collection of utility functions for converting various durations of time\n  to nanoseconds, for passing to other functions in the time package.\n  \"\"\"\n  fun from_seconds(t: U64): U64 =>\n    t * 1_000_000_000\n\n  fun from_millis(t: U64): U64 =>\n    t * 1_000_000\n\n  fun from_micros(t: U64): U64 =>\n    t * 1_000\n\n  fun from_seconds_f(t: F64): U64 =>\n    (t * 1_000_000_000).trunc().u64()\n\n  fun from_millis_f(t: F64): U64 =>\n    (t * 1_000_000).trunc().u64()\n\n  fun from_micros_f(t: F64): U64 =>\n    (t * 1_000).trunc().u64()\n\n  fun from_wall_clock(wall: (I64, I64)): U64 =>\n    ((wall._1 * 1000000000) + wall._2).u64()",
            "title": "nanos.pony"
        }
    ]
}